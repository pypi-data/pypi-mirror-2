Metadata-Version: 1.0
Name: zope.app.testing
Version: 3.4.5
Summary: Zope Application Testing Support
Home-page: http://cheeseshop.python.org/pypi/zope.app.testing
Author: Zope Corporation and Contributors
Author-email: zope3-dev@zope.org
License: ZPL 2.1
Description: This package provides testing support for Zope 3 applications. Besides
        providing numerous setup convenience functions, it implements a testing setup
        that allows the user to make calls to the publisher allowing to write
        functional tests.
        
        
        Detailed Dcoumentation
        ======================
        
        
        =================
        FDocTest (How-To)
        =================
        
        Steps to get started:
        
        1. Use a clean/missing Data.fs
        
        2. Create a manager with the name "mgr", password "mgrpw", and grant
        the zope.Manager role.
        
        3. Install tcpwatch.
        
        4. Create a temporary directory to record tcpwatch output.
        
        5. Run tcpwatch using:
        tcpwatch.py -L 8081:8080 -s -r tmpdir
        (the ports are the listening port and forwarded-to port; the
        second need to match the Zope configuration)
        
        6. In a browser, connect to the listening port and do whatever needs
        to be recorded.
        
        7. Shut down tcpwatch.
        
        8. Run the script src/zope/app/testing/dochttp.py:
        python2.4 src/zope/app/testing/dochttp.py tmpdir > somefile.txt
        
        9. Edit the generated text file to add explanations and elide
        uninteresting portions of the output.
        
        10. In a functional test module (usually ftests.py), import
        FunctionalDocFileSuite from zope.app.testing.functional and
        instantiate it, passing the name of the text file containing
        the test.
        
        
        
        
        ========================
        DocTest Functional Tests
        ========================
        
        This file documents and tests doctest-based functional tests and basic
        Zope web-application functionality.
        
        Request/Response Functional Tests
        ---------------------------------
        
        You can create Functional tests as doctests.  Typically, this is done
        by using a script such as src/zope/app/testing/dochttp.py to convert
        tcpwatch recorded output to a doctest, which is then edited to provide
        explanation and to remove uninteresting details.  That is how this
        file was created.
        
        Here we'll test some of the most basic types of access.
        
        First, we'll test accessing a protected page without credentials:
        
        >>> print http(r"""
        ... GET /@@contents.html HTTP/1.1
        ... """)
        HTTP/1.1 401 Unauthorized
        Cache-Control: no-store, no-cache, must-revalidate
        Content-Length: ...
        Content-Type: text/html;charset=utf-8
        Expires: Mon, 26 Jul 1997 05:00:00 GMT
        Pragma: no-cache
        WWW-Authenticate: basic realm="Zope"
        <BLANKLINE>
        <!DOCTYPE html PUBLIC ...
        
        Here we see that we got:
        
        - A 401 response,
        - A WWW-Authenticate header, and
        - An html body with an error message
        - Some technical headers to keep squid happy
        
        Note that we used ellipsis to indicate ininteresting details.
        
        Next, we'll access the same page with credentials:
        
        >>> print http(r"""
        ... GET /@@contents.html HTTP/1.1
        ... Authorization: Basic mgr:mgrpw
        ... """)
        HTTP/1.1 200 OK
        Content-Length: ...
        Content-Type: text/html;charset=utf-8
        <BLANKLINE>
        <!DOCTYPE html PUBLIC ...
        
        Important note: you must use the user named "mgr" with a password
        "mgrpw".
        
        And we get a normal output.
        
        Next we'll try accessing site management. Since we used "/manage",
        we got redirected:
        
        >>> print http(r"""
        ... GET /++etc++site/@@manage HTTP/1.1
        ... Authorization: Basic mgr:mgrpw
        ... Referer: http://localhost:8081/
        ... """)
        HTTP/1.1 303 See Other
        Content-Length: 0
        Content-Type: text/plain;charset=utf-8
        Location: @@contents.html
        <BLANKLINE>
        
        Note that, in this case, we got a 303 response.  A 303 response is the
        prefered response for this sort of redirect with HTTP 1.1.  If we used
        HTTP 1.0, we'd get a 302 response:
        
        >>> print http(r"""
        ... GET /++etc++site/@@manage HTTP/1.0
        ... Authorization: Basic mgr:mgrpw
        ... Referer: http://localhost:8081/
        ... """)
        HTTP/1.0 302 Moved Temporarily
        Content-Length: 0
        Content-Type: text/plain;charset=utf-8
        Location: @@contents.html
        <BLANKLINE>
        
        Lets visit the page we were redirected to:
        
        >>> print http(r"""
        ... GET /++etc++site/@@contents.html HTTP/1.1
        ... Authorization: Basic mgr:mgrpw
        ... Referer: http://localhost:8081/
        ... """)
        HTTP/1.1 200 OK
        Content-Length: ...
        Content-Type: text/html;charset=utf-8
        <BLANKLINE>
        <!DOCTYPE html PUBLIC ...
        
        Finally, lets access the default page for the site:
        
        >>> print http(r"""
        ... GET / HTTP/1.1
        ... Authorization: Basic mgr:mgrpw
        ... """)
        HTTP/1.1 200 OK
        Content-Length: ...
        Content-Type: text/html;charset=utf-8
        <BLANKLINE>
        <!DOCTYPE html PUBLIC ...
        
        Access to the object system
        ---------------------------
        
        You can use the `getRootFolder()` function:
        
        >>> root = getRootFolder()
        >>> root
        <zope.app.folder.folder.Folder object at ...>
        
        You can intermix HTTP requests with regular Python calls.  Note,
        however, that making an `http()` call implied a transaction commit.
        If you want to throw away changes made in Python code, abort the
        transaction before the HTTP request.
        
        >>> print http(r"""
        ... POST /@@contents.html HTTP/1.1
        ... Authorization: Basic mgr:mgrpw
        ... Content-Length: 73
        ... Content-Type: application/x-www-form-urlencoded
        ...
        ... type_name=BrowserAdd__zope.app.folder.folder.Folder&new_value=f1""")
        HTTP/1.1 303 See Other
        Content-Length: ...
        Content-Type: text/html;charset=utf-8
        Location: http://localhost/@@contents.html
        <BLANKLINE>
        <!DOCTYPE html ...
        
        Now we can see that the new folder was added:
        
        >>> list(root.keys())
        [u'f1']
        
        
        
        =======
        CHANGES
        =======
        
        3.4.5 (2010-03-26)
        ------------------
        
        - Use doctest instead of deprecated zope.testing.doctest.
        
        3.4.4 (2008-08-21)
        ------------------
        
        - Repair memory leak fix released in 3.4.3 to be more sane in the presence of
        generations.
        
        3.4.3 (2008-07-25)
        ------------------
        
        - Fix memory leak in all functional tests.
        see: https://bugs.launchpad.net/zope3/+bug/251273
        
        3.4.2 (2008-02-02)
        ------------------
        
        - Fix of 599 error on conflict error in request
        see: http://mail.zope.org/pipermail/zope-dev/2008-January/030844.html
        
        3.4.1 (2007-10-31)
        ------------------
        
        - Fixed deprecation warning for ``ZopeSecurityPolicy``.
        
        3.4.0 (2007-10-27)
        ------------------
        
        - Initial release independent of the main Zope tree.
        
Keywords: zope3 test testing setup functional
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Zope Public License
Classifier: Programming Language :: Python
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Framework :: Zope3
