# ./pyxb/bundles/common/raw/xhtml1.py
# PyXB bindings for NM:5d6f8cadd22252ff307715949ba136120f3c1ac5
# Generated 2011-09-09 14:09:03.437912 by PyXB version 1.1.3
# Namespace http://www.w3.org/1999/xhtml

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import StringIO
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:2e1e3360-db17-11e0-9075-001fbc013adc')

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import pyxb.binding.xml_

Namespace = pyxb.namespace.NamespaceForURI('http://www.w3.org/1999/xhtml', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])
ModuleRecord = Namespace.lookupModuleRecordByUID(_GenerationUID, create_if_missing=True)
ModuleRecord._setModule(sys.modules[__name__])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a Python instance."""
    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=Namespace.fallbackNamespace(), location_base=location_base)
    handler = saxer.getContentHandler()
    saxer.parse(StringIO.StringIO(xml_text))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, _fallback_namespace=default_namespace)


# Atomic SimpleTypeDefinition
class Script (pyxb.binding.datatypes.string):

    """
      script expression
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Script')
    _Documentation = u'\n      script expression\n      '
Script._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'Script', Script)

# Atomic SimpleTypeDefinition
class Number (pyxb.binding.datatypes.nonNegativeInteger):

    """
      one or more digits
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Number')
    _Documentation = u'\n      one or more digits\n      '
Number._CF_pattern = pyxb.binding.facets.CF_pattern()
Number._CF_pattern.addPattern(pattern=u'[0-9]+')
Number._InitializeFacetMap(Number._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'Number', Number)

# Atomic SimpleTypeDefinition
class tabindexNumber (Number):

    """
      tabindex attribute specifies the position of the current element
      in the tabbing order for the current document. This value must be
      a number between 0 and 32767. User agents should ignore leading zeros. 
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'tabindexNumber')
    _Documentation = u'\n      tabindex attribute specifies the position of the current element\n      in the tabbing order for the current document. This value must be\n      a number between 0 and 32767. User agents should ignore leading zeros. \n      '
tabindexNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=tabindexNumber, value=pyxb.binding.datatypes.nonNegativeInteger(0L))
tabindexNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=tabindexNumber, value=pyxb.binding.datatypes.nonNegativeInteger(32767L))
tabindexNumber._InitializeFacetMap(tabindexNumber._CF_minInclusive,
   tabindexNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', u'tabindexNumber', tabindexNumber)

# Atomic SimpleTypeDefinition
class URI (pyxb.binding.datatypes.anyURI):

    """
      a Uniform Resource Identifier, see [RFC2396]
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'URI')
    _Documentation = u'\n      a Uniform Resource Identifier, see [RFC2396]\n      '
URI._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'URI', URI)

# Atomic SimpleTypeDefinition
class StyleSheet (pyxb.binding.datatypes.string):

    """
      style sheet data
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'StyleSheet')
    _Documentation = u'\n      style sheet data\n      '
StyleSheet._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'StyleSheet', StyleSheet)

# Atomic SimpleTypeDefinition
class ContentType (pyxb.binding.datatypes.string):

    """
      media type, as per [RFC2045]
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ContentType')
    _Documentation = u'\n      media type, as per [RFC2045]\n      '
ContentType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ContentType', ContentType)

# Atomic SimpleTypeDefinition
class STD_ANON (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.ltr = STD_ANON._CF_enumeration.addEnumeration(unicode_value=u'ltr', tag=u'ltr')
STD_ANON.rtl = STD_ANON._CF_enumeration.addEnumeration(unicode_value=u'rtl', tag=u'rtl')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)

# Atomic SimpleTypeDefinition
class UriList (pyxb.binding.datatypes.string):

    """
      a space separated list of Uniform Resource Identifiers
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UriList')
    _Documentation = u'\n      a space separated list of Uniform Resource Identifiers\n      '
UriList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'UriList', UriList)

# Atomic SimpleTypeDefinition
class Text (pyxb.binding.datatypes.string):

    """
      used for titles etc.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Text')
    _Documentation = u'\n      used for titles etc.\n      '
Text._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'Text', Text)

# Atomic SimpleTypeDefinition
class LanguageCode (pyxb.binding.datatypes.language):

    """
      a language code, as per [RFC3066]
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'LanguageCode')
    _Documentation = u'\n      a language code, as per [RFC3066]\n      '
LanguageCode._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'LanguageCode', LanguageCode)

# Atomic SimpleTypeDefinition
class Length (pyxb.binding.datatypes.string):

    """
      nn for pixels or nn% for percentage length
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Length')
    _Documentation = u'\n      nn for pixels or nn% for percentage length\n      '
Length._CF_pattern = pyxb.binding.facets.CF_pattern()
Length._CF_pattern.addPattern(pattern=u'[-+]?(\\d+|\\d+(\\.\\d+)?%)')
Length._InitializeFacetMap(Length._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'Length', Length)

# Atomic SimpleTypeDefinition
class STD_ANON_ (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.declare = STD_ANON_._CF_enumeration.addEnumeration(unicode_value=u'declare', tag=u'declare')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)

# Atomic SimpleTypeDefinition
class Character (pyxb.binding.datatypes.string):

    """
      a single character, as per section 2.2 of [XML]
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Character')
    _Documentation = u'\n      a single character, as per section 2.2 of [XML]\n      '
Character._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
Character._InitializeFacetMap(Character._CF_length)
Namespace.addCategoryObject('typeBinding', u'Character', Character)

# Atomic SimpleTypeDefinition
class Charset (pyxb.binding.datatypes.string):

    """
      a character encoding, as per [RFC2045]
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Charset')
    _Documentation = u'\n      a character encoding, as per [RFC2045]\n      '
Charset._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'Charset', Charset)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.NMTOKENS
class LinkTypes (pyxb.binding.basis.STD_list):

    """
      space-separated list of link types
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'LinkTypes')
    _Documentation = u'\n      space-separated list of link types\n      '

    _ItemType = pyxb.binding.datatypes.NMTOKEN
LinkTypes._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'LinkTypes', LinkTypes)

# Atomic SimpleTypeDefinition
class Shape (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Shape')
    _Documentation = None
Shape._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Shape, enum_prefix=None)
Shape.rect = Shape._CF_enumeration.addEnumeration(unicode_value=u'rect', tag=u'rect')
Shape.circle = Shape._CF_enumeration.addEnumeration(unicode_value=u'circle', tag=u'circle')
Shape.poly = Shape._CF_enumeration.addEnumeration(unicode_value=u'poly', tag=u'poly')
Shape.default = Shape._CF_enumeration.addEnumeration(unicode_value=u'default', tag=u'default')
Shape._InitializeFacetMap(Shape._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'Shape', Shape)

# Atomic SimpleTypeDefinition
class Coords (pyxb.binding.datatypes.string):

    """
      comma separated list of lengths
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Coords')
    _Documentation = u'\n      comma separated list of lengths\n      '
Coords._CF_pattern = pyxb.binding.facets.CF_pattern()
Coords._CF_pattern.addPattern(pattern=u'[-+]?(\\d+|\\d+(\\.\\d+)?%)(,\\s*[-+]?(\\d+|\\d+(\\.\\d+)?%))*')
Coords._InitializeFacetMap(Coords._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'Coords', Coords)

# Atomic SimpleTypeDefinition
class STD_ANON_2 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.ltr = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=u'ltr', tag=u'ltr')
STD_ANON_2.rtl = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=u'rtl', tag=u'rtl')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_3 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.ismap = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=u'ismap', tag=u'ismap')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)

# Atomic SimpleTypeDefinition
class ContentTypes (pyxb.binding.datatypes.string):

    """
      comma-separated list of media types, as per [RFC2045]
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ContentTypes')
    _Documentation = u'\n      comma-separated list of media types, as per [RFC2045]\n      '
ContentTypes._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ContentTypes', ContentTypes)

# Atomic SimpleTypeDefinition
class STD_ANON_4 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.get = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=u'get', tag=u'get')
STD_ANON_4.post = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=u'post', tag=u'post')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)

# Atomic SimpleTypeDefinition
class Charsets (pyxb.binding.datatypes.string):

    """
      a space separated list of character encodings, as per [RFC2045]
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Charsets')
    _Documentation = u'\n      a space separated list of character encodings, as per [RFC2045]\n      '
Charsets._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'Charsets', Charsets)

# Atomic SimpleTypeDefinition
class STD_ANON_5 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.disabled = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value=u'disabled', tag=u'disabled')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)

# Atomic SimpleTypeDefinition
class InputType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'InputType')
    _Documentation = None
InputType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=InputType, enum_prefix=None)
InputType.text = InputType._CF_enumeration.addEnumeration(unicode_value=u'text', tag=u'text')
InputType.password = InputType._CF_enumeration.addEnumeration(unicode_value=u'password', tag=u'password')
InputType.checkbox = InputType._CF_enumeration.addEnumeration(unicode_value=u'checkbox', tag=u'checkbox')
InputType.radio = InputType._CF_enumeration.addEnumeration(unicode_value=u'radio', tag=u'radio')
InputType.submit = InputType._CF_enumeration.addEnumeration(unicode_value=u'submit', tag=u'submit')
InputType.reset = InputType._CF_enumeration.addEnumeration(unicode_value=u'reset', tag=u'reset')
InputType.file = InputType._CF_enumeration.addEnumeration(unicode_value=u'file', tag=u'file')
InputType.hidden = InputType._CF_enumeration.addEnumeration(unicode_value=u'hidden', tag=u'hidden')
InputType.image = InputType._CF_enumeration.addEnumeration(unicode_value=u'image', tag=u'image')
InputType.button = InputType._CF_enumeration.addEnumeration(unicode_value=u'button', tag=u'button')
InputType._InitializeFacetMap(InputType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'InputType', InputType)

# Atomic SimpleTypeDefinition
class STD_ANON_6 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.readonly = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=u'readonly', tag=u'readonly')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_7 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.checked = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=u'checked', tag=u'checked')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_8 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.disabled = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=u'disabled', tag=u'disabled')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_9 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.multiple = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=u'multiple', tag=u'multiple')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)

# Atomic SimpleTypeDefinition
class Datetime (pyxb.binding.datatypes.dateTime):

    """
      date and time information. ISO date format
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Datetime')
    _Documentation = u'\n      date and time information. ISO date format\n      '
Datetime._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'Datetime', Datetime)

# Atomic SimpleTypeDefinition
class STD_ANON_10 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.top = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'top', tag=u'top')
STD_ANON_10.middle = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'middle', tag=u'middle')
STD_ANON_10.bottom = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'bottom', tag=u'bottom')
STD_ANON_10.baseline = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=u'baseline', tag=u'baseline')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_11 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.left = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=u'left', tag=u'left')
STD_ANON_11.center = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=u'center', tag=u'center')
STD_ANON_11.right = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=u'right', tag=u'right')
STD_ANON_11.justify = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=u'justify', tag=u'justify')
STD_ANON_11.char = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=u'char', tag=u'char')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)

# Atomic SimpleTypeDefinition
class Scope (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """
      Scope is simpler than headers attribute for common tables
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Scope')
    _Documentation = u'\n      Scope is simpler than headers attribute for common tables\n      '
Scope._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Scope, enum_prefix=None)
Scope.row = Scope._CF_enumeration.addEnumeration(unicode_value=u'row', tag=u'row')
Scope.col = Scope._CF_enumeration.addEnumeration(unicode_value=u'col', tag=u'col')
Scope.rowgroup = Scope._CF_enumeration.addEnumeration(unicode_value=u'rowgroup', tag=u'rowgroup')
Scope.colgroup = Scope._CF_enumeration.addEnumeration(unicode_value=u'colgroup', tag=u'colgroup')
Scope._InitializeFacetMap(Scope._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'Scope', Scope)

# Atomic SimpleTypeDefinition
class MediaDesc (pyxb.binding.datatypes.string):

    """
      single or comma-separated list of media descriptors
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MediaDesc')
    _Documentation = u'\n      single or comma-separated list of media descriptors\n      '
MediaDesc._CF_pattern = pyxb.binding.facets.CF_pattern()
MediaDesc._CF_pattern.addPattern(pattern=u'[^,]+(,\\s*[^,]+)*')
MediaDesc._InitializeFacetMap(MediaDesc._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'MediaDesc', MediaDesc)

# Atomic SimpleTypeDefinition
class STD_ANON_12 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.defer = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=u'defer', tag=u'defer')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_13 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.nohref = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=u'nohref', tag=u'nohref')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)

# Atomic SimpleTypeDefinition
class TFrame (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """
      The border attribute sets the thickness of the frame around the
      table. The default units are screen pixels.

      The frame attribute specifies which parts of the frame around
      the table should be rendered. The values are not the same as
      CALS to avoid a name clash with the valign attribute.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'TFrame')
    _Documentation = u'\n      The border attribute sets the thickness of the frame around the\n      table. The default units are screen pixels.\n\n      The frame attribute specifies which parts of the frame around\n      the table should be rendered. The values are not the same as\n      CALS to avoid a name clash with the valign attribute.\n      '
TFrame._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TFrame, enum_prefix=None)
TFrame.void = TFrame._CF_enumeration.addEnumeration(unicode_value=u'void', tag=u'void')
TFrame.above = TFrame._CF_enumeration.addEnumeration(unicode_value=u'above', tag=u'above')
TFrame.below = TFrame._CF_enumeration.addEnumeration(unicode_value=u'below', tag=u'below')
TFrame.hsides = TFrame._CF_enumeration.addEnumeration(unicode_value=u'hsides', tag=u'hsides')
TFrame.lhs = TFrame._CF_enumeration.addEnumeration(unicode_value=u'lhs', tag=u'lhs')
TFrame.rhs = TFrame._CF_enumeration.addEnumeration(unicode_value=u'rhs', tag=u'rhs')
TFrame.vsides = TFrame._CF_enumeration.addEnumeration(unicode_value=u'vsides', tag=u'vsides')
TFrame.box = TFrame._CF_enumeration.addEnumeration(unicode_value=u'box', tag=u'box')
TFrame.border = TFrame._CF_enumeration.addEnumeration(unicode_value=u'border', tag=u'border')
TFrame._InitializeFacetMap(TFrame._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'TFrame', TFrame)

# Atomic SimpleTypeDefinition
class Pixels (pyxb.binding.datatypes.nonNegativeInteger):

    """
      integer representing length in pixels
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Pixels')
    _Documentation = u'\n      integer representing length in pixels\n      '
Pixels._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'Pixels', Pixels)

# Atomic SimpleTypeDefinition
class TRules (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """
      The rules attribute defines which rules to draw between cells:

      If rules is absent then assume:
          "none" if border is absent or border="0" otherwise "all"
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'TRules')
    _Documentation = u'\n      The rules attribute defines which rules to draw between cells:\n\n      If rules is absent then assume:\n          "none" if border is absent or border="0" otherwise "all"\n      '
TRules._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TRules, enum_prefix=None)
TRules.none = TRules._CF_enumeration.addEnumeration(unicode_value=u'none', tag=u'none')
TRules.groups = TRules._CF_enumeration.addEnumeration(unicode_value=u'groups', tag=u'groups')
TRules.rows = TRules._CF_enumeration.addEnumeration(unicode_value=u'rows', tag=u'rows')
TRules.cols = TRules._CF_enumeration.addEnumeration(unicode_value=u'cols', tag=u'cols')
TRules.all = TRules._CF_enumeration.addEnumeration(unicode_value=u'all', tag=u'all')
TRules._InitializeFacetMap(TRules._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'TRules', TRules)

# Atomic SimpleTypeDefinition
class STD_ANON_14 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.readonly = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=u'readonly', tag=u'readonly')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_15 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.disabled = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value=u'disabled', tag=u'disabled')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_16 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.button = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value=u'button', tag=u'button')
STD_ANON_16.submit = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value=u'submit', tag=u'submit')
STD_ANON_16.reset = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value=u'reset', tag=u'reset')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_17 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_17._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_17, enum_prefix=None)
STD_ANON_17.disabled = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value=u'disabled', tag=u'disabled')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_18 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.disabled = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value=u'disabled', tag=u'disabled')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_19 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_19._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_19, enum_prefix=None)
STD_ANON_19.selected = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value=u'selected', tag=u'selected')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_enumeration)

# Atomic SimpleTypeDefinition
class STD_ANON_20 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_20._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_20, enum_prefix=None)
STD_ANON_20.disabled = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value=u'disabled', tag=u'disabled')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_enumeration)

# Atomic SimpleTypeDefinition
class MultiLength (pyxb.binding.datatypes.string):

    """
      pixel, percentage, or relative
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MultiLength')
    _Documentation = u'\n      pixel, percentage, or relative\n      '
MultiLength._CF_pattern = pyxb.binding.facets.CF_pattern()
MultiLength._CF_pattern.addPattern(pattern=u'[-+]?(\\d+|\\d+(\\.\\d+)?%)|[1-9]?(\\d+)?\\*')
MultiLength._InitializeFacetMap(MultiLength._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'MultiLength', MultiLength)

# Atomic SimpleTypeDefinition
class STD_ANON_21 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _Documentation = None
STD_ANON_21._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_21, enum_prefix=None)
STD_ANON_21.data = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=u'data', tag=u'data')
STD_ANON_21.ref = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=u'ref', tag=u'ref')
STD_ANON_21.object = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=u'object', tag=u'object')
STD_ANON_21._InitializeFacetMap(STD_ANON_21._CF_enumeration)

# Complex type CTD_ANON with content type MIXED
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}address uses Python identifier address
    __address = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'address'), 'address', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmladdress', True)

    
    address = property(__address.value, __address.set, None, u'\n      information on author\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}object uses Python identifier object
    __object = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'object'), 'object', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlobject', True)

    
    object = property(__object.value, __object.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}strong uses Python identifier strong
    __strong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'strong'), 'strong', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlstrong', True)

    
    strong = property(__strong.value, __strong.set, None, u'\n      strong emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}dfn uses Python identifier dfn
    __dfn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dfn'), 'dfn', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmldfn', True)

    
    dfn = property(__dfn.value, __dfn.set, None, u'\n      definitional\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}a uses Python identifier a
    __a = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'a'), 'a', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmla', True)

    
    a = property(__a.value, __a.set, None, u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}code uses Python identifier code
    __code = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'code'), 'code', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlcode', True)

    
    code = property(__code.value, __code.set, None, u'\n      program code\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sub'), 'sub', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlsub', True)

    
    sub = property(__sub.value, __sub.set, None, u'\n      subscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}input uses Python identifier input
    __input = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'input'), 'input', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlinput', True)

    
    input = property(__input.value, __input.set, None, u'\n      form control\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}div uses Python identifier div
    __div = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'div'), 'div', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmldiv', True)

    
    div = property(__div.value, __div.set, None, u'\n      generic language/style container      \n      ')

    
    # Element {http://www.w3.org/1999/xhtml}form uses Python identifier form
    __form = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'form'), 'form', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlform', True)

    
    form = property(__form.value, __form.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}q uses Python identifier q
    __q = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'q'), 'q', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlq', True)

    
    q = property(__q.value, __q.set, None, u'\n      inlined quote\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}select uses Python identifier select
    __select = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'select'), 'select', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlselect', True)

    
    select = property(__select.value, __select.set, None, u'\n      option selector\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}fieldset uses Python identifier fieldset
    __fieldset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), 'fieldset', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlfieldset', True)

    
    fieldset = property(__fieldset.value, __fieldset.set, None, u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}samp uses Python identifier samp
    __samp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'samp'), 'samp', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlsamp', True)

    
    samp = property(__samp.value, __samp.set, None, u'\n      sample\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}kbd uses Python identifier kbd
    __kbd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'kbd'), 'kbd', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlkbd', True)

    
    kbd = property(__kbd.value, __kbd.set, None, u'\n      something user would type\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}textarea uses Python identifier textarea
    __textarea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'textarea'), 'textarea', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmltextarea', True)

    
    textarea = property(__textarea.value, __textarea.set, None, u'\n      multi-line text field\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlb', True)

    
    b = property(__b.value, __b.set, None, u'\n      bold font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ul'), 'ul', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlul', True)

    
    ul = property(__ul.value, __ul.set, None, u'\n      Unordered list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmli', True)

    
    i = property(__i.value, __i.set, None, u'\n      italic font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}hr uses Python identifier hr
    __hr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'hr'), 'hr', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlhr', True)

    
    hr = property(__hr.value, __hr.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}label uses Python identifier label
    __label = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'label'), 'label', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmllabel', True)

    
    label = property(__label.value, __label.set, None, u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      ")

    
    # Element {http://www.w3.org/1999/xhtml}cite uses Python identifier cite
    __cite = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cite'), 'cite', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlcite', True)

    
    cite = property(__cite.value, __cite.set, None, u'\n      citation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ol uses Python identifier ol
    __ol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ol'), 'ol', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlol', True)

    
    ol = property(__ol.value, __ol.set, None, u'\n      Ordered (numbered) list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}var uses Python identifier var
    __var = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'var'), 'var', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlvar', True)

    
    var = property(__var.value, __var.set, None, u'\n      variable\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}small uses Python identifier small
    __small = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'small'), 'small', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlsmall', True)

    
    small = property(__small.value, __small.set, None, u'\n      smaller font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'p'), 'p', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlp', True)

    
    p = property(__p.value, __p.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}button uses Python identifier button
    __button = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'button'), 'button', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlbutton', True)

    
    button = property(__button.value, __button.set, None, u'\n      Content is "Flow" excluding a, form and form controls\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}img uses Python identifier img
    __img = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'img'), 'img', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlimg', True)

    
    img = property(__img.value, __img.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}dl uses Python identifier dl
    __dl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dl'), 'dl', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmldl', True)

    
    dl = property(__dl.value, __dl.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlacronym', True)

    
    acronym = property(__acronym.value, __acronym.set, None, u'\n      acronym\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}big uses Python identifier big
    __big = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'big'), 'big', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlbig', True)

    
    big = property(__big.value, __big.set, None, u'\n      bigger font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h6 uses Python identifier h6
    __h6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h6'), 'h6', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlh6', True)

    
    h6 = property(__h6.value, __h6.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}noscript uses Python identifier noscript
    __noscript = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'noscript'), 'noscript', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlnoscript', True)

    
    noscript = property(__noscript.value, __noscript.set, None, u'\n      alternate content container for non script-based rendering\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'br'), 'br', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlbr', True)

    
    br = property(__br.value, __br.set, None, u'\n      forced line break\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sup'), 'sup', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlsup', True)

    
    sup = property(__sup.value, __sup.set, None, u'\n      superscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}pre uses Python identifier pre
    __pre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pre'), 'pre', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlpre', True)

    
    pre = property(__pre.value, __pre.set, None, u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}tt uses Python identifier tt
    __tt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tt'), 'tt', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmltt', True)

    
    tt = property(__tt.value, __tt.set, None, u'\n      fixed pitch font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}span uses Python identifier span
    __span = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'span'), 'span', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlspan', True)

    
    span = property(__span.value, __span.set, None, u'\n      generic language/style container\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h3 uses Python identifier h3
    __h3 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h3'), 'h3', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlh3', True)

    
    h3 = property(__h3.value, __h3.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}table uses Python identifier table
    __table = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmltable', True)

    
    table = property(__table.value, __table.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bdo'), 'bdo', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'\n      I18N BiDi over-ride\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}blockquote uses Python identifier blockquote
    __blockquote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), 'blockquote', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlblockquote', True)

    
    blockquote = property(__blockquote.value, __blockquote.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h4 uses Python identifier h4
    __h4 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h4'), 'h4', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlh4', True)

    
    h4 = property(__h4.value, __h4.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h2 uses Python identifier h2
    __h2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h2'), 'h2', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlh2', True)

    
    h2 = property(__h2.value, __h2.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h1 uses Python identifier h1
    __h1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h1'), 'h1', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlh1', True)

    
    h1 = property(__h1.value, __h1.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}param uses Python identifier param
    __param = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'param'), 'param', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlparam', True)

    
    param = property(__param.value, __param.set, None, u'\n      param is used to supply a named property value.\n      In XML it would seem natural to follow RDF and support an\n      abbreviated syntax where the param elements are replaced\n      by attribute value pairs on the object start tag.\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}map uses Python identifier map
    __map = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'map'), 'map', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlmap', True)

    
    map = property(__map.value, __map.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h5 uses Python identifier h5
    __h5 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h5'), 'h5', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlh5', True)

    
    h5 = property(__h5.value, __h5.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'em'), 'em', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlem', True)

    
    em = property(__em.value, __em.set, None, u'\n      emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}abbr uses Python identifier abbr
    __abbr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'abbr'), 'abbr', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_org1999xhtmlabbr', True)

    
    abbr = property(__abbr.value, __abbr.set, None, u'\n      abbreviation\n      ')

    
    # Attribute codebase uses Python identifier codebase
    __codebase = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codebase'), 'codebase', '__httpwww_w3_org1999xhtml_CTD_ANON_codebase', URI)
    
    codebase = property(__codebase.value, __codebase.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute data uses Python identifier data
    __data = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'data'), 'data', '__httpwww_w3_org1999xhtml_CTD_ANON_data', URI)
    
    data = property(__data.value, __data.set, None, None)

    
    # Attribute classid uses Python identifier classid
    __classid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'classid'), 'classid', '__httpwww_w3_org1999xhtml_CTD_ANON_classid', URI)
    
    classid = property(__classid.value, __classid.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_w3_org1999xhtml_CTD_ANON_type', ContentType)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute codetype uses Python identifier codetype
    __codetype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codetype'), 'codetype', '__httpwww_w3_org1999xhtml_CTD_ANON_codetype', ContentType)
    
    codetype = property(__codetype.value, __codetype.set, None, None)

    
    # Attribute archive uses Python identifier archive
    __archive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'archive'), 'archive', '__httpwww_w3_org1999xhtml_CTD_ANON_archive', UriList)
    
    archive = property(__archive.value, __archive.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute height uses Python identifier height
    __height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'height'), 'height', '__httpwww_w3_org1999xhtml_CTD_ANON_height', Length)
    
    height = property(__height.value, __height.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__httpwww_w3_org1999xhtml_CTD_ANON_width', Length)
    
    width = property(__width.value, __width.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute declare uses Python identifier declare
    __declare = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'declare'), 'declare', '__httpwww_w3_org1999xhtml_CTD_ANON_declare', STD_ANON_)
    
    declare = property(__declare.value, __declare.set, None, None)

    
    # Attribute usemap uses Python identifier usemap
    __usemap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'usemap'), 'usemap', '__httpwww_w3_org1999xhtml_CTD_ANON_usemap', URI)
    
    usemap = property(__usemap.value, __usemap.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_w3_org1999xhtml_CTD_ANON_name', pyxb.binding.datatypes.NMTOKEN)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute tabindex uses Python identifier tabindex
    __tabindex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabindex'), 'tabindex', '__httpwww_w3_org1999xhtml_CTD_ANON_tabindex', tabindexNumber)
    
    tabindex = property(__tabindex.value, __tabindex.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute standby uses Python identifier standby
    __standby = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'standby'), 'standby', '__httpwww_w3_org1999xhtml_CTD_ANON_standby', Text)
    
    standby = property(__standby.value, __standby.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)


    _ElementMap = {
        __script.name() : __script,
        __address.name() : __address,
        __object.name() : __object,
        __strong.name() : __strong,
        __dfn.name() : __dfn,
        __a.name() : __a,
        __code.name() : __code,
        __sub.name() : __sub,
        __input.name() : __input,
        __div.name() : __div,
        __form.name() : __form,
        __q.name() : __q,
        __select.name() : __select,
        __fieldset.name() : __fieldset,
        __samp.name() : __samp,
        __kbd.name() : __kbd,
        __textarea.name() : __textarea,
        __b.name() : __b,
        __ul.name() : __ul,
        __i.name() : __i,
        __hr.name() : __hr,
        __label.name() : __label,
        __cite.name() : __cite,
        __ol.name() : __ol,
        __var.name() : __var,
        __small.name() : __small,
        __p.name() : __p,
        __button.name() : __button,
        __img.name() : __img,
        __dl.name() : __dl,
        __acronym.name() : __acronym,
        __big.name() : __big,
        __h6.name() : __h6,
        __noscript.name() : __noscript,
        __br.name() : __br,
        __sup.name() : __sup,
        __pre.name() : __pre,
        __tt.name() : __tt,
        __span.name() : __span,
        __h3.name() : __h3,
        __table.name() : __table,
        __ins.name() : __ins,
        __bdo.name() : __bdo,
        __blockquote.name() : __blockquote,
        __h4.name() : __h4,
        __h2.name() : __h2,
        __del.name() : __del,
        __h1.name() : __h1,
        __param.name() : __param,
        __map.name() : __map,
        __h5.name() : __h5,
        __em.name() : __em,
        __abbr.name() : __abbr
    }
    _AttributeMap = {
        __codebase.name() : __codebase,
        __ondblclick.name() : __ondblclick,
        __data.name() : __data,
        __classid.name() : __classid,
        __type.name() : __type,
        __id.name() : __id,
        __codetype.name() : __codetype,
        __archive.name() : __archive,
        __onmouseout.name() : __onmouseout,
        __onmousedown.name() : __onmousedown,
        __onclick.name() : __onclick,
        __height.name() : __height,
        __onkeyup.name() : __onkeyup,
        __width.name() : __width,
        __onkeydown.name() : __onkeydown,
        __declare.name() : __declare,
        __usemap.name() : __usemap,
        __name.name() : __name,
        __title.name() : __title,
        __lang.name() : __lang,
        __tabindex.name() : __tabindex,
        __onkeypress.name() : __onkeypress,
        __onmouseup.name() : __onmouseup,
        __onmouseover.name() : __onmouseover,
        __style.name() : __style,
        __lang_.name() : __lang_,
        __onmousemove.name() : __onmousemove,
        __dir.name() : __dir,
        __standby.name() : __standby,
        __class.name() : __class
    }



# Complex type a_content with content type MIXED
class a_content (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'a.content')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}map uses Python identifier map
    __map = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'map'), 'map', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlmap', True)

    
    map = property(__map.value, __map.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}dfn uses Python identifier dfn
    __dfn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dfn'), 'dfn', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmldfn', True)

    
    dfn = property(__dfn.value, __dfn.set, None, u'\n      definitional\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlacronym', True)

    
    acronym = property(__acronym.value, __acronym.set, None, u'\n      acronym\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}input uses Python identifier input
    __input = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'input'), 'input', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlinput', True)

    
    input = property(__input.value, __input.set, None, u'\n      form control\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}code uses Python identifier code
    __code = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'code'), 'code', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlcode', True)

    
    code = property(__code.value, __code.set, None, u'\n      program code\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sup'), 'sup', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlsup', True)

    
    sup = property(__sup.value, __sup.set, None, u'\n      superscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}select uses Python identifier select
    __select = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'select'), 'select', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlselect', True)

    
    select = property(__select.value, __select.set, None, u'\n      option selector\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}textarea uses Python identifier textarea
    __textarea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'textarea'), 'textarea', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmltextarea', True)

    
    textarea = property(__textarea.value, __textarea.set, None, u'\n      multi-line text field\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}tt uses Python identifier tt
    __tt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tt'), 'tt', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmltt', True)

    
    tt = property(__tt.value, __tt.set, None, u'\n      fixed pitch font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}small uses Python identifier small
    __small = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'small'), 'small', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlsmall', True)

    
    small = property(__small.value, __small.set, None, u'\n      smaller font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}samp uses Python identifier samp
    __samp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'samp'), 'samp', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlsamp', True)

    
    samp = property(__samp.value, __samp.set, None, u'\n      sample\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}var uses Python identifier var
    __var = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'var'), 'var', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlvar', True)

    
    var = property(__var.value, __var.set, None, u'\n      variable\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmli', True)

    
    i = property(__i.value, __i.set, None, u'\n      italic font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}kbd uses Python identifier kbd
    __kbd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'kbd'), 'kbd', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlkbd', True)

    
    kbd = property(__kbd.value, __kbd.set, None, u'\n      something user would type\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlb', True)

    
    b = property(__b.value, __b.set, None, u'\n      bold font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}abbr uses Python identifier abbr
    __abbr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'abbr'), 'abbr', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlabbr', True)

    
    abbr = property(__abbr.value, __abbr.set, None, u'\n      abbreviation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}button uses Python identifier button
    __button = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'button'), 'button', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlbutton', True)

    
    button = property(__button.value, __button.set, None, u'\n      Content is "Flow" excluding a, form and form controls\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}object uses Python identifier object
    __object = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'object'), 'object', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlobject', True)

    
    object = property(__object.value, __object.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}big uses Python identifier big
    __big = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'big'), 'big', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlbig', True)

    
    big = property(__big.value, __big.set, None, u'\n      bigger font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}cite uses Python identifier cite
    __cite = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cite'), 'cite', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlcite', True)

    
    cite = property(__cite.value, __cite.set, None, u'\n      citation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sub'), 'sub', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlsub', True)

    
    sub = property(__sub.value, __sub.set, None, u'\n      subscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}q uses Python identifier q
    __q = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'q'), 'q', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlq', True)

    
    q = property(__q.value, __q.set, None, u'\n      inlined quote\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}img uses Python identifier img
    __img = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'img'), 'img', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlimg', True)

    
    img = property(__img.value, __img.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'br'), 'br', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlbr', True)

    
    br = property(__br.value, __br.set, None, u'\n      forced line break\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}span uses Python identifier span
    __span = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'span'), 'span', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlspan', True)

    
    span = property(__span.value, __span.set, None, u'\n      generic language/style container\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}label uses Python identifier label
    __label = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'label'), 'label', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmllabel', True)

    
    label = property(__label.value, __label.set, None, u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      ")

    
    # Element {http://www.w3.org/1999/xhtml}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'em'), 'em', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlem', True)

    
    em = property(__em.value, __em.set, None, u'\n      emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bdo'), 'bdo', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'\n      I18N BiDi over-ride\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}strong uses Python identifier strong
    __strong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'strong'), 'strong', '__httpwww_w3_org1999xhtml_a_content_httpwww_w3_org1999xhtmlstrong', True)

    
    strong = property(__strong.value, __strong.set, None, u'\n      strong emphasis\n      ')


    _ElementMap = {
        __map.name() : __map,
        __dfn.name() : __dfn,
        __acronym.name() : __acronym,
        __input.name() : __input,
        __code.name() : __code,
        __sup.name() : __sup,
        __select.name() : __select,
        __textarea.name() : __textarea,
        __tt.name() : __tt,
        __small.name() : __small,
        __samp.name() : __samp,
        __var.name() : __var,
        __i.name() : __i,
        __kbd.name() : __kbd,
        __b.name() : __b,
        __abbr.name() : __abbr,
        __button.name() : __button,
        __object.name() : __object,
        __big.name() : __big,
        __cite.name() : __cite,
        __sub.name() : __sub,
        __ins.name() : __ins,
        __q.name() : __q,
        __img.name() : __img,
        __br.name() : __br,
        __del.name() : __del,
        __span.name() : __span,
        __label.name() : __label,
        __em.name() : __em,
        __script.name() : __script,
        __bdo.name() : __bdo,
        __strong.name() : __strong
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'a.content', a_content)


# Complex type CTD_ANON_ with content type MIXED
class CTD_ANON_ (a_content):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is a_content
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}a.content
    
    # Attribute shape uses Python identifier shape
    __shape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shape'), 'shape', '__httpwww_w3_org1999xhtml_CTD_ANON__shape', Shape, unicode_default=u'rect')
    
    shape = property(__shape.value, __shape.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON__class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON__onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON__onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON__httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onfocus uses Python identifier onfocus
    __onfocus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onfocus'), 'onfocus', '__httpwww_w3_org1999xhtml_CTD_ANON__onfocus', Script)
    
    onfocus = property(__onfocus.value, __onfocus.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON__onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onblur uses Python identifier onblur
    __onblur = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onblur'), 'onblur', '__httpwww_w3_org1999xhtml_CTD_ANON__onblur', Script)
    
    onblur = property(__onblur.value, __onblur.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON__onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute accesskey uses Python identifier accesskey
    __accesskey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accesskey'), 'accesskey', '__httpwww_w3_org1999xhtml_CTD_ANON__accesskey', Character)
    
    accesskey = property(__accesskey.value, __accesskey.set, None, None)

    
    # Attribute coords uses Python identifier coords
    __coords = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coords'), 'coords', '__httpwww_w3_org1999xhtml_CTD_ANON__coords', Coords)
    
    coords = property(__coords.value, __coords.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON__title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON__onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON__dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON__id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute charset uses Python identifier charset
    __charset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charset'), 'charset', '__httpwww_w3_org1999xhtml_CTD_ANON__charset', Charset)
    
    charset = property(__charset.value, __charset.set, None, None)

    
    # Attribute tabindex uses Python identifier tabindex
    __tabindex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabindex'), 'tabindex', '__httpwww_w3_org1999xhtml_CTD_ANON__tabindex', tabindexNumber)
    
    tabindex = property(__tabindex.value, __tabindex.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_w3_org1999xhtml_CTD_ANON__type', ContentType)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON__lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON__onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON__ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_w3_org1999xhtml_CTD_ANON__href', URI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON__onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_w3_org1999xhtml_CTD_ANON__name', pyxb.binding.datatypes.NMTOKEN)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute hreflang uses Python identifier hreflang
    __hreflang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hreflang'), 'hreflang', '__httpwww_w3_org1999xhtml_CTD_ANON__hreflang', LanguageCode)
    
    hreflang = property(__hreflang.value, __hreflang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON__style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute rel uses Python identifier rel
    __rel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rel'), 'rel', '__httpwww_w3_org1999xhtml_CTD_ANON__rel', LinkTypes)
    
    rel = property(__rel.value, __rel.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON__onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute rev uses Python identifier rev
    __rev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rev'), 'rev', '__httpwww_w3_org1999xhtml_CTD_ANON__rev', LinkTypes)
    
    rev = property(__rev.value, __rev.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON__onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)


    _ElementMap = a_content._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = a_content._AttributeMap.copy()
    _AttributeMap.update({
        __shape.name() : __shape,
        __class.name() : __class,
        __onkeypress.name() : __onkeypress,
        __onkeyup.name() : __onkeyup,
        __lang_.name() : __lang_,
        __onfocus.name() : __onfocus,
        __onmouseover.name() : __onmouseover,
        __onblur.name() : __onblur,
        __onmouseout.name() : __onmouseout,
        __accesskey.name() : __accesskey,
        __coords.name() : __coords,
        __title.name() : __title,
        __onclick.name() : __onclick,
        __dir.name() : __dir,
        __id.name() : __id,
        __charset.name() : __charset,
        __tabindex.name() : __tabindex,
        __type.name() : __type,
        __lang.name() : __lang,
        __onmousedown.name() : __onmousedown,
        __ondblclick.name() : __ondblclick,
        __href.name() : __href,
        __onkeydown.name() : __onkeydown,
        __name.name() : __name,
        __hreflang.name() : __hreflang,
        __style.name() : __style,
        __rel.name() : __rel,
        __onmouseup.name() : __onmouseup,
        __rev.name() : __rev,
        __onmousemove.name() : __onmousemove
    })



# Complex type Inline with content type MIXED
class Inline (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Inline')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}select uses Python identifier select
    __select = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'select'), 'select', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlselect', True)

    
    select = property(__select.value, __select.set, None, u'\n      option selector\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}span uses Python identifier span
    __span = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'span'), 'span', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlspan', True)

    
    span = property(__span.value, __span.set, None, u'\n      generic language/style container\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'em'), 'em', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlem', True)

    
    em = property(__em.value, __em.set, None, u'\n      emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sub'), 'sub', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlsub', True)

    
    sub = property(__sub.value, __sub.set, None, u'\n      subscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}kbd uses Python identifier kbd
    __kbd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'kbd'), 'kbd', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlkbd', True)

    
    kbd = property(__kbd.value, __kbd.set, None, u'\n      something user would type\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}strong uses Python identifier strong
    __strong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'strong'), 'strong', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlstrong', True)

    
    strong = property(__strong.value, __strong.set, None, u'\n      strong emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}img uses Python identifier img
    __img = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'img'), 'img', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlimg', True)

    
    img = property(__img.value, __img.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}map uses Python identifier map
    __map = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'map'), 'map', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlmap', True)

    
    map = property(__map.value, __map.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}dfn uses Python identifier dfn
    __dfn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dfn'), 'dfn', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmldfn', True)

    
    dfn = property(__dfn.value, __dfn.set, None, u'\n      definitional\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}code uses Python identifier code
    __code = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'code'), 'code', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlcode', True)

    
    code = property(__code.value, __code.set, None, u'\n      program code\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlacronym', True)

    
    acronym = property(__acronym.value, __acronym.set, None, u'\n      acronym\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlb', True)

    
    b = property(__b.value, __b.set, None, u'\n      bold font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}input uses Python identifier input
    __input = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'input'), 'input', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlinput', True)

    
    input = property(__input.value, __input.set, None, u'\n      form control\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}q uses Python identifier q
    __q = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'q'), 'q', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlq', True)

    
    q = property(__q.value, __q.set, None, u'\n      inlined quote\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sup'), 'sup', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlsup', True)

    
    sup = property(__sup.value, __sup.set, None, u'\n      superscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}tt uses Python identifier tt
    __tt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tt'), 'tt', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmltt', True)

    
    tt = property(__tt.value, __tt.set, None, u'\n      fixed pitch font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}textarea uses Python identifier textarea
    __textarea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'textarea'), 'textarea', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmltextarea', True)

    
    textarea = property(__textarea.value, __textarea.set, None, u'\n      multi-line text field\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}samp uses Python identifier samp
    __samp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'samp'), 'samp', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlsamp', True)

    
    samp = property(__samp.value, __samp.set, None, u'\n      sample\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmli', True)

    
    i = property(__i.value, __i.set, None, u'\n      italic font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}label uses Python identifier label
    __label = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'label'), 'label', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmllabel', True)

    
    label = property(__label.value, __label.set, None, u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      ")

    
    # Element {http://www.w3.org/1999/xhtml}button uses Python identifier button
    __button = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'button'), 'button', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlbutton', True)

    
    button = property(__button.value, __button.set, None, u'\n      Content is "Flow" excluding a, form and form controls\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}a uses Python identifier a
    __a = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'a'), 'a', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmla', True)

    
    a = property(__a.value, __a.set, None, u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}var uses Python identifier var
    __var = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'var'), 'var', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlvar', True)

    
    var = property(__var.value, __var.set, None, u'\n      variable\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}big uses Python identifier big
    __big = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'big'), 'big', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlbig', True)

    
    big = property(__big.value, __big.set, None, u'\n      bigger font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}abbr uses Python identifier abbr
    __abbr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'abbr'), 'abbr', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlabbr', True)

    
    abbr = property(__abbr.value, __abbr.set, None, u'\n      abbreviation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}cite uses Python identifier cite
    __cite = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cite'), 'cite', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlcite', True)

    
    cite = property(__cite.value, __cite.set, None, u'\n      citation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}object uses Python identifier object
    __object = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'object'), 'object', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlobject', True)

    
    object = property(__object.value, __object.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}small uses Python identifier small
    __small = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'small'), 'small', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlsmall', True)

    
    small = property(__small.value, __small.set, None, u'\n      smaller font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'br'), 'br', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlbr', True)

    
    br = property(__br.value, __br.set, None, u'\n      forced line break\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bdo'), 'bdo', '__httpwww_w3_org1999xhtml_Inline_httpwww_w3_org1999xhtmlbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'\n      I18N BiDi over-ride\n      ')


    _ElementMap = {
        __del.name() : __del,
        __select.name() : __select,
        __span.name() : __span,
        __em.name() : __em,
        __sub.name() : __sub,
        __kbd.name() : __kbd,
        __strong.name() : __strong,
        __img.name() : __img,
        __map.name() : __map,
        __dfn.name() : __dfn,
        __code.name() : __code,
        __acronym.name() : __acronym,
        __b.name() : __b,
        __input.name() : __input,
        __q.name() : __q,
        __sup.name() : __sup,
        __tt.name() : __tt,
        __textarea.name() : __textarea,
        __samp.name() : __samp,
        __i.name() : __i,
        __label.name() : __label,
        __button.name() : __button,
        __a.name() : __a,
        __var.name() : __var,
        __script.name() : __script,
        __big.name() : __big,
        __abbr.name() : __abbr,
        __cite.name() : __cite,
        __ins.name() : __ins,
        __object.name() : __object,
        __small.name() : __small,
        __br.name() : __br,
        __bdo.name() : __bdo
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'Inline', Inline)


# Complex type CTD_ANON_2 with content type MIXED
class CTD_ANON_2 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_2_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_2_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_2_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_2_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_2_dir', STD_ANON_2, required=True)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_2_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_2_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_2_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_2_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_2_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_2_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_2_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_2_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_2_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_2_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_2_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_2_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onclick.name() : __onclick,
        __onmouseup.name() : __onmouseup,
        __onkeydown.name() : __onkeydown,
        __style.name() : __style,
        __dir.name() : __dir,
        __id.name() : __id,
        __title.name() : __title,
        __onmousedown.name() : __onmousedown,
        __onmouseout.name() : __onmouseout,
        __ondblclick.name() : __ondblclick,
        __onkeypress.name() : __onkeypress,
        __lang_.name() : __lang_,
        __onmouseover.name() : __onmouseover,
        __onkeyup.name() : __onkeyup,
        __lang.name() : __lang,
        __class.name() : __class,
        __onmousemove.name() : __onmousemove
    })



# Complex type CTD_ANON_3 with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}li uses Python identifier li
    __li = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'li'), 'li', '__httpwww_w3_org1999xhtml_CTD_ANON_3_httpwww_w3_org1999xhtmlli', True)

    
    li = property(__li.value, __li.set, None, u'\n      list item\n      ')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_3_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_3_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_3_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_3_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_3_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_3_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_3_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_3_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_3_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_3_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_3_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_3_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_3_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_3_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_3_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_3_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_3_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)


    _ElementMap = {
        __li.name() : __li
    }
    _AttributeMap = {
        __id.name() : __id,
        __ondblclick.name() : __ondblclick,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown,
        __dir.name() : __dir,
        __title.name() : __title,
        __onkeydown.name() : __onkeydown,
        __lang.name() : __lang,
        __onmousemove.name() : __onmousemove,
        __onmouseup.name() : __onmouseup,
        __style.name() : __style,
        __onkeypress.name() : __onkeypress,
        __onmouseover.name() : __onmouseover,
        __onclick.name() : __onclick,
        __lang_.name() : __lang_,
        __onmouseout.name() : __onmouseout,
        __onkeyup.name() : __onkeyup
    }



# Complex type CTD_ANON_4 with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}address uses Python identifier address
    __address = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'address'), 'address', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmladdress', True)

    
    address = property(__address.value, __address.set, None, u'\n      information on author\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h5 uses Python identifier h5
    __h5 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h5'), 'h5', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlh5', True)

    
    h5 = property(__h5.value, __h5.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}fieldset uses Python identifier fieldset
    __fieldset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), 'fieldset', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlfieldset', True)

    
    fieldset = property(__fieldset.value, __fieldset.set, None, u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h6 uses Python identifier h6
    __h6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h6'), 'h6', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlh6', True)

    
    h6 = property(__h6.value, __h6.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}table uses Python identifier table
    __table = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmltable', True)

    
    table = property(__table.value, __table.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h3 uses Python identifier h3
    __h3 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h3'), 'h3', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlh3', True)

    
    h3 = property(__h3.value, __h3.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}form uses Python identifier form
    __form = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'form'), 'form', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlform', True)

    
    form = property(__form.value, __form.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h2 uses Python identifier h2
    __h2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h2'), 'h2', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlh2', True)

    
    h2 = property(__h2.value, __h2.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h1 uses Python identifier h1
    __h1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h1'), 'h1', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlh1', True)

    
    h1 = property(__h1.value, __h1.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}area uses Python identifier area
    __area = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'area'), 'area', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlarea', True)

    
    area = property(__area.value, __area.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ul'), 'ul', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlul', True)

    
    ul = property(__ul.value, __ul.set, None, u'\n      Unordered list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}noscript uses Python identifier noscript
    __noscript = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'noscript'), 'noscript', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlnoscript', True)

    
    noscript = property(__noscript.value, __noscript.set, None, u'\n      alternate content container for non script-based rendering\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ol uses Python identifier ol
    __ol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ol'), 'ol', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlol', True)

    
    ol = property(__ol.value, __ol.set, None, u'\n      Ordered (numbered) list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}div uses Python identifier div
    __div = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'div'), 'div', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmldiv', True)

    
    div = property(__div.value, __div.set, None, u'\n      generic language/style container      \n      ')

    
    # Element {http://www.w3.org/1999/xhtml}dl uses Python identifier dl
    __dl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dl'), 'dl', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmldl', True)

    
    dl = property(__dl.value, __dl.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'p'), 'p', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlp', True)

    
    p = property(__p.value, __p.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}pre uses Python identifier pre
    __pre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pre'), 'pre', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlpre', True)

    
    pre = property(__pre.value, __pre.set, None, u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h4 uses Python identifier h4
    __h4 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h4'), 'h4', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlh4', True)

    
    h4 = property(__h4.value, __h4.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}hr uses Python identifier hr
    __hr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'hr'), 'hr', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlhr', True)

    
    hr = property(__hr.value, __hr.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}blockquote uses Python identifier blockquote
    __blockquote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), 'blockquote', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_org1999xhtmlblockquote', True)

    
    blockquote = property(__blockquote.value, __blockquote.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_4_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_4_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_4_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_4_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_4_class', pyxb.binding.datatypes.anySimpleType)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_4_id', pyxb.binding.datatypes.ID, required=True)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_4_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_4_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_4_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_4_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_4_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_4_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_4_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_4_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_4_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_w3_org1999xhtml_CTD_ANON_4_name', pyxb.binding.datatypes.NMTOKEN)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_4_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_4_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = {
        __address.name() : __address,
        __h5.name() : __h5,
        __fieldset.name() : __fieldset,
        __h6.name() : __h6,
        __table.name() : __table,
        __h3.name() : __h3,
        __form.name() : __form,
        __h2.name() : __h2,
        __h1.name() : __h1,
        __area.name() : __area,
        __ul.name() : __ul,
        __noscript.name() : __noscript,
        __ol.name() : __ol,
        __div.name() : __div,
        __dl.name() : __dl,
        __ins.name() : __ins,
        __p.name() : __p,
        __del.name() : __del,
        __pre.name() : __pre,
        __script.name() : __script,
        __h4.name() : __h4,
        __hr.name() : __hr,
        __blockquote.name() : __blockquote
    }
    _AttributeMap = {
        __title.name() : __title,
        __onmouseout.name() : __onmouseout,
        __onmousemove.name() : __onmousemove,
        __onclick.name() : __onclick,
        __class.name() : __class,
        __id.name() : __id,
        __onmousedown.name() : __onmousedown,
        __onmouseover.name() : __onmouseover,
        __onmouseup.name() : __onmouseup,
        __onkeyup.name() : __onkeyup,
        __lang_.name() : __lang_,
        __ondblclick.name() : __ondblclick,
        __onkeypress.name() : __onkeypress,
        __dir.name() : __dir,
        __style.name() : __style,
        __name.name() : __name,
        __lang.name() : __lang,
        __onkeydown.name() : __onkeydown
    }



# Complex type CTD_ANON_5 with content type MIXED
class CTD_ANON_5 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_5_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_5_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_5_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_5_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_5_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_5_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_5_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_5_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_5_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_5_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_5_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_5_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_5_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_5_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_5_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_5_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_5_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onkeydown.name() : __onkeydown,
        __onmousedown.name() : __onmousedown,
        __title.name() : __title,
        __id.name() : __id,
        __onclick.name() : __onclick,
        __onmousemove.name() : __onmousemove,
        __onmouseup.name() : __onmouseup,
        __onmouseover.name() : __onmouseover,
        __style.name() : __style,
        __ondblclick.name() : __ondblclick,
        __onkeyup.name() : __onkeyup,
        __class.name() : __class,
        __onkeypress.name() : __onkeypress,
        __onmouseout.name() : __onmouseout,
        __dir.name() : __dir,
        __lang.name() : __lang,
        __lang_.name() : __lang_
    })



# Complex type CTD_ANON_6 with content type MIXED
class CTD_ANON_6 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_6_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_6_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_6_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_6_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_6_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_6_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_6_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_6_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_6_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_6_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_6_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_6_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_6_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_6_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_6_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_6_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_6_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseover.name() : __onmouseover,
        __dir.name() : __dir,
        __onmouseout.name() : __onmouseout,
        __onclick.name() : __onclick,
        __onmouseup.name() : __onmouseup,
        __style.name() : __style,
        __onkeypress.name() : __onkeypress,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown,
        __title.name() : __title,
        __id.name() : __id,
        __onmousemove.name() : __onmousemove,
        __onkeyup.name() : __onkeyup,
        __onkeydown.name() : __onkeydown,
        __ondblclick.name() : __ondblclick,
        __lang_.name() : __lang_,
        __lang.name() : __lang
    })



# Complex type Flow with content type MIXED
class Flow (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Flow')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}big uses Python identifier big
    __big = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'big'), 'big', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlbig', True)

    
    big = property(__big.value, __big.set, None, u'\n      bigger font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h1 uses Python identifier h1
    __h1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h1'), 'h1', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlh1', True)

    
    h1 = property(__h1.value, __h1.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}noscript uses Python identifier noscript
    __noscript = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'noscript'), 'noscript', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlnoscript', True)

    
    noscript = property(__noscript.value, __noscript.set, None, u'\n      alternate content container for non script-based rendering\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}kbd uses Python identifier kbd
    __kbd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'kbd'), 'kbd', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlkbd', True)

    
    kbd = property(__kbd.value, __kbd.set, None, u'\n      something user would type\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}abbr uses Python identifier abbr
    __abbr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'abbr'), 'abbr', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlabbr', True)

    
    abbr = property(__abbr.value, __abbr.set, None, u'\n      abbreviation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}pre uses Python identifier pre
    __pre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pre'), 'pre', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlpre', True)

    
    pre = property(__pre.value, __pre.set, None, u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}span uses Python identifier span
    __span = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'span'), 'span', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlspan', True)

    
    span = property(__span.value, __span.set, None, u'\n      generic language/style container\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}cite uses Python identifier cite
    __cite = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cite'), 'cite', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlcite', True)

    
    cite = property(__cite.value, __cite.set, None, u'\n      citation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}hr uses Python identifier hr
    __hr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'hr'), 'hr', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlhr', True)

    
    hr = property(__hr.value, __hr.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}strong uses Python identifier strong
    __strong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'strong'), 'strong', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlstrong', True)

    
    strong = property(__strong.value, __strong.set, None, u'\n      strong emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sub'), 'sub', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlsub', True)

    
    sub = property(__sub.value, __sub.set, None, u'\n      subscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}blockquote uses Python identifier blockquote
    __blockquote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), 'blockquote', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlblockquote', True)

    
    blockquote = property(__blockquote.value, __blockquote.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlacronym', True)

    
    acronym = property(__acronym.value, __acronym.set, None, u'\n      acronym\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}a uses Python identifier a
    __a = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'a'), 'a', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmla', True)

    
    a = property(__a.value, __a.set, None, u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h4 uses Python identifier h4
    __h4 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h4'), 'h4', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlh4', True)

    
    h4 = property(__h4.value, __h4.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}textarea uses Python identifier textarea
    __textarea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'textarea'), 'textarea', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmltextarea', True)

    
    textarea = property(__textarea.value, __textarea.set, None, u'\n      multi-line text field\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sup'), 'sup', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlsup', True)

    
    sup = property(__sup.value, __sup.set, None, u'\n      superscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}img uses Python identifier img
    __img = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'img'), 'img', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlimg', True)

    
    img = property(__img.value, __img.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h5 uses Python identifier h5
    __h5 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h5'), 'h5', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlh5', True)

    
    h5 = property(__h5.value, __h5.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}dfn uses Python identifier dfn
    __dfn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dfn'), 'dfn', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmldfn', True)

    
    dfn = property(__dfn.value, __dfn.set, None, u'\n      definitional\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}map uses Python identifier map
    __map = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'map'), 'map', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlmap', True)

    
    map = property(__map.value, __map.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}fieldset uses Python identifier fieldset
    __fieldset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), 'fieldset', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlfieldset', True)

    
    fieldset = property(__fieldset.value, __fieldset.set, None, u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ol uses Python identifier ol
    __ol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ol'), 'ol', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlol', True)

    
    ol = property(__ol.value, __ol.set, None, u'\n      Ordered (numbered) list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h6 uses Python identifier h6
    __h6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h6'), 'h6', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlh6', True)

    
    h6 = property(__h6.value, __h6.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h3 uses Python identifier h3
    __h3 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h3'), 'h3', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlh3', True)

    
    h3 = property(__h3.value, __h3.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}code uses Python identifier code
    __code = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'code'), 'code', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlcode', True)

    
    code = property(__code.value, __code.set, None, u'\n      program code\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}select uses Python identifier select
    __select = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'select'), 'select', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlselect', True)

    
    select = property(__select.value, __select.set, None, u'\n      option selector\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}small uses Python identifier small
    __small = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'small'), 'small', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlsmall', True)

    
    small = property(__small.value, __small.set, None, u'\n      smaller font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}table uses Python identifier table
    __table = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmltable', True)

    
    table = property(__table.value, __table.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}var uses Python identifier var
    __var = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'var'), 'var', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlvar', True)

    
    var = property(__var.value, __var.set, None, u'\n      variable\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}div uses Python identifier div
    __div = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'div'), 'div', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmldiv', True)

    
    div = property(__div.value, __div.set, None, u'\n      generic language/style container      \n      ')

    
    # Element {http://www.w3.org/1999/xhtml}form uses Python identifier form
    __form = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'form'), 'form', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlform', True)

    
    form = property(__form.value, __form.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}address uses Python identifier address
    __address = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'address'), 'address', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmladdress', True)

    
    address = property(__address.value, __address.set, None, u'\n      information on author\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}tt uses Python identifier tt
    __tt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tt'), 'tt', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmltt', True)

    
    tt = property(__tt.value, __tt.set, None, u'\n      fixed pitch font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'em'), 'em', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlem', True)

    
    em = property(__em.value, __em.set, None, u'\n      emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}samp uses Python identifier samp
    __samp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'samp'), 'samp', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlsamp', True)

    
    samp = property(__samp.value, __samp.set, None, u'\n      sample\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}input uses Python identifier input
    __input = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'input'), 'input', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlinput', True)

    
    input = property(__input.value, __input.set, None, u'\n      form control\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ul'), 'ul', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlul', True)

    
    ul = property(__ul.value, __ul.set, None, u'\n      Unordered list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'br'), 'br', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlbr', True)

    
    br = property(__br.value, __br.set, None, u'\n      forced line break\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmli', True)

    
    i = property(__i.value, __i.set, None, u'\n      italic font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}label uses Python identifier label
    __label = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'label'), 'label', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmllabel', True)

    
    label = property(__label.value, __label.set, None, u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      ")

    
    # Element {http://www.w3.org/1999/xhtml}object uses Python identifier object
    __object = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'object'), 'object', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlobject', True)

    
    object = property(__object.value, __object.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'p'), 'p', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlp', True)

    
    p = property(__p.value, __p.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlb', True)

    
    b = property(__b.value, __b.set, None, u'\n      bold font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bdo'), 'bdo', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'\n      I18N BiDi over-ride\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h2 uses Python identifier h2
    __h2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h2'), 'h2', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlh2', True)

    
    h2 = property(__h2.value, __h2.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}button uses Python identifier button
    __button = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'button'), 'button', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlbutton', True)

    
    button = property(__button.value, __button.set, None, u'\n      Content is "Flow" excluding a, form and form controls\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}dl uses Python identifier dl
    __dl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dl'), 'dl', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmldl', True)

    
    dl = property(__dl.value, __dl.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}q uses Python identifier q
    __q = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'q'), 'q', '__httpwww_w3_org1999xhtml_Flow_httpwww_w3_org1999xhtmlq', True)

    
    q = property(__q.value, __q.set, None, u'\n      inlined quote\n      ')


    _ElementMap = {
        __big.name() : __big,
        __h1.name() : __h1,
        __noscript.name() : __noscript,
        __kbd.name() : __kbd,
        __abbr.name() : __abbr,
        __pre.name() : __pre,
        __span.name() : __span,
        __cite.name() : __cite,
        __hr.name() : __hr,
        __ins.name() : __ins,
        __strong.name() : __strong,
        __sub.name() : __sub,
        __blockquote.name() : __blockquote,
        __acronym.name() : __acronym,
        __a.name() : __a,
        __del.name() : __del,
        __h4.name() : __h4,
        __textarea.name() : __textarea,
        __sup.name() : __sup,
        __img.name() : __img,
        __h5.name() : __h5,
        __dfn.name() : __dfn,
        __map.name() : __map,
        __fieldset.name() : __fieldset,
        __ol.name() : __ol,
        __h6.name() : __h6,
        __h3.name() : __h3,
        __code.name() : __code,
        __select.name() : __select,
        __small.name() : __small,
        __table.name() : __table,
        __var.name() : __var,
        __div.name() : __div,
        __form.name() : __form,
        __address.name() : __address,
        __tt.name() : __tt,
        __em.name() : __em,
        __samp.name() : __samp,
        __input.name() : __input,
        __ul.name() : __ul,
        __br.name() : __br,
        __i.name() : __i,
        __label.name() : __label,
        __object.name() : __object,
        __script.name() : __script,
        __p.name() : __p,
        __b.name() : __b,
        __bdo.name() : __bdo,
        __h2.name() : __h2,
        __button.name() : __button,
        __dl.name() : __dl,
        __q.name() : __q
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'Flow', Flow)


# Complex type CTD_ANON_7 with content type MIXED
class CTD_ANON_7 (Flow):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Flow
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_7_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_7_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_7_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_7_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_7_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_7_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_7_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_7_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_7_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_7_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_7_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_7_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_7_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_7_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_7_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_7_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_7_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)


    _ElementMap = Flow._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Flow._AttributeMap.copy()
    _AttributeMap.update({
        __ondblclick.name() : __ondblclick,
        __lang_.name() : __lang_,
        __id.name() : __id,
        __onkeyup.name() : __onkeyup,
        __onkeydown.name() : __onkeydown,
        __onmouseover.name() : __onmouseover,
        __onmouseout.name() : __onmouseout,
        __lang.name() : __lang,
        __style.name() : __style,
        __dir.name() : __dir,
        __onkeypress.name() : __onkeypress,
        __onclick.name() : __onclick,
        __onmouseup.name() : __onmouseup,
        __title.name() : __title,
        __onmousemove.name() : __onmousemove,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown
    })



# Complex type CTD_ANON_8 with content type MIXED
class CTD_ANON_8 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_8_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_8_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_8_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_8_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_8_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_8_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_8_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_8_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_8_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_8_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_8_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_8_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_8_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_8_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_8_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_8_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_8_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onkeypress.name() : __onkeypress,
        __onmouseover.name() : __onmouseover,
        __title.name() : __title,
        __id.name() : __id,
        __onkeyup.name() : __onkeyup,
        __onmousemove.name() : __onmousemove,
        __onclick.name() : __onclick,
        __onkeydown.name() : __onkeydown,
        __ondblclick.name() : __ondblclick,
        __onmousedown.name() : __onmousedown,
        __class.name() : __class,
        __onmouseout.name() : __onmouseout,
        __lang.name() : __lang,
        __onmouseup.name() : __onmouseup,
        __dir.name() : __dir,
        __style.name() : __style,
        __lang_.name() : __lang_
    })



# Complex type CTD_ANON_9 with content type EMPTY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_9_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_9_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_9_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_9_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_9_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_9_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_9_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_9_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_9_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_9_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_9_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_9_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute alt uses Python identifier alt
    __alt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'alt'), 'alt', '__httpwww_w3_org1999xhtml_CTD_ANON_9_alt', Text, required=True)
    
    alt = property(__alt.value, __alt.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_9_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute longdesc uses Python identifier longdesc
    __longdesc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'longdesc'), 'longdesc', '__httpwww_w3_org1999xhtml_CTD_ANON_9_longdesc', URI)
    
    longdesc = property(__longdesc.value, __longdesc.set, None, None)

    
    # Attribute height uses Python identifier height
    __height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'height'), 'height', '__httpwww_w3_org1999xhtml_CTD_ANON_9_height', Length)
    
    height = property(__height.value, __height.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_9_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__httpwww_w3_org1999xhtml_CTD_ANON_9_width', Length)
    
    width = property(__width.value, __width.set, None, None)

    
    # Attribute usemap uses Python identifier usemap
    __usemap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'usemap'), 'usemap', '__httpwww_w3_org1999xhtml_CTD_ANON_9_usemap', URI)
    
    usemap = property(__usemap.value, __usemap.set, None, u'\n          usemap points to a map element which may be in this document\n          or an external document, although the latter is not widely supported\n          ')

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_9_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute src uses Python identifier src
    __src = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'src'), 'src', '__httpwww_w3_org1999xhtml_CTD_ANON_9_src', URI, required=True)
    
    src = property(__src.value, __src.set, None, None)

    
    # Attribute ismap uses Python identifier ismap
    __ismap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ismap'), 'ismap', '__httpwww_w3_org1999xhtml_CTD_ANON_9_ismap', STD_ANON_3)
    
    ismap = property(__ismap.value, __ismap.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_9_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_9_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __onkeypress.name() : __onkeypress,
        __onkeyup.name() : __onkeyup,
        __onmousemove.name() : __onmousemove,
        __id.name() : __id,
        __dir.name() : __dir,
        __lang_.name() : __lang_,
        __style.name() : __style,
        __ondblclick.name() : __ondblclick,
        __onmouseout.name() : __onmouseout,
        __onclick.name() : __onclick,
        __title.name() : __title,
        __onmouseover.name() : __onmouseover,
        __alt.name() : __alt,
        __onkeydown.name() : __onkeydown,
        __longdesc.name() : __longdesc,
        __height.name() : __height,
        __onmousedown.name() : __onmousedown,
        __width.name() : __width,
        __usemap.name() : __usemap,
        __class.name() : __class,
        __src.name() : __src,
        __ismap.name() : __ismap,
        __onmouseup.name() : __onmouseup,
        __lang.name() : __lang
    }



# Complex type form_content with content type ELEMENT_ONLY
class form_content (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'form.content')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}pre uses Python identifier pre
    __pre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pre'), 'pre', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlpre', True)

    
    pre = property(__pre.value, __pre.set, None, u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ol uses Python identifier ol
    __ol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ol'), 'ol', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlol', True)

    
    ol = property(__ol.value, __ol.set, None, u'\n      Ordered (numbered) list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}address uses Python identifier address
    __address = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'address'), 'address', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmladdress', True)

    
    address = property(__address.value, __address.set, None, u'\n      information on author\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h5 uses Python identifier h5
    __h5 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h5'), 'h5', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlh5', True)

    
    h5 = property(__h5.value, __h5.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h2 uses Python identifier h2
    __h2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h2'), 'h2', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlh2', True)

    
    h2 = property(__h2.value, __h2.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}noscript uses Python identifier noscript
    __noscript = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'noscript'), 'noscript', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlnoscript', True)

    
    noscript = property(__noscript.value, __noscript.set, None, u'\n      alternate content container for non script-based rendering\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}hr uses Python identifier hr
    __hr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'hr'), 'hr', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlhr', True)

    
    hr = property(__hr.value, __hr.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h3 uses Python identifier h3
    __h3 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h3'), 'h3', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlh3', True)

    
    h3 = property(__h3.value, __h3.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}div uses Python identifier div
    __div = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'div'), 'div', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmldiv', True)

    
    div = property(__div.value, __div.set, None, u'\n      generic language/style container      \n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h1 uses Python identifier h1
    __h1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h1'), 'h1', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlh1', True)

    
    h1 = property(__h1.value, __h1.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}dl uses Python identifier dl
    __dl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dl'), 'dl', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmldl', True)

    
    dl = property(__dl.value, __dl.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}table uses Python identifier table
    __table = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmltable', True)

    
    table = property(__table.value, __table.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}fieldset uses Python identifier fieldset
    __fieldset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), 'fieldset', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlfieldset', True)

    
    fieldset = property(__fieldset.value, __fieldset.set, None, u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}blockquote uses Python identifier blockquote
    __blockquote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), 'blockquote', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlblockquote', True)

    
    blockquote = property(__blockquote.value, __blockquote.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h4 uses Python identifier h4
    __h4 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h4'), 'h4', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlh4', True)

    
    h4 = property(__h4.value, __h4.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ul'), 'ul', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlul', True)

    
    ul = property(__ul.value, __ul.set, None, u'\n      Unordered list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'p'), 'p', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlp', True)

    
    p = property(__p.value, __p.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h6 uses Python identifier h6
    __h6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h6'), 'h6', '__httpwww_w3_org1999xhtml_form_content_httpwww_w3_org1999xhtmlh6', True)

    
    h6 = property(__h6.value, __h6.set, None, None)


    _ElementMap = {
        __pre.name() : __pre,
        __ins.name() : __ins,
        __ol.name() : __ol,
        __address.name() : __address,
        __h5.name() : __h5,
        __h2.name() : __h2,
        __noscript.name() : __noscript,
        __hr.name() : __hr,
        __del.name() : __del,
        __h3.name() : __h3,
        __div.name() : __div,
        __h1.name() : __h1,
        __dl.name() : __dl,
        __table.name() : __table,
        __fieldset.name() : __fieldset,
        __blockquote.name() : __blockquote,
        __script.name() : __script,
        __h4.name() : __h4,
        __ul.name() : __ul,
        __p.name() : __p,
        __h6.name() : __h6
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'form.content', form_content)


# Complex type CTD_ANON_10 with content type ELEMENT_ONLY
class CTD_ANON_10 (form_content):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is form_content
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}form.content
    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute action uses Python identifier action
    __action = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'action'), 'action', '__httpwww_w3_org1999xhtml_CTD_ANON_10_action', URI, required=True)
    
    action = property(__action.value, __action.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_10_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute method uses Python identifier method
    __method = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'method'), 'method', '__httpwww_w3_org1999xhtml_CTD_ANON_10_method', STD_ANON_4, unicode_default=u'get')
    
    method = property(__method.value, __method.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_10_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_10_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute enctype uses Python identifier enctype
    __enctype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enctype'), 'enctype', '__httpwww_w3_org1999xhtml_CTD_ANON_10_enctype', ContentType, unicode_default=u'application/x-www-form-urlencoded')
    
    enctype = property(__enctype.value, __enctype.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onsubmit uses Python identifier onsubmit
    __onsubmit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onsubmit'), 'onsubmit', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onsubmit', Script)
    
    onsubmit = property(__onsubmit.value, __onsubmit.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onreset uses Python identifier onreset
    __onreset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onreset'), 'onreset', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onreset', Script)
    
    onreset = property(__onreset.value, __onreset.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute accept uses Python identifier accept
    __accept = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accept'), 'accept', '__httpwww_w3_org1999xhtml_CTD_ANON_10_accept', ContentTypes)
    
    accept = property(__accept.value, __accept.set, None, None)

    
    # Attribute accept-charset uses Python identifier accept_charset
    __accept_charset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accept-charset'), 'accept_charset', '__httpwww_w3_org1999xhtml_CTD_ANON_10_accept_charset', Charsets)
    
    accept_charset = property(__accept_charset.value, __accept_charset.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_10_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_10_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_10_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_10_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_10_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_10_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)


    _ElementMap = form_content._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = form_content._AttributeMap.copy()
    _AttributeMap.update({
        __onkeypress.name() : __onkeypress,
        __onkeyup.name() : __onkeyup,
        __onmouseover.name() : __onmouseover,
        __action.name() : __action,
        __id.name() : __id,
        __method.name() : __method,
        __lang.name() : __lang,
        __lang_.name() : __lang_,
        __enctype.name() : __enctype,
        __onclick.name() : __onclick,
        __onsubmit.name() : __onsubmit,
        __onmousedown.name() : __onmousedown,
        __onreset.name() : __onreset,
        __onkeydown.name() : __onkeydown,
        __accept.name() : __accept,
        __accept_charset.name() : __accept_charset,
        __onmouseout.name() : __onmouseout,
        __class.name() : __class,
        __title.name() : __title,
        __onmouseup.name() : __onmouseup,
        __style.name() : __style,
        __dir.name() : __dir,
        __onmousemove.name() : __onmousemove,
        __ondblclick.name() : __ondblclick
    })



# Complex type CTD_ANON_11 with content type MIXED
class CTD_ANON_11 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_11_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_11_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_11_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_11_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_11_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_11_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_11_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_11_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_11_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_11_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_11_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_11_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_11_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_11_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_11_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_11_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_11_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __ondblclick.name() : __ondblclick,
        __onmousedown.name() : __onmousedown,
        __dir.name() : __dir,
        __lang_.name() : __lang_,
        __class.name() : __class,
        __onkeydown.name() : __onkeydown,
        __lang.name() : __lang,
        __onmouseout.name() : __onmouseout,
        __onmousemove.name() : __onmousemove,
        __style.name() : __style,
        __onmouseover.name() : __onmouseover,
        __onkeyup.name() : __onkeyup,
        __title.name() : __title,
        __onkeypress.name() : __onkeypress,
        __onclick.name() : __onclick,
        __onmouseup.name() : __onmouseup,
        __id.name() : __id
    })



# Complex type CTD_ANON_12 with content type MIXED
class CTD_ANON_12 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_12_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_12_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_12_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_12_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_12_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_12_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_12_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_12_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_12_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_12_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_12_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_12_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_12_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_12_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_12_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_12_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_12_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseout.name() : __onmouseout,
        __lang.name() : __lang,
        __onmousemove.name() : __onmousemove,
        __dir.name() : __dir,
        __onkeydown.name() : __onkeydown,
        __ondblclick.name() : __ondblclick,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __onclick.name() : __onclick,
        __lang_.name() : __lang_,
        __onmouseup.name() : __onmouseup,
        __onmouseover.name() : __onmouseover,
        __onkeyup.name() : __onkeyup,
        __id.name() : __id,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown,
        __style.name() : __style
    })



# Complex type pre_content with content type MIXED
class pre_content (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pre.content')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}button uses Python identifier button
    __button = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'button'), 'button', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlbutton', True)

    
    button = property(__button.value, __button.set, None, u'\n      Content is "Flow" excluding a, form and form controls\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}abbr uses Python identifier abbr
    __abbr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'abbr'), 'abbr', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlabbr', True)

    
    abbr = property(__abbr.value, __abbr.set, None, u'\n      abbreviation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'br'), 'br', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlbr', True)

    
    br = property(__br.value, __br.set, None, u'\n      forced line break\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}kbd uses Python identifier kbd
    __kbd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'kbd'), 'kbd', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlkbd', True)

    
    kbd = property(__kbd.value, __kbd.set, None, u'\n      something user would type\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}q uses Python identifier q
    __q = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'q'), 'q', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlq', True)

    
    q = property(__q.value, __q.set, None, u'\n      inlined quote\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}code uses Python identifier code
    __code = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'code'), 'code', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlcode', True)

    
    code = property(__code.value, __code.set, None, u'\n      program code\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}span uses Python identifier span
    __span = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'span'), 'span', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlspan', True)

    
    span = property(__span.value, __span.set, None, u'\n      generic language/style container\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}big uses Python identifier big
    __big = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'big'), 'big', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlbig', True)

    
    big = property(__big.value, __big.set, None, u'\n      bigger font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}tt uses Python identifier tt
    __tt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tt'), 'tt', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmltt', True)

    
    tt = property(__tt.value, __tt.set, None, u'\n      fixed pitch font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bdo'), 'bdo', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'\n      I18N BiDi over-ride\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}input uses Python identifier input
    __input = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'input'), 'input', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlinput', True)

    
    input = property(__input.value, __input.set, None, u'\n      form control\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmli', True)

    
    i = property(__i.value, __i.set, None, u'\n      italic font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}map uses Python identifier map
    __map = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'map'), 'map', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlmap', True)

    
    map = property(__map.value, __map.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}a uses Python identifier a
    __a = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'a'), 'a', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmla', True)

    
    a = property(__a.value, __a.set, None, u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}textarea uses Python identifier textarea
    __textarea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'textarea'), 'textarea', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmltextarea', True)

    
    textarea = property(__textarea.value, __textarea.set, None, u'\n      multi-line text field\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlb', True)

    
    b = property(__b.value, __b.set, None, u'\n      bold font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}cite uses Python identifier cite
    __cite = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cite'), 'cite', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlcite', True)

    
    cite = property(__cite.value, __cite.set, None, u'\n      citation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}samp uses Python identifier samp
    __samp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'samp'), 'samp', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlsamp', True)

    
    samp = property(__samp.value, __samp.set, None, u'\n      sample\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}var uses Python identifier var
    __var = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'var'), 'var', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlvar', True)

    
    var = property(__var.value, __var.set, None, u'\n      variable\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlacronym', True)

    
    acronym = property(__acronym.value, __acronym.set, None, u'\n      acronym\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'em'), 'em', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlem', True)

    
    em = property(__em.value, __em.set, None, u'\n      emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}small uses Python identifier small
    __small = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'small'), 'small', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlsmall', True)

    
    small = property(__small.value, __small.set, None, u'\n      smaller font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sub'), 'sub', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlsub', True)

    
    sub = property(__sub.value, __sub.set, None, u'\n      subscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}select uses Python identifier select
    __select = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'select'), 'select', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlselect', True)

    
    select = property(__select.value, __select.set, None, u'\n      option selector\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}strong uses Python identifier strong
    __strong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'strong'), 'strong', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlstrong', True)

    
    strong = property(__strong.value, __strong.set, None, u'\n      strong emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sup'), 'sup', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmlsup', True)

    
    sup = property(__sup.value, __sup.set, None, u'\n      superscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}dfn uses Python identifier dfn
    __dfn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dfn'), 'dfn', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmldfn', True)

    
    dfn = property(__dfn.value, __dfn.set, None, u'\n      definitional\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}label uses Python identifier label
    __label = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'label'), 'label', '__httpwww_w3_org1999xhtml_pre_content_httpwww_w3_org1999xhtmllabel', True)

    
    label = property(__label.value, __label.set, None, u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      ")


    _ElementMap = {
        __button.name() : __button,
        __abbr.name() : __abbr,
        __br.name() : __br,
        __kbd.name() : __kbd,
        __q.name() : __q,
        __code.name() : __code,
        __span.name() : __span,
        __big.name() : __big,
        __tt.name() : __tt,
        __bdo.name() : __bdo,
        __input.name() : __input,
        __i.name() : __i,
        __script.name() : __script,
        __map.name() : __map,
        __a.name() : __a,
        __textarea.name() : __textarea,
        __b.name() : __b,
        __ins.name() : __ins,
        __cite.name() : __cite,
        __samp.name() : __samp,
        __del.name() : __del,
        __var.name() : __var,
        __acronym.name() : __acronym,
        __em.name() : __em,
        __small.name() : __small,
        __sub.name() : __sub,
        __select.name() : __select,
        __strong.name() : __strong,
        __sup.name() : __sup,
        __dfn.name() : __dfn,
        __label.name() : __label
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'pre.content', pre_content)


# Complex type CTD_ANON_13 with content type MIXED
class CTD_ANON_13 (pre_content):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is pre_content
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}pre.content
    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_13_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_13_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_13_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_13_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_13_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_13_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_13_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_13_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_13_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_13_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_13_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_13_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_13_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'space'), 'space', '__httpwww_w3_org1999xhtml_CTD_ANON_13_httpwww_w3_orgXML1998namespacespace', pyxb.binding.xml_.STD_ANON_space, fixed=True, unicode_default=u'preserve')
    
    space = property(__space.value, __space.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_13_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_13_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_13_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_13_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)


    _ElementMap = pre_content._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = pre_content._AttributeMap.copy()
    _AttributeMap.update({
        __onkeyup.name() : __onkeyup,
        __onmouseout.name() : __onmouseout,
        __ondblclick.name() : __ondblclick,
        __id.name() : __id,
        __onkeydown.name() : __onkeydown,
        __dir.name() : __dir,
        __onmouseover.name() : __onmouseover,
        __lang_.name() : __lang_,
        __title.name() : __title,
        __lang.name() : __lang,
        __style.name() : __style,
        __onmouseup.name() : __onmouseup,
        __onkeypress.name() : __onkeypress,
        __space.name() : __space,
        __class.name() : __class,
        __onclick.name() : __onclick,
        __onmousemove.name() : __onmousemove,
        __onmousedown.name() : __onmousedown
    })



# Complex type CTD_ANON_14 with content type EMPTY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_14_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_14_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_14_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_14_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __class.name() : __class,
        __title.name() : __title,
        __style.name() : __style,
        __id.name() : __id
    }



# Complex type CTD_ANON_15 with content type MIXED
class CTD_ANON_15 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_15_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_15_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_15_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_15_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_15_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_15_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_15_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_15_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_15_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_15_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_15_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_15_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_15_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_15_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_15_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_15_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_15_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onkeypress.name() : __onkeypress,
        __onclick.name() : __onclick,
        __title.name() : __title,
        __onmouseup.name() : __onmouseup,
        __dir.name() : __dir,
        __onmousemove.name() : __onmousemove,
        __ondblclick.name() : __ondblclick,
        __onkeyup.name() : __onkeyup,
        __id.name() : __id,
        __onmousedown.name() : __onmousedown,
        __onmouseout.name() : __onmouseout,
        __style.name() : __style,
        __lang_.name() : __lang_,
        __lang.name() : __lang,
        __onmouseover.name() : __onmouseover,
        __onkeydown.name() : __onkeydown,
        __class.name() : __class
    })



# Complex type CTD_ANON_16 with content type EMPTY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_w3_org1999xhtml_CTD_ANON_16_name', pyxb.binding.datatypes.anySimpleType)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_16_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_16_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute content uses Python identifier content_
    __content = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'content'), 'content_', '__httpwww_w3_org1999xhtml_CTD_ANON_16_content', pyxb.binding.datatypes.anySimpleType, required=True)
    
    content_ = property(__content.value, __content.set, None, None)

    
    # Attribute http-equiv uses Python identifier http_equiv
    __http_equiv = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'http-equiv'), 'http_equiv', '__httpwww_w3_org1999xhtml_CTD_ANON_16_http_equiv', pyxb.binding.datatypes.anySimpleType)
    
    http_equiv = property(__http_equiv.value, __http_equiv.set, None, None)

    
    # Attribute scheme uses Python identifier scheme
    __scheme = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scheme'), 'scheme', '__httpwww_w3_org1999xhtml_CTD_ANON_16_scheme', pyxb.binding.datatypes.anySimpleType)
    
    scheme = property(__scheme.value, __scheme.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_16_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_16_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name,
        __lang.name() : __lang,
        __dir.name() : __dir,
        __content.name() : __content,
        __http_equiv.name() : __http_equiv,
        __scheme.name() : __scheme,
        __lang_.name() : __lang_,
        __id.name() : __id
    }



# Complex type CTD_ANON_17 with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}dt uses Python identifier dt
    __dt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dt'), 'dt', '__httpwww_w3_org1999xhtml_CTD_ANON_17_httpwww_w3_org1999xhtmldt', True)

    
    dt = property(__dt.value, __dt.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}dd uses Python identifier dd
    __dd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dd'), 'dd', '__httpwww_w3_org1999xhtml_CTD_ANON_17_httpwww_w3_org1999xhtmldd', True)

    
    dd = property(__dd.value, __dd.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_17_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_17_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_17_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_17_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_17_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_17_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_17_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_17_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_17_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_17_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_17_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_17_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_17_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_17_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_17_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_17_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_17_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)


    _ElementMap = {
        __dt.name() : __dt,
        __dd.name() : __dd
    }
    _AttributeMap = {
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __onmousedown.name() : __onmousedown,
        __onclick.name() : __onclick,
        __onmousemove.name() : __onmousemove,
        __dir.name() : __dir,
        __ondblclick.name() : __ondblclick,
        __onkeydown.name() : __onkeydown,
        __onmouseover.name() : __onmouseover,
        __onmouseout.name() : __onmouseout,
        __id.name() : __id,
        __class.name() : __class,
        __onkeyup.name() : __onkeyup,
        __onmouseup.name() : __onmouseup,
        __lang.name() : __lang,
        __style.name() : __style,
        __lang_.name() : __lang_
    }



# Complex type CTD_ANON_18 with content type MIXED
class CTD_ANON_18 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_18_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_18_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_18_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_18_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_18_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_18_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_18_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_18_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_18_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_18_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_18_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_18_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_18_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_18_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_18_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_18_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_18_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmousemove.name() : __onmousemove,
        __lang_.name() : __lang_,
        __onmouseup.name() : __onmouseup,
        __ondblclick.name() : __ondblclick,
        __onmouseout.name() : __onmouseout,
        __class.name() : __class,
        __id.name() : __id,
        __onmouseover.name() : __onmouseover,
        __onclick.name() : __onclick,
        __onkeyup.name() : __onkeyup,
        __lang.name() : __lang,
        __style.name() : __style,
        __dir.name() : __dir,
        __onmousedown.name() : __onmousedown,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_19 with content type MIXED
class CTD_ANON_19 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_19_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_19_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_19_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_19_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_19_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_19_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_19_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_19_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_19_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_19_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_19_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_19_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_19_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_19_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_19_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_19_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_19_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseout.name() : __onmouseout,
        __onmousemove.name() : __onmousemove,
        __lang.name() : __lang,
        __onmouseover.name() : __onmouseover,
        __dir.name() : __dir,
        __style.name() : __style,
        __class.name() : __class,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __onclick.name() : __onclick,
        __onkeyup.name() : __onkeyup,
        __onmouseup.name() : __onmouseup,
        __lang_.name() : __lang_,
        __id.name() : __id,
        __ondblclick.name() : __ondblclick,
        __onmousedown.name() : __onmousedown,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_20 with content type MIXED
class CTD_ANON_20 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_20_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_20_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_20_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_20_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_20_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_20_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_20_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_20_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_20_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_20_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_20_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_20_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_20_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_20_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_20_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_20_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_20_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __lang_.name() : __lang_,
        __onmouseover.name() : __onmouseover,
        __onmouseout.name() : __onmouseout,
        __onkeypress.name() : __onkeypress,
        __style.name() : __style,
        __onkeydown.name() : __onkeydown,
        __id.name() : __id,
        __title.name() : __title,
        __class.name() : __class,
        __onclick.name() : __onclick,
        __onmousemove.name() : __onmousemove,
        __ondblclick.name() : __ondblclick,
        __onmouseup.name() : __onmouseup,
        __onkeyup.name() : __onkeyup,
        __dir.name() : __dir,
        __onmousedown.name() : __onmousedown,
        __lang.name() : __lang
    })



# Complex type CTD_ANON_21 with content type MIXED
class CTD_ANON_21 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_21_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_21_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_21_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_21_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_21_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_21_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_21_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_21_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_21_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_21_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_21_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_21_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_21_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_21_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_21_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_21_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_21_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmousemove.name() : __onmousemove,
        __onmouseup.name() : __onmouseup,
        __ondblclick.name() : __ondblclick,
        __onmouseout.name() : __onmouseout,
        __onmousedown.name() : __onmousedown,
        __onmouseover.name() : __onmouseover,
        __class.name() : __class,
        __id.name() : __id,
        __title.name() : __title,
        __lang.name() : __lang,
        __lang_.name() : __lang_,
        __style.name() : __style,
        __dir.name() : __dir,
        __onkeyup.name() : __onkeyup,
        __onkeypress.name() : __onkeypress,
        __onclick.name() : __onclick,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_22 with content type MIXED
class CTD_ANON_22 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_22_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_22_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_22_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_22_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_22_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_22_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_22_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_22_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_22_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_22_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_22_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_22_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_22_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_22_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_22_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_22_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_22_title', Text)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onkeypress.name() : __onkeypress,
        __lang_.name() : __lang_,
        __onmouseover.name() : __onmouseover,
        __onkeydown.name() : __onkeydown,
        __onclick.name() : __onclick,
        __onkeyup.name() : __onkeyup,
        __onmouseup.name() : __onmouseup,
        __dir.name() : __dir,
        __style.name() : __style,
        __ondblclick.name() : __ondblclick,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown,
        __onmousemove.name() : __onmousemove,
        __onmouseout.name() : __onmouseout,
        __id.name() : __id,
        __lang.name() : __lang,
        __title.name() : __title
    })



# Complex type CTD_ANON_23 with content type EMPTY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute alt uses Python identifier alt
    __alt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'alt'), 'alt', '__httpwww_w3_org1999xhtml_CTD_ANON_23_alt', pyxb.binding.datatypes.anySimpleType)
    
    alt = property(__alt.value, __alt.set, None, None)

    
    # Attribute onblur uses Python identifier onblur
    __onblur = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onblur'), 'onblur', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onblur', Script)
    
    onblur = property(__onblur.value, __onblur.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_w3_org1999xhtml_CTD_ANON_23_type', InputType, unicode_default=u'text')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_23_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_w3_org1999xhtml_CTD_ANON_23_name', pyxb.binding.datatypes.anySimpleType)
    
    name = property(__name.value, __name.set, None, u'\n          the name attribute is required for all but submit & reset\n          ')

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_23_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_w3_org1999xhtml_CTD_ANON_23_value', pyxb.binding.datatypes.anySimpleType)
    
    value_ = property(__value.value, __value.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute tabindex uses Python identifier tabindex
    __tabindex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabindex'), 'tabindex', '__httpwww_w3_org1999xhtml_CTD_ANON_23_tabindex', tabindexNumber)
    
    tabindex = property(__tabindex.value, __tabindex.set, None, None)

    
    # Attribute checked uses Python identifier checked
    __checked = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'checked'), 'checked', '__httpwww_w3_org1999xhtml_CTD_ANON_23_checked', STD_ANON_7)
    
    checked = property(__checked.value, __checked.set, None, None)

    
    # Attribute onchange uses Python identifier onchange
    __onchange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onchange'), 'onchange', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onchange', Script)
    
    onchange = property(__onchange.value, __onchange.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_23_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disabled'), 'disabled', '__httpwww_w3_org1999xhtml_CTD_ANON_23_disabled', STD_ANON_5)
    
    disabled = property(__disabled.value, __disabled.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onfocus uses Python identifier onfocus
    __onfocus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onfocus'), 'onfocus', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onfocus', Script)
    
    onfocus = property(__onfocus.value, __onfocus.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_23_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute readonly uses Python identifier readonly
    __readonly = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'readonly'), 'readonly', '__httpwww_w3_org1999xhtml_CTD_ANON_23_readonly', STD_ANON_6)
    
    readonly = property(__readonly.value, __readonly.set, None, None)

    
    # Attribute accesskey uses Python identifier accesskey
    __accesskey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accesskey'), 'accesskey', '__httpwww_w3_org1999xhtml_CTD_ANON_23_accesskey', Character)
    
    accesskey = property(__accesskey.value, __accesskey.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_23_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__httpwww_w3_org1999xhtml_CTD_ANON_23_size', pyxb.binding.datatypes.anySimpleType)
    
    size = property(__size.value, __size.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute maxlength uses Python identifier maxlength
    __maxlength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxlength'), 'maxlength', '__httpwww_w3_org1999xhtml_CTD_ANON_23_maxlength', Number)
    
    maxlength = property(__maxlength.value, __maxlength.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_23_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute src uses Python identifier src
    __src = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'src'), 'src', '__httpwww_w3_org1999xhtml_CTD_ANON_23_src', URI)
    
    src = property(__src.value, __src.set, None, None)

    
    # Attribute accept uses Python identifier accept
    __accept = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accept'), 'accept', '__httpwww_w3_org1999xhtml_CTD_ANON_23_accept', ContentTypes)
    
    accept = property(__accept.value, __accept.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_23_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute usemap uses Python identifier usemap
    __usemap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'usemap'), 'usemap', '__httpwww_w3_org1999xhtml_CTD_ANON_23_usemap', URI)
    
    usemap = property(__usemap.value, __usemap.set, None, None)

    
    # Attribute onselect uses Python identifier onselect
    __onselect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onselect'), 'onselect', '__httpwww_w3_org1999xhtml_CTD_ANON_23_onselect', Script)
    
    onselect = property(__onselect.value, __onselect.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_23_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __onmousedown.name() : __onmousedown,
        __alt.name() : __alt,
        __onblur.name() : __onblur,
        __type.name() : __type,
        __id.name() : __id,
        __name.name() : __name,
        __onmouseup.name() : __onmouseup,
        __dir.name() : __dir,
        __value.name() : __value,
        __onmouseover.name() : __onmouseover,
        __tabindex.name() : __tabindex,
        __checked.name() : __checked,
        __onchange.name() : __onchange,
        __lang.name() : __lang,
        __disabled.name() : __disabled,
        __onkeyup.name() : __onkeyup,
        __onkeypress.name() : __onkeypress,
        __onfocus.name() : __onfocus,
        __lang_.name() : __lang_,
        __readonly.name() : __readonly,
        __accesskey.name() : __accesskey,
        __style.name() : __style,
        __size.name() : __size,
        __onmousemove.name() : __onmousemove,
        __maxlength.name() : __maxlength,
        __onkeydown.name() : __onkeydown,
        __ondblclick.name() : __ondblclick,
        __src.name() : __src,
        __accept.name() : __accept,
        __onmouseout.name() : __onmouseout,
        __onclick.name() : __onclick,
        __title.name() : __title,
        __usemap.name() : __usemap,
        __onselect.name() : __onselect,
        __class.name() : __class
    }



# Complex type CTD_ANON_24 with content type MIXED
class CTD_ANON_24 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_24_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_24_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_24_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_24_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_24_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_24_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_24_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_24_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_24_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_24_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_24_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_24_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_24_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_24_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_24_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_24_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_24_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __lang_.name() : __lang_,
        __onmouseup.name() : __onmouseup,
        __dir.name() : __dir,
        __ondblclick.name() : __ondblclick,
        __onmousemove.name() : __onmousemove,
        __onmouseover.name() : __onmouseover,
        __onmousedown.name() : __onmousedown,
        __id.name() : __id,
        __class.name() : __class,
        __onmouseout.name() : __onmouseout,
        __onkeyup.name() : __onkeyup,
        __lang.name() : __lang,
        __style.name() : __style,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __onclick.name() : __onclick,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_25 with content type MIXED
class CTD_ANON_25 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_25_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_25_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_25_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_25_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_25_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_25_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_25_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_25_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_25_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_25_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_25_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_25_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_25_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_25_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_25_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_25_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_25_title', Text)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __class.name() : __class,
        __onkeyup.name() : __onkeyup,
        __onclick.name() : __onclick,
        __onkeypress.name() : __onkeypress,
        __onmousedown.name() : __onmousedown,
        __onmouseup.name() : __onmouseup,
        __lang_.name() : __lang_,
        __dir.name() : __dir,
        __onkeydown.name() : __onkeydown,
        __id.name() : __id,
        __ondblclick.name() : __ondblclick,
        __onmouseover.name() : __onmouseover,
        __onmouseout.name() : __onmouseout,
        __onmousemove.name() : __onmousemove,
        __lang.name() : __lang,
        __style.name() : __style,
        __title.name() : __title
    })



# Complex type CTD_ANON_26 with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}option uses Python identifier option
    __option = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'option'), 'option', '__httpwww_w3_org1999xhtml_CTD_ANON_26_httpwww_w3_org1999xhtmloption', True)

    
    option = property(__option.value, __option.set, None, u'\n      selectable choice\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}optgroup uses Python identifier optgroup
    __optgroup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'optgroup'), 'optgroup', '__httpwww_w3_org1999xhtml_CTD_ANON_26_httpwww_w3_org1999xhtmloptgroup', True)

    
    optgroup = property(__optgroup.value, __optgroup.set, None, u'\n      option group\n      ')

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_26_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_26_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_w3_org1999xhtml_CTD_ANON_26_name', pyxb.binding.datatypes.anySimpleType)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__httpwww_w3_org1999xhtml_CTD_ANON_26_size', Number)
    
    size = property(__size.value, __size.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute multiple uses Python identifier multiple
    __multiple = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'multiple'), 'multiple', '__httpwww_w3_org1999xhtml_CTD_ANON_26_multiple', STD_ANON_9)
    
    multiple = property(__multiple.value, __multiple.set, None, None)

    
    # Attribute disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disabled'), 'disabled', '__httpwww_w3_org1999xhtml_CTD_ANON_26_disabled', STD_ANON_8)
    
    disabled = property(__disabled.value, __disabled.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_26_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute tabindex uses Python identifier tabindex
    __tabindex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabindex'), 'tabindex', '__httpwww_w3_org1999xhtml_CTD_ANON_26_tabindex', tabindexNumber)
    
    tabindex = property(__tabindex.value, __tabindex.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_26_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_26_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_26_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onblur uses Python identifier onblur
    __onblur = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onblur'), 'onblur', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onblur', Script)
    
    onblur = property(__onblur.value, __onblur.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_26_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onchange uses Python identifier onchange
    __onchange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onchange'), 'onchange', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onchange', Script)
    
    onchange = property(__onchange.value, __onchange.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_26_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onfocus uses Python identifier onfocus
    __onfocus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onfocus'), 'onfocus', '__httpwww_w3_org1999xhtml_CTD_ANON_26_onfocus', Script)
    
    onfocus = property(__onfocus.value, __onfocus.set, None, None)


    _ElementMap = {
        __option.name() : __option,
        __optgroup.name() : __optgroup
    }
    _AttributeMap = {
        __onkeyup.name() : __onkeyup,
        __onmousedown.name() : __onmousedown,
        __ondblclick.name() : __ondblclick,
        __lang.name() : __lang,
        __name.name() : __name,
        __onclick.name() : __onclick,
        __size.name() : __size,
        __onkeydown.name() : __onkeydown,
        __onmouseout.name() : __onmouseout,
        __multiple.name() : __multiple,
        __disabled.name() : __disabled,
        __class.name() : __class,
        __tabindex.name() : __tabindex,
        __title.name() : __title,
        __onmouseup.name() : __onmouseup,
        __dir.name() : __dir,
        __lang_.name() : __lang_,
        __onblur.name() : __onblur,
        __style.name() : __style,
        __onkeypress.name() : __onkeypress,
        __onchange.name() : __onchange,
        __onmouseover.name() : __onmouseover,
        __onmousemove.name() : __onmousemove,
        __id.name() : __id,
        __onfocus.name() : __onfocus
    }



# Complex type CTD_ANON_27 with content type MIXED
class CTD_ANON_27 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_27_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_27_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_27_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_27_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_27_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_27_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute cite uses Python identifier cite_
    __cite_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cite'), 'cite_', '__httpwww_w3_org1999xhtml_CTD_ANON_27_cite', URI)
    
    cite_ = property(__cite_.value, __cite_.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_27_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_27_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_27_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_27_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_27_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_27_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_27_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_27_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_27_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_27_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_27_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __class.name() : __class,
        __ondblclick.name() : __ondblclick,
        __onmouseout.name() : __onmouseout,
        __title.name() : __title,
        __onmousemove.name() : __onmousemove,
        __style.name() : __style,
        __cite_.name() : __cite_,
        __onmouseover.name() : __onmouseover,
        __lang_.name() : __lang_,
        __onmousedown.name() : __onmousedown,
        __onkeypress.name() : __onkeypress,
        __onclick.name() : __onclick,
        __onmouseup.name() : __onmouseup,
        __onkeydown.name() : __onkeydown,
        __onkeyup.name() : __onkeyup,
        __id.name() : __id,
        __dir.name() : __dir,
        __lang.name() : __lang
    })



# Complex type CTD_ANON_28 with content type MIXED
class CTD_ANON_28 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_28_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_28_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_28_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_28_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_28_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_28_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_28_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_28_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_28_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_28_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_28_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_28_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_28_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_28_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_28_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_28_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_28_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __style.name() : __style,
        __onkeyup.name() : __onkeyup,
        __dir.name() : __dir,
        __onkeydown.name() : __onkeydown,
        __title.name() : __title,
        __onmouseup.name() : __onmouseup,
        __onmouseout.name() : __onmouseout,
        __onmousemove.name() : __onmousemove,
        __ondblclick.name() : __ondblclick,
        __id.name() : __id,
        __onkeypress.name() : __onkeypress,
        __class.name() : __class,
        __onmouseover.name() : __onmouseover,
        __onclick.name() : __onclick,
        __lang_.name() : __lang_,
        __lang.name() : __lang,
        __onmousedown.name() : __onmousedown
    })



# Complex type CTD_ANON_29 with content type MIXED
class CTD_ANON_29 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_29_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_29_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_29_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_29_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_29_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_29_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_29_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_29_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_29_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_29_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_29_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_29_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_29_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_29_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_29_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_29_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_29_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseover.name() : __onmouseover,
        __class.name() : __class,
        __onmouseout.name() : __onmouseout,
        __onkeyup.name() : __onkeyup,
        __onclick.name() : __onclick,
        __style.name() : __style,
        __onkeypress.name() : __onkeypress,
        __onmousedown.name() : __onmousedown,
        __title.name() : __title,
        __dir.name() : __dir,
        __onmouseup.name() : __onmouseup,
        __onkeydown.name() : __onkeydown,
        __ondblclick.name() : __ondblclick,
        __lang_.name() : __lang_,
        __id.name() : __id,
        __onmousemove.name() : __onmousemove,
        __lang.name() : __lang
    })



# Complex type Block with content type ELEMENT_ONLY
class Block (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Block')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}h6 uses Python identifier h6
    __h6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h6'), 'h6', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlh6', True)

    
    h6 = property(__h6.value, __h6.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}table uses Python identifier table
    __table = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmltable', True)

    
    table = property(__table.value, __table.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ol uses Python identifier ol
    __ol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ol'), 'ol', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlol', True)

    
    ol = property(__ol.value, __ol.set, None, u'\n      Ordered (numbered) list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}form uses Python identifier form
    __form = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'form'), 'form', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlform', True)

    
    form = property(__form.value, __form.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}hr uses Python identifier hr
    __hr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'hr'), 'hr', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlhr', True)

    
    hr = property(__hr.value, __hr.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ul'), 'ul', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlul', True)

    
    ul = property(__ul.value, __ul.set, None, u'\n      Unordered list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}noscript uses Python identifier noscript
    __noscript = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'noscript'), 'noscript', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlnoscript', True)

    
    noscript = property(__noscript.value, __noscript.set, None, u'\n      alternate content container for non script-based rendering\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'p'), 'p', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlp', True)

    
    p = property(__p.value, __p.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}div uses Python identifier div
    __div = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'div'), 'div', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmldiv', True)

    
    div = property(__div.value, __div.set, None, u'\n      generic language/style container      \n      ')

    
    # Element {http://www.w3.org/1999/xhtml}dl uses Python identifier dl
    __dl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dl'), 'dl', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmldl', True)

    
    dl = property(__dl.value, __dl.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h1 uses Python identifier h1
    __h1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h1'), 'h1', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlh1', True)

    
    h1 = property(__h1.value, __h1.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}pre uses Python identifier pre
    __pre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pre'), 'pre', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlpre', True)

    
    pre = property(__pre.value, __pre.set, None, u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h2 uses Python identifier h2
    __h2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h2'), 'h2', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlh2', True)

    
    h2 = property(__h2.value, __h2.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h3 uses Python identifier h3
    __h3 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h3'), 'h3', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlh3', True)

    
    h3 = property(__h3.value, __h3.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}blockquote uses Python identifier blockquote
    __blockquote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), 'blockquote', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlblockquote', True)

    
    blockquote = property(__blockquote.value, __blockquote.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h4 uses Python identifier h4
    __h4 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h4'), 'h4', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlh4', True)

    
    h4 = property(__h4.value, __h4.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}address uses Python identifier address
    __address = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'address'), 'address', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmladdress', True)

    
    address = property(__address.value, __address.set, None, u'\n      information on author\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h5 uses Python identifier h5
    __h5 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h5'), 'h5', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlh5', True)

    
    h5 = property(__h5.value, __h5.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}fieldset uses Python identifier fieldset
    __fieldset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), 'fieldset', '__httpwww_w3_org1999xhtml_Block_httpwww_w3_org1999xhtmlfieldset', True)

    
    fieldset = property(__fieldset.value, __fieldset.set, None, u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      ')


    _ElementMap = {
        __h6.name() : __h6,
        __table.name() : __table,
        __ol.name() : __ol,
        __form.name() : __form,
        __hr.name() : __hr,
        __ul.name() : __ul,
        __noscript.name() : __noscript,
        __p.name() : __p,
        __div.name() : __div,
        __dl.name() : __dl,
        __ins.name() : __ins,
        __h1.name() : __h1,
        __del.name() : __del,
        __pre.name() : __pre,
        __h2.name() : __h2,
        __script.name() : __script,
        __h3.name() : __h3,
        __blockquote.name() : __blockquote,
        __h4.name() : __h4,
        __address.name() : __address,
        __h5.name() : __h5,
        __fieldset.name() : __fieldset
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'Block', Block)


# Complex type CTD_ANON_30 with content type ELEMENT_ONLY
class CTD_ANON_30 (Block):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is Block
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_30_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_30_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_30_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_30_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_30_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_30_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_30_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_30_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_30_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_30_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_30_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_30_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_30_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_30_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_30_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute cite uses Python identifier cite
    __cite = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cite'), 'cite', '__httpwww_w3_org1999xhtml_CTD_ANON_30_cite', URI)
    
    cite = property(__cite.value, __cite.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_30_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_30_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)


    _ElementMap = Block._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Block._AttributeMap.copy()
    _AttributeMap.update({
        __id.name() : __id,
        __dir.name() : __dir,
        __onclick.name() : __onclick,
        __onmousedown.name() : __onmousedown,
        __onmouseover.name() : __onmouseover,
        __onkeyup.name() : __onkeyup,
        __lang.name() : __lang,
        __style.name() : __style,
        __class.name() : __class,
        __ondblclick.name() : __ondblclick,
        __onkeydown.name() : __onkeydown,
        __lang_.name() : __lang_,
        __title.name() : __title,
        __onmouseout.name() : __onmouseout,
        __onmousemove.name() : __onmousemove,
        __cite.name() : __cite,
        __onmouseup.name() : __onmouseup,
        __onkeypress.name() : __onkeypress
    })



# Complex type CTD_ANON_31 with content type EMPTY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_31_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_31_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_31_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_31_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_31_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_31_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_31_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_31_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_31_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_31_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_31_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_31_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_31_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_31_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_31_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_31_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_31_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __onmousedown.name() : __onmousedown,
        __title.name() : __title,
        __id.name() : __id,
        __onkeyup.name() : __onkeyup,
        __lang.name() : __lang,
        __onmouseover.name() : __onmouseover,
        __onmouseout.name() : __onmouseout,
        __dir.name() : __dir,
        __ondblclick.name() : __ondblclick,
        __onkeypress.name() : __onkeypress,
        __onclick.name() : __onclick,
        __onmouseup.name() : __onmouseup,
        __onkeydown.name() : __onkeydown,
        __lang_.name() : __lang_,
        __style.name() : __style,
        __onmousemove.name() : __onmousemove,
        __class.name() : __class
    }



# Complex type CTD_ANON_32 with content type MIXED
class CTD_ANON_32 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_32_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_32_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_32_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_32_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_32_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_32_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_32_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_32_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_32_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_32_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_32_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_32_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_32_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_32_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_32_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_32_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_32_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseup.name() : __onmouseup,
        __onclick.name() : __onclick,
        __onmousedown.name() : __onmousedown,
        __id.name() : __id,
        __ondblclick.name() : __ondblclick,
        __onmouseover.name() : __onmouseover,
        __class.name() : __class,
        __onkeyup.name() : __onkeyup,
        __onmouseout.name() : __onmouseout,
        __lang.name() : __lang,
        __dir.name() : __dir,
        __style.name() : __style,
        __onkeydown.name() : __onkeydown,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __onmousemove.name() : __onmousemove,
        __lang_.name() : __lang_
    })



# Complex type CTD_ANON_33 with content type MIXED
class CTD_ANON_33 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_33_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_33_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_33_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_33_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_33_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_33_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_33_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_33_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_33_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_33_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_33_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_33_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_33_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_33_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_33_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_33_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_33_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseout.name() : __onmouseout,
        __class.name() : __class,
        __lang_.name() : __lang_,
        __onmousemove.name() : __onmousemove,
        __onkeydown.name() : __onkeydown,
        __id.name() : __id,
        __title.name() : __title,
        __onkeypress.name() : __onkeypress,
        __onclick.name() : __onclick,
        __style.name() : __style,
        __onmouseup.name() : __onmouseup,
        __dir.name() : __dir,
        __onmouseover.name() : __onmouseover,
        __ondblclick.name() : __ondblclick,
        __onkeyup.name() : __onkeyup,
        __onmousedown.name() : __onmousedown,
        __lang.name() : __lang
    })



# Complex type CTD_ANON_34 with content type MIXED
class CTD_ANON_34 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_34_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_34_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_34_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_34_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_34_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_34_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_34_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_34_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_34_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_34_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_34_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_34_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_34_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_34_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_34_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_34_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_34_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseover.name() : __onmouseover,
        __onkeypress.name() : __onkeypress,
        __onmousemove.name() : __onmousemove,
        __id.name() : __id,
        __title.name() : __title,
        __onkeyup.name() : __onkeyup,
        __lang_.name() : __lang_,
        __onmouseup.name() : __onmouseup,
        __ondblclick.name() : __ondblclick,
        __onkeydown.name() : __onkeydown,
        __onmousedown.name() : __onmousedown,
        __class.name() : __class,
        __onclick.name() : __onclick,
        __lang.name() : __lang,
        __dir.name() : __dir,
        __style.name() : __style,
        __onmouseout.name() : __onmouseout
    })



# Complex type CTD_ANON_35 with content type MIXED
class CTD_ANON_35 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_35_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_35_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_35_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_35_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_35_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_35_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_35_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_35_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_35_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_35_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_35_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_35_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_35_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_35_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_35_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_35_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_35_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __ondblclick.name() : __ondblclick,
        __onmousedown.name() : __onmousedown,
        __onkeydown.name() : __onkeydown,
        __class.name() : __class,
        __lang.name() : __lang,
        __onmousemove.name() : __onmousemove,
        __onmouseout.name() : __onmouseout,
        __style.name() : __style,
        __onkeypress.name() : __onkeypress,
        __dir.name() : __dir,
        __title.name() : __title,
        __onclick.name() : __onclick,
        __lang_.name() : __lang_,
        __onmouseover.name() : __onmouseover,
        __onmouseup.name() : __onmouseup,
        __id.name() : __id,
        __onkeyup.name() : __onkeyup
    })



# Complex type CTD_ANON_36 with content type MIXED
class CTD_ANON_36 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_36_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_36_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_36_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_36_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_36_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_36_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_36_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_36_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_36_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_36_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_36_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_36_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_36_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_36_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_36_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_36_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_36_title', Text)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __dir.name() : __dir,
        __onkeydown.name() : __onkeydown,
        __onmouseover.name() : __onmouseover,
        __onkeypress.name() : __onkeypress,
        __lang_.name() : __lang_,
        __onclick.name() : __onclick,
        __onmousemove.name() : __onmousemove,
        __onmouseup.name() : __onmouseup,
        __ondblclick.name() : __ondblclick,
        __id.name() : __id,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown,
        __lang.name() : __lang,
        __onmouseout.name() : __onmouseout,
        __onkeyup.name() : __onkeyup,
        __style.name() : __style,
        __title.name() : __title
    })



# Complex type CTD_ANON_37 with content type MIXED
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'br'), 'br', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlbr', True)

    
    br = property(__br.value, __br.set, None, u'\n      forced line break\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}hr uses Python identifier hr
    __hr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'hr'), 'hr', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlhr', True)

    
    hr = property(__hr.value, __hr.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}big uses Python identifier big
    __big = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'big'), 'big', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlbig', True)

    
    big = property(__big.value, __big.set, None, u'\n      bigger font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}code uses Python identifier code
    __code = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'code'), 'code', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlcode', True)

    
    code = property(__code.value, __code.set, None, u'\n      program code\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bdo'), 'bdo', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'\n      I18N BiDi over-ride\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h2 uses Python identifier h2
    __h2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h2'), 'h2', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlh2', True)

    
    h2 = property(__h2.value, __h2.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sup'), 'sup', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlsup', True)

    
    sup = property(__sup.value, __sup.set, None, u'\n      superscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}tt uses Python identifier tt
    __tt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tt'), 'tt', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmltt', True)

    
    tt = property(__tt.value, __tt.set, None, u'\n      fixed pitch font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}span uses Python identifier span
    __span = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'span'), 'span', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlspan', True)

    
    span = property(__span.value, __span.set, None, u'\n      generic language/style container\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}legend uses Python identifier legend
    __legend = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'legend'), 'legend', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmllegend', False)

    
    legend = property(__legend.value, __legend.set, None, u'\n      fieldset label\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sub'), 'sub', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlsub', True)

    
    sub = property(__sub.value, __sub.set, None, u'\n      subscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}object uses Python identifier object
    __object = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'object'), 'object', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlobject', True)

    
    object = property(__object.value, __object.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}table uses Python identifier table
    __table = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmltable', True)

    
    table = property(__table.value, __table.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h6 uses Python identifier h6
    __h6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h6'), 'h6', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlh6', True)

    
    h6 = property(__h6.value, __h6.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}address uses Python identifier address
    __address = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'address'), 'address', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmladdress', True)

    
    address = property(__address.value, __address.set, None, u'\n      information on author\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}img uses Python identifier img
    __img = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'img'), 'img', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlimg', True)

    
    img = property(__img.value, __img.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}div uses Python identifier div
    __div = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'div'), 'div', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmldiv', True)

    
    div = property(__div.value, __div.set, None, u'\n      generic language/style container      \n      ')

    
    # Element {http://www.w3.org/1999/xhtml}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'em'), 'em', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlem', True)

    
    em = property(__em.value, __em.set, None, u'\n      emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}q uses Python identifier q
    __q = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'q'), 'q', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlq', True)

    
    q = property(__q.value, __q.set, None, u'\n      inlined quote\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlacronym', True)

    
    acronym = property(__acronym.value, __acronym.set, None, u'\n      acronym\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}select uses Python identifier select
    __select = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'select'), 'select', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlselect', True)

    
    select = property(__select.value, __select.set, None, u'\n      option selector\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}abbr uses Python identifier abbr
    __abbr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'abbr'), 'abbr', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlabbr', True)

    
    abbr = property(__abbr.value, __abbr.set, None, u'\n      abbreviation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}samp uses Python identifier samp
    __samp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'samp'), 'samp', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlsamp', True)

    
    samp = property(__samp.value, __samp.set, None, u'\n      sample\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h5 uses Python identifier h5
    __h5 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h5'), 'h5', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlh5', True)

    
    h5 = property(__h5.value, __h5.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}textarea uses Python identifier textarea
    __textarea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'textarea'), 'textarea', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmltextarea', True)

    
    textarea = property(__textarea.value, __textarea.set, None, u'\n      multi-line text field\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ul'), 'ul', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlul', True)

    
    ul = property(__ul.value, __ul.set, None, u'\n      Unordered list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}input uses Python identifier input
    __input = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'input'), 'input', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlinput', True)

    
    input = property(__input.value, __input.set, None, u'\n      form control\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}kbd uses Python identifier kbd
    __kbd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'kbd'), 'kbd', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlkbd', True)

    
    kbd = property(__kbd.value, __kbd.set, None, u'\n      something user would type\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}label uses Python identifier label
    __label = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'label'), 'label', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmllabel', True)

    
    label = property(__label.value, __label.set, None, u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      ")

    
    # Element {http://www.w3.org/1999/xhtml}form uses Python identifier form
    __form = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'form'), 'form', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlform', True)

    
    form = property(__form.value, __form.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ol uses Python identifier ol
    __ol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ol'), 'ol', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlol', True)

    
    ol = property(__ol.value, __ol.set, None, u'\n      Ordered (numbered) list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h4 uses Python identifier h4
    __h4 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h4'), 'h4', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlh4', True)

    
    h4 = property(__h4.value, __h4.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlb', True)

    
    b = property(__b.value, __b.set, None, u'\n      bold font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}fieldset uses Python identifier fieldset
    __fieldset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), 'fieldset', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlfieldset', True)

    
    fieldset = property(__fieldset.value, __fieldset.set, None, u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}button uses Python identifier button
    __button = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'button'), 'button', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlbutton', True)

    
    button = property(__button.value, __button.set, None, u'\n      Content is "Flow" excluding a, form and form controls\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}dfn uses Python identifier dfn
    __dfn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dfn'), 'dfn', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmldfn', True)

    
    dfn = property(__dfn.value, __dfn.set, None, u'\n      definitional\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}dl uses Python identifier dl
    __dl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dl'), 'dl', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmldl', True)

    
    dl = property(__dl.value, __dl.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmli', True)

    
    i = property(__i.value, __i.set, None, u'\n      italic font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}blockquote uses Python identifier blockquote
    __blockquote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), 'blockquote', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlblockquote', True)

    
    blockquote = property(__blockquote.value, __blockquote.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'p'), 'p', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlp', True)

    
    p = property(__p.value, __p.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}a uses Python identifier a
    __a = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'a'), 'a', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmla', True)

    
    a = property(__a.value, __a.set, None, u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}map uses Python identifier map
    __map = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'map'), 'map', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlmap', True)

    
    map = property(__map.value, __map.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}noscript uses Python identifier noscript
    __noscript = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'noscript'), 'noscript', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlnoscript', True)

    
    noscript = property(__noscript.value, __noscript.set, None, u'\n      alternate content container for non script-based rendering\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}var uses Python identifier var
    __var = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'var'), 'var', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlvar', True)

    
    var = property(__var.value, __var.set, None, u'\n      variable\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h1 uses Python identifier h1
    __h1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h1'), 'h1', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlh1', True)

    
    h1 = property(__h1.value, __h1.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h3 uses Python identifier h3
    __h3 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h3'), 'h3', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlh3', True)

    
    h3 = property(__h3.value, __h3.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}small uses Python identifier small
    __small = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'small'), 'small', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlsmall', True)

    
    small = property(__small.value, __small.set, None, u'\n      smaller font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}cite uses Python identifier cite
    __cite = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cite'), 'cite', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlcite', True)

    
    cite = property(__cite.value, __cite.set, None, u'\n      citation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}pre uses Python identifier pre
    __pre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pre'), 'pre', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlpre', True)

    
    pre = property(__pre.value, __pre.set, None, u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}strong uses Python identifier strong
    __strong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'strong'), 'strong', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_org1999xhtmlstrong', True)

    
    strong = property(__strong.value, __strong.set, None, u'\n      strong emphasis\n      ')

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_37_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_37_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_37_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_37_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_37_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_37_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_37_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_37_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_37_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_37_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_37_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_37_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_37_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_37_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_37_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_37_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_37_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)


    _ElementMap = {
        __br.name() : __br,
        __hr.name() : __hr,
        __big.name() : __big,
        __ins.name() : __ins,
        __code.name() : __code,
        __bdo.name() : __bdo,
        __del.name() : __del,
        __h2.name() : __h2,
        __sup.name() : __sup,
        __tt.name() : __tt,
        __span.name() : __span,
        __script.name() : __script,
        __legend.name() : __legend,
        __sub.name() : __sub,
        __object.name() : __object,
        __table.name() : __table,
        __h6.name() : __h6,
        __address.name() : __address,
        __img.name() : __img,
        __div.name() : __div,
        __em.name() : __em,
        __q.name() : __q,
        __acronym.name() : __acronym,
        __select.name() : __select,
        __abbr.name() : __abbr,
        __samp.name() : __samp,
        __h5.name() : __h5,
        __textarea.name() : __textarea,
        __ul.name() : __ul,
        __input.name() : __input,
        __kbd.name() : __kbd,
        __label.name() : __label,
        __form.name() : __form,
        __ol.name() : __ol,
        __h4.name() : __h4,
        __b.name() : __b,
        __fieldset.name() : __fieldset,
        __button.name() : __button,
        __dfn.name() : __dfn,
        __dl.name() : __dl,
        __i.name() : __i,
        __blockquote.name() : __blockquote,
        __p.name() : __p,
        __a.name() : __a,
        __map.name() : __map,
        __noscript.name() : __noscript,
        __var.name() : __var,
        __h1.name() : __h1,
        __h3.name() : __h3,
        __small.name() : __small,
        __cite.name() : __cite,
        __pre.name() : __pre,
        __strong.name() : __strong
    }
    _AttributeMap = {
        __title.name() : __title,
        __lang_.name() : __lang_,
        __onclick.name() : __onclick,
        __onmouseover.name() : __onmouseover,
        __onkeypress.name() : __onkeypress,
        __onmouseup.name() : __onmouseup,
        __onmousedown.name() : __onmousedown,
        __onkeyup.name() : __onkeyup,
        __class.name() : __class,
        __id.name() : __id,
        __dir.name() : __dir,
        __ondblclick.name() : __ondblclick,
        __onmouseout.name() : __onmouseout,
        __style.name() : __style,
        __lang.name() : __lang,
        __onkeydown.name() : __onkeydown,
        __onmousemove.name() : __onmousemove
    }



# Complex type CTD_ANON_38 with content type MIXED
class CTD_ANON_38 (Flow):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Flow
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_38_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute datetime uses Python identifier datetime
    __datetime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'datetime'), 'datetime', '__httpwww_w3_org1999xhtml_CTD_ANON_38_datetime', Datetime)
    
    datetime = property(__datetime.value, __datetime.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_38_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_38_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_38_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_38_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_38_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_38_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_38_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_38_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_38_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_38_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute cite uses Python identifier cite_
    __cite_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cite'), 'cite_', '__httpwww_w3_org1999xhtml_CTD_ANON_38_cite', URI)
    
    cite_ = property(__cite_.value, __cite_.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_38_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_38_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_38_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_38_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_38_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_38_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Flow._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Flow._AttributeMap.copy()
    _AttributeMap.update({
        __style.name() : __style,
        __datetime.name() : __datetime,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown,
        __onmouseup.name() : __onmouseup,
        __onclick.name() : __onclick,
        __lang_.name() : __lang_,
        __id.name() : __id,
        __onmousemove.name() : __onmousemove,
        __onkeyup.name() : __onkeyup,
        __onmouseover.name() : __onmouseover,
        __ondblclick.name() : __ondblclick,
        __cite_.name() : __cite_,
        __dir.name() : __dir,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __onmouseout.name() : __onmouseout,
        __lang.name() : __lang,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_39 with content type MIXED
class CTD_ANON_39 (Flow):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Flow
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_39_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_39_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpwww_w3_org1999xhtml_CTD_ANON_39_char', Character)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute abbr uses Python identifier abbr_
    __abbr_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'abbr'), 'abbr_', '__httpwww_w3_org1999xhtml_CTD_ANON_39_abbr', Text)
    
    abbr_ = property(__abbr_.value, __abbr_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_39_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_39_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpwww_w3_org1999xhtml_CTD_ANON_39_axis', pyxb.binding.datatypes.anySimpleType)
    
    axis = property(__axis.value, __axis.set, None, None)

    
    # Attribute headers uses Python identifier headers
    __headers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headers'), 'headers', '__httpwww_w3_org1999xhtml_CTD_ANON_39_headers', pyxb.binding.datatypes.IDREFS)
    
    headers = property(__headers.value, __headers.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_39_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_39_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'align'), 'align', '__httpwww_w3_org1999xhtml_CTD_ANON_39_align', STD_ANON_11)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charoff'), 'charoff', '__httpwww_w3_org1999xhtml_CTD_ANON_39_charoff', Length)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute rowspan uses Python identifier rowspan
    __rowspan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowspan'), 'rowspan', '__httpwww_w3_org1999xhtml_CTD_ANON_39_rowspan', Number, unicode_default=u'1')
    
    rowspan = property(__rowspan.value, __rowspan.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_39_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_39_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_39_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_39_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_39_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_39_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_39_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_39_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scope'), 'scope', '__httpwww_w3_org1999xhtml_CTD_ANON_39_scope', Scope)
    
    scope = property(__scope.value, __scope.set, None, None)

    
    # Attribute colspan uses Python identifier colspan
    __colspan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'colspan'), 'colspan', '__httpwww_w3_org1999xhtml_CTD_ANON_39_colspan', Number, unicode_default=u'1')
    
    colspan = property(__colspan.value, __colspan.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_39_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_39_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_39_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__httpwww_w3_org1999xhtml_CTD_ANON_39_valign', STD_ANON_10)
    
    valign = property(__valign.value, __valign.set, None, None)


    _ElementMap = Flow._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Flow._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseup.name() : __onmouseup,
        __onkeyup.name() : __onkeyup,
        __char.name() : __char,
        __abbr_.name() : __abbr_,
        __id.name() : __id,
        __onkeypress.name() : __onkeypress,
        __axis.name() : __axis,
        __headers.name() : __headers,
        __ondblclick.name() : __ondblclick,
        __onmouseover.name() : __onmouseover,
        __align.name() : __align,
        __charoff.name() : __charoff,
        __rowspan.name() : __rowspan,
        __onmouseout.name() : __onmouseout,
        __lang.name() : __lang,
        __title.name() : __title,
        __onclick.name() : __onclick,
        __onkeydown.name() : __onkeydown,
        __dir.name() : __dir,
        __onmousemove.name() : __onmousemove,
        __class.name() : __class,
        __scope.name() : __scope,
        __colspan.name() : __colspan,
        __style.name() : __style,
        __onmousedown.name() : __onmousedown,
        __lang_.name() : __lang_,
        __valign.name() : __valign
    })



# Complex type CTD_ANON_40 with content type MIXED
class CTD_ANON_40 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_40_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_40_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_40_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_40_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_40_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_40_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_40_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_40_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_40_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_40_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_40_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_40_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_40_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_40_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_40_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_40_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_40_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onkeypress.name() : __onkeypress,
        __ondblclick.name() : __ondblclick,
        __title.name() : __title,
        __onmousemove.name() : __onmousemove,
        __onmousedown.name() : __onmousedown,
        __onmouseup.name() : __onmouseup,
        __lang_.name() : __lang_,
        __class.name() : __class,
        __onkeydown.name() : __onkeydown,
        __id.name() : __id,
        __onmouseover.name() : __onmouseover,
        __onmouseout.name() : __onmouseout,
        __lang.name() : __lang,
        __dir.name() : __dir,
        __style.name() : __style,
        __onkeyup.name() : __onkeyup,
        __onclick.name() : __onclick
    })



# Complex type CTD_ANON_41 with content type EMPTY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_41_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_w3_org1999xhtml_CTD_ANON_41_type', ContentType)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_41_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_41_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute media uses Python identifier media
    __media = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'media'), 'media', '__httpwww_w3_org1999xhtml_CTD_ANON_41_media', MediaDesc)
    
    media = property(__media.value, __media.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_41_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_41_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_w3_org1999xhtml_CTD_ANON_41_href', URI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute charset uses Python identifier charset
    __charset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charset'), 'charset', '__httpwww_w3_org1999xhtml_CTD_ANON_41_charset', Charset)
    
    charset = property(__charset.value, __charset.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_41_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute hreflang uses Python identifier hreflang
    __hreflang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hreflang'), 'hreflang', '__httpwww_w3_org1999xhtml_CTD_ANON_41_hreflang', LanguageCode)
    
    hreflang = property(__hreflang.value, __hreflang.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_41_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_41_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_41_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute rel uses Python identifier rel
    __rel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rel'), 'rel', '__httpwww_w3_org1999xhtml_CTD_ANON_41_rel', LinkTypes)
    
    rel = property(__rel.value, __rel.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_41_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_41_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_41_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_41_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute rev uses Python identifier rev
    __rev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rev'), 'rev', '__httpwww_w3_org1999xhtml_CTD_ANON_41_rev', LinkTypes)
    
    rev = property(__rev.value, __rev.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_41_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_41_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_41_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_41_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __onmouseover.name() : __onmouseover,
        __type.name() : __type,
        __class.name() : __class,
        __onkeypress.name() : __onkeypress,
        __media.name() : __media,
        __onkeyup.name() : __onkeyup,
        __ondblclick.name() : __ondblclick,
        __href.name() : __href,
        __charset.name() : __charset,
        __onmouseout.name() : __onmouseout,
        __hreflang.name() : __hreflang,
        __lang.name() : __lang,
        __onclick.name() : __onclick,
        __lang_.name() : __lang_,
        __rel.name() : __rel,
        __onmousedown.name() : __onmousedown,
        __title.name() : __title,
        __onkeydown.name() : __onkeydown,
        __id.name() : __id,
        __rev.name() : __rev,
        __onmouseup.name() : __onmouseup,
        __style.name() : __style,
        __dir.name() : __dir,
        __onmousemove.name() : __onmousemove
    }



# Complex type CTD_ANON_42 with content type MIXED
class CTD_ANON_42 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_42_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_42_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_42_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_42_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_42_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_42_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_42_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_42_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_42_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_42_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_42_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_42_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_42_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_42_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_42_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_42_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_42_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmousemove.name() : __onmousemove,
        __lang_.name() : __lang_,
        __dir.name() : __dir,
        __ondblclick.name() : __ondblclick,
        __onmouseup.name() : __onmouseup,
        __onmouseout.name() : __onmouseout,
        __id.name() : __id,
        __onmouseover.name() : __onmouseover,
        __onclick.name() : __onclick,
        __lang.name() : __lang,
        __style.name() : __style,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __onkeyup.name() : __onkeyup,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_43 with content type MIXED
class CTD_ANON_43 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_43_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_43_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_43_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_43_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_43_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_43_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_43_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_43_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_43_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_43_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_43_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_43_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_43_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_43_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_43_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_43_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_43_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __ondblclick.name() : __ondblclick,
        __onkeydown.name() : __onkeydown,
        __id.name() : __id,
        __lang_.name() : __lang_,
        __onmouseover.name() : __onmouseover,
        __onmouseup.name() : __onmouseup,
        __lang.name() : __lang,
        __onmouseout.name() : __onmouseout,
        __class.name() : __class,
        __style.name() : __style,
        __onkeypress.name() : __onkeypress,
        __onclick.name() : __onclick,
        __onkeyup.name() : __onkeyup,
        __title.name() : __title,
        __onmousemove.name() : __onmousemove,
        __dir.name() : __dir,
        __onmousedown.name() : __onmousedown
    })



# Complex type CTD_ANON_44 with content type MIXED
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute src uses Python identifier src
    __src = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'src'), 'src', '__httpwww_w3_org1999xhtml_CTD_ANON_44_src', URI)
    
    src = property(__src.value, __src.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_44_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute charset uses Python identifier charset
    __charset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charset'), 'charset', '__httpwww_w3_org1999xhtml_CTD_ANON_44_charset', Charset)
    
    charset = property(__charset.value, __charset.set, None, None)

    
    # Attribute defer uses Python identifier defer
    __defer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defer'), 'defer', '__httpwww_w3_org1999xhtml_CTD_ANON_44_defer', STD_ANON_12)
    
    defer = property(__defer.value, __defer.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_w3_org1999xhtml_CTD_ANON_44_type', ContentType, required=True)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'space'), 'space', '__httpwww_w3_org1999xhtml_CTD_ANON_44_httpwww_w3_orgXML1998namespacespace', pyxb.binding.xml_.STD_ANON_space, fixed=True, unicode_default=u'preserve')
    
    space = property(__space.value, __space.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __src.name() : __src,
        __id.name() : __id,
        __charset.name() : __charset,
        __defer.name() : __defer,
        __type.name() : __type,
        __space.name() : __space
    }



# Complex type CTD_ANON_45 with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}li uses Python identifier li
    __li = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'li'), 'li', '__httpwww_w3_org1999xhtml_CTD_ANON_45_httpwww_w3_org1999xhtmlli', True)

    
    li = property(__li.value, __li.set, None, u'\n      list item\n      ')

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_45_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_45_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_45_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_45_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_45_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_45_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_45_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_45_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_45_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_45_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_45_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_45_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_45_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_45_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_45_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_45_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_45_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = {
        __li.name() : __li
    }
    _AttributeMap = {
        __onmousemove.name() : __onmousemove,
        __lang_.name() : __lang_,
        __onmouseout.name() : __onmouseout,
        __id.name() : __id,
        __ondblclick.name() : __ondblclick,
        __onmouseover.name() : __onmouseover,
        __class.name() : __class,
        __onclick.name() : __onclick,
        __lang.name() : __lang,
        __style.name() : __style,
        __onmouseup.name() : __onmouseup,
        __onmousedown.name() : __onmousedown,
        __onkeypress.name() : __onkeypress,
        __dir.name() : __dir,
        __title.name() : __title,
        __onkeyup.name() : __onkeyup,
        __onkeydown.name() : __onkeydown
    }



# Complex type CTD_ANON_46 with content type ELEMENT_ONLY
class CTD_ANON_46 (Block):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is Block
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_46_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_46_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_46_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_46_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_46_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_46_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_46_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_46_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_46_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_46_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_46_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_46_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_46_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_46_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_46_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_46_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_46_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Block._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Block._AttributeMap.copy()
    _AttributeMap.update({
        __lang.name() : __lang,
        __style.name() : __style,
        __onmousemove.name() : __onmousemove,
        __onmouseout.name() : __onmouseout,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __class.name() : __class,
        __onclick.name() : __onclick,
        __onmouseup.name() : __onmouseup,
        __dir.name() : __dir,
        __lang_.name() : __lang_,
        __onmousedown.name() : __onmousedown,
        __id.name() : __id,
        __ondblclick.name() : __ondblclick,
        __onmouseover.name() : __onmouseover,
        __onkeyup.name() : __onkeyup,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_47 with content type EMPTY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_47_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onfocus uses Python identifier onfocus
    __onfocus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onfocus'), 'onfocus', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onfocus', Script)
    
    onfocus = property(__onfocus.value, __onfocus.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_47_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onblur uses Python identifier onblur
    __onblur = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onblur'), 'onblur', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onblur', Script)
    
    onblur = property(__onblur.value, __onblur.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_47_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute accesskey uses Python identifier accesskey
    __accesskey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accesskey'), 'accesskey', '__httpwww_w3_org1999xhtml_CTD_ANON_47_accesskey', Character)
    
    accesskey = property(__accesskey.value, __accesskey.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_47_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_47_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_47_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_47_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute shape uses Python identifier shape
    __shape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shape'), 'shape', '__httpwww_w3_org1999xhtml_CTD_ANON_47_shape', Shape, unicode_default=u'rect')
    
    shape = property(__shape.value, __shape.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute coords uses Python identifier coords
    __coords = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coords'), 'coords', '__httpwww_w3_org1999xhtml_CTD_ANON_47_coords', Coords)
    
    coords = property(__coords.value, __coords.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_w3_org1999xhtml_CTD_ANON_47_href', URI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute nohref uses Python identifier nohref
    __nohref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nohref'), 'nohref', '__httpwww_w3_org1999xhtml_CTD_ANON_47_nohref', STD_ANON_13)
    
    nohref = property(__nohref.value, __nohref.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_47_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute tabindex uses Python identifier tabindex
    __tabindex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabindex'), 'tabindex', '__httpwww_w3_org1999xhtml_CTD_ANON_47_tabindex', tabindexNumber)
    
    tabindex = property(__tabindex.value, __tabindex.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_47_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute alt uses Python identifier alt
    __alt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'alt'), 'alt', '__httpwww_w3_org1999xhtml_CTD_ANON_47_alt', Text, required=True)
    
    alt = property(__alt.value, __alt.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __onmouseover.name() : __onmouseover,
        __onmousemove.name() : __onmousemove,
        __onmouseup.name() : __onmouseup,
        __class.name() : __class,
        __onfocus.name() : __onfocus,
        __onkeyup.name() : __onkeyup,
        __onkeypress.name() : __onkeypress,
        __dir.name() : __dir,
        __onblur.name() : __onblur,
        __ondblclick.name() : __ondblclick,
        __accesskey.name() : __accesskey,
        __lang.name() : __lang,
        __title.name() : __title,
        __onclick.name() : __onclick,
        __id.name() : __id,
        __style.name() : __style,
        __shape.name() : __shape,
        __onkeydown.name() : __onkeydown,
        __coords.name() : __coords,
        __onmouseout.name() : __onmouseout,
        __href.name() : __href,
        __nohref.name() : __nohref,
        __onmousedown.name() : __onmousedown,
        __tabindex.name() : __tabindex,
        __lang_.name() : __lang_,
        __alt.name() : __alt
    }



# Complex type CTD_ANON_48 with content type MIXED
class CTD_ANON_48 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_48_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_48_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_48_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_48_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_48_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_48_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_48_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_48_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_48_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_48_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_48_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute accesskey uses Python identifier accesskey
    __accesskey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accesskey'), 'accesskey', '__httpwww_w3_org1999xhtml_CTD_ANON_48_accesskey', Character)
    
    accesskey = property(__accesskey.value, __accesskey.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_48_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_48_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_48_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_48_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_48_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_48_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmousemove.name() : __onmousemove,
        __lang_.name() : __lang_,
        __ondblclick.name() : __ondblclick,
        __onmouseover.name() : __onmouseover,
        __onmousedown.name() : __onmousedown,
        __onkeyup.name() : __onkeyup,
        __onmouseout.name() : __onmouseout,
        __onkeypress.name() : __onkeypress,
        __onmouseup.name() : __onmouseup,
        __lang.name() : __lang,
        __style.name() : __style,
        __accesskey.name() : __accesskey,
        __title.name() : __title,
        __class.name() : __class,
        __dir.name() : __dir,
        __id.name() : __id,
        __onclick.name() : __onclick,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_49 with content type ELEMENT_ONLY
class CTD_ANON_49 (Block):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is Block
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Block
    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onunload uses Python identifier onunload
    __onunload = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onunload'), 'onunload', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onunload', Script)
    
    onunload = property(__onunload.value, __onunload.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_49_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_49_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_49_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_49_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_49_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_49_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_49_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onload uses Python identifier onload
    __onload = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onload'), 'onload', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onload', Script)
    
    onload = property(__onload.value, __onload.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_49_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_49_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Block._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Block._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseover.name() : __onmouseover,
        __onunload.name() : __onunload,
        __class.name() : __class,
        __style.name() : __style,
        __onclick.name() : __onclick,
        __lang.name() : __lang,
        __title.name() : __title,
        __onkeyup.name() : __onkeyup,
        __lang_.name() : __lang_,
        __onkeypress.name() : __onkeypress,
        __onmouseup.name() : __onmouseup,
        __ondblclick.name() : __ondblclick,
        __id.name() : __id,
        __onmousedown.name() : __onmousedown,
        __onload.name() : __onload,
        __dir.name() : __dir,
        __onmousemove.name() : __onmousemove,
        __onmouseout.name() : __onmouseout,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_50 with content type MIXED
class CTD_ANON_50 (Flow):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Flow
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_50_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_50_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_50_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_50_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_50_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_50_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_50_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_50_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_50_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_50_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_50_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_50_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_50_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_50_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_50_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_50_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_50_title', Text)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = Flow._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Flow._AttributeMap.copy()
    _AttributeMap.update({
        __onkeydown.name() : __onkeydown,
        __onkeypress.name() : __onkeypress,
        __onkeyup.name() : __onkeyup,
        __lang_.name() : __lang_,
        __onclick.name() : __onclick,
        __dir.name() : __dir,
        __onmouseup.name() : __onmouseup,
        __ondblclick.name() : __ondblclick,
        __style.name() : __style,
        __id.name() : __id,
        __onmousemove.name() : __onmousemove,
        __onmousedown.name() : __onmousedown,
        __onmouseover.name() : __onmouseover,
        __onmouseout.name() : __onmouseout,
        __class.name() : __class,
        __lang.name() : __lang,
        __title.name() : __title
    })



# Complex type CTD_ANON_51 with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}thead uses Python identifier thead
    __thead = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'thead'), 'thead', '__httpwww_w3_org1999xhtml_CTD_ANON_51_httpwww_w3_org1999xhtmlthead', False)

    
    thead = property(__thead.value, __thead.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}col uses Python identifier col
    __col = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'col'), 'col', '__httpwww_w3_org1999xhtml_CTD_ANON_51_httpwww_w3_org1999xhtmlcol', True)

    
    col = property(__col.value, __col.set, None, u'\n      col elements define the alignment properties for cells in\n      one or more columns.\n\n      The width attribute specifies the width of the columns, e.g.\n\n          width=64        width in screen pixels\n          width=0.5*      relative width of 0.5\n\n      The span attribute causes the attributes of one\n      col element to apply to more than one column.\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}tbody uses Python identifier tbody
    __tbody = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tbody'), 'tbody', '__httpwww_w3_org1999xhtml_CTD_ANON_51_httpwww_w3_org1999xhtmltbody', True)

    
    tbody = property(__tbody.value, __tbody.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}tfoot uses Python identifier tfoot
    __tfoot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tfoot'), 'tfoot', '__httpwww_w3_org1999xhtml_CTD_ANON_51_httpwww_w3_org1999xhtmltfoot', False)

    
    tfoot = property(__tfoot.value, __tfoot.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tr'), 'tr', '__httpwww_w3_org1999xhtml_CTD_ANON_51_httpwww_w3_org1999xhtmltr', True)

    
    tr = property(__tr.value, __tr.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}caption uses Python identifier caption
    __caption = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'caption'), 'caption', '__httpwww_w3_org1999xhtml_CTD_ANON_51_httpwww_w3_org1999xhtmlcaption', False)

    
    caption = property(__caption.value, __caption.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}colgroup uses Python identifier colgroup
    __colgroup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colgroup'), 'colgroup', '__httpwww_w3_org1999xhtml_CTD_ANON_51_httpwww_w3_org1999xhtmlcolgroup', True)

    
    colgroup = property(__colgroup.value, __colgroup.set, None, u'\n      colgroup groups a set of col elements. It allows you to group\n      several semantically related columns together.\n      ')

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_51_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_51_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_51_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_51_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_51_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__httpwww_w3_org1999xhtml_CTD_ANON_51_width', Length)
    
    width = property(__width.value, __width.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_51_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute border uses Python identifier border
    __border = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'border'), 'border', '__httpwww_w3_org1999xhtml_CTD_ANON_51_border', Pixels)
    
    border = property(__border.value, __border.set, None, None)

    
    # Attribute summary uses Python identifier summary
    __summary = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'summary'), 'summary', '__httpwww_w3_org1999xhtml_CTD_ANON_51_summary', Text)
    
    summary = property(__summary.value, __summary.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_51_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute frame uses Python identifier frame
    __frame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'frame'), 'frame', '__httpwww_w3_org1999xhtml_CTD_ANON_51_frame', TFrame)
    
    frame = property(__frame.value, __frame.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_51_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_51_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute rules uses Python identifier rules
    __rules = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rules'), 'rules', '__httpwww_w3_org1999xhtml_CTD_ANON_51_rules', TRules)
    
    rules = property(__rules.value, __rules.set, None, None)

    
    # Attribute cellspacing uses Python identifier cellspacing
    __cellspacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cellspacing'), 'cellspacing', '__httpwww_w3_org1999xhtml_CTD_ANON_51_cellspacing', Length)
    
    cellspacing = property(__cellspacing.value, __cellspacing.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_51_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute cellpadding uses Python identifier cellpadding
    __cellpadding = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cellpadding'), 'cellpadding', '__httpwww_w3_org1999xhtml_CTD_ANON_51_cellpadding', Length)
    
    cellpadding = property(__cellpadding.value, __cellpadding.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_51_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_51_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_51_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_51_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_51_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_51_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_51_title', Text)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __thead.name() : __thead,
        __col.name() : __col,
        __tbody.name() : __tbody,
        __tfoot.name() : __tfoot,
        __tr.name() : __tr,
        __caption.name() : __caption,
        __colgroup.name() : __colgroup
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __onkeyup.name() : __onkeyup,
        __onclick.name() : __onclick,
        __dir.name() : __dir,
        __onmouseover.name() : __onmouseover,
        __width.name() : __width,
        __onkeydown.name() : __onkeydown,
        __border.name() : __border,
        __summary.name() : __summary,
        __id.name() : __id,
        __frame.name() : __frame,
        __ondblclick.name() : __ondblclick,
        __class.name() : __class,
        __rules.name() : __rules,
        __cellspacing.name() : __cellspacing,
        __onkeypress.name() : __onkeypress,
        __cellpadding.name() : __cellpadding,
        __onmousemove.name() : __onmousemove,
        __onmouseup.name() : __onmouseup,
        __onmouseout.name() : __onmouseout,
        __onmousedown.name() : __onmousedown,
        __style.name() : __style,
        __lang_.name() : __lang_,
        __title.name() : __title
    }



# Complex type CTD_ANON_52 with content type MIXED
class CTD_ANON_52 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_52_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_52_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_52_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_52_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_52_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_52_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_52_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_52_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_52_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_52_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_52_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_52_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_52_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_52_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_52_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_52_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_52_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseup.name() : __onmouseup,
        __dir.name() : __dir,
        __id.name() : __id,
        __style.name() : __style,
        __onmousedown.name() : __onmousedown,
        __class.name() : __class,
        __onmouseout.name() : __onmouseout,
        __onmousemove.name() : __onmousemove,
        __lang.name() : __lang,
        __onkeyup.name() : __onkeyup,
        __lang_.name() : __lang_,
        __onkeypress.name() : __onkeypress,
        __ondblclick.name() : __ondblclick,
        __title.name() : __title,
        __onmouseover.name() : __onmouseover,
        __onclick.name() : __onclick,
        __onkeydown.name() : __onkeydown
    })



# Complex type CTD_ANON_53 with content type MIXED
class CTD_ANON_53 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_53_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_53_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_53_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_53_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_53_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_53_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_53_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_53_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_53_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_53_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_53_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_53_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_53_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_53_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_53_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_53_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_53_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseover.name() : __onmouseover,
        __dir.name() : __dir,
        __lang_.name() : __lang_,
        __onmouseout.name() : __onmouseout,
        __onclick.name() : __onclick,
        __style.name() : __style,
        __onmouseup.name() : __onmouseup,
        __onkeypress.name() : __onkeypress,
        __id.name() : __id,
        __class.name() : __class,
        __title.name() : __title,
        __onmousemove.name() : __onmousemove,
        __onkeydown.name() : __onkeydown,
        __onkeyup.name() : __onkeyup,
        __ondblclick.name() : __ondblclick,
        __onmousedown.name() : __onmousedown,
        __lang.name() : __lang
    })



# Complex type CTD_ANON_54 with content type MIXED
class CTD_ANON_54 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_54_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_54_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_54_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_54_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_54_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_54_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_54_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_54_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_54_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_54_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_54_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_54_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_54_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_54_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_54_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_54_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_54_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onkeyup.name() : __onkeyup,
        __ondblclick.name() : __ondblclick,
        __title.name() : __title,
        __id.name() : __id,
        __onmousemove.name() : __onmousemove,
        __onmouseover.name() : __onmouseover,
        __onmouseup.name() : __onmouseup,
        __onkeydown.name() : __onkeydown,
        __lang_.name() : __lang_,
        __onmousedown.name() : __onmousedown,
        __onclick.name() : __onclick,
        __dir.name() : __dir,
        __class.name() : __class,
        __lang.name() : __lang,
        __onmouseout.name() : __onmouseout,
        __style.name() : __style,
        __onkeypress.name() : __onkeypress
    })



# Complex type CTD_ANON_55 with content type MIXED
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute accesskey uses Python identifier accesskey
    __accesskey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accesskey'), 'accesskey', '__httpwww_w3_org1999xhtml_CTD_ANON_55_accesskey', Character)
    
    accesskey = property(__accesskey.value, __accesskey.set, None, None)

    
    # Attribute cols uses Python identifier cols
    __cols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cols'), 'cols', '__httpwww_w3_org1999xhtml_CTD_ANON_55_cols', Number, required=True)
    
    cols = property(__cols.value, __cols.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_55_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute tabindex uses Python identifier tabindex
    __tabindex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabindex'), 'tabindex', '__httpwww_w3_org1999xhtml_CTD_ANON_55_tabindex', tabindexNumber)
    
    tabindex = property(__tabindex.value, __tabindex.set, None, None)

    
    # Attribute onblur uses Python identifier onblur
    __onblur = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onblur'), 'onblur', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onblur', Script)
    
    onblur = property(__onblur.value, __onblur.set, None, None)

    
    # Attribute onchange uses Python identifier onchange
    __onchange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onchange'), 'onchange', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onchange', Script)
    
    onchange = property(__onchange.value, __onchange.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_55_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute readonly uses Python identifier readonly
    __readonly = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'readonly'), 'readonly', '__httpwww_w3_org1999xhtml_CTD_ANON_55_readonly', STD_ANON_14)
    
    readonly = property(__readonly.value, __readonly.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_55_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_55_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onselect uses Python identifier onselect
    __onselect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onselect'), 'onselect', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onselect', Script)
    
    onselect = property(__onselect.value, __onselect.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_55_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_55_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disabled'), 'disabled', '__httpwww_w3_org1999xhtml_CTD_ANON_55_disabled', STD_ANON_15)
    
    disabled = property(__disabled.value, __disabled.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_55_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onfocus uses Python identifier onfocus
    __onfocus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onfocus'), 'onfocus', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onfocus', Script)
    
    onfocus = property(__onfocus.value, __onfocus.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_55_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_w3_org1999xhtml_CTD_ANON_55_name', pyxb.binding.datatypes.anySimpleType)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_55_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute rows uses Python identifier rows
    __rows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rows'), 'rows', '__httpwww_w3_org1999xhtml_CTD_ANON_55_rows', Number, required=True)
    
    rows = property(__rows.value, __rows.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __accesskey.name() : __accesskey,
        __cols.name() : __cols,
        __title.name() : __title,
        __tabindex.name() : __tabindex,
        __onblur.name() : __onblur,
        __onchange.name() : __onchange,
        __lang_.name() : __lang_,
        __onmouseup.name() : __onmouseup,
        __readonly.name() : __readonly,
        __onmouseout.name() : __onmouseout,
        __class.name() : __class,
        __lang.name() : __lang,
        __onselect.name() : __onselect,
        __onclick.name() : __onclick,
        __ondblclick.name() : __ondblclick,
        __onkeypress.name() : __onkeypress,
        __onkeydown.name() : __onkeydown,
        __style.name() : __style,
        __onmouseover.name() : __onmouseover,
        __disabled.name() : __disabled,
        __dir.name() : __dir,
        __onkeyup.name() : __onkeyup,
        __onfocus.name() : __onfocus,
        __id.name() : __id,
        __onmousemove.name() : __onmousemove,
        __name.name() : __name,
        __onmousedown.name() : __onmousedown,
        __rows.name() : __rows
    }



# Complex type CTD_ANON_56 with content type MIXED
class CTD_ANON_56 (Flow):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Flow
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_56_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute cite uses Python identifier cite_
    __cite_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cite'), 'cite_', '__httpwww_w3_org1999xhtml_CTD_ANON_56_cite', URI)
    
    cite_ = property(__cite_.value, __cite_.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_56_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_56_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_56_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_56_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_56_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_56_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_56_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_56_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_56_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute datetime uses Python identifier datetime
    __datetime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'datetime'), 'datetime', '__httpwww_w3_org1999xhtml_CTD_ANON_56_datetime', Datetime)
    
    datetime = property(__datetime.value, __datetime.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_56_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_56_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_56_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_56_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_56_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_56_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_56_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)


    _ElementMap = Flow._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Flow._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseup.name() : __onmouseup,
        __cite_.name() : __cite_,
        __onmouseover.name() : __onmouseover,
        __onmousedown.name() : __onmousedown,
        __onkeydown.name() : __onkeydown,
        __dir.name() : __dir,
        __lang.name() : __lang,
        __ondblclick.name() : __ondblclick,
        __onmousemove.name() : __onmousemove,
        __onclick.name() : __onclick,
        __title.name() : __title,
        __datetime.name() : __datetime,
        __onkeypress.name() : __onkeypress,
        __class.name() : __class,
        __style.name() : __style,
        __lang_.name() : __lang_,
        __id.name() : __id,
        __onkeyup.name() : __onkeyup,
        __onmouseout.name() : __onmouseout
    })



# Complex type CTD_ANON_57 with content type MIXED
class CTD_ANON_57 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute accesskey uses Python identifier accesskey
    __accesskey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accesskey'), 'accesskey', '__httpwww_w3_org1999xhtml_CTD_ANON_57_accesskey', Character)
    
    accesskey = property(__accesskey.value, __accesskey.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onfocus uses Python identifier onfocus
    __onfocus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onfocus'), 'onfocus', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onfocus', Script)
    
    onfocus = property(__onfocus.value, __onfocus.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_57_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_57_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_57_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_57_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onblur uses Python identifier onblur
    __onblur = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onblur'), 'onblur', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onblur', Script)
    
    onblur = property(__onblur.value, __onblur.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_57_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_57_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_57_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute for uses Python identifier for_
    __for = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'for'), 'for_', '__httpwww_w3_org1999xhtml_CTD_ANON_57_for', pyxb.binding.datatypes.IDREF)
    
    for_ = property(__for.value, __for.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_57_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_57_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __accesskey.name() : __accesskey,
        __onmousemove.name() : __onmousemove,
        __onfocus.name() : __onfocus,
        __ondblclick.name() : __ondblclick,
        __onkeypress.name() : __onkeypress,
        __onmouseover.name() : __onmouseover,
        __class.name() : __class,
        __dir.name() : __dir,
        __lang.name() : __lang,
        __onkeyup.name() : __onkeyup,
        __onmousedown.name() : __onmousedown,
        __onkeydown.name() : __onkeydown,
        __onmouseout.name() : __onmouseout,
        __onblur.name() : __onblur,
        __style.name() : __style,
        __onclick.name() : __onclick,
        __title.name() : __title,
        __onmouseup.name() : __onmouseup,
        __for.name() : __for,
        __id.name() : __id,
        __lang_.name() : __lang_
    })



# Complex type button_content with content type MIXED
class button_content (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'button.content')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}h1 uses Python identifier h1
    __h1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h1'), 'h1', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlh1', True)

    
    h1 = property(__h1.value, __h1.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}dfn uses Python identifier dfn
    __dfn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dfn'), 'dfn', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmldfn', True)

    
    dfn = property(__dfn.value, __dfn.set, None, u'\n      definitional\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}object uses Python identifier object
    __object = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'object'), 'object', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlobject', True)

    
    object = property(__object.value, __object.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}tt uses Python identifier tt
    __tt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tt'), 'tt', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmltt', True)

    
    tt = property(__tt.value, __tt.set, None, u'\n      fixed pitch font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h2 uses Python identifier h2
    __h2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h2'), 'h2', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlh2', True)

    
    h2 = property(__h2.value, __h2.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}code uses Python identifier code
    __code = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'code'), 'code', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlcode', True)

    
    code = property(__code.value, __code.set, None, u'\n      program code\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}img uses Python identifier img
    __img = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'img'), 'img', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlimg', True)

    
    img = property(__img.value, __img.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}noscript uses Python identifier noscript
    __noscript = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'noscript'), 'noscript', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlnoscript', True)

    
    noscript = property(__noscript.value, __noscript.set, None, u'\n      alternate content container for non script-based rendering\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h3 uses Python identifier h3
    __h3 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h3'), 'h3', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlh3', True)

    
    h3 = property(__h3.value, __h3.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}map uses Python identifier map
    __map = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'map'), 'map', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlmap', True)

    
    map = property(__map.value, __map.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}q uses Python identifier q
    __q = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'q'), 'q', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlq', True)

    
    q = property(__q.value, __q.set, None, u'\n      inlined quote\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}blockquote uses Python identifier blockquote
    __blockquote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), 'blockquote', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlblockquote', True)

    
    blockquote = property(__blockquote.value, __blockquote.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ins'), 'ins', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlins', True)

    
    ins = property(__ins.value, __ins.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}h4 uses Python identifier h4
    __h4 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h4'), 'h4', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlh4', True)

    
    h4 = property(__h4.value, __h4.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}samp uses Python identifier samp
    __samp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'samp'), 'samp', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlsamp', True)

    
    samp = property(__samp.value, __samp.set, None, u'\n      sample\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}abbr uses Python identifier abbr
    __abbr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'abbr'), 'abbr', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlabbr', True)

    
    abbr = property(__abbr.value, __abbr.set, None, u'\n      abbreviation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}address uses Python identifier address
    __address = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'address'), 'address', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmladdress', True)

    
    address = property(__address.value, __address.set, None, u'\n      information on author\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}kbd uses Python identifier kbd
    __kbd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'kbd'), 'kbd', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlkbd', True)

    
    kbd = property(__kbd.value, __kbd.set, None, u'\n      something user would type\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h5 uses Python identifier h5
    __h5 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h5'), 'h5', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlh5', True)

    
    h5 = property(__h5.value, __h5.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlb', True)

    
    b = property(__b.value, __b.set, None, u'\n      bold font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}table uses Python identifier table
    __table = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'table'), 'table', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmltable', True)

    
    table = property(__table.value, __table.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'del'), 'del_', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmldel', True)

    
    del_ = property(__del.value, __del.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sub'), 'sub', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlsub', True)

    
    sub = property(__sub.value, __sub.set, None, u'\n      subscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}h6 uses Python identifier h6
    __h6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'h6'), 'h6', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlh6', True)

    
    h6 = property(__h6.value, __h6.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}var uses Python identifier var
    __var = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'var'), 'var', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlvar', True)

    
    var = property(__var.value, __var.set, None, u'\n      variable\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}div uses Python identifier div
    __div = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'div'), 'div', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmldiv', True)

    
    div = property(__div.value, __div.set, None, u'\n      generic language/style container      \n      ')

    
    # Element {http://www.w3.org/1999/xhtml}span uses Python identifier span
    __span = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'span'), 'span', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlspan', True)

    
    span = property(__span.value, __span.set, None, u'\n      generic language/style container\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}pre uses Python identifier pre
    __pre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pre'), 'pre', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlpre', True)

    
    pre = property(__pre.value, __pre.set, None, u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}cite uses Python identifier cite
    __cite = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cite'), 'cite', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlcite', True)

    
    cite = property(__cite.value, __cite.set, None, u'\n      citation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sup'), 'sup', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlsup', True)

    
    sup = property(__sup.value, __sup.set, None, u'\n      superscript\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmli', True)

    
    i = property(__i.value, __i.set, None, u'\n      italic font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}small uses Python identifier small
    __small = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'small'), 'small', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlsmall', True)

    
    small = property(__small.value, __small.set, None, u'\n      smaller font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ul'), 'ul', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlul', True)

    
    ul = property(__ul.value, __ul.set, None, u'\n      Unordered list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'br'), 'br', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlbr', True)

    
    br = property(__br.value, __br.set, None, u'\n      forced line break\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}big uses Python identifier big
    __big = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'big'), 'big', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlbig', True)

    
    big = property(__big.value, __big.set, None, u'\n      bigger font\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}hr uses Python identifier hr
    __hr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'hr'), 'hr', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlhr', True)

    
    hr = property(__hr.value, __hr.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'p'), 'p', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlp', True)

    
    p = property(__p.value, __p.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}ol uses Python identifier ol
    __ol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ol'), 'ol', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlol', True)

    
    ol = property(__ol.value, __ol.set, None, u'\n      Ordered (numbered) list\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'em'), 'em', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlem', True)

    
    em = property(__em.value, __em.set, None, u'\n      emphasis\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bdo'), 'bdo', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'\n      I18N BiDi over-ride\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}acronym uses Python identifier acronym
    __acronym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'acronym'), 'acronym', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlacronym', True)

    
    acronym = property(__acronym.value, __acronym.set, None, u'\n      acronym\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}dl uses Python identifier dl
    __dl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dl'), 'dl', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmldl', True)

    
    dl = property(__dl.value, __dl.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}strong uses Python identifier strong
    __strong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'strong'), 'strong', '__httpwww_w3_org1999xhtml_button_content_httpwww_w3_org1999xhtmlstrong', True)

    
    strong = property(__strong.value, __strong.set, None, u'\n      strong emphasis\n      ')


    _ElementMap = {
        __h1.name() : __h1,
        __dfn.name() : __dfn,
        __object.name() : __object,
        __tt.name() : __tt,
        __h2.name() : __h2,
        __code.name() : __code,
        __img.name() : __img,
        __noscript.name() : __noscript,
        __h3.name() : __h3,
        __map.name() : __map,
        __q.name() : __q,
        __blockquote.name() : __blockquote,
        __ins.name() : __ins,
        __h4.name() : __h4,
        __samp.name() : __samp,
        __abbr.name() : __abbr,
        __address.name() : __address,
        __kbd.name() : __kbd,
        __h5.name() : __h5,
        __b.name() : __b,
        __script.name() : __script,
        __table.name() : __table,
        __del.name() : __del,
        __sub.name() : __sub,
        __h6.name() : __h6,
        __var.name() : __var,
        __div.name() : __div,
        __span.name() : __span,
        __pre.name() : __pre,
        __cite.name() : __cite,
        __sup.name() : __sup,
        __i.name() : __i,
        __small.name() : __small,
        __ul.name() : __ul,
        __br.name() : __br,
        __big.name() : __big,
        __hr.name() : __hr,
        __p.name() : __p,
        __ol.name() : __ol,
        __em.name() : __em,
        __bdo.name() : __bdo,
        __acronym.name() : __acronym,
        __dl.name() : __dl,
        __strong.name() : __strong
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'button.content', button_content)


# Complex type CTD_ANON_58 with content type MIXED
class CTD_ANON_58 (button_content):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is button_content
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}button.content
    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_58_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_w3_org1999xhtml_CTD_ANON_58_name', pyxb.binding.datatypes.anySimpleType)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_w3_org1999xhtml_CTD_ANON_58_value', pyxb.binding.datatypes.anySimpleType)
    
    value_ = property(__value.value, __value.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_w3_org1999xhtml_CTD_ANON_58_type', STD_ANON_16, unicode_default=u'submit')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute tabindex uses Python identifier tabindex
    __tabindex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabindex'), 'tabindex', '__httpwww_w3_org1999xhtml_CTD_ANON_58_tabindex', tabindexNumber)
    
    tabindex = property(__tabindex.value, __tabindex.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_58_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disabled'), 'disabled', '__httpwww_w3_org1999xhtml_CTD_ANON_58_disabled', STD_ANON_17)
    
    disabled = property(__disabled.value, __disabled.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_58_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onblur uses Python identifier onblur
    __onblur = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onblur'), 'onblur', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onblur', Script)
    
    onblur = property(__onblur.value, __onblur.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_58_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_58_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_58_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onfocus uses Python identifier onfocus
    __onfocus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onfocus'), 'onfocus', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onfocus', Script)
    
    onfocus = property(__onfocus.value, __onfocus.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_58_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_58_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute accesskey uses Python identifier accesskey
    __accesskey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accesskey'), 'accesskey', '__httpwww_w3_org1999xhtml_CTD_ANON_58_accesskey', Character)
    
    accesskey = property(__accesskey.value, __accesskey.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_58_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)


    _ElementMap = button_content._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = button_content._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseover.name() : __onmouseover,
        __lang.name() : __lang,
        __name.name() : __name,
        __onclick.name() : __onclick,
        __value.name() : __value,
        __type.name() : __type,
        __tabindex.name() : __tabindex,
        __onmouseout.name() : __onmouseout,
        __dir.name() : __dir,
        __disabled.name() : __disabled,
        __title.name() : __title,
        __onmousedown.name() : __onmousedown,
        __onblur.name() : __onblur,
        __class.name() : __class,
        __onkeydown.name() : __onkeydown,
        __style.name() : __style,
        __onmouseup.name() : __onmouseup,
        __onmousemove.name() : __onmousemove,
        __lang_.name() : __lang_,
        __onfocus.name() : __onfocus,
        __onkeyup.name() : __onkeyup,
        __onkeypress.name() : __onkeypress,
        __ondblclick.name() : __ondblclick,
        __accesskey.name() : __accesskey,
        __id.name() : __id
    })



# Complex type CTD_ANON_59 with content type MIXED
class CTD_ANON_59 (Flow):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Flow
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_59_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_59_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_59_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_59_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_59_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_59_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_59_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_59_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_59_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_59_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_59_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_59_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_59_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_59_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_59_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_59_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_59_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)


    _ElementMap = Flow._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Flow._AttributeMap.copy()
    _AttributeMap.update({
        __onmousedown.name() : __onmousedown,
        __dir.name() : __dir,
        __class.name() : __class,
        __onkeyup.name() : __onkeyup,
        __lang.name() : __lang,
        __style.name() : __style,
        __onmousemove.name() : __onmousemove,
        __onkeydown.name() : __onkeydown,
        __onkeypress.name() : __onkeypress,
        __ondblclick.name() : __ondblclick,
        __title.name() : __title,
        __onmouseout.name() : __onmouseout,
        __onclick.name() : __onclick,
        __onmouseup.name() : __onmouseup,
        __lang_.name() : __lang_,
        __id.name() : __id,
        __onmouseover.name() : __onmouseover
    })



# Complex type CTD_ANON_60 with content type MIXED
class CTD_ANON_60 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_60_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_60_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_60_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_60_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_60_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_60_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_60_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_60_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_60_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_60_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_60_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_60_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_60_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_60_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_60_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_60_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_60_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmouseup.name() : __onmouseup,
        __ondblclick.name() : __ondblclick,
        __style.name() : __style,
        __onmousedown.name() : __onmousedown,
        __onclick.name() : __onclick,
        __onmouseout.name() : __onmouseout,
        __onmouseover.name() : __onmouseover,
        __onmousemove.name() : __onmousemove,
        __lang.name() : __lang,
        __class.name() : __class,
        __onkeydown.name() : __onkeydown,
        __title.name() : __title,
        __onkeypress.name() : __onkeypress,
        __id.name() : __id,
        __dir.name() : __dir,
        __lang_.name() : __lang_,
        __onkeyup.name() : __onkeyup
    })



# Complex type CTD_ANON_61 with content type MIXED
class CTD_ANON_61 (Inline):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Inline
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Inline
    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_61_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_61_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_61_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_61_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_61_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_61_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_61_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_61_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_61_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_61_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_61_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_61_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_61_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_61_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_61_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_61_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_61_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)


    _ElementMap = Inline._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Inline._AttributeMap.copy()
    _AttributeMap.update({
        __onmousedown.name() : __onmousedown,
        __ondblclick.name() : __ondblclick,
        __onmouseout.name() : __onmouseout,
        __title.name() : __title,
        __lang.name() : __lang,
        __style.name() : __style,
        __onkeydown.name() : __onkeydown,
        __onkeypress.name() : __onkeypress,
        __class.name() : __class,
        __onmousemove.name() : __onmousemove,
        __onclick.name() : __onclick,
        __lang_.name() : __lang_,
        __onmouseup.name() : __onmouseup,
        __onkeyup.name() : __onkeyup,
        __dir.name() : __dir,
        __id.name() : __id,
        __onmouseover.name() : __onmouseover
    })



# Complex type CTD_ANON_62 with content type MIXED
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disabled'), 'disabled', '__httpwww_w3_org1999xhtml_CTD_ANON_62_disabled', STD_ANON_18)
    
    disabled = property(__disabled.value, __disabled.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_62_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_62_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_62_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_62_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_62_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_62_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_62_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_62_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_62_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_62_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute label uses Python identifier label
    __label = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'label'), 'label', '__httpwww_w3_org1999xhtml_CTD_ANON_62_label', Text)
    
    label = property(__label.value, __label.set, None, None)

    
    # Attribute selected uses Python identifier selected
    __selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'selected'), 'selected', '__httpwww_w3_org1999xhtml_CTD_ANON_62_selected', STD_ANON_19)
    
    selected = property(__selected.value, __selected.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_62_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_62_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_62_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_62_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_62_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_62_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_62_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_w3_org1999xhtml_CTD_ANON_62_value', pyxb.binding.datatypes.anySimpleType)
    
    value_ = property(__value.value, __value.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __disabled.name() : __disabled,
        __ondblclick.name() : __ondblclick,
        __onmousedown.name() : __onmousedown,
        __class.name() : __class,
        __onmouseover.name() : __onmouseover,
        __onkeydown.name() : __onkeydown,
        __dir.name() : __dir,
        __onmousemove.name() : __onmousemove,
        __lang.name() : __lang,
        __style.name() : __style,
        __title.name() : __title,
        __label.name() : __label,
        __selected.name() : __selected,
        __onmouseup.name() : __onmouseup,
        __onclick.name() : __onclick,
        __onmouseout.name() : __onmouseout,
        __onkeyup.name() : __onkeyup,
        __id.name() : __id,
        __lang_.name() : __lang_,
        __onkeypress.name() : __onkeypress,
        __value.name() : __value
    }



# Complex type CTD_ANON_63 with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}option uses Python identifier option
    __option = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'option'), 'option', '__httpwww_w3_org1999xhtml_CTD_ANON_63_httpwww_w3_org1999xhtmloption', True)

    
    option = property(__option.value, __option.set, None, u'\n      selectable choice\n      ')

    
    # Attribute label uses Python identifier label
    __label = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'label'), 'label', '__httpwww_w3_org1999xhtml_CTD_ANON_63_label', Text, required=True)
    
    label = property(__label.value, __label.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_63_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_63_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_63_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_63_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_63_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_63_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_63_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_63_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_63_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_63_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_63_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_63_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disabled'), 'disabled', '__httpwww_w3_org1999xhtml_CTD_ANON_63_disabled', STD_ANON_20)
    
    disabled = property(__disabled.value, __disabled.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_63_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_63_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_63_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_63_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_63_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)


    _ElementMap = {
        __option.name() : __option
    }
    _AttributeMap = {
        __label.name() : __label,
        __onmouseup.name() : __onmouseup,
        __ondblclick.name() : __ondblclick,
        __style.name() : __style,
        __dir.name() : __dir,
        __onmouseover.name() : __onmouseover,
        __onmouseout.name() : __onmouseout,
        __id.name() : __id,
        __lang.name() : __lang,
        __onkeydown.name() : __onkeydown,
        __onmousemove.name() : __onmousemove,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __disabled.name() : __disabled,
        __onclick.name() : __onclick,
        __onkeyup.name() : __onkeyup,
        __lang_.name() : __lang_,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown
    }



# Complex type CTD_ANON_64 with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}td uses Python identifier td
    __td = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'td'), 'td', '__httpwww_w3_org1999xhtml_CTD_ANON_64_httpwww_w3_org1999xhtmltd', True)

    
    td = property(__td.value, __td.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}th uses Python identifier th
    __th = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'th'), 'th', '__httpwww_w3_org1999xhtml_CTD_ANON_64_httpwww_w3_org1999xhtmlth', True)

    
    th = property(__th.value, __th.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_64_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charoff'), 'charoff', '__httpwww_w3_org1999xhtml_CTD_ANON_64_charoff', Length)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_64_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_64_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_64_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_64_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_64_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__httpwww_w3_org1999xhtml_CTD_ANON_64_valign', STD_ANON_10)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_64_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_64_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_64_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_64_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpwww_w3_org1999xhtml_CTD_ANON_64_char', Character)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_64_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_64_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'align'), 'align', '__httpwww_w3_org1999xhtml_CTD_ANON_64_align', STD_ANON_11)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_64_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_64_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_64_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_64_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_64_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)


    _ElementMap = {
        __td.name() : __td,
        __th.name() : __th
    }
    _AttributeMap = {
        __ondblclick.name() : __ondblclick,
        __charoff.name() : __charoff,
        __onmouseout.name() : __onmouseout,
        __id.name() : __id,
        __class.name() : __class,
        __onkeyup.name() : __onkeyup,
        __onmousedown.name() : __onmousedown,
        __valign.name() : __valign,
        __dir.name() : __dir,
        __lang.name() : __lang,
        __title.name() : __title,
        __onkeydown.name() : __onkeydown,
        __char.name() : __char,
        __onkeypress.name() : __onkeypress,
        __onmouseover.name() : __onmouseover,
        __align.name() : __align,
        __onmousemove.name() : __onmousemove,
        __onclick.name() : __onclick,
        __onmouseup.name() : __onmouseup,
        __lang_.name() : __lang_,
        __style.name() : __style
    }



# Complex type CTD_ANON_65 with content type MIXED
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_65_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_65_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_65_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'space'), 'space', '__httpwww_w3_org1999xhtml_CTD_ANON_65_httpwww_w3_orgXML1998namespacespace', pyxb.binding.xml_.STD_ANON_space, fixed=True, unicode_default=u'preserve')
    
    space = property(__space.value, __space.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_65_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_w3_org1999xhtml_CTD_ANON_65_type', ContentType, required=True)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_65_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute media uses Python identifier media
    __media = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'media'), 'media', '__httpwww_w3_org1999xhtml_CTD_ANON_65_media', MediaDesc)
    
    media = property(__media.value, __media.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __title.name() : __title,
        __lang_.name() : __lang_,
        __lang.name() : __lang,
        __space.name() : __space,
        __id.name() : __id,
        __type.name() : __type,
        __dir.name() : __dir,
        __media.name() : __media
    }



# Complex type CTD_ANON_66 with content type EMPTY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_66_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_66_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute span uses Python identifier span
    __span = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'span'), 'span', '__httpwww_w3_org1999xhtml_CTD_ANON_66_span', Number, unicode_default=u'1')
    
    span = property(__span.value, __span.set, None, None)

    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__httpwww_w3_org1999xhtml_CTD_ANON_66_width', MultiLength)
    
    width = property(__width.value, __width.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_66_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpwww_w3_org1999xhtml_CTD_ANON_66_char', Character)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_66_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_66_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_66_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charoff'), 'charoff', '__httpwww_w3_org1999xhtml_CTD_ANON_66_charoff', Length)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_66_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_66_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__httpwww_w3_org1999xhtml_CTD_ANON_66_valign', STD_ANON_10)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_66_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_66_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_66_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_66_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_66_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_66_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_66_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_66_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_66_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'align'), 'align', '__httpwww_w3_org1999xhtml_CTD_ANON_66_align', STD_ANON_11)
    
    align = property(__align.value, __align.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __ondblclick.name() : __ondblclick,
        __lang.name() : __lang,
        __span.name() : __span,
        __width.name() : __width,
        __onclick.name() : __onclick,
        __char.name() : __char,
        __onkeydown.name() : __onkeydown,
        __id.name() : __id,
        __onmouseout.name() : __onmouseout,
        __charoff.name() : __charoff,
        __lang_.name() : __lang_,
        __style.name() : __style,
        __valign.name() : __valign,
        __dir.name() : __dir,
        __onmousemove.name() : __onmousemove,
        __onkeypress.name() : __onkeypress,
        __class.name() : __class,
        __onmousedown.name() : __onmousedown,
        __onmouseover.name() : __onmouseover,
        __title.name() : __title,
        __onkeyup.name() : __onkeyup,
        __onmouseup.name() : __onmouseup,
        __align.name() : __align
    }



# Complex type CTD_ANON_67 with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}col uses Python identifier col
    __col = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'col'), 'col', '__httpwww_w3_org1999xhtml_CTD_ANON_67_httpwww_w3_org1999xhtmlcol', True)

    
    col = property(__col.value, __col.set, None, u'\n      col elements define the alignment properties for cells in\n      one or more columns.\n\n      The width attribute specifies the width of the columns, e.g.\n\n          width=64        width in screen pixels\n          width=0.5*      relative width of 0.5\n\n      The span attribute causes the attributes of one\n      col element to apply to more than one column.\n      ')

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_67_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__httpwww_w3_org1999xhtml_CTD_ANON_67_valign', STD_ANON_10)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_67_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_67_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_67_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_67_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_67_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_67_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_67_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpwww_w3_org1999xhtml_CTD_ANON_67_char', Character)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charoff'), 'charoff', '__httpwww_w3_org1999xhtml_CTD_ANON_67_charoff', Length)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_67_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_67_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_67_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_67_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_67_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_67_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute span uses Python identifier span
    __span = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'span'), 'span', '__httpwww_w3_org1999xhtml_CTD_ANON_67_span', Number, unicode_default=u'1')
    
    span = property(__span.value, __span.set, None, None)

    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__httpwww_w3_org1999xhtml_CTD_ANON_67_width', MultiLength)
    
    width = property(__width.value, __width.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_67_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_67_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_67_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'align'), 'align', '__httpwww_w3_org1999xhtml_CTD_ANON_67_align', STD_ANON_11)
    
    align = property(__align.value, __align.set, None, None)


    _ElementMap = {
        __col.name() : __col
    }
    _AttributeMap = {
        __onkeyup.name() : __onkeyup,
        __valign.name() : __valign,
        __lang.name() : __lang,
        __dir.name() : __dir,
        __onmouseup.name() : __onmouseup,
        __onmouseover.name() : __onmouseover,
        __onclick.name() : __onclick,
        __onmouseout.name() : __onmouseout,
        __onmousedown.name() : __onmousedown,
        __char.name() : __char,
        __charoff.name() : __charoff,
        __id.name() : __id,
        __style.name() : __style,
        __onmousemove.name() : __onmousemove,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __class.name() : __class,
        __span.name() : __span,
        __width.name() : __width,
        __ondblclick.name() : __ondblclick,
        __lang_.name() : __lang_,
        __onkeydown.name() : __onkeydown,
        __align.name() : __align
    }



# Complex type CTD_ANON_68 with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tr'), 'tr', '__httpwww_w3_org1999xhtml_CTD_ANON_68_httpwww_w3_org1999xhtmltr', True)

    
    tr = property(__tr.value, __tr.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_68_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_68_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charoff'), 'charoff', '__httpwww_w3_org1999xhtml_CTD_ANON_68_charoff', Length)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_68_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_68_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_68_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'align'), 'align', '__httpwww_w3_org1999xhtml_CTD_ANON_68_align', STD_ANON_11)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_68_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_68_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_68_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_68_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_68_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_68_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_68_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_68_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_68_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpwww_w3_org1999xhtml_CTD_ANON_68_char', Character)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_68_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_68_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__httpwww_w3_org1999xhtml_CTD_ANON_68_valign', STD_ANON_10)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_68_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)


    _ElementMap = {
        __tr.name() : __tr
    }
    _AttributeMap = {
        __onmouseover.name() : __onmouseover,
        __lang.name() : __lang,
        __charoff.name() : __charoff,
        __onkeydown.name() : __onkeydown,
        __onmouseout.name() : __onmouseout,
        __id.name() : __id,
        __align.name() : __align,
        __onkeyup.name() : __onkeyup,
        __onclick.name() : __onclick,
        __onmousedown.name() : __onmousedown,
        __onmouseup.name() : __onmouseup,
        __lang_.name() : __lang_,
        __dir.name() : __dir,
        __ondblclick.name() : __ondblclick,
        __class.name() : __class,
        __style.name() : __style,
        __char.name() : __char,
        __onkeypress.name() : __onkeypress,
        __title.name() : __title,
        __valign.name() : __valign,
        __onmousemove.name() : __onmousemove
    }



# Complex type CTD_ANON_69 with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tr'), 'tr', '__httpwww_w3_org1999xhtml_CTD_ANON_69_httpwww_w3_org1999xhtmltr', True)

    
    tr = property(__tr.value, __tr.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_69_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_69_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_69_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_69_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_69_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_69_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_69_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_69_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'align'), 'align', '__httpwww_w3_org1999xhtml_CTD_ANON_69_align', STD_ANON_11)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_69_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_69_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charoff'), 'charoff', '__httpwww_w3_org1999xhtml_CTD_ANON_69_charoff', Length)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_69_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_69_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_69_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_69_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_69_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_69_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__httpwww_w3_org1999xhtml_CTD_ANON_69_valign', STD_ANON_10)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_69_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpwww_w3_org1999xhtml_CTD_ANON_69_char', Character)
    
    char = property(__char.value, __char.set, None, None)


    _ElementMap = {
        __tr.name() : __tr
    }
    _AttributeMap = {
        __title.name() : __title,
        __id.name() : __id,
        __onmouseout.name() : __onmouseout,
        __ondblclick.name() : __ondblclick,
        __onmousedown.name() : __onmousedown,
        __lang_.name() : __lang_,
        __class.name() : __class,
        __style.name() : __style,
        __align.name() : __align,
        __onmouseover.name() : __onmouseover,
        __onkeyup.name() : __onkeyup,
        __charoff.name() : __charoff,
        __lang.name() : __lang,
        __onclick.name() : __onclick,
        __onmousemove.name() : __onmousemove,
        __onmouseup.name() : __onmouseup,
        __onkeydown.name() : __onkeydown,
        __dir.name() : __dir,
        __valign.name() : __valign,
        __onkeypress.name() : __onkeypress,
        __char.name() : __char
    }



# Complex type CTD_ANON_70 with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tr'), 'tr', '__httpwww_w3_org1999xhtml_CTD_ANON_70_httpwww_w3_org1999xhtmltr', True)

    
    tr = property(__tr.value, __tr.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charoff'), 'charoff', '__httpwww_w3_org1999xhtml_CTD_ANON_70_charoff', Length)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_70_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_70_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_70_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_70_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_70_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_70_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_70_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__httpwww_w3_org1999xhtml_CTD_ANON_70_valign', STD_ANON_10)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_70_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_70_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpwww_w3_org1999xhtml_CTD_ANON_70_char', Character)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'align'), 'align', '__httpwww_w3_org1999xhtml_CTD_ANON_70_align', STD_ANON_11)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_70_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_70_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_70_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_70_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_70_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_70_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_70_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_70_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)


    _ElementMap = {
        __tr.name() : __tr
    }
    _AttributeMap = {
        __charoff.name() : __charoff,
        __title.name() : __title,
        __onmouseup.name() : __onmouseup,
        __id.name() : __id,
        __lang_.name() : __lang_,
        __onkeyup.name() : __onkeyup,
        __style.name() : __style,
        __lang.name() : __lang,
        __valign.name() : __valign,
        __onkeydown.name() : __onkeydown,
        __onmousemove.name() : __onmousemove,
        __char.name() : __char,
        __align.name() : __align,
        __dir.name() : __dir,
        __onclick.name() : __onclick,
        __ondblclick.name() : __ondblclick,
        __onmousedown.name() : __onmousedown,
        __onkeypress.name() : __onkeypress,
        __onmouseover.name() : __onmouseover,
        __onmouseout.name() : __onmouseout,
        __class.name() : __class
    }



# Complex type CTD_ANON_71 with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}body uses Python identifier body
    __body = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'body'), 'body', '__httpwww_w3_org1999xhtml_CTD_ANON_71_httpwww_w3_org1999xhtmlbody', False)

    
    body = property(__body.value, __body.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}head uses Python identifier head
    __head = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'head'), 'head', '__httpwww_w3_org1999xhtml_CTD_ANON_71_httpwww_w3_org1999xhtmlhead', False)

    
    head = property(__head.value, __head.set, None, u'\n      content model is "head.misc" combined with a single\n      title and an optional base element in any order\n      ')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_71_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_71_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_71_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_71_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)


    _ElementMap = {
        __body.name() : __body,
        __head.name() : __head
    }
    _AttributeMap = {
        __dir.name() : __dir,
        __lang.name() : __lang,
        __lang_.name() : __lang_,
        __id.name() : __id
    }



# Complex type CTD_ANON_72 with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/1999/xhtml}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_72_httpwww_w3_org1999xhtmlstyle', True)

    
    style = property(__style.value, __style.set, None, u'\n      style info, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}object uses Python identifier object
    __object = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'object'), 'object', '__httpwww_w3_org1999xhtml_CTD_ANON_72_httpwww_w3_org1999xhtmlobject', True)

    
    object = property(__object.value, __object.set, None, None)

    
    # Element {http://www.w3.org/1999/xhtml}meta uses Python identifier meta
    __meta = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'meta'), 'meta', '__httpwww_w3_org1999xhtml_CTD_ANON_72_httpwww_w3_org1999xhtmlmeta', True)

    
    meta = property(__meta.value, __meta.set, None, u'\n      generic metainformation\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}base uses Python identifier base
    __base = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'base'), 'base', '__httpwww_w3_org1999xhtml_CTD_ANON_72_httpwww_w3_org1999xhtmlbase', False)

    
    base = property(__base.value, __base.set, None, u'\n      document base URI\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}script uses Python identifier script
    __script = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'script'), 'script', '__httpwww_w3_org1999xhtml_CTD_ANON_72_httpwww_w3_org1999xhtmlscript', True)

    
    script = property(__script.value, __script.set, None, u'\n      script statements, which may include CDATA sections\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}link uses Python identifier link
    __link = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'link'), 'link', '__httpwww_w3_org1999xhtml_CTD_ANON_72_httpwww_w3_org1999xhtmllink', True)

    
    link = property(__link.value, __link.set, None, u'\n      Relationship values can be used in principle:\n\n      a) for document specific toolbars/menus when used\n         with the link element in document head e.g.\n           start, contents, previous, next, index, end, help\n      b) to link to a separate style sheet (rel="stylesheet")\n      c) to make a link to a script (rel="script")\n      d) by stylesheets to control how collections of\n         html nodes are rendered into printed documents\n      e) to make a link to a printable version of this document\n         e.g. a PostScript or PDF version (rel="alternate" media="print")\n      ')

    
    # Element {http://www.w3.org/1999/xhtml}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_72_httpwww_w3_org1999xhtmltitle', False)

    
    title = property(__title.value, __title.set, None, u'\n      The title element is not considered part of the flow of text.\n      It should be displayed, for example as the page header or\n      window title. Exactly one title is required per document.\n      ')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_72_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute profile uses Python identifier profile
    __profile = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'profile'), 'profile', '__httpwww_w3_org1999xhtml_CTD_ANON_72_profile', URI)
    
    profile = property(__profile.value, __profile.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_72_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_72_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_72_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)


    _ElementMap = {
        __style.name() : __style,
        __object.name() : __object,
        __meta.name() : __meta,
        __base.name() : __base,
        __script.name() : __script,
        __link.name() : __link,
        __title.name() : __title
    }
    _AttributeMap = {
        __dir.name() : __dir,
        __profile.name() : __profile,
        __lang_.name() : __lang_,
        __lang.name() : __lang,
        __id.name() : __id
    }



# Complex type CTD_ANON_73 with content type EMPTY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_w3_org1999xhtml_CTD_ANON_73_type', ContentType)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_w3_org1999xhtml_CTD_ANON_73_name', pyxb.binding.datatypes.anySimpleType)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_w3_org1999xhtml_CTD_ANON_73_value', pyxb.binding.datatypes.anySimpleType)
    
    value_ = property(__value.value, __value.set, None, None)

    
    # Attribute valuetype uses Python identifier valuetype
    __valuetype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valuetype'), 'valuetype', '__httpwww_w3_org1999xhtml_CTD_ANON_73_valuetype', STD_ANON_21, unicode_default=u'data')
    
    valuetype = property(__valuetype.value, __valuetype.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_73_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type,
        __name.name() : __name,
        __value.name() : __value,
        __valuetype.name() : __valuetype,
        __id.name() : __id
    }



# Complex type CTD_ANON_74 with content type MIXED
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_74_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_74_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_74_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_74_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang_.name() : __lang_,
        __id.name() : __id,
        __lang.name() : __lang,
        __dir.name() : __dir
    }



# Complex type CTD_ANON_75 with content type MIXED
class CTD_ANON_75 (Flow):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    # Base type is Flow
    
    # Element big ({http://www.w3.org/1999/xhtml}big) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h1 ({http://www.w3.org/1999/xhtml}h1) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element noscript ({http://www.w3.org/1999/xhtml}noscript) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element label ({http://www.w3.org/1999/xhtml}label) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element abbr ({http://www.w3.org/1999/xhtml}abbr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element pre ({http://www.w3.org/1999/xhtml}pre) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element kbd ({http://www.w3.org/1999/xhtml}kbd) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element span ({http://www.w3.org/1999/xhtml}span) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element form ({http://www.w3.org/1999/xhtml}form) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element cite ({http://www.w3.org/1999/xhtml}cite) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element hr ({http://www.w3.org/1999/xhtml}hr) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ins ({http://www.w3.org/1999/xhtml}ins) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element strong ({http://www.w3.org/1999/xhtml}strong) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sub ({http://www.w3.org/1999/xhtml}sub) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h4 ({http://www.w3.org/1999/xhtml}h4) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element acronym ({http://www.w3.org/1999/xhtml}acronym) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element del_ ({http://www.w3.org/1999/xhtml}del) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element textarea ({http://www.w3.org/1999/xhtml}textarea) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element sup ({http://www.w3.org/1999/xhtml}sup) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element img ({http://www.w3.org/1999/xhtml}img) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h5 ({http://www.w3.org/1999/xhtml}h5) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dfn ({http://www.w3.org/1999/xhtml}dfn) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element map ({http://www.w3.org/1999/xhtml}map) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element fieldset ({http://www.w3.org/1999/xhtml}fieldset) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ol ({http://www.w3.org/1999/xhtml}ol) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h6 ({http://www.w3.org/1999/xhtml}h6) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h3 ({http://www.w3.org/1999/xhtml}h3) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element code ({http://www.w3.org/1999/xhtml}code) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element small ({http://www.w3.org/1999/xhtml}small) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element table ({http://www.w3.org/1999/xhtml}table) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element var ({http://www.w3.org/1999/xhtml}var) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element div ({http://www.w3.org/1999/xhtml}div) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element q ({http://www.w3.org/1999/xhtml}q) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element address ({http://www.w3.org/1999/xhtml}address) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element tt ({http://www.w3.org/1999/xhtml}tt) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element em ({http://www.w3.org/1999/xhtml}em) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element samp ({http://www.w3.org/1999/xhtml}samp) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element input ({http://www.w3.org/1999/xhtml}input) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element ul ({http://www.w3.org/1999/xhtml}ul) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element br ({http://www.w3.org/1999/xhtml}br) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element i ({http://www.w3.org/1999/xhtml}i) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element a ({http://www.w3.org/1999/xhtml}a) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element object ({http://www.w3.org/1999/xhtml}object) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element script ({http://www.w3.org/1999/xhtml}script) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element p ({http://www.w3.org/1999/xhtml}p) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element blockquote ({http://www.w3.org/1999/xhtml}blockquote) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element b ({http://www.w3.org/1999/xhtml}b) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element bdo ({http://www.w3.org/1999/xhtml}bdo) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element h2 ({http://www.w3.org/1999/xhtml}h2) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element button ({http://www.w3.org/1999/xhtml}button) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element dl ({http://www.w3.org/1999/xhtml}dl) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Element select ({http://www.w3.org/1999/xhtml}select) inherited from {http://www.w3.org/1999/xhtml}Flow
    
    # Attribute onkeyup uses Python identifier onkeyup
    __onkeyup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeyup'), 'onkeyup', '__httpwww_w3_org1999xhtml_CTD_ANON_75_onkeyup', Script)
    
    onkeyup = property(__onkeyup.value, __onkeyup.set, None, None)

    
    # Attribute onkeydown uses Python identifier onkeydown
    __onkeydown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeydown'), 'onkeydown', '__httpwww_w3_org1999xhtml_CTD_ANON_75_onkeydown', Script)
    
    onkeydown = property(__onkeydown.value, __onkeydown.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_75_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute headers uses Python identifier headers
    __headers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headers'), 'headers', '__httpwww_w3_org1999xhtml_CTD_ANON_75_headers', pyxb.binding.datatypes.IDREFS)
    
    headers = property(__headers.value, __headers.set, None, None)

    
    # Attribute onmouseout uses Python identifier onmouseout
    __onmouseout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseout'), 'onmouseout', '__httpwww_w3_org1999xhtml_CTD_ANON_75_onmouseout', Script)
    
    onmouseout = property(__onmouseout.value, __onmouseout.set, None, None)

    
    # Attribute onmouseup uses Python identifier onmouseup
    __onmouseup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseup'), 'onmouseup', '__httpwww_w3_org1999xhtml_CTD_ANON_75_onmouseup', Script)
    
    onmouseup = property(__onmouseup.value, __onmouseup.set, None, None)

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpwww_w3_org1999xhtml_CTD_ANON_75_style', StyleSheet)
    
    style = property(__style.value, __style.set, None, None)

    
    # Attribute class uses Python identifier class_
    __class = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'class'), 'class_', '__httpwww_w3_org1999xhtml_CTD_ANON_75_class', pyxb.binding.datatypes.NMTOKENS)
    
    class_ = property(__class.value, __class.set, None, None)

    
    # Attribute valign uses Python identifier valign
    __valign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valign'), 'valign', '__httpwww_w3_org1999xhtml_CTD_ANON_75_valign', STD_ANON_10)
    
    valign = property(__valign.value, __valign.set, None, None)

    
    # Attribute colspan uses Python identifier colspan
    __colspan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'colspan'), 'colspan', '__httpwww_w3_org1999xhtml_CTD_ANON_75_colspan', Number, unicode_default=u'1')
    
    colspan = property(__colspan.value, __colspan.set, None, None)

    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpwww_w3_org1999xhtml_CTD_ANON_75_char', Character)
    
    char = property(__char.value, __char.set, None, None)

    
    # Attribute abbr uses Python identifier abbr_
    __abbr_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'abbr'), 'abbr_', '__httpwww_w3_org1999xhtml_CTD_ANON_75_abbr', Text)
    
    abbr_ = property(__abbr_.value, __abbr_.set, None, None)

    
    # Attribute charoff uses Python identifier charoff
    __charoff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charoff'), 'charoff', '__httpwww_w3_org1999xhtml_CTD_ANON_75_charoff', Length)
    
    charoff = property(__charoff.value, __charoff.set, None, None)

    
    # Attribute onkeypress uses Python identifier onkeypress
    __onkeypress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onkeypress'), 'onkeypress', '__httpwww_w3_org1999xhtml_CTD_ANON_75_onkeypress', Script)
    
    onkeypress = property(__onkeypress.value, __onkeypress.set, None, None)

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpwww_w3_org1999xhtml_CTD_ANON_75_axis', pyxb.binding.datatypes.anySimpleType)
    
    axis = property(__axis.value, __axis.set, None, None)

    
    # Attribute onmousemove uses Python identifier onmousemove
    __onmousemove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousemove'), 'onmousemove', '__httpwww_w3_org1999xhtml_CTD_ANON_75_onmousemove', Script)
    
    onmousemove = property(__onmousemove.value, __onmousemove.set, None, None)

    
    # Attribute onmouseover uses Python identifier onmouseover
    __onmouseover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmouseover'), 'onmouseover', '__httpwww_w3_org1999xhtml_CTD_ANON_75_onmouseover', Script)
    
    onmouseover = property(__onmouseover.value, __onmouseover.set, None, None)

    
    # Attribute align uses Python identifier align
    __align = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'align'), 'align', '__httpwww_w3_org1999xhtml_CTD_ANON_75_align', STD_ANON_11)
    
    align = property(__align.value, __align.set, None, None)

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scope'), 'scope', '__httpwww_w3_org1999xhtml_CTD_ANON_75_scope', Scope)
    
    scope = property(__scope.value, __scope.set, None, None)

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpwww_w3_org1999xhtml_CTD_ANON_75_dir', STD_ANON)
    
    dir = property(__dir.value, __dir.set, None, None)

    
    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang_
    __lang_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'lang'), 'lang_', '__httpwww_w3_org1999xhtml_CTD_ANON_75_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    
    lang_ = property(__lang_.value, __lang_.set, None, None)

    
    # Attribute onmousedown uses Python identifier onmousedown
    __onmousedown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onmousedown'), 'onmousedown', '__httpwww_w3_org1999xhtml_CTD_ANON_75_onmousedown', Script)
    
    onmousedown = property(__onmousedown.value, __onmousedown.set, None, None)

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpwww_w3_org1999xhtml_CTD_ANON_75_lang', LanguageCode)
    
    lang = property(__lang.value, __lang.set, None, None)

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpwww_w3_org1999xhtml_CTD_ANON_75_title', Text)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute rowspan uses Python identifier rowspan
    __rowspan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowspan'), 'rowspan', '__httpwww_w3_org1999xhtml_CTD_ANON_75_rowspan', Number, unicode_default=u'1')
    
    rowspan = property(__rowspan.value, __rowspan.set, None, None)

    
    # Attribute onclick uses Python identifier onclick
    __onclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onclick'), 'onclick', '__httpwww_w3_org1999xhtml_CTD_ANON_75_onclick', Script)
    
    onclick = property(__onclick.value, __onclick.set, None, None)

    
    # Attribute ondblclick uses Python identifier ondblclick
    __ondblclick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ondblclick'), 'ondblclick', '__httpwww_w3_org1999xhtml_CTD_ANON_75_ondblclick', Script)
    
    ondblclick = property(__ondblclick.value, __ondblclick.set, None, None)


    _ElementMap = Flow._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = Flow._AttributeMap.copy()
    _AttributeMap.update({
        __onkeyup.name() : __onkeyup,
        __onkeydown.name() : __onkeydown,
        __id.name() : __id,
        __headers.name() : __headers,
        __onmouseout.name() : __onmouseout,
        __onmouseup.name() : __onmouseup,
        __style.name() : __style,
        __class.name() : __class,
        __valign.name() : __valign,
        __colspan.name() : __colspan,
        __char.name() : __char,
        __abbr_.name() : __abbr_,
        __charoff.name() : __charoff,
        __onkeypress.name() : __onkeypress,
        __axis.name() : __axis,
        __onmousemove.name() : __onmousemove,
        __onmouseover.name() : __onmouseover,
        __align.name() : __align,
        __scope.name() : __scope,
        __dir.name() : __dir,
        __lang_.name() : __lang_,
        __onmousedown.name() : __onmousedown,
        __lang.name() : __lang,
        __title.name() : __title,
        __rowspan.name() : __rowspan,
        __onclick.name() : __onclick,
        __ondblclick.name() : __ondblclick
    })



# Complex type CTD_ANON_76 with content type EMPTY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_w3_org1999xhtml_CTD_ANON_76_href', URI, required=True)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpwww_w3_org1999xhtml_CTD_ANON_76_id', pyxb.binding.datatypes.ID)
    
    id = property(__id.value, __id.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __href.name() : __href,
        __id.name() : __id
    }



bdo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bdo'), CTD_ANON_2, documentation=u'\n      I18N BiDi over-ride\n      ')
Namespace.addCategoryObject('elementBinding', bdo.name().localName(), bdo)

ul = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ul'), CTD_ANON_3, documentation=u'\n      Unordered list\n      ')
Namespace.addCategoryObject('elementBinding', ul.name().localName(), ul)

img = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'img'), CTD_ANON_9)
Namespace.addCategoryObject('elementBinding', img.name().localName(), img)

form = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'form'), CTD_ANON_10)
Namespace.addCategoryObject('elementBinding', form.name().localName(), form)

li = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'li'), CTD_ANON_7, documentation=u'\n      list item\n      ')
Namespace.addCategoryObject('elementBinding', li.name().localName(), li)

meta = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'meta'), CTD_ANON_16, documentation=u'\n      generic metainformation\n      ')
Namespace.addCategoryObject('elementBinding', meta.name().localName(), meta)

dl = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dl'), CTD_ANON_17)
Namespace.addCategoryObject('elementBinding', dl.name().localName(), dl)

dt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dt'), CTD_ANON_21)
Namespace.addCategoryObject('elementBinding', dt.name().localName(), dt)

map = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'map'), CTD_ANON_4)
Namespace.addCategoryObject('elementBinding', map.name().localName(), map)

input = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'input'), CTD_ANON_23, documentation=u'\n      form control\n      ')
Namespace.addCategoryObject('elementBinding', input.name().localName(), input)

select = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'select'), CTD_ANON_26, documentation=u'\n      option selector\n      ')
Namespace.addCategoryObject('elementBinding', select.name().localName(), select)

address = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'address'), CTD_ANON_28, documentation=u'\n      information on author\n      ')
Namespace.addCategoryObject('elementBinding', address.name().localName(), address)

blockquote = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), CTD_ANON_30)
Namespace.addCategoryObject('elementBinding', blockquote.name().localName(), blockquote)

hr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hr'), CTD_ANON_31)
Namespace.addCategoryObject('elementBinding', hr.name().localName(), hr)

pre = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pre'), CTD_ANON_13, documentation=u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      ')
Namespace.addCategoryObject('elementBinding', pre.name().localName(), pre)

td = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'td'), CTD_ANON_39)
Namespace.addCategoryObject('elementBinding', td.name().localName(), td)

script = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, documentation=u'\n      script statements, which may include CDATA sections\n      ')
Namespace.addCategoryObject('elementBinding', script.name().localName(), script)

dfn = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dfn'), CTD_ANON_22, documentation=u'\n      definitional\n      ')
Namespace.addCategoryObject('elementBinding', dfn.name().localName(), dfn)

fieldset = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), CTD_ANON_37, documentation=u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      ')
Namespace.addCategoryObject('elementBinding', fieldset.name().localName(), fieldset)

samp = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'samp'), CTD_ANON_29, documentation=u'\n      sample\n      ')
Namespace.addCategoryObject('elementBinding', samp.name().localName(), samp)

noscript = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noscript'), CTD_ANON_46, documentation=u'\n      alternate content container for non script-based rendering\n      ')
Namespace.addCategoryObject('elementBinding', noscript.name().localName(), noscript)

legend = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legend'), CTD_ANON_48, documentation=u'\n      fieldset label\n      ')
Namespace.addCategoryObject('elementBinding', legend.name().localName(), legend)

body = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'body'), CTD_ANON_49)
Namespace.addCategoryObject('elementBinding', body.name().localName(), body)

div = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'div'), CTD_ANON_50, documentation=u'\n      generic language/style container      \n      ')
Namespace.addCategoryObject('elementBinding', div.name().localName(), div)

acronym = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), CTD_ANON_35, documentation=u'\n      acronym\n      ')
Namespace.addCategoryObject('elementBinding', acronym.name().localName(), acronym)

p = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'p'), CTD_ANON_42)
Namespace.addCategoryObject('elementBinding', p.name().localName(), p)

h1 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h1'), CTD_ANON_53)
Namespace.addCategoryObject('elementBinding', h1.name().localName(), h1)

h2 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h2'), CTD_ANON_54)
Namespace.addCategoryObject('elementBinding', h2.name().localName(), h2)

h4 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h4'), CTD_ANON_19)
Namespace.addCategoryObject('elementBinding', h4.name().localName(), h4)

h5 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h5'), CTD_ANON_40)
Namespace.addCategoryObject('elementBinding', h5.name().localName(), h5)

table = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), CTD_ANON_51)
Namespace.addCategoryObject('elementBinding', table.name().localName(), table)

var = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'var'), CTD_ANON_32, documentation=u'\n      variable\n      ')
Namespace.addCategoryObject('elementBinding', var.name().localName(), var)

label = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'label'), CTD_ANON_57, documentation=u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      ")
Namespace.addCategoryObject('elementBinding', label.name().localName(), label)

b = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CTD_ANON_11, documentation=u'\n      bold font\n      ')
Namespace.addCategoryObject('elementBinding', b.name().localName(), b)

optgroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'optgroup'), CTD_ANON_63, documentation=u'\n      option group\n      ')
Namespace.addCategoryObject('elementBinding', optgroup.name().localName(), optgroup)

i = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CTD_ANON_8, documentation=u'\n      italic font\n      ')
Namespace.addCategoryObject('elementBinding', i.name().localName(), i)

big = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'big'), CTD_ANON_12, documentation=u'\n      bigger font\n      ')
Namespace.addCategoryObject('elementBinding', big.name().localName(), big)

small = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'small'), CTD_ANON_15, documentation=u'\n      smaller font\n      ')
Namespace.addCategoryObject('elementBinding', small.name().localName(), small)

object = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'object'), CTD_ANON)
Namespace.addCategoryObject('elementBinding', object.name().localName(), object)

html = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'html'), CTD_ANON_71)
Namespace.addCategoryObject('elementBinding', html.name().localName(), html)

head = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'head'), CTD_ANON_72, documentation=u'\n      content model is "head.misc" combined with a single\n      title and an optional base element in any order\n      ')
Namespace.addCategoryObject('elementBinding', head.name().localName(), head)

param = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'param'), CTD_ANON_73, documentation=u'\n      param is used to supply a named property value.\n      In XML it would seem natural to follow RDF and support an\n      abbreviated syntax where the param elements are replaced\n      by attribute value pairs on the object start tag.\n      ')
Namespace.addCategoryObject('elementBinding', param.name().localName(), param)

code = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'code'), CTD_ANON_24, documentation=u'\n      program code\n      ')
Namespace.addCategoryObject('elementBinding', code.name().localName(), code)

q = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'q'), CTD_ANON_27, documentation=u'\n      inlined quote\n      ')
Namespace.addCategoryObject('elementBinding', q.name().localName(), q)

title = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), CTD_ANON_74, documentation=u'\n      The title element is not considered part of the flow of text.\n      It should be displayed, for example as the page header or\n      window title. Exactly one title is required per document.\n      ')
Namespace.addCategoryObject('elementBinding', title.name().localName(), title)

kbd = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kbd'), CTD_ANON_25, documentation=u'\n      something user would type\n      ')
Namespace.addCategoryObject('elementBinding', kbd.name().localName(), kbd)

link = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'link'), CTD_ANON_41, documentation=u'\n      Relationship values can be used in principle:\n\n      a) for document specific toolbars/menus when used\n         with the link element in document head e.g.\n           start, contents, previous, next, index, end, help\n      b) to link to a separate style sheet (rel="stylesheet")\n      c) to make a link to a script (rel="script")\n      d) by stylesheets to control how collections of\n         html nodes are rendered into printed documents\n      e) to make a link to a printable version of this document\n         e.g. a PostScript or PDF version (rel="alternate" media="print")\n      ')
Namespace.addCategoryObject('elementBinding', link.name().localName(), link)

cite = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cite'), CTD_ANON_33, documentation=u'\n      citation\n      ')
Namespace.addCategoryObject('elementBinding', cite.name().localName(), cite)

option = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'option'), CTD_ANON_62, documentation=u'\n      selectable choice\n      ')
Namespace.addCategoryObject('elementBinding', option.name().localName(), option)

sub = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sub'), CTD_ANON_36, documentation=u'\n      subscript\n      ')
Namespace.addCategoryObject('elementBinding', sub.name().localName(), sub)

area = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'area'), CTD_ANON_47)
Namespace.addCategoryObject('elementBinding', area.name().localName(), area)

textarea = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textarea'), CTD_ANON_55, documentation=u'\n      multi-line text field\n      ')
Namespace.addCategoryObject('elementBinding', textarea.name().localName(), textarea)

tt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tt'), CTD_ANON_6, documentation=u'\n      fixed pitch font\n      ')
Namespace.addCategoryObject('elementBinding', tt.name().localName(), tt)

h3 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h3'), CTD_ANON_60)
Namespace.addCategoryObject('elementBinding', h3.name().localName(), h3)

sup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sup'), CTD_ANON_52, documentation=u'\n      superscript\n      ')
Namespace.addCategoryObject('elementBinding', sup.name().localName(), sup)

ins = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38)
Namespace.addCategoryObject('elementBinding', ins.name().localName(), ins)

ol = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ol'), CTD_ANON_45, documentation=u'\n      Ordered (numbered) list\n      ')
Namespace.addCategoryObject('elementBinding', ol.name().localName(), ol)

del_ = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56)
Namespace.addCategoryObject('elementBinding', del_.name().localName(), del_)

a = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'a'), CTD_ANON_, documentation=u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      ')
Namespace.addCategoryObject('elementBinding', a.name().localName(), a)

tr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tr'), CTD_ANON_64)
Namespace.addCategoryObject('elementBinding', tr.name().localName(), tr)

button = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'button'), CTD_ANON_58, documentation=u'\n      Content is "Flow" excluding a, form and form controls\n      ')
Namespace.addCategoryObject('elementBinding', button.name().localName(), button)

tbody = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tbody'), CTD_ANON_70)
Namespace.addCategoryObject('elementBinding', tbody.name().localName(), tbody)

span = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'span'), CTD_ANON_5, documentation=u'\n      generic language/style container\n      ')
Namespace.addCategoryObject('elementBinding', span.name().localName(), span)

style = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'style'), CTD_ANON_65, documentation=u'\n      style info, which may include CDATA sections\n      ')
Namespace.addCategoryObject('elementBinding', style.name().localName(), style)

dd = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dd'), CTD_ANON_59)
Namespace.addCategoryObject('elementBinding', dd.name().localName(), dd)

br = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'br'), CTD_ANON_14, documentation=u'\n      forced line break\n      ')
Namespace.addCategoryObject('elementBinding', br.name().localName(), br)

em = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'em'), CTD_ANON_18, documentation=u'\n      emphasis\n      ')
Namespace.addCategoryObject('elementBinding', em.name().localName(), em)

base = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'base'), CTD_ANON_76, documentation=u'\n      document base URI\n      ')
Namespace.addCategoryObject('elementBinding', base.name().localName(), base)

strong = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strong'), CTD_ANON_20, documentation=u'\n      strong emphasis\n      ')
Namespace.addCategoryObject('elementBinding', strong.name().localName(), strong)

abbr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'abbr'), CTD_ANON_34, documentation=u'\n      abbreviation\n      ')
Namespace.addCategoryObject('elementBinding', abbr.name().localName(), abbr)

h6 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h6'), CTD_ANON_43)
Namespace.addCategoryObject('elementBinding', h6.name().localName(), h6)

caption = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caption'), CTD_ANON_61)
Namespace.addCategoryObject('elementBinding', caption.name().localName(), caption)

th = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'th'), CTD_ANON_75)
Namespace.addCategoryObject('elementBinding', th.name().localName(), th)

thead = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'thead'), CTD_ANON_68)
Namespace.addCategoryObject('elementBinding', thead.name().localName(), thead)

tfoot = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tfoot'), CTD_ANON_69)
Namespace.addCategoryObject('elementBinding', tfoot.name().localName(), tfoot)

colgroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colgroup'), CTD_ANON_67, documentation=u'\n      colgroup groups a set of col elements. It allows you to group\n      several semantically related columns together.\n      ')
Namespace.addCategoryObject('elementBinding', colgroup.name().localName(), colgroup)

col = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'col'), CTD_ANON_66, documentation=u'\n      col elements define the alignment properties for cells in\n      one or more columns.\n\n      The width attribute specifies the width of the columns, e.g.\n\n          width=64        width in screen pixels\n          width=0.5*      relative width of 0.5\n\n      The span attribute causes the attributes of one\n      col element to apply to more than one column.\n      ')
Namespace.addCategoryObject('elementBinding', col.name().localName(), col)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=CTD_ANON, documentation=u'\n      script statements, which may include CDATA sections\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'address'), CTD_ANON_28, scope=CTD_ANON, documentation=u'\n      information on author\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'object'), CTD_ANON, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strong'), CTD_ANON_20, scope=CTD_ANON, documentation=u'\n      strong emphasis\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dfn'), CTD_ANON_22, scope=CTD_ANON, documentation=u'\n      definitional\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'a'), CTD_ANON_, scope=CTD_ANON, documentation=u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'code'), CTD_ANON_24, scope=CTD_ANON, documentation=u'\n      program code\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sub'), CTD_ANON_36, scope=CTD_ANON, documentation=u'\n      subscript\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'input'), CTD_ANON_23, scope=CTD_ANON, documentation=u'\n      form control\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'div'), CTD_ANON_50, scope=CTD_ANON, documentation=u'\n      generic language/style container      \n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'form'), CTD_ANON_10, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'q'), CTD_ANON_27, scope=CTD_ANON, documentation=u'\n      inlined quote\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'select'), CTD_ANON_26, scope=CTD_ANON, documentation=u'\n      option selector\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), CTD_ANON_37, scope=CTD_ANON, documentation=u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'samp'), CTD_ANON_29, scope=CTD_ANON, documentation=u'\n      sample\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kbd'), CTD_ANON_25, scope=CTD_ANON, documentation=u'\n      something user would type\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textarea'), CTD_ANON_55, scope=CTD_ANON, documentation=u'\n      multi-line text field\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CTD_ANON_11, scope=CTD_ANON, documentation=u'\n      bold font\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ul'), CTD_ANON_3, scope=CTD_ANON, documentation=u'\n      Unordered list\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CTD_ANON_8, scope=CTD_ANON, documentation=u'\n      italic font\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hr'), CTD_ANON_31, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'label'), CTD_ANON_57, scope=CTD_ANON, documentation=u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      "))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cite'), CTD_ANON_33, scope=CTD_ANON, documentation=u'\n      citation\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ol'), CTD_ANON_45, scope=CTD_ANON, documentation=u'\n      Ordered (numbered) list\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'var'), CTD_ANON_32, scope=CTD_ANON, documentation=u'\n      variable\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'small'), CTD_ANON_15, scope=CTD_ANON, documentation=u'\n      smaller font\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'p'), CTD_ANON_42, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'button'), CTD_ANON_58, scope=CTD_ANON, documentation=u'\n      Content is "Flow" excluding a, form and form controls\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'img'), CTD_ANON_9, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dl'), CTD_ANON_17, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), CTD_ANON_35, scope=CTD_ANON, documentation=u'\n      acronym\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'big'), CTD_ANON_12, scope=CTD_ANON, documentation=u'\n      bigger font\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h6'), CTD_ANON_43, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noscript'), CTD_ANON_46, scope=CTD_ANON, documentation=u'\n      alternate content container for non script-based rendering\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'br'), CTD_ANON_14, scope=CTD_ANON, documentation=u'\n      forced line break\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sup'), CTD_ANON_52, scope=CTD_ANON, documentation=u'\n      superscript\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pre'), CTD_ANON_13, scope=CTD_ANON, documentation=u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tt'), CTD_ANON_6, scope=CTD_ANON, documentation=u'\n      fixed pitch font\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'span'), CTD_ANON_5, scope=CTD_ANON, documentation=u'\n      generic language/style container\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h3'), CTD_ANON_60, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), CTD_ANON_51, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bdo'), CTD_ANON_2, scope=CTD_ANON, documentation=u'\n      I18N BiDi over-ride\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), CTD_ANON_30, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h4'), CTD_ANON_19, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h2'), CTD_ANON_54, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h1'), CTD_ANON_53, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'param'), CTD_ANON_73, scope=CTD_ANON, documentation=u'\n      param is used to supply a named property value.\n      In XML it would seem natural to follow RDF and support an\n      abbreviated syntax where the param elements are replaced\n      by attribute value pairs on the object start tag.\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'map'), CTD_ANON_4, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h5'), CTD_ANON_40, scope=CTD_ANON))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'em'), CTD_ANON_18, scope=CTD_ANON, documentation=u'\n      emphasis\n      '))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'abbr'), CTD_ANON_34, scope=CTD_ANON, documentation=u'\n      abbreviation\n      '))
CTD_ANON._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_10, min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_12, min_occurs=1, max_occurs=1)
    )
CTD_ANON._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'param')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON._GroupModel, min_occurs=0L, max_occurs=None)



a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'map'), CTD_ANON_4, scope=a_content))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dfn'), CTD_ANON_22, scope=a_content, documentation=u'\n      definitional\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), CTD_ANON_35, scope=a_content, documentation=u'\n      acronym\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'input'), CTD_ANON_23, scope=a_content, documentation=u'\n      form control\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'code'), CTD_ANON_24, scope=a_content, documentation=u'\n      program code\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sup'), CTD_ANON_52, scope=a_content, documentation=u'\n      superscript\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'select'), CTD_ANON_26, scope=a_content, documentation=u'\n      option selector\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textarea'), CTD_ANON_55, scope=a_content, documentation=u'\n      multi-line text field\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tt'), CTD_ANON_6, scope=a_content, documentation=u'\n      fixed pitch font\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'small'), CTD_ANON_15, scope=a_content, documentation=u'\n      smaller font\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'samp'), CTD_ANON_29, scope=a_content, documentation=u'\n      sample\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'var'), CTD_ANON_32, scope=a_content, documentation=u'\n      variable\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CTD_ANON_8, scope=a_content, documentation=u'\n      italic font\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kbd'), CTD_ANON_25, scope=a_content, documentation=u'\n      something user would type\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CTD_ANON_11, scope=a_content, documentation=u'\n      bold font\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'abbr'), CTD_ANON_34, scope=a_content, documentation=u'\n      abbreviation\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'button'), CTD_ANON_58, scope=a_content, documentation=u'\n      Content is "Flow" excluding a, form and form controls\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'object'), CTD_ANON, scope=a_content))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'big'), CTD_ANON_12, scope=a_content, documentation=u'\n      bigger font\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cite'), CTD_ANON_33, scope=a_content, documentation=u'\n      citation\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sub'), CTD_ANON_36, scope=a_content, documentation=u'\n      subscript\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=a_content))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'q'), CTD_ANON_27, scope=a_content, documentation=u'\n      inlined quote\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'img'), CTD_ANON_9, scope=a_content))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'br'), CTD_ANON_14, scope=a_content, documentation=u'\n      forced line break\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=a_content))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'span'), CTD_ANON_5, scope=a_content, documentation=u'\n      generic language/style container\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'label'), CTD_ANON_57, scope=a_content, documentation=u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      "))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'em'), CTD_ANON_18, scope=a_content, documentation=u'\n      emphasis\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=a_content, documentation=u'\n      script statements, which may include CDATA sections\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bdo'), CTD_ANON_2, scope=a_content, documentation=u'\n      I18N BiDi over-ride\n      '))

a_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strong'), CTD_ANON_20, scope=a_content, documentation=u'\n      strong emphasis\n      '))
a_content._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
a_content._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(a_content._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
a_content._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
a_content._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
a_content._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
a_content._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
a_content._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(a_content._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(a_content._GroupModel_6, min_occurs=1, max_occurs=1)
    )
a_content._ContentModel = pyxb.binding.content.ParticleModel(a_content._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_._GroupModel_8 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_._GroupModel, min_occurs=1, max_occurs=1)



Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=Inline))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'select'), CTD_ANON_26, scope=Inline, documentation=u'\n      option selector\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'span'), CTD_ANON_5, scope=Inline, documentation=u'\n      generic language/style container\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'em'), CTD_ANON_18, scope=Inline, documentation=u'\n      emphasis\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sub'), CTD_ANON_36, scope=Inline, documentation=u'\n      subscript\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kbd'), CTD_ANON_25, scope=Inline, documentation=u'\n      something user would type\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strong'), CTD_ANON_20, scope=Inline, documentation=u'\n      strong emphasis\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'img'), CTD_ANON_9, scope=Inline))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'map'), CTD_ANON_4, scope=Inline))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dfn'), CTD_ANON_22, scope=Inline, documentation=u'\n      definitional\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'code'), CTD_ANON_24, scope=Inline, documentation=u'\n      program code\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), CTD_ANON_35, scope=Inline, documentation=u'\n      acronym\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CTD_ANON_11, scope=Inline, documentation=u'\n      bold font\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'input'), CTD_ANON_23, scope=Inline, documentation=u'\n      form control\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'q'), CTD_ANON_27, scope=Inline, documentation=u'\n      inlined quote\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sup'), CTD_ANON_52, scope=Inline, documentation=u'\n      superscript\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tt'), CTD_ANON_6, scope=Inline, documentation=u'\n      fixed pitch font\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textarea'), CTD_ANON_55, scope=Inline, documentation=u'\n      multi-line text field\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'samp'), CTD_ANON_29, scope=Inline, documentation=u'\n      sample\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CTD_ANON_8, scope=Inline, documentation=u'\n      italic font\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'label'), CTD_ANON_57, scope=Inline, documentation=u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      "))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'button'), CTD_ANON_58, scope=Inline, documentation=u'\n      Content is "Flow" excluding a, form and form controls\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'a'), CTD_ANON_, scope=Inline, documentation=u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'var'), CTD_ANON_32, scope=Inline, documentation=u'\n      variable\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=Inline, documentation=u'\n      script statements, which may include CDATA sections\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'big'), CTD_ANON_12, scope=Inline, documentation=u'\n      bigger font\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'abbr'), CTD_ANON_34, scope=Inline, documentation=u'\n      abbreviation\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cite'), CTD_ANON_33, scope=Inline, documentation=u'\n      citation\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=Inline))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'object'), CTD_ANON, scope=Inline))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'small'), CTD_ANON_15, scope=Inline, documentation=u'\n      smaller font\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'br'), CTD_ANON_14, scope=Inline, documentation=u'\n      forced line break\n      '))

Inline._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bdo'), CTD_ANON_2, scope=Inline, documentation=u'\n      I18N BiDi over-ride\n      '))
Inline._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
Inline._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Inline._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
Inline._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
Inline._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
Inline._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
Inline._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._GroupModel_6, min_occurs=1, max_occurs=1)
    )
Inline._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
Inline._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Inline._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Inline._GroupModel_7, min_occurs=1, max_occurs=1)
    )
Inline._ContentModel = pyxb.binding.content.ParticleModel(Inline._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_2._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_2._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_2._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_2._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'li'), CTD_ANON_7, scope=CTD_ANON_3, documentation=u'\n      list item\n      '))
CTD_ANON_3._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'li')), min_occurs=1, max_occurs=None)
    )
CTD_ANON_3._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_3._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'address'), CTD_ANON_28, scope=CTD_ANON_4, documentation=u'\n      information on author\n      '))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h5'), CTD_ANON_40, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), CTD_ANON_37, scope=CTD_ANON_4, documentation=u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      '))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h6'), CTD_ANON_43, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), CTD_ANON_51, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h3'), CTD_ANON_60, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'form'), CTD_ANON_10, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h2'), CTD_ANON_54, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h1'), CTD_ANON_53, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'area'), CTD_ANON_47, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ul'), CTD_ANON_3, scope=CTD_ANON_4, documentation=u'\n      Unordered list\n      '))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noscript'), CTD_ANON_46, scope=CTD_ANON_4, documentation=u'\n      alternate content container for non script-based rendering\n      '))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ol'), CTD_ANON_45, scope=CTD_ANON_4, documentation=u'\n      Ordered (numbered) list\n      '))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'div'), CTD_ANON_50, scope=CTD_ANON_4, documentation=u'\n      generic language/style container      \n      '))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dl'), CTD_ANON_17, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'p'), CTD_ANON_42, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pre'), CTD_ANON_13, scope=CTD_ANON_4, documentation=u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      '))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=CTD_ANON_4, documentation=u'\n      script statements, which may include CDATA sections\n      '))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h4'), CTD_ANON_19, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hr'), CTD_ANON_31, scope=CTD_ANON_4))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), CTD_ANON_30, scope=CTD_ANON_4))
CTD_ANON_4._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_4._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_4._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_4._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_4._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_4._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_4._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_4._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._GroupModel_6, min_occurs=1, max_occurs=1)
    )
CTD_ANON_4._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_4._GroupModel_, min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'area')), min_occurs=1, max_occurs=None)
    )
CTD_ANON_4._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_4._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_5._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_5._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_5._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_5._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_5._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_5._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_5._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_5._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_5._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_5._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_5._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_5._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_6._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_6._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_6._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_6._GroupModel, min_occurs=1, max_occurs=1)



Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'big'), CTD_ANON_12, scope=Flow, documentation=u'\n      bigger font\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h1'), CTD_ANON_53, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noscript'), CTD_ANON_46, scope=Flow, documentation=u'\n      alternate content container for non script-based rendering\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kbd'), CTD_ANON_25, scope=Flow, documentation=u'\n      something user would type\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'abbr'), CTD_ANON_34, scope=Flow, documentation=u'\n      abbreviation\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pre'), CTD_ANON_13, scope=Flow, documentation=u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'span'), CTD_ANON_5, scope=Flow, documentation=u'\n      generic language/style container\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cite'), CTD_ANON_33, scope=Flow, documentation=u'\n      citation\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hr'), CTD_ANON_31, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strong'), CTD_ANON_20, scope=Flow, documentation=u'\n      strong emphasis\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sub'), CTD_ANON_36, scope=Flow, documentation=u'\n      subscript\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), CTD_ANON_30, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), CTD_ANON_35, scope=Flow, documentation=u'\n      acronym\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'a'), CTD_ANON_, scope=Flow, documentation=u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h4'), CTD_ANON_19, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textarea'), CTD_ANON_55, scope=Flow, documentation=u'\n      multi-line text field\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sup'), CTD_ANON_52, scope=Flow, documentation=u'\n      superscript\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'img'), CTD_ANON_9, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h5'), CTD_ANON_40, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dfn'), CTD_ANON_22, scope=Flow, documentation=u'\n      definitional\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'map'), CTD_ANON_4, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), CTD_ANON_37, scope=Flow, documentation=u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ol'), CTD_ANON_45, scope=Flow, documentation=u'\n      Ordered (numbered) list\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h6'), CTD_ANON_43, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h3'), CTD_ANON_60, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'code'), CTD_ANON_24, scope=Flow, documentation=u'\n      program code\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'select'), CTD_ANON_26, scope=Flow, documentation=u'\n      option selector\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'small'), CTD_ANON_15, scope=Flow, documentation=u'\n      smaller font\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), CTD_ANON_51, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'var'), CTD_ANON_32, scope=Flow, documentation=u'\n      variable\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'div'), CTD_ANON_50, scope=Flow, documentation=u'\n      generic language/style container      \n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'form'), CTD_ANON_10, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'address'), CTD_ANON_28, scope=Flow, documentation=u'\n      information on author\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tt'), CTD_ANON_6, scope=Flow, documentation=u'\n      fixed pitch font\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'em'), CTD_ANON_18, scope=Flow, documentation=u'\n      emphasis\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'samp'), CTD_ANON_29, scope=Flow, documentation=u'\n      sample\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'input'), CTD_ANON_23, scope=Flow, documentation=u'\n      form control\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ul'), CTD_ANON_3, scope=Flow, documentation=u'\n      Unordered list\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'br'), CTD_ANON_14, scope=Flow, documentation=u'\n      forced line break\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CTD_ANON_8, scope=Flow, documentation=u'\n      italic font\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'label'), CTD_ANON_57, scope=Flow, documentation=u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      "))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'object'), CTD_ANON, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=Flow, documentation=u'\n      script statements, which may include CDATA sections\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'p'), CTD_ANON_42, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CTD_ANON_11, scope=Flow, documentation=u'\n      bold font\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bdo'), CTD_ANON_2, scope=Flow, documentation=u'\n      I18N BiDi over-ride\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h2'), CTD_ANON_54, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'button'), CTD_ANON_58, scope=Flow, documentation=u'\n      Content is "Flow" excluding a, form and form controls\n      '))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dl'), CTD_ANON_17, scope=Flow))

Flow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'q'), CTD_ANON_27, scope=Flow, documentation=u'\n      inlined quote\n      '))
Flow._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_10, min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
Flow._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_12, min_occurs=1, max_occurs=1)
    )
Flow._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Flow._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Flow._GroupModel_11, min_occurs=1, max_occurs=1)
    )
Flow._ContentModel = pyxb.binding.content.ParticleModel(Flow._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_7._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_10, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_13 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_13, min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_12, min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._GroupModel_14 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_7._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel_14, min_occurs=1, max_occurs=1)
    )
CTD_ANON_7._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_7._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_8._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_8._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_8._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_8._GroupModel, min_occurs=1, max_occurs=1)



form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pre'), CTD_ANON_13, scope=form_content, documentation=u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      '))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ol'), CTD_ANON_45, scope=form_content, documentation=u'\n      Ordered (numbered) list\n      '))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'address'), CTD_ANON_28, scope=form_content, documentation=u'\n      information on author\n      '))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h5'), CTD_ANON_40, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h2'), CTD_ANON_54, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noscript'), CTD_ANON_46, scope=form_content, documentation=u'\n      alternate content container for non script-based rendering\n      '))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hr'), CTD_ANON_31, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h3'), CTD_ANON_60, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'div'), CTD_ANON_50, scope=form_content, documentation=u'\n      generic language/style container      \n      '))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h1'), CTD_ANON_53, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dl'), CTD_ANON_17, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), CTD_ANON_51, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), CTD_ANON_37, scope=form_content, documentation=u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      '))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), CTD_ANON_30, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=form_content, documentation=u'\n      script statements, which may include CDATA sections\n      '))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h4'), CTD_ANON_19, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ul'), CTD_ANON_3, scope=form_content, documentation=u'\n      Unordered list\n      '))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'p'), CTD_ANON_42, scope=form_content))

form_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h6'), CTD_ANON_43, scope=form_content))
form_content._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
form_content._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
form_content._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
form_content._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
form_content._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
form_content._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(form_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._GroupModel_6, min_occurs=1, max_occurs=1)
    )
form_content._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(form_content._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(form_content._GroupModel_5, min_occurs=1, max_occurs=1)
    )
form_content._ContentModel = pyxb.binding.content.ParticleModel(form_content._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_10._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_10._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_10._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_10._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_10._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_10._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._GroupModel_6, min_occurs=1, max_occurs=1)
    )
CTD_ANON_10._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_10._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_10._GroupModel_5, min_occurs=1, max_occurs=1)
    )
CTD_ANON_10._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_10._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_11._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_11._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_11._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_11._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_11._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_11._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_11._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_11._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_11._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_11._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_11._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_11._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_12._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_12._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_12._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_12._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_12._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_12._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_12._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_12._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_12._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_12._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_12._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_12._GroupModel, min_occurs=1, max_occurs=1)



pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'button'), CTD_ANON_58, scope=pre_content, documentation=u'\n      Content is "Flow" excluding a, form and form controls\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'abbr'), CTD_ANON_34, scope=pre_content, documentation=u'\n      abbreviation\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'br'), CTD_ANON_14, scope=pre_content, documentation=u'\n      forced line break\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kbd'), CTD_ANON_25, scope=pre_content, documentation=u'\n      something user would type\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'q'), CTD_ANON_27, scope=pre_content, documentation=u'\n      inlined quote\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'code'), CTD_ANON_24, scope=pre_content, documentation=u'\n      program code\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'span'), CTD_ANON_5, scope=pre_content, documentation=u'\n      generic language/style container\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'big'), CTD_ANON_12, scope=pre_content, documentation=u'\n      bigger font\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tt'), CTD_ANON_6, scope=pre_content, documentation=u'\n      fixed pitch font\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bdo'), CTD_ANON_2, scope=pre_content, documentation=u'\n      I18N BiDi over-ride\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'input'), CTD_ANON_23, scope=pre_content, documentation=u'\n      form control\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CTD_ANON_8, scope=pre_content, documentation=u'\n      italic font\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=pre_content, documentation=u'\n      script statements, which may include CDATA sections\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'map'), CTD_ANON_4, scope=pre_content))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'a'), CTD_ANON_, scope=pre_content, documentation=u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textarea'), CTD_ANON_55, scope=pre_content, documentation=u'\n      multi-line text field\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CTD_ANON_11, scope=pre_content, documentation=u'\n      bold font\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=pre_content))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cite'), CTD_ANON_33, scope=pre_content, documentation=u'\n      citation\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'samp'), CTD_ANON_29, scope=pre_content, documentation=u'\n      sample\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=pre_content))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'var'), CTD_ANON_32, scope=pre_content, documentation=u'\n      variable\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), CTD_ANON_35, scope=pre_content, documentation=u'\n      acronym\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'em'), CTD_ANON_18, scope=pre_content, documentation=u'\n      emphasis\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'small'), CTD_ANON_15, scope=pre_content, documentation=u'\n      smaller font\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sub'), CTD_ANON_36, scope=pre_content, documentation=u'\n      subscript\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'select'), CTD_ANON_26, scope=pre_content, documentation=u'\n      option selector\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strong'), CTD_ANON_20, scope=pre_content, documentation=u'\n      strong emphasis\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sup'), CTD_ANON_52, scope=pre_content, documentation=u'\n      superscript\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dfn'), CTD_ANON_22, scope=pre_content, documentation=u'\n      definitional\n      '))

pre_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'label'), CTD_ANON_57, scope=pre_content, documentation=u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      "))
pre_content._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
pre_content._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
pre_content._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
pre_content._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
pre_content._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
pre_content._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(pre_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(pre_content._GroupModel_5, min_occurs=1, max_occurs=1)
    )
pre_content._ContentModel = pyxb.binding.content.ParticleModel(pre_content._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_13._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_13._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_13._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_13._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_13._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_13._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._GroupModel_6, min_occurs=1, max_occurs=1)
    )
CTD_ANON_13._GroupModel_7 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_13._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_13._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_13._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_13._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_13._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_15._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_15._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_15._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_15._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dt'), CTD_ANON_21, scope=CTD_ANON_17))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dd'), CTD_ANON_59, scope=CTD_ANON_17))
CTD_ANON_17._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dd')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_17._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_17._GroupModel, min_occurs=1, max_occurs=None)


CTD_ANON_18._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_18._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_18._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_18._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_19._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_19._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_19._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_19._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_20._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_20._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_20._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_20._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_21._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_21._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_21._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_21._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_22._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_22._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_22._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_22._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_22._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_22._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_22._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_22._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_22._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_22._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_22._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_22._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_24._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_24._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_24._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_24._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_25._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_25._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_25._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_25._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'option'), CTD_ANON_62, scope=CTD_ANON_26, documentation=u'\n      selectable choice\n      '))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'optgroup'), CTD_ANON_63, scope=CTD_ANON_26, documentation=u'\n      option group\n      '))
CTD_ANON_26._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'optgroup')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'option')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_26._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_26._GroupModel, min_occurs=1, max_occurs=None)


CTD_ANON_27._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_27._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_27._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_27._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_27._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_27._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_27._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_27._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_27._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_27._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_27._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_27._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_28._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_28._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_28._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_28._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_28._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_28._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_28._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_28._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_28._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_28._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_28._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_28._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_29._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_29._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_29._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_29._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_29._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_29._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_29._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_29._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_29._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_29._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_29._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_29._GroupModel, min_occurs=1, max_occurs=1)



Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h6'), CTD_ANON_43, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), CTD_ANON_51, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ol'), CTD_ANON_45, scope=Block, documentation=u'\n      Ordered (numbered) list\n      '))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'form'), CTD_ANON_10, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hr'), CTD_ANON_31, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ul'), CTD_ANON_3, scope=Block, documentation=u'\n      Unordered list\n      '))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noscript'), CTD_ANON_46, scope=Block, documentation=u'\n      alternate content container for non script-based rendering\n      '))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'p'), CTD_ANON_42, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'div'), CTD_ANON_50, scope=Block, documentation=u'\n      generic language/style container      \n      '))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dl'), CTD_ANON_17, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h1'), CTD_ANON_53, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pre'), CTD_ANON_13, scope=Block, documentation=u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      '))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h2'), CTD_ANON_54, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=Block, documentation=u'\n      script statements, which may include CDATA sections\n      '))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h3'), CTD_ANON_60, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), CTD_ANON_30, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h4'), CTD_ANON_19, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'address'), CTD_ANON_28, scope=Block, documentation=u'\n      information on author\n      '))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h5'), CTD_ANON_40, scope=Block))

Block._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), CTD_ANON_37, scope=Block, documentation=u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      '))
Block._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
Block._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
Block._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
Block._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
Block._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
Block._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._GroupModel_6, min_occurs=1, max_occurs=1)
    )
Block._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(Block._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(Block._GroupModel_5, min_occurs=1, max_occurs=1)
    )
Block._ContentModel = pyxb.binding.content.ParticleModel(Block._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_30._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_30._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_30._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_30._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_30._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_30._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._GroupModel_6, min_occurs=1, max_occurs=1)
    )
CTD_ANON_30._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_30._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_30._GroupModel_5, min_occurs=1, max_occurs=1)
    )
CTD_ANON_30._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_30._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_32._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_32._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_32._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_32._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_32._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_32._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_32._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_32._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_32._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_32._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_32._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_32._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_33._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_33._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_33._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_33._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_33._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_33._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_33._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_33._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_33._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_33._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_33._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_33._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_34._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_34._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_34._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_34._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_34._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_34._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_34._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_34._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_34._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_34._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_34._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_34._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_35._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_35._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_35._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_35._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_35._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_35._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_35._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_35._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_35._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_35._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_35._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_35._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_36._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_36._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_36._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_36._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_36._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_36._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_36._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_36._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_36._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_36._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_36._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_36._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'br'), CTD_ANON_14, scope=CTD_ANON_37, documentation=u'\n      forced line break\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hr'), CTD_ANON_31, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'big'), CTD_ANON_12, scope=CTD_ANON_37, documentation=u'\n      bigger font\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'code'), CTD_ANON_24, scope=CTD_ANON_37, documentation=u'\n      program code\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bdo'), CTD_ANON_2, scope=CTD_ANON_37, documentation=u'\n      I18N BiDi over-ride\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h2'), CTD_ANON_54, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sup'), CTD_ANON_52, scope=CTD_ANON_37, documentation=u'\n      superscript\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tt'), CTD_ANON_6, scope=CTD_ANON_37, documentation=u'\n      fixed pitch font\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'span'), CTD_ANON_5, scope=CTD_ANON_37, documentation=u'\n      generic language/style container\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=CTD_ANON_37, documentation=u'\n      script statements, which may include CDATA sections\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legend'), CTD_ANON_48, scope=CTD_ANON_37, documentation=u'\n      fieldset label\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sub'), CTD_ANON_36, scope=CTD_ANON_37, documentation=u'\n      subscript\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'object'), CTD_ANON, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), CTD_ANON_51, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h6'), CTD_ANON_43, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'address'), CTD_ANON_28, scope=CTD_ANON_37, documentation=u'\n      information on author\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'img'), CTD_ANON_9, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'div'), CTD_ANON_50, scope=CTD_ANON_37, documentation=u'\n      generic language/style container      \n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'em'), CTD_ANON_18, scope=CTD_ANON_37, documentation=u'\n      emphasis\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'q'), CTD_ANON_27, scope=CTD_ANON_37, documentation=u'\n      inlined quote\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), CTD_ANON_35, scope=CTD_ANON_37, documentation=u'\n      acronym\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'select'), CTD_ANON_26, scope=CTD_ANON_37, documentation=u'\n      option selector\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'abbr'), CTD_ANON_34, scope=CTD_ANON_37, documentation=u'\n      abbreviation\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'samp'), CTD_ANON_29, scope=CTD_ANON_37, documentation=u'\n      sample\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h5'), CTD_ANON_40, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textarea'), CTD_ANON_55, scope=CTD_ANON_37, documentation=u'\n      multi-line text field\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ul'), CTD_ANON_3, scope=CTD_ANON_37, documentation=u'\n      Unordered list\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'input'), CTD_ANON_23, scope=CTD_ANON_37, documentation=u'\n      form control\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kbd'), CTD_ANON_25, scope=CTD_ANON_37, documentation=u'\n      something user would type\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'label'), CTD_ANON_57, scope=CTD_ANON_37, documentation=u"\n      Each label must not contain more than ONE field\n      Label elements shouldn't be nested.\n      "))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'form'), CTD_ANON_10, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ol'), CTD_ANON_45, scope=CTD_ANON_37, documentation=u'\n      Ordered (numbered) list\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h4'), CTD_ANON_19, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CTD_ANON_11, scope=CTD_ANON_37, documentation=u'\n      bold font\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldset'), CTD_ANON_37, scope=CTD_ANON_37, documentation=u'\n      The fieldset element is used to group form fields.\n      Only one legend element should occur in the content\n      and if present should only be preceded by whitespace.\n\n      NOTE: this content model is different from the XHTML 1.0 DTD,\n      closer to the intended content model in HTML4 DTD\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'button'), CTD_ANON_58, scope=CTD_ANON_37, documentation=u'\n      Content is "Flow" excluding a, form and form controls\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dfn'), CTD_ANON_22, scope=CTD_ANON_37, documentation=u'\n      definitional\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dl'), CTD_ANON_17, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CTD_ANON_8, scope=CTD_ANON_37, documentation=u'\n      italic font\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), CTD_ANON_30, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'p'), CTD_ANON_42, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'a'), CTD_ANON_, scope=CTD_ANON_37, documentation=u'\n      content is "Inline" except that anchors shouldn\'t be nested\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'map'), CTD_ANON_4, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noscript'), CTD_ANON_46, scope=CTD_ANON_37, documentation=u'\n      alternate content container for non script-based rendering\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'var'), CTD_ANON_32, scope=CTD_ANON_37, documentation=u'\n      variable\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h1'), CTD_ANON_53, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h3'), CTD_ANON_60, scope=CTD_ANON_37))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'small'), CTD_ANON_15, scope=CTD_ANON_37, documentation=u'\n      smaller font\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cite'), CTD_ANON_33, scope=CTD_ANON_37, documentation=u'\n      citation\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pre'), CTD_ANON_13, scope=CTD_ANON_37, documentation=u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      '))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strong'), CTD_ANON_20, scope=CTD_ANON_37, documentation=u'\n      strong emphasis\n      '))
CTD_ANON_37._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_10, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_13 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_13, min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_12, min_occurs=1, max_occurs=1)
    )
CTD_ANON_37._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legend')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CTD_ANON_37._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_37._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_38._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_10, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_13 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_13, min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_12, min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._GroupModel_14 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_38._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel_14, min_occurs=1, max_occurs=1)
    )
CTD_ANON_38._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_38._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_39._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_10, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_13 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_13, min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_12, min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._GroupModel_14 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_39._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel_14, min_occurs=1, max_occurs=1)
    )
CTD_ANON_39._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_39._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_40._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_40._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_40._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_40._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_40._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_40._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_40._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_40._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_40._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_40._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_40._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_40._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_42._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_42._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_42._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_42._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_42._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_42._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_42._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_42._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_42._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_42._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_42._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_42._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_43._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_43._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_43._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_43._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_43._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_43._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_43._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_43._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_43._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_43._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_43._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_43._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_44._GroupModel = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_44._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_44._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'li'), CTD_ANON_7, scope=CTD_ANON_45, documentation=u'\n      list item\n      '))
CTD_ANON_45._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'li')), min_occurs=1, max_occurs=None)
    )
CTD_ANON_45._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_45._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_46._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_46._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_46._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_46._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_46._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_46._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._GroupModel_6, min_occurs=1, max_occurs=1)
    )
CTD_ANON_46._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_46._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_46._GroupModel_5, min_occurs=1, max_occurs=1)
    )
CTD_ANON_46._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_46._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_48._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_48._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_48._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_48._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_48._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_48._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_48._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_48._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_48._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_48._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_48._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_48._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_49._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_49._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_49._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_49._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_49._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_49._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._GroupModel_6, min_occurs=1, max_occurs=1)
    )
CTD_ANON_49._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_49._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_49._GroupModel_5, min_occurs=1, max_occurs=1)
    )
CTD_ANON_49._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_49._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_50._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_10, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_13 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_13, min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_12, min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._GroupModel_14 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_50._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel_14, min_occurs=1, max_occurs=1)
    )
CTD_ANON_50._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_50._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'thead'), CTD_ANON_68, scope=CTD_ANON_51))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'col'), CTD_ANON_66, scope=CTD_ANON_51, documentation=u'\n      col elements define the alignment properties for cells in\n      one or more columns.\n\n      The width attribute specifies the width of the columns, e.g.\n\n          width=64        width in screen pixels\n          width=0.5*      relative width of 0.5\n\n      The span attribute causes the attributes of one\n      col element to apply to more than one column.\n      '))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tbody'), CTD_ANON_70, scope=CTD_ANON_51))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tfoot'), CTD_ANON_69, scope=CTD_ANON_51))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tr'), CTD_ANON_64, scope=CTD_ANON_51))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'caption'), CTD_ANON_61, scope=CTD_ANON_51))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colgroup'), CTD_ANON_67, scope=CTD_ANON_51, documentation=u'\n      colgroup groups a set of col elements. It allows you to group\n      several semantically related columns together.\n      '))
CTD_ANON_51._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'col')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colgroup')), min_occurs=0L, max_occurs=None)
    )
CTD_ANON_51._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tbody')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tr')), min_occurs=1, max_occurs=None)
    )
CTD_ANON_51._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'caption')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_51._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'thead')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tfoot')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_51._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CTD_ANON_51._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_51._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_52._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_52._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_52._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_52._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_52._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_52._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_52._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_52._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_52._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_52._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_52._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_52._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_53._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_53._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_53._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_53._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_53._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_53._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_53._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_53._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_53._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_53._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_53._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_53._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_54._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_54._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_54._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_54._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_54._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_54._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_54._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_54._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_54._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_54._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_54._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_54._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_55._GroupModel = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_55._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_55._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_56._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_10, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_13 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_13, min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_12, min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._GroupModel_14 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_56._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel_14, min_occurs=1, max_occurs=1)
    )
CTD_ANON_56._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_56._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_57._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_57._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_57._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_57._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_57._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_57._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_57._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_57._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_57._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_57._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_57._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_57._GroupModel, min_occurs=1, max_occurs=1)



button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h1'), CTD_ANON_53, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dfn'), CTD_ANON_22, scope=button_content, documentation=u'\n      definitional\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'object'), CTD_ANON, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tt'), CTD_ANON_6, scope=button_content, documentation=u'\n      fixed pitch font\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h2'), CTD_ANON_54, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'code'), CTD_ANON_24, scope=button_content, documentation=u'\n      program code\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'img'), CTD_ANON_9, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'noscript'), CTD_ANON_46, scope=button_content, documentation=u'\n      alternate content container for non script-based rendering\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h3'), CTD_ANON_60, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'map'), CTD_ANON_4, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'q'), CTD_ANON_27, scope=button_content, documentation=u'\n      inlined quote\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'blockquote'), CTD_ANON_30, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ins'), CTD_ANON_38, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h4'), CTD_ANON_19, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'samp'), CTD_ANON_29, scope=button_content, documentation=u'\n      sample\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'abbr'), CTD_ANON_34, scope=button_content, documentation=u'\n      abbreviation\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'address'), CTD_ANON_28, scope=button_content, documentation=u'\n      information on author\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kbd'), CTD_ANON_25, scope=button_content, documentation=u'\n      something user would type\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h5'), CTD_ANON_40, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CTD_ANON_11, scope=button_content, documentation=u'\n      bold font\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=button_content, documentation=u'\n      script statements, which may include CDATA sections\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), CTD_ANON_51, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'del'), CTD_ANON_56, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sub'), CTD_ANON_36, scope=button_content, documentation=u'\n      subscript\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'h6'), CTD_ANON_43, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'var'), CTD_ANON_32, scope=button_content, documentation=u'\n      variable\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'div'), CTD_ANON_50, scope=button_content, documentation=u'\n      generic language/style container      \n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'span'), CTD_ANON_5, scope=button_content, documentation=u'\n      generic language/style container\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pre'), CTD_ANON_13, scope=button_content, documentation=u'\n      content is "Inline" excluding "img|object|big|small|sub|sup"\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cite'), CTD_ANON_33, scope=button_content, documentation=u'\n      citation\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sup'), CTD_ANON_52, scope=button_content, documentation=u'\n      superscript\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CTD_ANON_8, scope=button_content, documentation=u'\n      italic font\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'small'), CTD_ANON_15, scope=button_content, documentation=u'\n      smaller font\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ul'), CTD_ANON_3, scope=button_content, documentation=u'\n      Unordered list\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'br'), CTD_ANON_14, scope=button_content, documentation=u'\n      forced line break\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'big'), CTD_ANON_12, scope=button_content, documentation=u'\n      bigger font\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hr'), CTD_ANON_31, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'p'), CTD_ANON_42, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ol'), CTD_ANON_45, scope=button_content, documentation=u'\n      Ordered (numbered) list\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'em'), CTD_ANON_18, scope=button_content, documentation=u'\n      emphasis\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bdo'), CTD_ANON_2, scope=button_content, documentation=u'\n      I18N BiDi over-ride\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'acronym'), CTD_ANON_35, scope=button_content, documentation=u'\n      acronym\n      '))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dl'), CTD_ANON_17, scope=button_content))

button_content._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strong'), CTD_ANON_20, scope=button_content, documentation=u'\n      strong emphasis\n      '))
button_content._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
button_content._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
button_content._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
button_content._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
button_content._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
button_content._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
button_content._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
button_content._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
button_content._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._GroupModel_9, min_occurs=1, max_occurs=1)
    )
button_content._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(button_content._GroupModel_8, min_occurs=1, max_occurs=1)
    )
button_content._ContentModel = pyxb.binding.content.ParticleModel(button_content._GroupModel, min_occurs=0L, max_occurs=None)


CTD_ANON_58._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_10, min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._GroupModel_11 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_58._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON_58._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_58._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_59._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_10, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_13 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_13, min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_12, min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._GroupModel_14 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_59._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel_14, min_occurs=1, max_occurs=1)
    )
CTD_ANON_59._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_59._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_60._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_60._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_60._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_60._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_60._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_60._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_60._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_60._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_60._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_60._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_60._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_60._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_61._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_61._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_61._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_61._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_61._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_61._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel_7, min_occurs=1, max_occurs=1)
    )
CTD_ANON_61._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_61._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_61._GroupModel_9 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_61._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel_9, min_occurs=1, max_occurs=1)
    )
CTD_ANON_61._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_61._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_62._GroupModel = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_62._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_62._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'option'), CTD_ANON_62, scope=CTD_ANON_63, documentation=u'\n      selectable choice\n      '))
CTD_ANON_63._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'option')), min_occurs=1, max_occurs=None)
    )
CTD_ANON_63._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_63._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'td'), CTD_ANON_39, scope=CTD_ANON_64))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'th'), CTD_ANON_75, scope=CTD_ANON_64))
CTD_ANON_64._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'th')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'td')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_64._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_64._GroupModel, min_occurs=1, max_occurs=None)


CTD_ANON_65._GroupModel = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_65._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_65._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'col'), CTD_ANON_66, scope=CTD_ANON_67, documentation=u'\n      col elements define the alignment properties for cells in\n      one or more columns.\n\n      The width attribute specifies the width of the columns, e.g.\n\n          width=64        width in screen pixels\n          width=0.5*      relative width of 0.5\n\n      The span attribute causes the attributes of one\n      col element to apply to more than one column.\n      '))
CTD_ANON_67._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'col')), min_occurs=0L, max_occurs=None)
    )
CTD_ANON_67._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_67._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tr'), CTD_ANON_64, scope=CTD_ANON_68))
CTD_ANON_68._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tr')), min_occurs=1, max_occurs=None)
    )
CTD_ANON_68._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_68._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tr'), CTD_ANON_64, scope=CTD_ANON_69))
CTD_ANON_69._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tr')), min_occurs=1, max_occurs=None)
    )
CTD_ANON_69._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_69._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tr'), CTD_ANON_64, scope=CTD_ANON_70))
CTD_ANON_70._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tr')), min_occurs=1, max_occurs=None)
    )
CTD_ANON_70._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_70._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'body'), CTD_ANON_49, scope=CTD_ANON_71))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'head'), CTD_ANON_72, scope=CTD_ANON_71, documentation=u'\n      content model is "head.misc" combined with a single\n      title and an optional base element in any order\n      '))
CTD_ANON_71._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'head')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'body')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_71._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_71._GroupModel, min_occurs=1, max_occurs=1)



CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'style'), CTD_ANON_65, scope=CTD_ANON_72, documentation=u'\n      style info, which may include CDATA sections\n      '))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'object'), CTD_ANON, scope=CTD_ANON_72))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'meta'), CTD_ANON_16, scope=CTD_ANON_72, documentation=u'\n      generic metainformation\n      '))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'base'), CTD_ANON_76, scope=CTD_ANON_72, documentation=u'\n      document base URI\n      '))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'script'), CTD_ANON_44, scope=CTD_ANON_72, documentation=u'\n      script statements, which may include CDATA sections\n      '))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'link'), CTD_ANON_41, scope=CTD_ANON_72, documentation=u'\n      Relationship values can be used in principle:\n\n      a) for document specific toolbars/menus when used\n         with the link element in document head e.g.\n           start, contents, previous, next, index, end, help\n      b) to link to a separate style sheet (rel="stylesheet")\n      c) to make a link to a script (rel="script")\n      d) by stylesheets to control how collections of\n         html nodes are rendered into printed documents\n      e) to make a link to a printable version of this document\n         e.g. a PostScript or PDF version (rel="alternate" media="print")\n      '))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'title'), CTD_ANON_74, scope=CTD_ANON_72, documentation=u'\n      The title element is not considered part of the flow of text.\n      It should be displayed, for example as the page header or\n      window title. Exactly one title is required per document.\n      '))
CTD_ANON_72._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'style')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'meta')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'link')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_72._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CTD_ANON_72._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'style')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'meta')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'link')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_72._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_6, min_occurs=0L, max_occurs=None)
    )
CTD_ANON_72._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'style')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'meta')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'link')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_72._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_9, min_occurs=0L, max_occurs=None)
    )
CTD_ANON_72._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'base')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_8, min_occurs=1, max_occurs=1)
    )
CTD_ANON_72._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_7, min_occurs=0L, max_occurs=1)
    )
CTD_ANON_72._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'style')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'meta')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'link')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_72._GroupModel_11 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_12, min_occurs=0L, max_occurs=None)
    )
CTD_ANON_72._GroupModel_14 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'style')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'meta')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'link')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_72._GroupModel_13 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_14, min_occurs=0L, max_occurs=None)
    )
CTD_ANON_72._GroupModel_10 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'base')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_11, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'title')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_13, min_occurs=1, max_occurs=1)
    )
CTD_ANON_72._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_10, min_occurs=1, max_occurs=1)
    )
CTD_ANON_72._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel_3, min_occurs=1, max_occurs=1)
    )
CTD_ANON_72._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_72._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_74._GroupModel = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_74._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_74._GroupModel, min_occurs=1, max_occurs=1)


CTD_ANON_75._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h1')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h2')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h3')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h4')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h5')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'h6')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ul')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ol')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dl')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'blockquote')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'address')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'div')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldset')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'table')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'span')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_7 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'img')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_9 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'big')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'small')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'em')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strong')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dfn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'code')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'q')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'samp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kbd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'var')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cite')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'abbr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'acronym')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sup')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_11 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'input')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'select')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textarea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'label')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'button')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'a')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_7, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_9, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_10, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_11, min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_13 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'del')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'script')), min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_12 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'noscript')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_13, min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'form')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_12, min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._GroupModel_14 = pyxb.binding.content.GroupSequence(
    
    )
CTD_ANON_75._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel_14, min_occurs=1, max_occurs=1)
    )
CTD_ANON_75._ContentModel = pyxb.binding.content.ParticleModel(CTD_ANON_75._GroupModel, min_occurs=1, max_occurs=1)
