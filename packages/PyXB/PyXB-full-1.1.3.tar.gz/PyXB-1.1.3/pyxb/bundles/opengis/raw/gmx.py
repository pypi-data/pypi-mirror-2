# ./pyxb/bundles/opengis/raw/gmx.py
# PyXB bindings for NM:32aa76f492cf00e4210ae3e5c7372c09fc6a27d4
# Generated 2011-09-09 14:18:45.832327 by PyXB version 1.1.3
# Namespace http://www.isotc211.org/2005/gmx

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import StringIO
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:88e087de-db18-11e0-8933-001fbc013adc')

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import pyxb.bundles.opengis.gml_3_2
import pyxb.bundles.opengis.misc.xlinks
import pyxb.bundles.opengis.iso19139.gmd
import pyxb.bundles.opengis.iso19139.gco

Namespace = pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gmx', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])
ModuleRecord = Namespace.lookupModuleRecordByUID(_GenerationUID, create_if_missing=True)
ModuleRecord._setModule(sys.modules[__name__])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a Python instance."""
    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=Namespace.fallbackNamespace(), location_base=location_base)
    handler = saxer.getContentHandler()
    saxer.parse(StringIO.StringIO(xml_text))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, _fallback_namespace=default_namespace)


# Complex type ML_ImageCRS_PropertyType with content type ELEMENT_ONLY
class ML_ImageCRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ImageCRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_ImageCRS uses Python identifier ML_ImageCRS
    __ML_ImageCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_ImageCRS'), 'ML_ImageCRS', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_httpwww_isotc211_org2005gmxML_ImageCRS', False)

    
    ML_ImageCRS = property(__ML_ImageCRS.value, __ML_ImageCRS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __ML_ImageCRS.name() : __ML_ImageCRS
    }
    _AttributeMap = {
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __arcrole.name() : __arcrole
    }
Namespace.addCategoryObject('typeBinding', u'ML_ImageCRS_PropertyType', ML_ImageCRS_PropertyType)


# Complex type CrsAlt_Type with content type ELEMENT_ONLY
class CrsAlt_Type (pyxb.bundles.opengis.gml_3_2.AbstractCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CrsAlt_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_CrsAlt_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_CrsAlt_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractCRSType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractCRSType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'CrsAlt_Type', CrsAlt_Type)


# Complex type ML_EngineeringDatum_Type with content type ELEMENT_ONLY
class ML_EngineeringDatum_Type (pyxb.bundles.opengis.gml_3_2.EngineeringDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringDatum_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.EngineeringDatumType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.EngineeringDatumType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.EngineeringDatumType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_EngineeringDatum_Type', ML_EngineeringDatum_Type)


# Complex type CrsAlt_PropertyType with content type ELEMENT_ONLY
class CrsAlt_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CrsAlt_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CrsAlt uses Python identifier CrsAlt
    __CrsAlt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CrsAlt'), 'CrsAlt', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_httpwww_isotc211_org2005gmxCrsAlt', False)

    
    CrsAlt = property(__CrsAlt.value, __CrsAlt.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CrsAlt_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __CrsAlt.name() : __CrsAlt
    }
    _AttributeMap = {
        __show.name() : __show,
        __type.name() : __type,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
Namespace.addCategoryObject('typeBinding', u'CrsAlt_PropertyType', CrsAlt_PropertyType)


# Complex type ML_LinearCS_Type with content type ELEMENT_ONLY
class ML_LinearCS_Type (pyxb.bundles.opengis.gml_3_2.LinearCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_LinearCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.LinearCSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_LinearCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.LinearCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.LinearCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_LinearCS_Type', ML_LinearCS_Type)


# Complex type ML_PolarCS_PropertyType with content type ELEMENT_ONLY
class ML_PolarCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_PolarCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_PolarCS uses Python identifier ML_PolarCS
    __ML_PolarCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_PolarCS'), 'ML_PolarCS', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_httpwww_isotc211_org2005gmxML_PolarCS', False)

    
    ML_PolarCS = property(__ML_PolarCS.value, __ML_PolarCS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_PolarCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __ML_PolarCS.name() : __ML_PolarCS
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __title.name() : __title,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'ML_PolarCS_PropertyType', ML_PolarCS_PropertyType)


# Complex type ML_EngineeringCRS_PropertyType with content type ELEMENT_ONLY
class ML_EngineeringCRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringCRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_EngineeringCRS uses Python identifier ML_EngineeringCRS
    __ML_EngineeringCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringCRS'), 'ML_EngineeringCRS', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_httpwww_isotc211_org2005gmxML_EngineeringCRS', False)

    
    ML_EngineeringCRS = property(__ML_EngineeringCRS.value, __ML_EngineeringCRS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __ML_EngineeringCRS.name() : __ML_EngineeringCRS
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'ML_EngineeringCRS_PropertyType', ML_EngineeringCRS_PropertyType)


# Complex type FileName_Type with content type SIMPLE
class FileName_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'FileName_Type')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute src uses Python identifier src
    __src = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'src'), 'src', '__httpwww_isotc211_org2005gmx_FileName_Type_src', pyxb.binding.datatypes.anyURI)
    
    src = property(__src.value, __src.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __src.name() : __src
    }
Namespace.addCategoryObject('typeBinding', u'FileName_Type', FileName_Type)


# Complex type BaseUnit_PropertyType with content type ELEMENT_ONLY
class BaseUnit_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'BaseUnit_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}BaseUnit uses Python identifier BaseUnit
    __BaseUnit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'BaseUnit'), 'BaseUnit', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_httpwww_opengis_netgml3_2BaseUnit', False)

    
    BaseUnit = property(__BaseUnit.value, __BaseUnit.set, None, u'A base unit is a unit of measure that cannot be derived by combination of other base units within a particular system of units.  For example, in the SI system of units, the base units are metre, kilogram, second, Ampere, Kelvin, mole, and candela, for the physical quantity types length, mass, time interval, electric current, thermodynamic temperature, amount of substance and luminous intensity, respectively.\ngml:BaseUnit extends generic gml:UnitDefinition with the property gml:unitsSystem, which carries a reference to the units system to which this base unit is asserted to belong.  ')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_BaseUnit_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __BaseUnit.name() : __BaseUnit
    }
    _AttributeMap = {
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'BaseUnit_PropertyType', BaseUnit_PropertyType)


# Complex type OperationParameterAlt_PropertyType with content type ELEMENT_ONLY
class OperationParameterAlt_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'OperationParameterAlt_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}OperationParameterAlt uses Python identifier OperationParameterAlt
    __OperationParameterAlt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'OperationParameterAlt'), 'OperationParameterAlt', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_httpwww_isotc211_org2005gmxOperationParameterAlt', False)

    
    OperationParameterAlt = property(__OperationParameterAlt.value, __OperationParameterAlt.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __OperationParameterAlt.name() : __OperationParameterAlt
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __title.name() : __title,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __arcrole.name() : __arcrole
    }
Namespace.addCategoryObject('typeBinding', u'OperationParameterAlt_PropertyType', OperationParameterAlt_PropertyType)


# Complex type ML_CoordinateSystemAxis_PropertyType with content type ELEMENT_ONLY
class ML_CoordinateSystemAxis_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CoordinateSystemAxis_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_CoordinateSystemAxis uses Python identifier ML_CoordinateSystemAxis
    __ML_CoordinateSystemAxis = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_CoordinateSystemAxis'), 'ML_CoordinateSystemAxis', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_httpwww_isotc211_org2005gmxML_CoordinateSystemAxis', False)

    
    ML_CoordinateSystemAxis = property(__ML_CoordinateSystemAxis.value, __ML_CoordinateSystemAxis.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __ML_CoordinateSystemAxis.name() : __ML_CoordinateSystemAxis
    }
    _AttributeMap = {
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __title.name() : __title,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'ML_CoordinateSystemAxis_PropertyType', ML_CoordinateSystemAxis_PropertyType)


# Complex type ML_OperationParameterGroup_Type with content type ELEMENT_ONLY
class ML_OperationParameterGroup_Type (pyxb.bundles.opengis.gml_3_2.OperationParameterGroupType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameterGroup_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.OperationParameterGroupType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element parameter ({http://www.opengis.net/gml/3.2}parameter) inherited from {http://www.opengis.net/gml/3.2}OperationParameterGroupType
    
    # Element maximumOccurs ({http://www.opengis.net/gml/3.2}maximumOccurs) inherited from {http://www.opengis.net/gml/3.2}OperationParameterGroupType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element minimumOccurs ({http://www.opengis.net/gml/3.2}minimumOccurs) inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralOperationParameterType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.OperationParameterGroupType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.OperationParameterGroupType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_OperationParameterGroup_Type', ML_OperationParameterGroup_Type)


# Complex type ML_SphericalCS_Type with content type ELEMENT_ONLY
class ML_SphericalCS_Type (pyxb.bundles.opengis.gml_3_2.SphericalCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_SphericalCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.SphericalCSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.SphericalCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.SphericalCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_SphericalCS_Type', ML_SphericalCS_Type)


# Complex type ML_TemporalDatum_Type with content type ELEMENT_ONLY
class ML_TemporalDatum_Type (pyxb.bundles.opengis.gml_3_2.TemporalDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalDatum_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.TemporalDatumType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element origin ({http://www.opengis.net/gml/3.2}origin) inherited from {http://www.opengis.net/gml/3.2}TemporalDatumType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_2 inherited from {http://www.opengis.net/gml/3.2}TemporalDatumBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.TemporalDatumType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.TemporalDatumType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_TemporalDatum_Type', ML_TemporalDatum_Type)


# Complex type ML_UnitDefinition_Type with content type ELEMENT_ONLY
class ML_UnitDefinition_Type (pyxb.bundles.opengis.gml_3_2.UnitDefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_UnitDefinition_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.UnitDefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element quantityTypeReference ({http://www.opengis.net/gml/3.2}quantityTypeReference) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element quantityType ({http://www.opengis.net/gml/3.2}quantityType) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element catalogSymbol ({http://www.opengis.net/gml/3.2}catalogSymbol) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.UnitDefinitionType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.UnitDefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_UnitDefinition_Type', ML_UnitDefinition_Type)


# Complex type AbstractMX_File_Type with content type ELEMENT_ONLY
class AbstractMX_File_Type (pyxb.bundles.opengis.iso19139.gco.AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'AbstractMX_File_Type')
    # Base type is pyxb.bundles.opengis.iso19139.gco.AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmx}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fileType'), 'fileType', '__httpwww_isotc211_org2005gmx_AbstractMX_File_Type_httpwww_isotc211_org2005gmxfileType', False)

    
    fileType = property(__fileType.value, __fileType.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}fileName uses Python identifier fileName
    __fileName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fileName'), 'fileName', '__httpwww_isotc211_org2005gmx_AbstractMX_File_Type_httpwww_isotc211_org2005gmxfileName', False)

    
    fileName = property(__fileName.value, __fileName.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}fileDescription uses Python identifier fileDescription
    __fileDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fileDescription'), 'fileDescription', '__httpwww_isotc211_org2005gmx_AbstractMX_File_Type_httpwww_isotc211_org2005gmxfileDescription', False)

    
    fileDescription = property(__fileDescription.value, __fileDescription.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = pyxb.bundles.opengis.iso19139.gco.AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __fileType.name() : __fileType,
        __fileName.name() : __fileName,
        __fileDescription.name() : __fileDescription
    })
    _AttributeMap = pyxb.bundles.opengis.iso19139.gco.AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'AbstractMX_File_Type', AbstractMX_File_Type)


# Complex type MX_SupportFile_Type with content type ELEMENT_ONLY
class MX_SupportFile_Type (AbstractMX_File_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_SupportFile_Type')
    # Base type is AbstractMX_File_Type
    
    # Element fileType ({http://www.isotc211.org/2005/gmx}fileType) inherited from {http://www.isotc211.org/2005/gmx}AbstractMX_File_Type
    
    # Element fileName ({http://www.isotc211.org/2005/gmx}fileName) inherited from {http://www.isotc211.org/2005/gmx}AbstractMX_File_Type
    
    # Element fileDescription ({http://www.isotc211.org/2005/gmx}fileDescription) inherited from {http://www.isotc211.org/2005/gmx}AbstractMX_File_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractMX_File_Type._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = AbstractMX_File_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'MX_SupportFile_Type', MX_SupportFile_Type)


# Complex type DerivedUnit_PropertyType with content type ELEMENT_ONLY
class DerivedUnit_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'DerivedUnit_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}DerivedUnit uses Python identifier DerivedUnit
    __DerivedUnit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'DerivedUnit'), 'DerivedUnit', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_httpwww_opengis_netgml3_2DerivedUnit', False)

    
    DerivedUnit = property(__DerivedUnit.value, __DerivedUnit.set, None, u'Derived units are defined by combination of other units.  Derived units are used for quantities other than those corresponding to the base units, such as hertz (s-1) for frequency, Newton (kg.m/s2) for force.  Derived units based directly on base units are usually preferred for quantities other than the fundamental quantities within a system. If a derived unit is not the preferred unit, the gml:ConventionalUnit element should be used instead.\nThe gml:DerivedUnit extends gml:UnitDefinition with the property gml:derivationUnitTerms.')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __DerivedUnit.name() : __DerivedUnit
    }
    _AttributeMap = {
        __title.name() : __title,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __actuate.name() : __actuate
    }
Namespace.addCategoryObject('typeBinding', u'DerivedUnit_PropertyType', DerivedUnit_PropertyType)


# Complex type CodeDefinition_Type with content type ELEMENT_ONLY
class CodeDefinition_Type (pyxb.bundles.opengis.gml_3_2.DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CodeDefinition_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.DefinitionType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.DefinitionType._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'CodeDefinition_Type', CodeDefinition_Type)


# Complex type CodeListDictionary_Type with content type ELEMENT_ONLY
class CodeListDictionary_Type (pyxb.bundles.opengis.gml_3_2.DictionaryType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CodeListDictionary_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.DictionaryType
    
    # Element dictionaryEntry ({http://www.opengis.net/gml/3.2}dictionaryEntry) inherited from {http://www.opengis.net/gml/3.2}DictionaryType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element indirectEntry ({http://www.opengis.net/gml/3.2}indirectEntry) inherited from {http://www.opengis.net/gml/3.2}DictionaryType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}codeEntry uses Python identifier codeEntry
    __codeEntry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'codeEntry'), 'codeEntry', '__httpwww_isotc211_org2005gmx_CodeListDictionary_Type_httpwww_isotc211_org2005gmxcodeEntry', True)

    
    codeEntry = property(__codeEntry.value, __codeEntry.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}DictionaryType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.DictionaryType._ElementMap.copy()
    _ElementMap.update({
        __codeEntry.name() : __codeEntry
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.DictionaryType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'CodeListDictionary_Type', CodeListDictionary_Type)


# Complex type CT_PrimeMeridian_PropertyType with content type ELEMENT_ONLY
class CT_PrimeMeridian_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PrimeMeridian_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}PrimeMeridian uses Python identifier PrimeMeridian
    __PrimeMeridian = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'PrimeMeridian'), 'PrimeMeridian', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_httpwww_opengis_netgml3_2PrimeMeridian', False)

    
    PrimeMeridian = property(__PrimeMeridian.value, __PrimeMeridian.set, None, u'A gml:PrimeMeridian defines the origin from which longitude values are determined. The default value for the prime meridian gml:identifier value is "Greenwich".')

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __PrimeMeridian.name() : __PrimeMeridian
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __title.name() : __title,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __role.name() : __role
    }
Namespace.addCategoryObject('typeBinding', u'CT_PrimeMeridian_PropertyType', CT_PrimeMeridian_PropertyType)


# Complex type ML_OperationMethod_PropertyType with content type ELEMENT_ONLY
class ML_OperationMethod_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_OperationMethod_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_OperationMethod uses Python identifier ML_OperationMethod
    __ML_OperationMethod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationMethod'), 'ML_OperationMethod', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_httpwww_isotc211_org2005gmxML_OperationMethod', False)

    
    ML_OperationMethod = property(__ML_OperationMethod.value, __ML_OperationMethod.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)


    _ElementMap = {
        __ML_OperationMethod.name() : __ML_OperationMethod
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref
    }
Namespace.addCategoryObject('typeBinding', u'ML_OperationMethod_PropertyType', ML_OperationMethod_PropertyType)


# Complex type CT_Operation_PropertyType with content type ELEMENT_ONLY
class CT_Operation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Operation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCoordinateOperation uses Python identifier AbstractCoordinateOperation
    __AbstractCoordinateOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractCoordinateOperation'), 'AbstractCoordinateOperation', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_httpwww_opengis_netgml3_2AbstractCoordinateOperation', False)

    
    AbstractCoordinateOperation = property(__AbstractCoordinateOperation.value, __AbstractCoordinateOperation.set, None, u'gml:AbstractCoordinateOperation is a mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. Many but not all coordinate operations (from CRS A to CRS B) also uniquely define the inverse operation (from CRS B to CRS A). In some cases, the operation method algorithm for the inverse operation is the same as for the forward algorithm, but the signs of some operation parameter values shall be reversed. In other cases, different algorithms are required for the forward and inverse operations, but the same operation parameter values are used. If (some) entirely different parameter values are needed, a different coordinate operation shall be defined.\nThe optional coordinateOperationAccuracy property elements provide estimates of the impact of this coordinate operation on point position accuracy.')

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_Operation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __AbstractCoordinateOperation.name() : __AbstractCoordinateOperation
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'CT_Operation_PropertyType', CT_Operation_PropertyType)


# Complex type ML_OperationMethod_Type with content type ELEMENT_ONLY
class ML_OperationMethod_Type (pyxb.bundles.opengis.gml_3_2.OperationMethodType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_OperationMethod_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.OperationMethodType
    
    # Element targetDimensions ({http://www.opengis.net/gml/3.2}targetDimensions) inherited from {http://www.opengis.net/gml/3.2}OperationMethodType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_OperationMethod_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element formula ({http://www.opengis.net/gml/3.2}formula) inherited from {http://www.opengis.net/gml/3.2}OperationMethodType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element parameter ({http://www.opengis.net/gml/3.2}parameter) inherited from {http://www.opengis.net/gml/3.2}OperationMethodType
    
    # Element formulaCitation ({http://www.opengis.net/gml/3.2}formulaCitation) inherited from {http://www.opengis.net/gml/3.2}OperationMethodType
    
    # Element sourceDimensions ({http://www.opengis.net/gml/3.2}sourceDimensions) inherited from {http://www.opengis.net/gml/3.2}OperationMethodType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.OperationMethodType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.OperationMethodType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_OperationMethod_Type', ML_OperationMethod_Type)


# Complex type ConventionalUnit_PropertyType with content type ELEMENT_ONLY
class ConventionalUnit_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ConventionalUnit_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}ConventionalUnit uses Python identifier ConventionalUnit
    __ConventionalUnit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'ConventionalUnit'), 'ConventionalUnit', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_httpwww_opengis_netgml3_2ConventionalUnit', False)

    
    ConventionalUnit = property(__ConventionalUnit.value, __ConventionalUnit.set, None, u'Conventional units that are neither base units nor defined by direct combination of base units are used in many application domains.  For example electronVolt for energy, feet and nautical miles for length.  In most cases there is a known, usually linear, conversion to a preferred unit which is either a base unit or derived by direct combination of base units.\nThe gml:ConventionalUnit extends gml:UnitDefinition with a property that describes a conversion to a preferred unit for this physical quantity.  When the conversion is exact, the element gml:conversionToPreferredUnit should be used, or when the conversion is not exact the element gml:roughConversionToPreferredUnit is available. Both of these elements have the same content model.  The gml:derivationUnitTerm property defined above is included to allow a user to optionally record how this unit may be derived from other ("more primitive") units.')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __ConventionalUnit.name() : __ConventionalUnit
    }
    _AttributeMap = {
        __href.name() : __href,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __show.name() : __show,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate
    }
Namespace.addCategoryObject('typeBinding', u'ConventionalUnit_PropertyType', ConventionalUnit_PropertyType)


# Complex type CT_Datum_PropertyType with content type ELEMENT_ONLY
class CT_Datum_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Datum_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractDatum uses Python identifier AbstractDatum
    __AbstractDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractDatum'), 'AbstractDatum', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_httpwww_opengis_netgml3_2AbstractDatum', False)

    
    AbstractDatum = property(__AbstractDatum.value, __AbstractDatum.set, None, u'A gml:AbstractDatum specifies the relationship of a coordinate system to the earth, thus creating a coordinate reference system. A datum uses a parameter or set of parameters that determine the location of the origin of the coordinate reference system. Each datum subtype may be associated with only specific types of coordinate systems. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_Datum_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __AbstractDatum.name() : __AbstractDatum
    }
    _AttributeMap = {
        __href.name() : __href,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __type.name() : __type,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'CT_Datum_PropertyType', CT_Datum_PropertyType)


# Complex type ML_VerticalDatum_PropertyType with content type ELEMENT_ONLY
class ML_VerticalDatum_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalDatum_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_VerticalDatum uses Python identifier ML_VerticalDatum
    __ML_VerticalDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalDatum'), 'ML_VerticalDatum', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_httpwww_isotc211_org2005gmxML_VerticalDatum', False)

    
    ML_VerticalDatum = property(__ML_VerticalDatum.value, __ML_VerticalDatum.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_VerticalDatum.name() : __ML_VerticalDatum
    }
    _AttributeMap = {
        __role.name() : __role,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_VerticalDatum_PropertyType', ML_VerticalDatum_PropertyType)


# Complex type AbstractCT_Catalogue_Type with content type ELEMENT_ONLY
class AbstractCT_Catalogue_Type (pyxb.bundles.opengis.iso19139.gco.AbstractObject_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'AbstractCT_Catalogue_Type')
    # Base type is pyxb.bundles.opengis.iso19139.gco.AbstractObject_Type
    
    # Element {http://www.isotc211.org/2005/gmx}versionNumber uses Python identifier versionNumber
    __versionNumber = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'versionNumber'), 'versionNumber', '__httpwww_isotc211_org2005gmx_AbstractCT_Catalogue_Type_httpwww_isotc211_org2005gmxversionNumber', False)

    
    versionNumber = property(__versionNumber.value, __versionNumber.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}characterSet uses Python identifier characterSet
    __characterSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'characterSet'), 'characterSet', '__httpwww_isotc211_org2005gmx_AbstractCT_Catalogue_Type_httpwww_isotc211_org2005gmxcharacterSet', False)

    
    characterSet = property(__characterSet.value, __characterSet.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}subCatalogue uses Python identifier subCatalogue
    __subCatalogue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'subCatalogue'), 'subCatalogue', '__httpwww_isotc211_org2005gmx_AbstractCT_Catalogue_Type_httpwww_isotc211_org2005gmxsubCatalogue', True)

    
    subCatalogue = property(__subCatalogue.value, __subCatalogue.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}versionDate uses Python identifier versionDate
    __versionDate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'versionDate'), 'versionDate', '__httpwww_isotc211_org2005gmx_AbstractCT_Catalogue_Type_httpwww_isotc211_org2005gmxversionDate', False)

    
    versionDate = property(__versionDate.value, __versionDate.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpwww_isotc211_org2005gmx_AbstractCT_Catalogue_Type_httpwww_isotc211_org2005gmxname', False)

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}language uses Python identifier language
    __language = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'language'), 'language', '__httpwww_isotc211_org2005gmx_AbstractCT_Catalogue_Type_httpwww_isotc211_org2005gmxlanguage', False)

    
    language = property(__language.value, __language.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_AbstractCT_Catalogue_Type_httpwww_isotc211_org2005gmxlocale', True)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}fieldOfApplication uses Python identifier fieldOfApplication
    __fieldOfApplication = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldOfApplication'), 'fieldOfApplication', '__httpwww_isotc211_org2005gmx_AbstractCT_Catalogue_Type_httpwww_isotc211_org2005gmxfieldOfApplication', True)

    
    fieldOfApplication = property(__fieldOfApplication.value, __fieldOfApplication.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}scope uses Python identifier scope
    __scope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'scope'), 'scope', '__httpwww_isotc211_org2005gmx_AbstractCT_Catalogue_Type_httpwww_isotc211_org2005gmxscope', True)

    
    scope = property(__scope.value, __scope.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = pyxb.bundles.opengis.iso19139.gco.AbstractObject_Type._ElementMap.copy()
    _ElementMap.update({
        __versionNumber.name() : __versionNumber,
        __characterSet.name() : __characterSet,
        __subCatalogue.name() : __subCatalogue,
        __versionDate.name() : __versionDate,
        __name.name() : __name,
        __language.name() : __language,
        __locale.name() : __locale,
        __fieldOfApplication.name() : __fieldOfApplication,
        __scope.name() : __scope
    })
    _AttributeMap = pyxb.bundles.opengis.iso19139.gco.AbstractObject_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'AbstractCT_Catalogue_Type', AbstractCT_Catalogue_Type)


# Complex type CT_UomCatalogue_Type with content type ELEMENT_ONLY
class CT_UomCatalogue_Type (AbstractCT_Catalogue_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_UomCatalogue_Type')
    # Base type is AbstractCT_Catalogue_Type
    
    # Element versionNumber ({http://www.isotc211.org/2005/gmx}versionNumber) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element characterSet ({http://www.isotc211.org/2005/gmx}characterSet) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element subCatalogue ({http://www.isotc211.org/2005/gmx}subCatalogue) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element versionDate ({http://www.isotc211.org/2005/gmx}versionDate) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element name ({http://www.isotc211.org/2005/gmx}name) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}uomItem uses Python identifier uomItem
    __uomItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'uomItem'), 'uomItem', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_Type_httpwww_isotc211_org2005gmxuomItem', True)

    
    uomItem = property(__uomItem.value, __uomItem.set, None, None)

    
    # Element scope ({http://www.isotc211.org/2005/gmx}scope) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element locale ({http://www.isotc211.org/2005/gmx}locale) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element fieldOfApplication ({http://www.isotc211.org/2005/gmx}fieldOfApplication) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element language ({http://www.isotc211.org/2005/gmx}language) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractCT_Catalogue_Type._ElementMap.copy()
    _ElementMap.update({
        __uomItem.name() : __uomItem
    })
    _AttributeMap = AbstractCT_Catalogue_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'CT_UomCatalogue_Type', CT_UomCatalogue_Type)


# Complex type CodeListDictionary_PropertyType with content type ELEMENT_ONLY
class CodeListDictionary_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CodeListDictionary_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CodeListDictionary uses Python identifier CodeListDictionary
    __CodeListDictionary = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CodeListDictionary'), 'CodeListDictionary', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_httpwww_isotc211_org2005gmxCodeListDictionary', False)

    
    CodeListDictionary = property(__CodeListDictionary.value, __CodeListDictionary.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CodeListDictionary_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)


    _ElementMap = {
        __CodeListDictionary.name() : __CodeListDictionary
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __uuidref.name() : __uuidref
    }
Namespace.addCategoryObject('typeBinding', u'CodeListDictionary_PropertyType', CodeListDictionary_PropertyType)


# Complex type ML_OperationParameter_Type with content type ELEMENT_ONLY
class ML_OperationParameter_Type (pyxb.bundles.opengis.gml_3_2.OperationParameterType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameter_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.OperationParameterType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element minimumOccurs ({http://www.opengis.net/gml/3.2}minimumOccurs) inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralOperationParameterType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.OperationParameterType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.OperationParameterType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_OperationParameter_Type', ML_OperationParameter_Type)


# Complex type ML_UserDefinedCS_Type with content type ELEMENT_ONLY
class ML_UserDefinedCS_Type (pyxb.bundles.opengis.gml_3_2.UserDefinedCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_UserDefinedCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.UserDefinedCSType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.UserDefinedCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.UserDefinedCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_UserDefinedCS_Type', ML_UserDefinedCS_Type)


# Complex type UomAlternativeExpression_Type with content type ELEMENT_ONLY
class UomAlternativeExpression_Type (pyxb.bundles.opengis.gml_3_2.UnitDefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UomAlternativeExpression_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.UnitDefinitionType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element quantityTypeReference ({http://www.opengis.net/gml/3.2}quantityTypeReference) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element quantityType ({http://www.opengis.net/gml/3.2}quantityType) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element catalogSymbol ({http://www.opengis.net/gml/3.2}catalogSymbol) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = pyxb.bundles.opengis.gml_3_2.UnitDefinitionType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.UnitDefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'UomAlternativeExpression_Type', UomAlternativeExpression_Type)


# Complex type ML_OperationParameter_PropertyType with content type ELEMENT_ONLY
class ML_OperationParameter_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameter_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_OperationParameter uses Python identifier ML_OperationParameter
    __ML_OperationParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameter'), 'ML_OperationParameter', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_httpwww_isotc211_org2005gmxML_OperationParameter', False)

    
    ML_OperationParameter = property(__ML_OperationParameter.value, __ML_OperationParameter.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_OperationParameter_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __ML_OperationParameter.name() : __ML_OperationParameter
    }
    _AttributeMap = {
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show
    }
Namespace.addCategoryObject('typeBinding', u'ML_OperationParameter_PropertyType', ML_OperationParameter_PropertyType)


# Complex type ML_EngineeringCRS_Type with content type ELEMENT_ONLY
class ML_EngineeringCRS_Type (pyxb.bundles.opengis.gml_3_2.EngineeringCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringCRS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.EngineeringCRSType
    
    # Element polarCS ({http://www.opengis.net/gml/3.2}polarCS) inherited from {http://www.opengis.net/gml/3.2}EngineeringCRSType
    
    # Element sphericalCS ({http://www.opengis.net/gml/3.2}sphericalCS) inherited from {http://www.opengis.net/gml/3.2}EngineeringCRSType
    
    # Element coordinateSystem ({http://www.opengis.net/gml/3.2}coordinateSystem) inherited from {http://www.opengis.net/gml/3.2}EngineeringCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element cartesianCS ({http://www.opengis.net/gml/3.2}cartesianCS) inherited from {http://www.opengis.net/gml/3.2}EngineeringCRSType
    
    # Element cylindricalCS ({http://www.opengis.net/gml/3.2}cylindricalCS) inherited from {http://www.opengis.net/gml/3.2}EngineeringCRSType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element affineCS ({http://www.opengis.net/gml/3.2}affineCS) inherited from {http://www.opengis.net/gml/3.2}EngineeringCRSType
    
    # Element engineeringDatum ({http://www.opengis.net/gml/3.2}engineeringDatum) inherited from {http://www.opengis.net/gml/3.2}EngineeringCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element userDefinedCS ({http://www.opengis.net/gml/3.2}userDefinedCS) inherited from {http://www.opengis.net/gml/3.2}EngineeringCRSType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_EngineeringCRS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element linearCS ({http://www.opengis.net/gml/3.2}linearCS) inherited from {http://www.opengis.net/gml/3.2}EngineeringCRSType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.EngineeringCRSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.EngineeringCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_EngineeringCRS_Type', ML_EngineeringCRS_Type)


# Complex type CT_CrsCatalogue_PropertyType with content type ELEMENT_ONLY
class CT_CrsCatalogue_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CrsCatalogue_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CT_CrsCatalogue uses Python identifier CT_CrsCatalogue
    __CT_CrsCatalogue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CT_CrsCatalogue'), 'CT_CrsCatalogue', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_httpwww_isotc211_org2005gmxCT_CrsCatalogue', False)

    
    CT_CrsCatalogue = property(__CT_CrsCatalogue.value, __CT_CrsCatalogue.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)


    _ElementMap = {
        __CT_CrsCatalogue.name() : __CT_CrsCatalogue
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref
    }
Namespace.addCategoryObject('typeBinding', u'CT_CrsCatalogue_PropertyType', CT_CrsCatalogue_PropertyType)


# Complex type ML_DerivedCRS_PropertyType with content type ELEMENT_ONLY
class ML_DerivedCRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedCRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_DerivedCRS uses Python identifier ML_DerivedCRS
    __ML_DerivedCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedCRS'), 'ML_DerivedCRS', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_httpwww_isotc211_org2005gmxML_DerivedCRS', False)

    
    ML_DerivedCRS = property(__ML_DerivedCRS.value, __ML_DerivedCRS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __ML_DerivedCRS.name() : __ML_DerivedCRS
    }
    _AttributeMap = {
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'ML_DerivedCRS_PropertyType', ML_DerivedCRS_PropertyType)


# Complex type CoordinateSystemAlt_PropertyType with content type ELEMENT_ONLY
class CoordinateSystemAlt_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAlt_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CoordinateSystemAlt uses Python identifier CoordinateSystemAlt
    __CoordinateSystemAlt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAlt'), 'CoordinateSystemAlt', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_httpwww_isotc211_org2005gmxCoordinateSystemAlt', False)

    
    CoordinateSystemAlt = property(__CoordinateSystemAlt.value, __CoordinateSystemAlt.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __CoordinateSystemAlt.name() : __CoordinateSystemAlt
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'CoordinateSystemAlt_PropertyType', CoordinateSystemAlt_PropertyType)


# Complex type ML_CompoundCRS_Type with content type ELEMENT_ONLY
class ML_CompoundCRS_Type (pyxb.bundles.opengis.gml_3_2.CompoundCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CompoundCRS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.CompoundCRSType
    
    # Element componentReferenceSystem ({http://www.opengis.net/gml/3.2}componentReferenceSystem) inherited from {http://www.opengis.net/gml/3.2}CompoundCRSType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}CompoundCRSType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.CompoundCRSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.CompoundCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_CompoundCRS_Type', ML_CompoundCRS_Type)


# Complex type DatumAlt_PropertyType with content type ELEMENT_ONLY
class DatumAlt_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'DatumAlt_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}DatumAlt uses Python identifier DatumAlt
    __DatumAlt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'DatumAlt'), 'DatumAlt', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_httpwww_isotc211_org2005gmxDatumAlt', False)

    
    DatumAlt = property(__DatumAlt.value, __DatumAlt.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_DatumAlt_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __DatumAlt.name() : __DatumAlt
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'DatumAlt_PropertyType', DatumAlt_PropertyType)


# Complex type ML_CartesianCS_Type with content type ELEMENT_ONLY
class ML_CartesianCS_Type (pyxb.bundles.opengis.gml_3_2.CartesianCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CartesianCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.CartesianCSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.CartesianCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.CartesianCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_CartesianCS_Type', ML_CartesianCS_Type)


# Complex type ML_EllipsoidalCS_PropertyType with content type ELEMENT_ONLY
class ML_EllipsoidalCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_EllipsoidalCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_EllipsoidalCS uses Python identifier ML_EllipsoidalCS
    __ML_EllipsoidalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_EllipsoidalCS'), 'ML_EllipsoidalCS', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_httpwww_isotc211_org2005gmxML_EllipsoidalCS', False)

    
    ML_EllipsoidalCS = property(__ML_EllipsoidalCS.value, __ML_EllipsoidalCS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __ML_EllipsoidalCS.name() : __ML_EllipsoidalCS
    }
    _AttributeMap = {
        __title.name() : __title,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __show.name() : __show
    }
Namespace.addCategoryObject('typeBinding', u'ML_EllipsoidalCS_PropertyType', ML_EllipsoidalCS_PropertyType)


# Complex type EllipsoidAlt_Type with content type ELEMENT_ONLY
class EllipsoidAlt_Type (pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'EllipsoidAlt_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'EllipsoidAlt_Type', EllipsoidAlt_Type)


# Complex type UomAlternativeExpression_PropertyType with content type ELEMENT_ONLY
class UomAlternativeExpression_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UomAlternativeExpression_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}UomAlternativeExpression uses Python identifier UomAlternativeExpression
    __UomAlternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'UomAlternativeExpression'), 'UomAlternativeExpression', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_httpwww_isotc211_org2005gmxUomAlternativeExpression', False)

    
    UomAlternativeExpression = property(__UomAlternativeExpression.value, __UomAlternativeExpression.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_UomAlternativeExpression_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __UomAlternativeExpression.name() : __UomAlternativeExpression
    }
    _AttributeMap = {
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'UomAlternativeExpression_PropertyType', UomAlternativeExpression_PropertyType)


# Complex type ML_CodeDefinition_Type with content type ELEMENT_ONLY
class ML_CodeDefinition_Type (CodeDefinition_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CodeDefinition_Type')
    # Base type is CodeDefinition_Type
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = CodeDefinition_Type._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = CodeDefinition_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_CodeDefinition_Type', ML_CodeDefinition_Type)


# Complex type ML_TemporalCRS_Type with content type ELEMENT_ONLY
class ML_TemporalCRS_Type (pyxb.bundles.opengis.gml_3_2.TemporalCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalCRS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.TemporalCRSType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element usesTemporalCS ({http://www.opengis.net/gml/3.2}usesTemporalCS) inherited from {http://www.opengis.net/gml/3.2}TemporalCRSType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element timeCS ({http://www.opengis.net/gml/3.2}timeCS) inherited from {http://www.opengis.net/gml/3.2}TemporalCRSType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element temporalDatum ({http://www.opengis.net/gml/3.2}temporalDatum) inherited from {http://www.opengis.net/gml/3.2}TemporalCRSType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.TemporalCRSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.TemporalCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_TemporalCRS_Type', ML_TemporalCRS_Type)


# Complex type ML_ConventionalUnit_Type with content type ELEMENT_ONLY
class ML_ConventionalUnit_Type (pyxb.bundles.opengis.gml_3_2.ConventionalUnitType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ConventionalUnit_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.ConventionalUnitType
    
    # Element roughConversionToPreferredUnit ({http://www.opengis.net/gml/3.2}roughConversionToPreferredUnit) inherited from {http://www.opengis.net/gml/3.2}ConventionalUnitType
    
    # Element conversionToPreferredUnit ({http://www.opengis.net/gml/3.2}conversionToPreferredUnit) inherited from {http://www.opengis.net/gml/3.2}ConventionalUnitType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element quantityTypeReference ({http://www.opengis.net/gml/3.2}quantityTypeReference) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element quantityType ({http://www.opengis.net/gml/3.2}quantityType) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element catalogSymbol ({http://www.opengis.net/gml/3.2}catalogSymbol) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element derivationUnitTerm ({http://www.opengis.net/gml/3.2}derivationUnitTerm) inherited from {http://www.opengis.net/gml/3.2}ConventionalUnitType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.ConventionalUnitType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.ConventionalUnitType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_ConventionalUnit_Type', ML_ConventionalUnit_Type)


# Complex type ML_BaseUnit_PropertyType with content type ELEMENT_ONLY
class ML_BaseUnit_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_BaseUnit_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_BaseUnit uses Python identifier ML_BaseUnit
    __ML_BaseUnit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_BaseUnit'), 'ML_BaseUnit', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_httpwww_isotc211_org2005gmxML_BaseUnit', False)

    
    ML_BaseUnit = property(__ML_BaseUnit.value, __ML_BaseUnit.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_BaseUnit.name() : __ML_BaseUnit
    }
    _AttributeMap = {
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __type.name() : __type,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_BaseUnit_PropertyType', ML_BaseUnit_PropertyType)


# Complex type CT_CodelistCatalogue_Type with content type ELEMENT_ONLY
class CT_CodelistCatalogue_Type (AbstractCT_Catalogue_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CodelistCatalogue_Type')
    # Base type is AbstractCT_Catalogue_Type
    
    # Element locale ({http://www.isotc211.org/2005/gmx}locale) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element characterSet ({http://www.isotc211.org/2005/gmx}characterSet) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element subCatalogue ({http://www.isotc211.org/2005/gmx}subCatalogue) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element versionDate ({http://www.isotc211.org/2005/gmx}versionDate) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element name ({http://www.isotc211.org/2005/gmx}name) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element language ({http://www.isotc211.org/2005/gmx}language) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element versionNumber ({http://www.isotc211.org/2005/gmx}versionNumber) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}codelistItem uses Python identifier codelistItem
    __codelistItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'codelistItem'), 'codelistItem', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_Type_httpwww_isotc211_org2005gmxcodelistItem', True)

    
    codelistItem = property(__codelistItem.value, __codelistItem.set, None, None)

    
    # Element fieldOfApplication ({http://www.isotc211.org/2005/gmx}fieldOfApplication) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element scope ({http://www.isotc211.org/2005/gmx}scope) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractCT_Catalogue_Type._ElementMap.copy()
    _ElementMap.update({
        __codelistItem.name() : __codelistItem
    })
    _AttributeMap = AbstractCT_Catalogue_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'CT_CodelistCatalogue_Type', CT_CodelistCatalogue_Type)


# Complex type ML_DerivedCRS_Type with content type ELEMENT_ONLY
class ML_DerivedCRS_Type (pyxb.bundles.opengis.gml_3_2.DerivedCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedCRS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.DerivedCRSType
    
    # Element coordinateSystem ({http://www.opengis.net/gml/3.2}coordinateSystem) inherited from {http://www.opengis.net/gml/3.2}DerivedCRSType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element conversion ({http://www.opengis.net/gml/3.2}conversion) inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralDerivedCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element derivedCRSType ({http://www.opengis.net/gml/3.2}derivedCRSType) inherited from {http://www.opengis.net/gml/3.2}DerivedCRSType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element baseCRS ({http://www.opengis.net/gml/3.2}baseCRS) inherited from {http://www.opengis.net/gml/3.2}DerivedCRSType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_DerivedCRS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.DerivedCRSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.DerivedCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_DerivedCRS_Type', ML_DerivedCRS_Type)


# Complex type ML_ImageDatum_Type with content type ELEMENT_ONLY
class ML_ImageDatum_Type (pyxb.bundles.opengis.gml_3_2.ImageDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ImageDatum_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.ImageDatumType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element pixelInCell ({http://www.opengis.net/gml/3.2}pixelInCell) inherited from {http://www.opengis.net/gml/3.2}ImageDatumType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.ImageDatumType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.ImageDatumType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_ImageDatum_Type', ML_ImageDatum_Type)


# Complex type UnitDefinition_PropertyType with content type ELEMENT_ONLY
class UnitDefinition_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UnitDefinition_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}UnitDefinition uses Python identifier UnitDefinition
    __UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'UnitDefinition'), 'UnitDefinition', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_httpwww_opengis_netgml3_2UnitDefinition', False)

    
    UnitDefinition = property(__UnitDefinition.value, __UnitDefinition.set, None, u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.')

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __UnitDefinition.name() : __UnitDefinition
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __type.name() : __type,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __role.name() : __role
    }
Namespace.addCategoryObject('typeBinding', u'UnitDefinition_PropertyType', UnitDefinition_PropertyType)


# Complex type MX_DataFile_Type with content type ELEMENT_ONLY
class MX_DataFile_Type (AbstractMX_File_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_DataFile_Type')
    # Base type is AbstractMX_File_Type
    
    # Element fileName ({http://www.isotc211.org/2005/gmx}fileName) inherited from {http://www.isotc211.org/2005/gmx}AbstractMX_File_Type
    
    # Element fileDescription ({http://www.isotc211.org/2005/gmx}fileDescription) inherited from {http://www.isotc211.org/2005/gmx}AbstractMX_File_Type
    
    # Element {http://www.isotc211.org/2005/gmx}featureTypes uses Python identifier featureTypes
    __featureTypes = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'featureTypes'), 'featureTypes', '__httpwww_isotc211_org2005gmx_MX_DataFile_Type_httpwww_isotc211_org2005gmxfeatureTypes', True)

    
    featureTypes = property(__featureTypes.value, __featureTypes.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}fileFormat uses Python identifier fileFormat
    __fileFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fileFormat'), 'fileFormat', '__httpwww_isotc211_org2005gmx_MX_DataFile_Type_httpwww_isotc211_org2005gmxfileFormat', False)

    
    fileFormat = property(__fileFormat.value, __fileFormat.set, None, None)

    
    # Element fileType ({http://www.isotc211.org/2005/gmx}fileType) inherited from {http://www.isotc211.org/2005/gmx}AbstractMX_File_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractMX_File_Type._ElementMap.copy()
    _ElementMap.update({
        __featureTypes.name() : __featureTypes,
        __fileFormat.name() : __fileFormat
    })
    _AttributeMap = AbstractMX_File_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'MX_DataFile_Type', MX_DataFile_Type)


# Complex type OperationMethodAlt_Type with content type ELEMENT_ONLY
class OperationMethodAlt_Type (pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'OperationMethodAlt_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'OperationMethodAlt_Type', OperationMethodAlt_Type)


# Complex type ClAlternativeExpression_Type with content type ELEMENT_ONLY
class ClAlternativeExpression_Type (pyxb.bundles.opengis.gml_3_2.DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ClAlternativeExpression_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.DefinitionType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.DefinitionType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'ClAlternativeExpression_Type', ClAlternativeExpression_Type)


# Complex type ML_SphericalCS_PropertyType with content type ELEMENT_ONLY
class ML_SphericalCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_SphericalCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_SphericalCS uses Python identifier ML_SphericalCS
    __ML_SphericalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_SphericalCS'), 'ML_SphericalCS', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_httpwww_isotc211_org2005gmxML_SphericalCS', False)

    
    ML_SphericalCS = property(__ML_SphericalCS.value, __ML_SphericalCS.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_SphericalCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)


    _ElementMap = {
        __ML_SphericalCS.name() : __ML_SphericalCS
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref
    }
Namespace.addCategoryObject('typeBinding', u'ML_SphericalCS_PropertyType', ML_SphericalCS_PropertyType)


# Complex type CodeAlternativeExpression_PropertyType with content type ELEMENT_ONLY
class CodeAlternativeExpression_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CodeAlternativeExpression_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CodeAlternativeExpression uses Python identifier CodeAlternativeExpression
    __CodeAlternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CodeAlternativeExpression'), 'CodeAlternativeExpression', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_httpwww_isotc211_org2005gmxCodeAlternativeExpression', False)

    
    CodeAlternativeExpression = property(__CodeAlternativeExpression.value, __CodeAlternativeExpression.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __CodeAlternativeExpression.name() : __CodeAlternativeExpression
    }
    _AttributeMap = {
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate
    }
Namespace.addCategoryObject('typeBinding', u'CodeAlternativeExpression_PropertyType', CodeAlternativeExpression_PropertyType)


# Complex type ML_Conversion_Type with content type ELEMENT_ONLY
class ML_Conversion_Type (pyxb.bundles.opengis.gml_3_2.ConversionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_Conversion_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.ConversionType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element method ({http://www.opengis.net/gml/3.2}method) inherited from {http://www.opengis.net/gml/3.2}ConversionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_Conversion_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element parameterValue ({http://www.opengis.net/gml/3.2}parameterValue) inherited from {http://www.opengis.net/gml/3.2}ConversionType
    
    # Attribute id_2 inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralConversionType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.ConversionType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.ConversionType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_Conversion_Type', ML_Conversion_Type)


# Complex type ML_Transformation_Type with content type ELEMENT_ONLY
class ML_Transformation_Type (pyxb.bundles.opengis.gml_3_2.TransformationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_Transformation_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.TransformationType
    
    # Element method ({http://www.opengis.net/gml/3.2}method) inherited from {http://www.opengis.net/gml/3.2}TransformationType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_Transformation_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element parameterValue ({http://www.opengis.net/gml/3.2}parameterValue) inherited from {http://www.opengis.net/gml/3.2}TransformationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Attribute id_2 inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralTransformationType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.TransformationType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.TransformationType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_Transformation_Type', ML_Transformation_Type)


# Complex type ML_ConcatenatedOperation_Type with content type ELEMENT_ONLY
class ML_ConcatenatedOperation_Type (pyxb.bundles.opengis.gml_3_2.ConcatenatedOperationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ConcatenatedOperation_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.ConcatenatedOperationType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordOperation ({http://www.opengis.net/gml/3.2}coordOperation) inherited from {http://www.opengis.net/gml/3.2}ConcatenatedOperationType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}ConcatenatedOperationType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.ConcatenatedOperationType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.ConcatenatedOperationType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_ConcatenatedOperation_Type', ML_ConcatenatedOperation_Type)


# Complex type ML_CodeDefinition_PropertyType with content type ELEMENT_ONLY
class ML_CodeDefinition_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CodeDefinition_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_CodeDefinition uses Python identifier ML_CodeDefinition
    __ML_CodeDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_CodeDefinition'), 'ML_CodeDefinition', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_httpwww_isotc211_org2005gmxML_CodeDefinition', False)

    
    ML_CodeDefinition = property(__ML_CodeDefinition.value, __ML_CodeDefinition.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __ML_CodeDefinition.name() : __ML_CodeDefinition
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
Namespace.addCategoryObject('typeBinding', u'ML_CodeDefinition_PropertyType', ML_CodeDefinition_PropertyType)


# Complex type ML_DerivedUnit_Type with content type ELEMENT_ONLY
class ML_DerivedUnit_Type (pyxb.bundles.opengis.gml_3_2.DerivedUnitType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedUnit_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.DerivedUnitType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element quantityTypeReference ({http://www.opengis.net/gml/3.2}quantityTypeReference) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element quantityType ({http://www.opengis.net/gml/3.2}quantityType) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element derivationUnitTerm ({http://www.opengis.net/gml/3.2}derivationUnitTerm) inherited from {http://www.opengis.net/gml/3.2}DerivedUnitType
    
    # Element catalogSymbol ({http://www.opengis.net/gml/3.2}catalogSymbol) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.DerivedUnitType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.DerivedUnitType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_DerivedUnit_Type', ML_DerivedUnit_Type)


# Complex type ML_EngineeringDatum_PropertyType with content type ELEMENT_ONLY
class ML_EngineeringDatum_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringDatum_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_EngineeringDatum uses Python identifier ML_EngineeringDatum
    __ML_EngineeringDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringDatum'), 'ML_EngineeringDatum', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_httpwww_isotc211_org2005gmxML_EngineeringDatum', False)

    
    ML_EngineeringDatum = property(__ML_EngineeringDatum.value, __ML_EngineeringDatum.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_EngineeringDatum_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __ML_EngineeringDatum.name() : __ML_EngineeringDatum
    }
    _AttributeMap = {
        __href.name() : __href,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __type.name() : __type,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'ML_EngineeringDatum_PropertyType', ML_EngineeringDatum_PropertyType)


# Complex type ML_VerticalCRS_Type with content type ELEMENT_ONLY
class ML_VerticalCRS_Type (pyxb.bundles.opengis.gml_3_2.VerticalCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCRS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.VerticalCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element verticalDatum ({http://www.opengis.net/gml/3.2}verticalDatum) inherited from {http://www.opengis.net/gml/3.2}VerticalCRSType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element verticalCS ({http://www.opengis.net/gml/3.2}verticalCS) inherited from {http://www.opengis.net/gml/3.2}VerticalCRSType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.VerticalCRSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.VerticalCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_VerticalCRS_Type', ML_VerticalCRS_Type)


# Complex type ML_AffineCS_Type with content type ELEMENT_ONLY
class ML_AffineCS_Type (pyxb.bundles.opengis.gml_3_2.AffineCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_AffineCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.AffineCSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_AffineCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.AffineCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AffineCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_AffineCS_Type', ML_AffineCS_Type)


# Complex type MimeFileType_Type with content type SIMPLE
class MimeFileType_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MimeFileType_Type')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_isotc211_org2005gmx_MimeFileType_Type_type', pyxb.binding.datatypes.string, required=True)
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'MimeFileType_Type', MimeFileType_Type)


# Complex type CT_CoordinateSystem_PropertyType with content type ELEMENT_ONLY
class CT_CoordinateSystem_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CoordinateSystem_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCoordinateSystem uses Python identifier AbstractCoordinateSystem
    __AbstractCoordinateSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractCoordinateSystem'), 'AbstractCoordinateSystem', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_httpwww_opengis_netgml3_2AbstractCoordinateSystem', False)

    
    AbstractCoordinateSystem = property(__AbstractCoordinateSystem.value, __AbstractCoordinateSystem.set, None, u'gml:AbstractCoordinateSystem is a coordinate system (CS) is the non-repeating sequence of coordinate system axes that spans a given coordinate space. A CS is derived from a set of mathematical rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded. This abstract complex type shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystem_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __AbstractCoordinateSystem.name() : __AbstractCoordinateSystem
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __href.name() : __href
    }
Namespace.addCategoryObject('typeBinding', u'CT_CoordinateSystem_PropertyType', CT_CoordinateSystem_PropertyType)


# Complex type ML_PolarCS_Type with content type ELEMENT_ONLY
class ML_PolarCS_Type (pyxb.bundles.opengis.gml_3_2.PolarCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_PolarCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.PolarCSType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_PolarCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.PolarCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.PolarCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_PolarCS_Type', ML_PolarCS_Type)


# Complex type ML_ImageDatum_PropertyType with content type ELEMENT_ONLY
class ML_ImageDatum_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ImageDatum_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_ImageDatum uses Python identifier ML_ImageDatum
    __ML_ImageDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_ImageDatum'), 'ML_ImageDatum', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_httpwww_isotc211_org2005gmxML_ImageDatum', False)

    
    ML_ImageDatum = property(__ML_ImageDatum.value, __ML_ImageDatum.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_ImageDatum_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __ML_ImageDatum.name() : __ML_ImageDatum
    }
    _AttributeMap = {
        __title.name() : __title,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole
    }
Namespace.addCategoryObject('typeBinding', u'ML_ImageDatum_PropertyType', ML_ImageDatum_PropertyType)


# Complex type ML_ImageCRS_Type with content type ELEMENT_ONLY
class ML_ImageCRS_Type (pyxb.bundles.opengis.gml_3_2.ImageCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ImageCRS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.ImageCRSType
    
    # Element cartesianCS ({http://www.opengis.net/gml/3.2}cartesianCS) inherited from {http://www.opengis.net/gml/3.2}ImageCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element usesObliqueCartesianCS ({http://www.opengis.net/gml/3.2}usesObliqueCartesianCS) inherited from {http://www.opengis.net/gml/3.2}ImageCRSType
    
    # Element affineCS ({http://www.opengis.net/gml/3.2}affineCS) inherited from {http://www.opengis.net/gml/3.2}ImageCRSType
    
    # Element imageDatum ({http://www.opengis.net/gml/3.2}imageDatum) inherited from {http://www.opengis.net/gml/3.2}ImageCRSType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_ImageCRS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.ImageCRSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.ImageCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_ImageCRS_Type', ML_ImageCRS_Type)


# Complex type PrimeMeridianAlt_Type with content type ELEMENT_ONLY
class PrimeMeridianAlt_Type (pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'PrimeMeridianAlt_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'PrimeMeridianAlt_Type', PrimeMeridianAlt_Type)


# Complex type ClAlternativeExpression_PropertyType with content type ELEMENT_ONLY
class ClAlternativeExpression_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ClAlternativeExpression_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ClAlternativeExpression uses Python identifier ClAlternativeExpression
    __ClAlternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ClAlternativeExpression'), 'ClAlternativeExpression', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_httpwww_isotc211_org2005gmxClAlternativeExpression', False)

    
    ClAlternativeExpression = property(__ClAlternativeExpression.value, __ClAlternativeExpression.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ClAlternativeExpression_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)


    _ElementMap = {
        __ClAlternativeExpression.name() : __ClAlternativeExpression
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __uuidref.name() : __uuidref
    }
Namespace.addCategoryObject('typeBinding', u'ClAlternativeExpression_PropertyType', ClAlternativeExpression_PropertyType)


# Complex type ML_CompoundCRS_PropertyType with content type ELEMENT_ONLY
class ML_CompoundCRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CompoundCRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_CompoundCRS uses Python identifier ML_CompoundCRS
    __ML_CompoundCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_CompoundCRS'), 'ML_CompoundCRS', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_httpwww_isotc211_org2005gmxML_CompoundCRS', False)

    
    ML_CompoundCRS = property(__ML_CompoundCRS.value, __ML_CompoundCRS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_CompoundCRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __ML_CompoundCRS.name() : __ML_CompoundCRS
    }
    _AttributeMap = {
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __role.name() : __role
    }
Namespace.addCategoryObject('typeBinding', u'ML_CompoundCRS_PropertyType', ML_CompoundCRS_PropertyType)


# Complex type ML_GeodeticDatum_Type with content type ELEMENT_ONLY
class ML_GeodeticDatum_Type (pyxb.bundles.opengis.gml_3_2.GeodeticDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticDatum_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.GeodeticDatumType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element primeMeridian ({http://www.opengis.net/gml/3.2}primeMeridian) inherited from {http://www.opengis.net/gml/3.2}GeodeticDatumType
    
    # Element ellipsoid ({http://www.opengis.net/gml/3.2}ellipsoid) inherited from {http://www.opengis.net/gml/3.2}GeodeticDatumType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.GeodeticDatumType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.GeodeticDatumType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_GeodeticDatum_Type', ML_GeodeticDatum_Type)


# Complex type ML_CodeListDictionary_PropertyType with content type ELEMENT_ONLY
class ML_CodeListDictionary_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CodeListDictionary_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_CodeListDictionary uses Python identifier ML_CodeListDictionary
    __ML_CodeListDictionary = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_CodeListDictionary'), 'ML_CodeListDictionary', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_httpwww_isotc211_org2005gmxML_CodeListDictionary', False)

    
    ML_CodeListDictionary = property(__ML_CodeListDictionary.value, __ML_CodeListDictionary.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)


    _ElementMap = {
        __ML_CodeListDictionary.name() : __ML_CodeListDictionary
    }
    _AttributeMap = {
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __show.name() : __show,
        __role.name() : __role,
        __title.name() : __title,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref
    }
Namespace.addCategoryObject('typeBinding', u'ML_CodeListDictionary_PropertyType', ML_CodeListDictionary_PropertyType)


# Complex type ML_CartesianCS_PropertyType with content type ELEMENT_ONLY
class ML_CartesianCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CartesianCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_CartesianCS uses Python identifier ML_CartesianCS
    __ML_CartesianCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_CartesianCS'), 'ML_CartesianCS', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_httpwww_isotc211_org2005gmxML_CartesianCS', False)

    
    ML_CartesianCS = property(__ML_CartesianCS.value, __ML_CartesianCS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_CartesianCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __ML_CartesianCS.name() : __ML_CartesianCS
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'ML_CartesianCS_PropertyType', ML_CartesianCS_PropertyType)


# Complex type ML_ProjectedCRS_PropertyType with content type ELEMENT_ONLY
class ML_ProjectedCRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ProjectedCRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_ProjectedCRS uses Python identifier ML_ProjectedCRS
    __ML_ProjectedCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_ProjectedCRS'), 'ML_ProjectedCRS', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_httpwww_isotc211_org2005gmxML_ProjectedCRS', False)

    
    ML_ProjectedCRS = property(__ML_ProjectedCRS.value, __ML_ProjectedCRS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __ML_ProjectedCRS.name() : __ML_ProjectedCRS
    }
    _AttributeMap = {
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __arcrole.name() : __arcrole
    }
Namespace.addCategoryObject('typeBinding', u'ML_ProjectedCRS_PropertyType', ML_ProjectedCRS_PropertyType)


# Complex type ML_Ellipsoid_PropertyType with content type ELEMENT_ONLY
class ML_Ellipsoid_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_Ellipsoid_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_Ellipsoid uses Python identifier ML_Ellipsoid
    __ML_Ellipsoid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_Ellipsoid'), 'ML_Ellipsoid', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_httpwww_isotc211_org2005gmxML_Ellipsoid', False)

    
    ML_Ellipsoid = property(__ML_Ellipsoid.value, __ML_Ellipsoid.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __ML_Ellipsoid.name() : __ML_Ellipsoid
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __role.name() : __role
    }
Namespace.addCategoryObject('typeBinding', u'ML_Ellipsoid_PropertyType', ML_Ellipsoid_PropertyType)


# Complex type Anchor_Type with content type SIMPLE
class Anchor_Type (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Anchor_Type')
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_Anchor_Type_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_Anchor_Type_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_Anchor_Type_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_Anchor_Type_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_Anchor_Type_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_Anchor_Type_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_Anchor_Type_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
Namespace.addCategoryObject('typeBinding', u'Anchor_Type', Anchor_Type)


# Complex type Anchor_PropertyType with content type ELEMENT_ONLY
class Anchor_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'Anchor_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}Anchor uses Python identifier Anchor
    __Anchor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'Anchor'), 'Anchor', '__httpwww_isotc211_org2005gmx_Anchor_PropertyType_httpwww_isotc211_org2005gmxAnchor', False)

    
    Anchor = property(__Anchor.value, __Anchor.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_Anchor_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __Anchor.name() : __Anchor
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'Anchor_PropertyType', Anchor_PropertyType)


# Complex type ML_ProjectedCRS_Type with content type ELEMENT_ONLY
class ML_ProjectedCRS_Type (pyxb.bundles.opengis.gml_3_2.ProjectedCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ProjectedCRS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.ProjectedCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element baseGeographicCRS ({http://www.opengis.net/gml/3.2}baseGeographicCRS) inherited from {http://www.opengis.net/gml/3.2}ProjectedCRSType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element conversion ({http://www.opengis.net/gml/3.2}conversion) inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralDerivedCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_ProjectedCRS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element baseGeodeticCRS ({http://www.opengis.net/gml/3.2}baseGeodeticCRS) inherited from {http://www.opengis.net/gml/3.2}ProjectedCRSType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element cartesianCS ({http://www.opengis.net/gml/3.2}cartesianCS) inherited from {http://www.opengis.net/gml/3.2}ProjectedCRSType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.ProjectedCRSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.ProjectedCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_ProjectedCRS_Type', ML_ProjectedCRS_Type)


# Complex type ML_UserDefinedCS_PropertyType with content type ELEMENT_ONLY
class ML_UserDefinedCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_UserDefinedCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_UserDefinedCS uses Python identifier ML_UserDefinedCS
    __ML_UserDefinedCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_UserDefinedCS'), 'ML_UserDefinedCS', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_httpwww_isotc211_org2005gmxML_UserDefinedCS', False)

    
    ML_UserDefinedCS = property(__ML_UserDefinedCS.value, __ML_UserDefinedCS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_UserDefinedCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __ML_UserDefinedCS.name() : __ML_UserDefinedCS
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show
    }
Namespace.addCategoryObject('typeBinding', u'ML_UserDefinedCS_PropertyType', ML_UserDefinedCS_PropertyType)


# Complex type ML_GeodeticCRS_Type with content type ELEMENT_ONLY
class ML_GeodeticCRS_Type (pyxb.bundles.opengis.gml_3_2.GeodeticCRSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticCRS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.GeodeticCRSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element geodeticDatum ({http://www.opengis.net/gml/3.2}geodeticDatum) inherited from {http://www.opengis.net/gml/3.2}GeodeticCRSType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element cartesianCS ({http://www.opengis.net/gml/3.2}cartesianCS) inherited from {http://www.opengis.net/gml/3.2}GeodeticCRSType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCRSType
    
    # Element ellipsoidalCS ({http://www.opengis.net/gml/3.2}ellipsoidalCS) inherited from {http://www.opengis.net/gml/3.2}GeodeticCRSType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element sphericalCS ({http://www.opengis.net/gml/3.2}sphericalCS) inherited from {http://www.opengis.net/gml/3.2}GeodeticCRSType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.GeodeticCRSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.GeodeticCRSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_GeodeticCRS_Type', ML_GeodeticCRS_Type)


# Complex type ML_LinearCS_PropertyType with content type ELEMENT_ONLY
class ML_LinearCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_LinearCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_LinearCS uses Python identifier ML_LinearCS
    __ML_LinearCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_LinearCS'), 'ML_LinearCS', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_httpwww_isotc211_org2005gmxML_LinearCS', False)

    
    ML_LinearCS = property(__ML_LinearCS.value, __ML_LinearCS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_LinearCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __ML_LinearCS.name() : __ML_LinearCS
    }
    _AttributeMap = {
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'ML_LinearCS_PropertyType', ML_LinearCS_PropertyType)


# Complex type ML_PassThroughOperation_Type with content type ELEMENT_ONLY
class ML_PassThroughOperation_Type (pyxb.bundles.opengis.gml_3_2.PassThroughOperationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_PassThroughOperation_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.PassThroughOperationType
    
    # Element modifiedCoordinate ({http://www.opengis.net/gml/3.2}modifiedCoordinate) inherited from {http://www.opengis.net/gml/3.2}PassThroughOperationType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element coordOperation ({http://www.opengis.net/gml/3.2}coordOperation) inherited from {http://www.opengis.net/gml/3.2}PassThroughOperationType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}PassThroughOperationType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.PassThroughOperationType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.PassThroughOperationType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_PassThroughOperation_Type', ML_PassThroughOperation_Type)


# Complex type ML_CodeListDictionary_Type with content type ELEMENT_ONLY
class ML_CodeListDictionary_Type (CodeListDictionary_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CodeListDictionary_Type')
    # Base type is CodeListDictionary_Type
    
    # Element dictionaryEntry ({http://www.opengis.net/gml/3.2}dictionaryEntry) inherited from {http://www.opengis.net/gml/3.2}DictionaryType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_CodeListDictionary_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element indirectEntry ({http://www.opengis.net/gml/3.2}indirectEntry) inherited from {http://www.opengis.net/gml/3.2}DictionaryType
    
    # Element codeEntry ({http://www.isotc211.org/2005/gmx}codeEntry) inherited from {http://www.isotc211.org/2005/gmx}CodeListDictionary_Type
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}DictionaryType

    _ElementMap = CodeListDictionary_Type._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = CodeListDictionary_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_CodeListDictionary_Type', ML_CodeListDictionary_Type)


# Complex type ML_TimeCS_Type with content type ELEMENT_ONLY
class ML_TimeCS_Type (pyxb.bundles.opengis.gml_3_2.TimeCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_TimeCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.TimeCSType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_TimeCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.TimeCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.TimeCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_TimeCS_Type', ML_TimeCS_Type)


# Complex type OperationAlt_PropertyType with content type ELEMENT_ONLY
class OperationAlt_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'OperationAlt_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}OperationAlt uses Python identifier OperationAlt
    __OperationAlt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'OperationAlt'), 'OperationAlt', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_httpwww_isotc211_org2005gmxOperationAlt', False)

    
    OperationAlt = property(__OperationAlt.value, __OperationAlt.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_OperationAlt_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __OperationAlt.name() : __OperationAlt
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __role.name() : __role
    }
Namespace.addCategoryObject('typeBinding', u'OperationAlt_PropertyType', OperationAlt_PropertyType)


# Complex type CT_UomCatalogue_PropertyType with content type ELEMENT_ONLY
class CT_UomCatalogue_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_UomCatalogue_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CT_UomCatalogue uses Python identifier CT_UomCatalogue
    __CT_UomCatalogue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CT_UomCatalogue'), 'CT_UomCatalogue', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_httpwww_isotc211_org2005gmxCT_UomCatalogue', False)

    
    CT_UomCatalogue = property(__CT_UomCatalogue.value, __CT_UomCatalogue.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_UomCatalogue_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __CT_UomCatalogue.name() : __CT_UomCatalogue
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __role.name() : __role,
        __title.name() : __title,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
Namespace.addCategoryObject('typeBinding', u'CT_UomCatalogue_PropertyType', CT_UomCatalogue_PropertyType)


# Complex type MX_Aggregate_Type with content type ELEMENT_ONLY
class MX_Aggregate_Type (pyxb.bundles.opengis.iso19139.gmd.AbstractDS_Aggregate_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_Aggregate_Type')
    # Base type is pyxb.bundles.opengis.iso19139.gmd.AbstractDS_Aggregate_Type
    
    # Element subset ({http://www.isotc211.org/2005/gmd}subset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element composedOf ({http://www.isotc211.org/2005/gmd}composedOf) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element superset ({http://www.isotc211.org/2005/gmd}superset) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Element {http://www.isotc211.org/2005/gmx}aggregateFile uses Python identifier aggregateFile
    __aggregateFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'aggregateFile'), 'aggregateFile', '__httpwww_isotc211_org2005gmx_MX_Aggregate_Type_httpwww_isotc211_org2005gmxaggregateFile', True)

    
    aggregateFile = property(__aggregateFile.value, __aggregateFile.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}aggregateCatalogue uses Python identifier aggregateCatalogue
    __aggregateCatalogue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'aggregateCatalogue'), 'aggregateCatalogue', '__httpwww_isotc211_org2005gmx_MX_Aggregate_Type_httpwww_isotc211_org2005gmxaggregateCatalogue', True)

    
    aggregateCatalogue = property(__aggregateCatalogue.value, __aggregateCatalogue.set, None, None)

    
    # Element seriesMetadata ({http://www.isotc211.org/2005/gmd}seriesMetadata) inherited from {http://www.isotc211.org/2005/gmd}AbstractDS_Aggregate_Type
    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = pyxb.bundles.opengis.iso19139.gmd.AbstractDS_Aggregate_Type._ElementMap.copy()
    _ElementMap.update({
        __aggregateFile.name() : __aggregateFile,
        __aggregateCatalogue.name() : __aggregateCatalogue
    })
    _AttributeMap = pyxb.bundles.opengis.iso19139.gmd.AbstractDS_Aggregate_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'MX_Aggregate_Type', MX_Aggregate_Type)


# Complex type MX_Aggregate_PropertyType with content type ELEMENT_ONLY
class MX_Aggregate_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_Aggregate_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}MX_Aggregate uses Python identifier MX_Aggregate
    __MX_Aggregate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'MX_Aggregate'), 'MX_Aggregate', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_httpwww_isotc211_org2005gmxMX_Aggregate', False)

    
    MX_Aggregate = property(__MX_Aggregate.value, __MX_Aggregate.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_MX_Aggregate_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)


    _ElementMap = {
        __MX_Aggregate.name() : __MX_Aggregate
    }
    _AttributeMap = {
        __role.name() : __role,
        __title.name() : __title,
        __type.name() : __type,
        __nilReason.name() : __nilReason,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __uuidref.name() : __uuidref
    }
Namespace.addCategoryObject('typeBinding', u'MX_Aggregate_PropertyType', MX_Aggregate_PropertyType)


# Complex type MX_DataSet_PropertyType with content type ELEMENT_ONLY
class MX_DataSet_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_DataSet_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}MX_DataSet uses Python identifier MX_DataSet
    __MX_DataSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'MX_DataSet'), 'MX_DataSet', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_httpwww_isotc211_org2005gmxMX_DataSet', False)

    
    MX_DataSet = property(__MX_DataSet.value, __MX_DataSet.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_MX_DataSet_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __MX_DataSet.name() : __MX_DataSet
    }
    _AttributeMap = {
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'MX_DataSet_PropertyType', MX_DataSet_PropertyType)


# Complex type EllipsoidAlt_PropertyType with content type ELEMENT_ONLY
class EllipsoidAlt_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'EllipsoidAlt_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}EllipsoidAlt uses Python identifier EllipsoidAlt
    __EllipsoidAlt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'EllipsoidAlt'), 'EllipsoidAlt', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_httpwww_isotc211_org2005gmxEllipsoidAlt', False)

    
    EllipsoidAlt = property(__EllipsoidAlt.value, __EllipsoidAlt.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_EllipsoidAlt_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __EllipsoidAlt.name() : __EllipsoidAlt
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __type.name() : __type,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __role.name() : __role
    }
Namespace.addCategoryObject('typeBinding', u'EllipsoidAlt_PropertyType', EllipsoidAlt_PropertyType)


# Complex type OperationAlt_Type with content type ELEMENT_ONLY
class OperationAlt_Type (pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperationType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'OperationAlt_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperationType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_OperationAlt_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_OperationAlt_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperationType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperationType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'OperationAlt_Type', OperationAlt_Type)


# Complex type CT_Catalogue_PropertyType with content type ELEMENT_ONLY
class CT_Catalogue_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Catalogue_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue uses Python identifier AbstractCT_Catalogue
    __AbstractCT_Catalogue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'AbstractCT_Catalogue'), 'AbstractCT_Catalogue', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_httpwww_isotc211_org2005gmxAbstractCT_Catalogue', False)

    
    AbstractCT_Catalogue = property(__AbstractCT_Catalogue.value, __AbstractCT_Catalogue.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_Catalogue_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractCT_Catalogue.name() : __AbstractCT_Catalogue
    }
    _AttributeMap = {
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate
    }
Namespace.addCategoryObject('typeBinding', u'CT_Catalogue_PropertyType', CT_Catalogue_PropertyType)


# Complex type CodeAlternativeExpression_Type with content type ELEMENT_ONLY
class CodeAlternativeExpression_Type (pyxb.bundles.opengis.gml_3_2.DefinitionType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CodeAlternativeExpression_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.DefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_CodeAlternativeExpression_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = pyxb.bundles.opengis.gml_3_2.DefinitionType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.DefinitionType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'CodeAlternativeExpression_Type', CodeAlternativeExpression_Type)


# Complex type ML_Conversion_PropertyType with content type ELEMENT_ONLY
class ML_Conversion_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_Conversion_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_Conversion uses Python identifier ML_Conversion
    __ML_Conversion = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_Conversion'), 'ML_Conversion', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_httpwww_isotc211_org2005gmxML_Conversion', False)

    
    ML_Conversion = property(__ML_Conversion.value, __ML_Conversion.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_Conversion_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_Conversion.name() : __ML_Conversion
    }
    _AttributeMap = {
        __role.name() : __role,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __show.name() : __show,
        __type.name() : __type,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_Conversion_PropertyType', ML_Conversion_PropertyType)


# Complex type DatumAlt_Type with content type ELEMENT_ONLY
class DatumAlt_Type (pyxb.bundles.opengis.gml_3_2.AbstractDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'DatumAlt_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractDatumType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_DatumAlt_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_DatumAlt_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)


    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractDatumType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractDatumType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'DatumAlt_Type', DatumAlt_Type)


# Complex type ML_GeodeticDatum_PropertyType with content type ELEMENT_ONLY
class ML_GeodeticDatum_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticDatum_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_GeodeticDatum uses Python identifier ML_GeodeticDatum
    __ML_GeodeticDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticDatum'), 'ML_GeodeticDatum', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_httpwww_isotc211_org2005gmxML_GeodeticDatum', False)

    
    ML_GeodeticDatum = property(__ML_GeodeticDatum.value, __ML_GeodeticDatum.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_GeodeticDatum_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)


    _ElementMap = {
        __ML_GeodeticDatum.name() : __ML_GeodeticDatum
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref
    }
Namespace.addCategoryObject('typeBinding', u'ML_GeodeticDatum_PropertyType', ML_GeodeticDatum_PropertyType)


# Complex type MX_ScopeCode_PropertyType with content type ELEMENT_ONLY
class MX_ScopeCode_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_ScopeCode_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}MX_ScopeCode uses Python identifier MX_ScopeCode
    __MX_ScopeCode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'MX_ScopeCode'), 'MX_ScopeCode', '__httpwww_isotc211_org2005gmx_MX_ScopeCode_PropertyType_httpwww_isotc211_org2005gmxMX_ScopeCode', False)

    
    MX_ScopeCode = property(__MX_ScopeCode.value, __MX_ScopeCode.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_MX_ScopeCode_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MX_ScopeCode.name() : __MX_ScopeCode
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'MX_ScopeCode_PropertyType', MX_ScopeCode_PropertyType)


# Complex type CT_CodelistValue_PropertyType with content type ELEMENT_ONLY
class CT_CodelistValue_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CodelistValue_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CodeDefinition uses Python identifier CodeDefinition
    __CodeDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CodeDefinition'), 'CodeDefinition', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_httpwww_isotc211_org2005gmxCodeDefinition', False)

    
    CodeDefinition = property(__CodeDefinition.value, __CodeDefinition.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_CodelistValue_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __CodeDefinition.name() : __CodeDefinition
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __type.name() : __type,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __show.name() : __show
    }
Namespace.addCategoryObject('typeBinding', u'CT_CodelistValue_PropertyType', CT_CodelistValue_PropertyType)


# Complex type ML_PrimeMeridian_Type with content type ELEMENT_ONLY
class ML_PrimeMeridian_Type (pyxb.bundles.opengis.gml_3_2.PrimeMeridianType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_PrimeMeridian_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.PrimeMeridianType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element greenwichLongitude ({http://www.opengis.net/gml/3.2}greenwichLongitude) inherited from {http://www.opengis.net/gml/3.2}PrimeMeridianType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.PrimeMeridianType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.PrimeMeridianType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_PrimeMeridian_Type', ML_PrimeMeridian_Type)


# Complex type ML_BaseUnit_Type with content type ELEMENT_ONLY
class ML_BaseUnit_Type (pyxb.bundles.opengis.gml_3_2.BaseUnitType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_BaseUnit_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.BaseUnitType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_BaseUnit_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element unitsSystem ({http://www.opengis.net/gml/3.2}unitsSystem) inherited from {http://www.opengis.net/gml/3.2}BaseUnitType
    
    # Element quantityTypeReference ({http://www.opengis.net/gml/3.2}quantityTypeReference) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element quantityType ({http://www.opengis.net/gml/3.2}quantityType) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element catalogSymbol ({http://www.opengis.net/gml/3.2}catalogSymbol) inherited from {http://www.opengis.net/gml/3.2}UnitDefinitionType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.BaseUnitType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.BaseUnitType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_BaseUnit_Type', ML_BaseUnit_Type)


# Complex type MX_DataFile_PropertyType with content type ELEMENT_ONLY
class MX_DataFile_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_DataFile_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}MX_DataFile uses Python identifier MX_DataFile
    __MX_DataFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'MX_DataFile'), 'MX_DataFile', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_httpwww_isotc211_org2005gmxMX_DataFile', False)

    
    MX_DataFile = property(__MX_DataFile.value, __MX_DataFile.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_MX_DataFile_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __MX_DataFile.name() : __MX_DataFile
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __href.name() : __href
    }
Namespace.addCategoryObject('typeBinding', u'MX_DataFile_PropertyType', MX_DataFile_PropertyType)


# Complex type PrimeMeridianAlt_PropertyType with content type ELEMENT_ONLY
class PrimeMeridianAlt_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'PrimeMeridianAlt_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}PrimeMeridianAlt uses Python identifier PrimeMeridianAlt
    __PrimeMeridianAlt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'PrimeMeridianAlt'), 'PrimeMeridianAlt', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_httpwww_isotc211_org2005gmxPrimeMeridianAlt', False)

    
    PrimeMeridianAlt = property(__PrimeMeridianAlt.value, __PrimeMeridianAlt.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_PrimeMeridianAlt_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __PrimeMeridianAlt.name() : __PrimeMeridianAlt
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __show.name() : __show
    }
Namespace.addCategoryObject('typeBinding', u'PrimeMeridianAlt_PropertyType', PrimeMeridianAlt_PropertyType)


# Complex type CoordinateSystemAxisAlt_Type with content type ELEMENT_ONLY
class CoordinateSystemAxisAlt_Type (pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxisType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAxisAlt_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxisType
    
    # Element axisAbbrev ({http://www.opengis.net/gml/3.2}axisAbbrev) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Element axisDirection ({http://www.opengis.net/gml/3.2}axisDirection) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element minimumValue ({http://www.opengis.net/gml/3.2}minimumValue) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element rangeMeaning ({http://www.opengis.net/gml/3.2}rangeMeaning) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element maximumValue ({http://www.opengis.net/gml/3.2}maximumValue) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxisType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxisType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'CoordinateSystemAxisAlt_Type', CoordinateSystemAxisAlt_Type)


# Complex type CoordinateSystemAlt_Type with content type ELEMENT_ONLY
class CoordinateSystemAlt_Type (pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAlt_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aggregationType'), 'aggregationType', '__httpwww_isotc211_org2005gmx_CoordinateSystemAlt_Type_aggregationType', pyxb.bundles.opengis.gml_3_2.AggregationType)
    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, None)


    _ElementMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace,
        __aggregationType.name() : __aggregationType
    })
Namespace.addCategoryObject('typeBinding', u'CoordinateSystemAlt_Type', CoordinateSystemAlt_Type)


# Complex type MX_SupportFile_PropertyType with content type ELEMENT_ONLY
class MX_SupportFile_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_SupportFile_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}MX_SupportFile uses Python identifier MX_SupportFile
    __MX_SupportFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'MX_SupportFile'), 'MX_SupportFile', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_httpwww_isotc211_org2005gmxMX_SupportFile', False)

    
    MX_SupportFile = property(__MX_SupportFile.value, __MX_SupportFile.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_MX_SupportFile_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MX_SupportFile.name() : __MX_SupportFile
    }
    _AttributeMap = {
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __type.name() : __type,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'MX_SupportFile_PropertyType', MX_SupportFile_PropertyType)


# Complex type CoordinateSystemAxisAlt_PropertyType with content type ELEMENT_ONLY
class CoordinateSystemAxisAlt_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAxisAlt_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CoordinateSystemAxisAlt uses Python identifier CoordinateSystemAxisAlt
    __CoordinateSystemAxisAlt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAxisAlt'), 'CoordinateSystemAxisAlt', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_httpwww_isotc211_org2005gmxCoordinateSystemAxisAlt', False)

    
    CoordinateSystemAxisAlt = property(__CoordinateSystemAxisAlt.value, __CoordinateSystemAxisAlt.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CoordinateSystemAxisAlt_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __CoordinateSystemAxisAlt.name() : __CoordinateSystemAxisAlt
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __href.name() : __href
    }
Namespace.addCategoryObject('typeBinding', u'CoordinateSystemAxisAlt_PropertyType', CoordinateSystemAxisAlt_PropertyType)


# Complex type MX_DataSet_Type with content type ELEMENT_ONLY
class MX_DataSet_Type (pyxb.bundles.opengis.iso19139.gmd.DS_DataSet_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_DataSet_Type')
    # Base type is pyxb.bundles.opengis.iso19139.gmd.DS_DataSet_Type
    
    # Element has ({http://www.isotc211.org/2005/gmd}has) inherited from {http://www.isotc211.org/2005/gmd}DS_DataSet_Type
    
    # Element {http://www.isotc211.org/2005/gmx}supportFile uses Python identifier supportFile
    __supportFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'supportFile'), 'supportFile', '__httpwww_isotc211_org2005gmx_MX_DataSet_Type_httpwww_isotc211_org2005gmxsupportFile', True)

    
    supportFile = property(__supportFile.value, __supportFile.set, None, None)

    
    # Element partOf ({http://www.isotc211.org/2005/gmd}partOf) inherited from {http://www.isotc211.org/2005/gmd}DS_DataSet_Type
    
    # Element {http://www.isotc211.org/2005/gmx}datasetCatalogue uses Python identifier datasetCatalogue
    __datasetCatalogue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'datasetCatalogue'), 'datasetCatalogue', '__httpwww_isotc211_org2005gmx_MX_DataSet_Type_httpwww_isotc211_org2005gmxdatasetCatalogue', True)

    
    datasetCatalogue = property(__datasetCatalogue.value, __datasetCatalogue.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}dataFile uses Python identifier dataFile
    __dataFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataFile'), 'dataFile', '__httpwww_isotc211_org2005gmx_MX_DataSet_Type_httpwww_isotc211_org2005gmxdataFile', True)

    
    dataFile = property(__dataFile.value, __dataFile.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = pyxb.bundles.opengis.iso19139.gmd.DS_DataSet_Type._ElementMap.copy()
    _ElementMap.update({
        __supportFile.name() : __supportFile,
        __datasetCatalogue.name() : __datasetCatalogue,
        __dataFile.name() : __dataFile
    })
    _AttributeMap = pyxb.bundles.opengis.iso19139.gmd.DS_DataSet_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'MX_DataSet_Type', MX_DataSet_Type)


# Complex type CT_OperationParameters_PropertyType with content type ELEMENT_ONLY
class CT_OperationParameters_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OperationParameters_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractGeneralOperationParameter uses Python identifier AbstractGeneralOperationParameter
    __AbstractGeneralOperationParameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractGeneralOperationParameter'), 'AbstractGeneralOperationParameter', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_httpwww_opengis_netgml3_2AbstractGeneralOperationParameter', False)

    
    AbstractGeneralOperationParameter = property(__AbstractGeneralOperationParameter.value, __AbstractGeneralOperationParameter.set, None, u'gml:GeneralOperationParameter is the abstract definition of a parameter or group of parameters used by an operation method.')

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_OperationParameters_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __AbstractGeneralOperationParameter.name() : __AbstractGeneralOperationParameter
    }
    _AttributeMap = {
        __type.name() : __type,
        __href.name() : __href,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole
    }
Namespace.addCategoryObject('typeBinding', u'CT_OperationParameters_PropertyType', CT_OperationParameters_PropertyType)


# Complex type ML_VerticalDatum_Type with content type ELEMENT_ONLY
class ML_VerticalDatum_Type (pyxb.bundles.opengis.gml_3_2.VerticalDatumType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalDatum_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.VerticalDatumType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_VerticalDatum_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.VerticalDatumType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.VerticalDatumType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_VerticalDatum_Type', ML_VerticalDatum_Type)


# Complex type ML_PrimeMeridian_PropertyType with content type ELEMENT_ONLY
class ML_PrimeMeridian_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_PrimeMeridian_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_PrimeMeridian uses Python identifier ML_PrimeMeridian
    __ML_PrimeMeridian = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_PrimeMeridian'), 'ML_PrimeMeridian', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_httpwww_isotc211_org2005gmxML_PrimeMeridian', False)

    
    ML_PrimeMeridian = property(__ML_PrimeMeridian.value, __ML_PrimeMeridian.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_PrimeMeridian_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __ML_PrimeMeridian.name() : __ML_PrimeMeridian
    }
    _AttributeMap = {
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __arcrole.name() : __arcrole
    }
Namespace.addCategoryObject('typeBinding', u'ML_PrimeMeridian_PropertyType', ML_PrimeMeridian_PropertyType)


# Complex type ML_ConcatenatedOperation_PropertyType with content type ELEMENT_ONLY
class ML_ConcatenatedOperation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ConcatenatedOperation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_ConcatenatedOperation uses Python identifier ML_ConcatenatedOperation
    __ML_ConcatenatedOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_ConcatenatedOperation'), 'ML_ConcatenatedOperation', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_httpwww_isotc211_org2005gmxML_ConcatenatedOperation', False)

    
    ML_ConcatenatedOperation = property(__ML_ConcatenatedOperation.value, __ML_ConcatenatedOperation.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_ConcatenatedOperation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __ML_ConcatenatedOperation.name() : __ML_ConcatenatedOperation
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'ML_ConcatenatedOperation_PropertyType', ML_ConcatenatedOperation_PropertyType)


# Complex type ML_TimeCS_PropertyType with content type ELEMENT_ONLY
class ML_TimeCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_TimeCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_TimeCS uses Python identifier ML_TimeCS
    __ML_TimeCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_TimeCS'), 'ML_TimeCS', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_httpwww_isotc211_org2005gmxML_TimeCS', False)

    
    ML_TimeCS = property(__ML_TimeCS.value, __ML_TimeCS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_TimeCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_TimeCS.name() : __ML_TimeCS
    }
    _AttributeMap = {
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __type.name() : __type,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __arcrole.name() : __arcrole,
        __href.name() : __href,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_TimeCS_PropertyType', ML_TimeCS_PropertyType)


# Complex type ML_GeodeticCRS_PropertyType with content type ELEMENT_ONLY
class ML_GeodeticCRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticCRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_GeodeticCRS uses Python identifier ML_GeodeticCRS
    __ML_GeodeticCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticCRS'), 'ML_GeodeticCRS', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_httpwww_isotc211_org2005gmxML_GeodeticCRS', False)

    
    ML_GeodeticCRS = property(__ML_GeodeticCRS.value, __ML_GeodeticCRS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_GeodeticCRS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_GeodeticCRS.name() : __ML_GeodeticCRS
    }
    _AttributeMap = {
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __title.name() : __title,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_GeodeticCRS_PropertyType', ML_GeodeticCRS_PropertyType)


# Complex type OperationParameterAlt_Type with content type ELEMENT_ONLY
class OperationParameterAlt_Type (pyxb.bundles.opengis.gml_3_2.OperationParameterType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'OperationParameterAlt_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.OperationParameterType
    
    # Element {http://www.isotc211.org/2005/gmx}locale uses Python identifier locale
    __locale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'locale'), 'locale', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_Type_httpwww_isotc211_org2005gmxlocale', False)

    
    locale = property(__locale.value, __locale.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element minimumOccurs ({http://www.opengis.net/gml/3.2}minimumOccurs) inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralOperationParameterType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSpace'), 'codeSpace', '__httpwww_isotc211_org2005gmx_OperationParameterAlt_Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.OperationParameterType._ElementMap.copy()
    _ElementMap.update({
        __locale.name() : __locale
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.OperationParameterType._AttributeMap.copy()
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace
    })
Namespace.addCategoryObject('typeBinding', u'OperationParameterAlt_Type', OperationParameterAlt_Type)


# Complex type ML_AffineCS_PropertyType with content type ELEMENT_ONLY
class ML_AffineCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_AffineCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_AffineCS uses Python identifier ML_AffineCS
    __ML_AffineCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_AffineCS'), 'ML_AffineCS', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_httpwww_isotc211_org2005gmxML_AffineCS', False)

    
    ML_AffineCS = property(__ML_AffineCS.value, __ML_AffineCS.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_AffineCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __ML_AffineCS.name() : __ML_AffineCS
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __show.name() : __show
    }
Namespace.addCategoryObject('typeBinding', u'ML_AffineCS_PropertyType', ML_AffineCS_PropertyType)


# Complex type ML_PassThroughOperation_PropertyType with content type ELEMENT_ONLY
class ML_PassThroughOperation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_PassThroughOperation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_PassThroughOperation uses Python identifier ML_PassThroughOperation
    __ML_PassThroughOperation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_PassThroughOperation'), 'ML_PassThroughOperation', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_httpwww_isotc211_org2005gmxML_PassThroughOperation', False)

    
    ML_PassThroughOperation = property(__ML_PassThroughOperation.value, __ML_PassThroughOperation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_PassThroughOperation_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_PassThroughOperation.name() : __ML_PassThroughOperation
    }
    _AttributeMap = {
        __role.name() : __role,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_PassThroughOperation_PropertyType', ML_PassThroughOperation_PropertyType)


# Complex type ML_VerticalCRS_PropertyType with content type ELEMENT_ONLY
class ML_VerticalCRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_VerticalCRS uses Python identifier ML_VerticalCRS
    __ML_VerticalCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCRS'), 'ML_VerticalCRS', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_httpwww_isotc211_org2005gmxML_VerticalCRS', False)

    
    ML_VerticalCRS = property(__ML_VerticalCRS.value, __ML_VerticalCRS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_VerticalCRS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_VerticalCRS.name() : __ML_VerticalCRS
    }
    _AttributeMap = {
        __show.name() : __show,
        __title.name() : __title,
        __role.name() : __role,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_VerticalCRS_PropertyType', ML_VerticalCRS_PropertyType)


# Complex type ML_VerticalCS_Type with content type ELEMENT_ONLY
class ML_VerticalCS_Type (pyxb.bundles.opengis.gml_3_2.VerticalCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.VerticalCSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.VerticalCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.VerticalCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_VerticalCS_Type', ML_VerticalCS_Type)


# Complex type CT_Ellipsoid_PropertyType with content type ELEMENT_ONLY
class CT_Ellipsoid_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Ellipsoid_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Ellipsoid uses Python identifier Ellipsoid
    __Ellipsoid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'Ellipsoid'), 'Ellipsoid', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_httpwww_opengis_netgml3_2Ellipsoid', False)

    
    Ellipsoid = property(__Ellipsoid.value, __Ellipsoid.set, None, u'A gml:Ellipsoid is a geometric figure that may be used to describe the approximate shape of the earth. In mathematical terms, it is a surface formed by the rotation of an ellipse about its minor axis.')

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_Ellipsoid_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __Ellipsoid.name() : __Ellipsoid
    }
    _AttributeMap = {
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'CT_Ellipsoid_PropertyType', CT_Ellipsoid_PropertyType)


# Complex type CodeDefinition_PropertyType with content type ELEMENT_ONLY
class CodeDefinition_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CodeDefinition_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CodeDefinition uses Python identifier CodeDefinition
    __CodeDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CodeDefinition'), 'CodeDefinition', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_httpwww_isotc211_org2005gmxCodeDefinition', False)

    
    CodeDefinition = property(__CodeDefinition.value, __CodeDefinition.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CodeDefinition_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __CodeDefinition.name() : __CodeDefinition
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __href.name() : __href
    }
Namespace.addCategoryObject('typeBinding', u'CodeDefinition_PropertyType', CodeDefinition_PropertyType)


# Complex type ML_DerivedUnit_PropertyType with content type ELEMENT_ONLY
class ML_DerivedUnit_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedUnit_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_DerivedUnit uses Python identifier ML_DerivedUnit
    __ML_DerivedUnit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedUnit'), 'ML_DerivedUnit', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_httpwww_isotc211_org2005gmxML_DerivedUnit', False)

    
    ML_DerivedUnit = property(__ML_DerivedUnit.value, __ML_DerivedUnit.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_DerivedUnit_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_DerivedUnit.name() : __ML_DerivedUnit
    }
    _AttributeMap = {
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __uuidref.name() : __uuidref,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_DerivedUnit_PropertyType', ML_DerivedUnit_PropertyType)


# Complex type CT_OperationMethod_PropertyType with content type ELEMENT_ONLY
class CT_OperationMethod_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OperationMethod_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}OperationMethod uses Python identifier OperationMethod
    __OperationMethod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'OperationMethod'), 'OperationMethod', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_httpwww_opengis_netgml3_2OperationMethod', False)

    
    OperationMethod = property(__OperationMethod.value, __OperationMethod.set, None, u'gml:OperationMethod is a method (algorithm or procedure) used to perform a coordinate operation. Most operation methods use a number of operation parameters, although some coordinate conversions use none. Each coordinate operation using the method assigns values to these parameters.\nThe parameter elements are an unordered list of associations to the set of operation parameters and parameter groups used by this operation method.')

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_OperationMethod_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __OperationMethod.name() : __OperationMethod
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __href.name() : __href,
        __title.name() : __title,
        __actuate.name() : __actuate,
        __role.name() : __role,
        __show.name() : __show,
        __arcrole.name() : __arcrole
    }
Namespace.addCategoryObject('typeBinding', u'CT_OperationMethod_PropertyType', CT_OperationMethod_PropertyType)


# Complex type ML_TemporalCRS_PropertyType with content type ELEMENT_ONLY
class ML_TemporalCRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalCRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_TemporalCRS uses Python identifier ML_TemporalCRS
    __ML_TemporalCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalCRS'), 'ML_TemporalCRS', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_httpwww_isotc211_org2005gmxML_TemporalCRS', False)

    
    ML_TemporalCRS = property(__ML_TemporalCRS.value, __ML_TemporalCRS.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_TemporalCRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)


    _ElementMap = {
        __ML_TemporalCRS.name() : __ML_TemporalCRS
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __title.name() : __title,
        __type.name() : __type,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole
    }
Namespace.addCategoryObject('typeBinding', u'ML_TemporalCRS_PropertyType', ML_TemporalCRS_PropertyType)


# Complex type ML_UnitDefinition_PropertyType with content type ELEMENT_ONLY
class ML_UnitDefinition_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_UnitDefinition_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_UnitDefinition uses Python identifier ML_UnitDefinition
    __ML_UnitDefinition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_UnitDefinition'), 'ML_UnitDefinition', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_httpwww_isotc211_org2005gmxML_UnitDefinition', False)

    
    ML_UnitDefinition = property(__ML_UnitDefinition.value, __ML_UnitDefinition.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_UnitDefinition_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)


    _ElementMap = {
        __ML_UnitDefinition.name() : __ML_UnitDefinition
    }
    _AttributeMap = {
        __href.name() : __href,
        __nilReason.name() : __nilReason,
        __role.name() : __role,
        __show.name() : __show,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref
    }
Namespace.addCategoryObject('typeBinding', u'ML_UnitDefinition_PropertyType', ML_UnitDefinition_PropertyType)


# Complex type CT_CoordinateSystemAxis_PropertyType with content type ELEMENT_ONLY
class CT_CoordinateSystemAxis_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CoordinateSystemAxis_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}CoordinateSystemAxis uses Python identifier CoordinateSystemAxis
    __CoordinateSystemAxis = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'CoordinateSystemAxis'), 'CoordinateSystemAxis', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_httpwww_opengis_netgml3_2CoordinateSystemAxis', False)

    
    CoordinateSystemAxis = property(__CoordinateSystemAxis.value, __CoordinateSystemAxis.set, None, u'gml:CoordinateSystemAxis is a definition of a coordinate system axis.')

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_CoordinateSystemAxis_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __CoordinateSystemAxis.name() : __CoordinateSystemAxis
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __href.name() : __href,
        __title.name() : __title,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __actuate.name() : __actuate,
        __uuidref.name() : __uuidref,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'CT_CoordinateSystemAxis_PropertyType', CT_CoordinateSystemAxis_PropertyType)


# Complex type ML_CoordinateSystemAxis_Type with content type ELEMENT_ONLY
class ML_CoordinateSystemAxis_Type (pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxisType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CoordinateSystemAxis_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxisType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element maximumValue ({http://www.opengis.net/gml/3.2}maximumValue) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element minimumValue ({http://www.opengis.net/gml/3.2}minimumValue) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Element axisDirection ({http://www.opengis.net/gml/3.2}axisDirection) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Element rangeMeaning ({http://www.opengis.net/gml/3.2}rangeMeaning) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_CoordinateSystemAxis_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axisAbbrev ({http://www.opengis.net/gml/3.2}axisAbbrev) inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute uom inherited from {http://www.opengis.net/gml/3.2}CoordinateSystemAxisType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxisType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxisType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_CoordinateSystemAxis_Type', ML_CoordinateSystemAxis_Type)


# Complex type ML_Transformation_PropertyType with content type ELEMENT_ONLY
class ML_Transformation_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_Transformation_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_Transformation uses Python identifier ML_Transformation
    __ML_Transformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_Transformation'), 'ML_Transformation', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_httpwww_isotc211_org2005gmxML_Transformation', False)

    
    ML_Transformation = property(__ML_Transformation.value, __ML_Transformation.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_Transformation_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")


    _ElementMap = {
        __ML_Transformation.name() : __ML_Transformation
    }
    _AttributeMap = {
        __actuate.name() : __actuate,
        __href.name() : __href,
        __type.name() : __type,
        __role.name() : __role,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __show.name() : __show
    }
Namespace.addCategoryObject('typeBinding', u'ML_Transformation_PropertyType', ML_Transformation_PropertyType)


# Complex type ML_Ellipsoid_Type with content type ELEMENT_ONLY
class ML_Ellipsoid_Type (pyxb.bundles.opengis.gml_3_2.EllipsoidType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_Ellipsoid_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.EllipsoidType
    
    # Element semiMajorAxis ({http://www.opengis.net/gml/3.2}semiMajorAxis) inherited from {http://www.opengis.net/gml/3.2}EllipsoidType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_Ellipsoid_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element secondDefiningParameter ({http://www.opengis.net/gml/3.2}secondDefiningParameter) inherited from {http://www.opengis.net/gml/3.2}EllipsoidType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.EllipsoidType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.EllipsoidType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_Ellipsoid_Type', ML_Ellipsoid_Type)


# Complex type ML_EllipsoidalCS_Type with content type ELEMENT_ONLY
class ML_EllipsoidalCS_Type (pyxb.bundles.opengis.gml_3_2.EllipsoidalCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_EllipsoidalCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.EllipsoidalCSType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_EllipsoidalCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.EllipsoidalCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.EllipsoidalCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_EllipsoidalCS_Type', ML_EllipsoidalCS_Type)


# Complex type FileName_PropertyType with content type ELEMENT_ONLY
class FileName_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'FileName_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}FileName uses Python identifier FileName
    __FileName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'FileName'), 'FileName', '__httpwww_isotc211_org2005gmx_FileName_PropertyType_httpwww_isotc211_org2005gmxFileName', False)

    
    FileName = property(__FileName.value, __FileName.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_FileName_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __FileName.name() : __FileName
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'FileName_PropertyType', FileName_PropertyType)


# Complex type CT_CrsCatalogue_Type with content type ELEMENT_ONLY
class CT_CrsCatalogue_Type (AbstractCT_Catalogue_Type):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CrsCatalogue_Type')
    # Base type is AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}datum uses Python identifier datum
    __datum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'datum'), 'datum', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_Type_httpwww_isotc211_org2005gmxdatum', True)

    
    datum = property(__datum.value, __datum.set, None, None)

    
    # Element locale ({http://www.isotc211.org/2005/gmx}locale) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element versionNumber ({http://www.isotc211.org/2005/gmx}versionNumber) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}operationMethod uses Python identifier operationMethod
    __operationMethod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'operationMethod'), 'operationMethod', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_Type_httpwww_isotc211_org2005gmxoperationMethod', True)

    
    operationMethod = property(__operationMethod.value, __operationMethod.set, None, None)

    
    # Element characterSet ({http://www.isotc211.org/2005/gmx}characterSet) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}crs uses Python identifier crs
    __crs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'crs'), 'crs', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_Type_httpwww_isotc211_org2005gmxcrs', True)

    
    crs = property(__crs.value, __crs.set, None, None)

    
    # Element versionDate ({http://www.isotc211.org/2005/gmx}versionDate) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element name ({http://www.isotc211.org/2005/gmx}name) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}coordinateSystem uses Python identifier coordinateSystem
    __coordinateSystem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'coordinateSystem'), 'coordinateSystem', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_Type_httpwww_isotc211_org2005gmxcoordinateSystem', True)

    
    coordinateSystem = property(__coordinateSystem.value, __coordinateSystem.set, None, None)

    
    # Element subCatalogue ({http://www.isotc211.org/2005/gmx}subCatalogue) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}axis uses Python identifier axis
    __axis = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'axis'), 'axis', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_Type_httpwww_isotc211_org2005gmxaxis', True)

    
    axis = property(__axis.value, __axis.set, None, None)

    
    # Element scope ({http://www.isotc211.org/2005/gmx}scope) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'parameters'), 'parameters', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_Type_httpwww_isotc211_org2005gmxparameters', True)

    
    parameters = property(__parameters.value, __parameters.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmx}ellipsoid uses Python identifier ellipsoid
    __ellipsoid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ellipsoid'), 'ellipsoid', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_Type_httpwww_isotc211_org2005gmxellipsoid', True)

    
    ellipsoid = property(__ellipsoid.value, __ellipsoid.set, None, None)

    
    # Element language ({http://www.isotc211.org/2005/gmx}language) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}operation uses Python identifier operation
    __operation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'operation'), 'operation', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_Type_httpwww_isotc211_org2005gmxoperation', True)

    
    operation = property(__operation.value, __operation.set, None, None)

    
    # Element fieldOfApplication ({http://www.isotc211.org/2005/gmx}fieldOfApplication) inherited from {http://www.isotc211.org/2005/gmx}AbstractCT_Catalogue_Type
    
    # Element {http://www.isotc211.org/2005/gmx}primeMeridian uses Python identifier primeMeridian
    __primeMeridian = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'primeMeridian'), 'primeMeridian', '__httpwww_isotc211_org2005gmx_CT_CrsCatalogue_Type_httpwww_isotc211_org2005gmxprimeMeridian', True)

    
    primeMeridian = property(__primeMeridian.value, __primeMeridian.set, None, None)

    
    # Attribute id inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type
    
    # Attribute uuid inherited from {http://www.isotc211.org/2005/gco}AbstractObject_Type

    _ElementMap = AbstractCT_Catalogue_Type._ElementMap.copy()
    _ElementMap.update({
        __datum.name() : __datum,
        __operationMethod.name() : __operationMethod,
        __crs.name() : __crs,
        __coordinateSystem.name() : __coordinateSystem,
        __axis.name() : __axis,
        __parameters.name() : __parameters,
        __ellipsoid.name() : __ellipsoid,
        __operation.name() : __operation,
        __primeMeridian.name() : __primeMeridian
    })
    _AttributeMap = AbstractCT_Catalogue_Type._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'CT_CrsCatalogue_Type', CT_CrsCatalogue_Type)


# Complex type ML_TemporalDatum_PropertyType with content type ELEMENT_ONLY
class ML_TemporalDatum_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalDatum_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_TemporalDatum uses Python identifier ML_TemporalDatum
    __ML_TemporalDatum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalDatum'), 'ML_TemporalDatum', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_httpwww_isotc211_org2005gmxML_TemporalDatum', False)

    
    ML_TemporalDatum = property(__ML_TemporalDatum.value, __ML_TemporalDatum.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_TemporalDatum_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_TemporalDatum.name() : __ML_TemporalDatum
    }
    _AttributeMap = {
        __type.name() : __type,
        __role.name() : __role,
        __title.name() : __title,
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_TemporalDatum_PropertyType', ML_TemporalDatum_PropertyType)


# Complex type CT_CRS_PropertyType with content type ELEMENT_ONLY
class CT_CRS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CRS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCRS uses Python identifier AbstractCRS
    __AbstractCRS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractCRS'), 'AbstractCRS', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_httpwww_opengis_netgml3_2AbstractCRS', False)

    
    AbstractCRS = property(__AbstractCRS.value, __AbstractCRS.set, None, u'gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_CRS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)


    _ElementMap = {
        __AbstractCRS.name() : __AbstractCRS
    }
    _AttributeMap = {
        __title.name() : __title,
        __type.name() : __type,
        __show.name() : __show,
        __role.name() : __role,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __href.name() : __href
    }
Namespace.addCategoryObject('typeBinding', u'CT_CRS_PropertyType', CT_CRS_PropertyType)


# Complex type MimeFileType_PropertyType with content type ELEMENT_ONLY
class MimeFileType_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MimeFileType_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}MimeFileType uses Python identifier MimeFileType
    __MimeFileType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'MimeFileType'), 'MimeFileType', '__httpwww_isotc211_org2005gmx_MimeFileType_PropertyType_httpwww_isotc211_org2005gmxMimeFileType', False)

    
    MimeFileType = property(__MimeFileType.value, __MimeFileType.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_MimeFileType_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __MimeFileType.name() : __MimeFileType
    }
    _AttributeMap = {
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'MimeFileType_PropertyType', MimeFileType_PropertyType)


# Complex type MX_File_PropertyType with content type ELEMENT_ONLY
class MX_File_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'MX_File_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}AbstractMX_File uses Python identifier AbstractMX_File
    __AbstractMX_File = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'AbstractMX_File'), 'AbstractMX_File', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_httpwww_isotc211_org2005gmxAbstractMX_File', False)

    
    AbstractMX_File = property(__AbstractMX_File.value, __AbstractMX_File.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_MX_File_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __AbstractMX_File.name() : __AbstractMX_File
    }
    _AttributeMap = {
        __show.name() : __show,
        __type.name() : __type,
        __role.name() : __role,
        __nilReason.name() : __nilReason,
        __title.name() : __title,
        __arcrole.name() : __arcrole,
        __uuidref.name() : __uuidref,
        __href.name() : __href,
        __actuate.name() : __actuate
    }
Namespace.addCategoryObject('typeBinding', u'MX_File_PropertyType', MX_File_PropertyType)


# Complex type ML_VerticalCS_PropertyType with content type ELEMENT_ONLY
class ML_VerticalCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_VerticalCS uses Python identifier ML_VerticalCS
    __ML_VerticalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCS'), 'ML_VerticalCS', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_httpwww_isotc211_org2005gmxML_VerticalCS', False)

    
    ML_VerticalCS = property(__ML_VerticalCS.value, __ML_VerticalCS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_VerticalCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)


    _ElementMap = {
        __ML_VerticalCS.name() : __ML_VerticalCS
    }
    _AttributeMap = {
        __show.name() : __show,
        __role.name() : __role,
        __title.name() : __title,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __uuidref.name() : __uuidref,
        __arcrole.name() : __arcrole,
        __nilReason.name() : __nilReason
    }
Namespace.addCategoryObject('typeBinding', u'ML_VerticalCS_PropertyType', ML_VerticalCS_PropertyType)


# Complex type CT_CodelistCatalogue_PropertyType with content type ELEMENT_ONLY
class CT_CodelistCatalogue_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CodelistCatalogue_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CT_CodelistCatalogue uses Python identifier CT_CodelistCatalogue
    __CT_CodelistCatalogue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CT_CodelistCatalogue'), 'CT_CodelistCatalogue', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_httpwww_isotc211_org2005gmxCT_CodelistCatalogue', False)

    
    CT_CodelistCatalogue = property(__CT_CodelistCatalogue.value, __CT_CodelistCatalogue.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_CodelistCatalogue_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)


    _ElementMap = {
        __CT_CodelistCatalogue.name() : __CT_CodelistCatalogue
    }
    _AttributeMap = {
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __role.name() : __role
    }
Namespace.addCategoryObject('typeBinding', u'CT_CodelistCatalogue_PropertyType', CT_CodelistCatalogue_PropertyType)


# Complex type ML_CylindricalCS_Type with content type ELEMENT_ONLY
class ML_CylindricalCS_Type (pyxb.bundles.opengis.gml_3_2.CylindricalCSType):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CylindricalCS_Type')
    # Base type is pyxb.bundles.opengis.gml_3_2.CylindricalCSType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element {http://www.isotc211.org/2005/gmx}alternativeExpression uses Python identifier alternativeExpression
    __alternativeExpression = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), 'alternativeExpression', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_Type_httpwww_isotc211_org2005gmxalternativeExpression', True)

    
    alternativeExpression = property(__alternativeExpression.value, __alternativeExpression.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element axis ({http://www.opengis.net/gml/3.2}axis) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute aggregationType inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateSystemType

    _ElementMap = pyxb.bundles.opengis.gml_3_2.CylindricalCSType._ElementMap.copy()
    _ElementMap.update({
        __alternativeExpression.name() : __alternativeExpression
    })
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.CylindricalCSType._AttributeMap.copy()
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ML_CylindricalCS_Type', ML_CylindricalCS_Type)


# Complex type OperationMethodAlt_PropertyType with content type ELEMENT_ONLY
class OperationMethodAlt_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'OperationMethodAlt_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}OperationMethodAlt uses Python identifier OperationMethodAlt
    __OperationMethodAlt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'OperationMethodAlt'), 'OperationMethodAlt', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_httpwww_isotc211_org2005gmxOperationMethodAlt', False)

    
    OperationMethodAlt = property(__OperationMethodAlt.value, __OperationMethodAlt.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_OperationMethodAlt_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)


    _ElementMap = {
        __OperationMethodAlt.name() : __OperationMethodAlt
    }
    _AttributeMap = {
        __title.name() : __title,
        __href.name() : __href,
        __actuate.name() : __actuate,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'OperationMethodAlt_PropertyType', OperationMethodAlt_PropertyType)


# Complex type ML_ConventionalUnit_PropertyType with content type ELEMENT_ONLY
class ML_ConventionalUnit_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_ConventionalUnit_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_ConventionalUnit uses Python identifier ML_ConventionalUnit
    __ML_ConventionalUnit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_ConventionalUnit'), 'ML_ConventionalUnit', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_httpwww_isotc211_org2005gmxML_ConventionalUnit', False)

    
    ML_ConventionalUnit = property(__ML_ConventionalUnit.value, __ML_ConventionalUnit.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_ConventionalUnit_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __ML_ConventionalUnit.name() : __ML_ConventionalUnit
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'ML_ConventionalUnit_PropertyType', ML_ConventionalUnit_PropertyType)


# Complex type CT_Codelist_PropertyType with content type ELEMENT_ONLY
class CT_Codelist_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Codelist_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}CodeListDictionary uses Python identifier CodeListDictionary
    __CodeListDictionary = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'CodeListDictionary'), 'CodeListDictionary', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_httpwww_isotc211_org2005gmxCodeListDictionary', False)

    
    CodeListDictionary = property(__CodeListDictionary.value, __CodeListDictionary.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_CT_Codelist_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")


    _ElementMap = {
        __CodeListDictionary.name() : __CodeListDictionary
    }
    _AttributeMap = {
        __href.name() : __href,
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __title.name() : __title,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate
    }
Namespace.addCategoryObject('typeBinding', u'CT_Codelist_PropertyType', CT_Codelist_PropertyType)


# Complex type ML_OperationParameterGroup_PropertyType with content type ELEMENT_ONLY
class ML_OperationParameterGroup_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameterGroup_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_OperationParameterGroup uses Python identifier ML_OperationParameterGroup
    __ML_OperationParameterGroup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameterGroup'), 'ML_OperationParameterGroup', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_httpwww_isotc211_org2005gmxML_OperationParameterGroup', False)

    
    ML_OperationParameterGroup = property(__ML_OperationParameterGroup.value, __ML_OperationParameterGroup.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_OperationParameterGroup_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __ML_OperationParameterGroup.name() : __ML_OperationParameterGroup
    }
    _AttributeMap = {
        __uuidref.name() : __uuidref,
        __show.name() : __show,
        __actuate.name() : __actuate,
        __nilReason.name() : __nilReason,
        __arcrole.name() : __arcrole,
        __type.name() : __type,
        __role.name() : __role,
        __href.name() : __href,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'ML_OperationParameterGroup_PropertyType', ML_OperationParameterGroup_PropertyType)


# Complex type ML_CylindricalCS_PropertyType with content type ELEMENT_ONLY
class ML_CylindricalCS_PropertyType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ML_CylindricalCS_PropertyType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.isotc211.org/2005/gmx}ML_CylindricalCS uses Python identifier ML_CylindricalCS
    __ML_CylindricalCS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ML_CylindricalCS'), 'ML_CylindricalCS', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_httpwww_isotc211_org2005gmxML_CylindricalCS', False)

    
    ML_CylindricalCS = property(__ML_CylindricalCS.value, __ML_CylindricalCS.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'arcrole'), 'arcrole', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.binding.datatypes.anyURI)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'role'), 'role', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_httpwww_w3_org1999xlinkrole', pyxb.binding.datatypes.anyURI)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'show'), 'show', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.opengis.misc.xlinks.STD_ANON_)
    
    show = property(__show.value, __show.set, None, u"\n        The 'show' attribute is used to communicate the desired presentation \n        of the ending resource on traversal from the starting resource; it's \n        value should be treated as follows: \n        new - load ending resource in a new window, frame, pane, or other \n              presentation context\n        replace - load the resource in the same window, frame, pane, or \n                  other presentation context\n        embed - load ending resource in place of the presentation of the \n                starting resource\n        other - behavior is unconstrained; examine other markup in the \n                link for hints \n        none - behavior is unconstrained \n      ")

    
    # Attribute {http://www.isotc211.org/2005/gco}nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gco'), u'nilReason'), 'nilReason', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_httpwww_isotc211_org2005gconilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute uuidref uses Python identifier uuidref
    __uuidref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uuidref'), 'uuidref', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_uuidref', pyxb.binding.datatypes.string)
    
    uuidref = property(__uuidref.value, __uuidref.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'type'), 'type', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_httpwww_w3_org1999xlinktype', pyxb.binding.datatypes.string, fixed=True, unicode_default=u'simple')
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'actuate'), 'actuate', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.opengis.misc.xlinks.STD_ANON)
    
    actuate = property(__actuate.value, __actuate.set, None, u"\n        The 'actuate' attribute is used to communicate the desired timing \n        of traversal from the starting resource to the ending resource; \n        it's value should be treated as follows:\n        onLoad - traverse to the ending resource immediately on loading \n                 the starting resource \n        onRequest - traverse from the starting resource to the ending \n                    resource only on a post-loading event triggered for \n                    this purpose \n        other - behavior is unconstrained; examine other markup in link \n                for hints \n        none - behavior is unconstrained\n      ")

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'href'), 'href', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.w3.org/1999/xlink'), u'title'), 'title', '__httpwww_isotc211_org2005gmx_ML_CylindricalCS_PropertyType_httpwww_w3_org1999xlinktitle', pyxb.binding.datatypes.string)
    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __ML_CylindricalCS.name() : __ML_CylindricalCS
    }
    _AttributeMap = {
        __arcrole.name() : __arcrole,
        __role.name() : __role,
        __show.name() : __show,
        __nilReason.name() : __nilReason,
        __uuidref.name() : __uuidref,
        __type.name() : __type,
        __actuate.name() : __actuate,
        __href.name() : __href,
        __title.name() : __title
    }
Namespace.addCategoryObject('typeBinding', u'ML_CylindricalCS_PropertyType', ML_CylindricalCS_PropertyType)


FileName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FileName'), FileName_Type)
Namespace.addCategoryObject('elementBinding', FileName.name().localName(), FileName)

ML_OperationParameterGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameterGroup'), ML_OperationParameterGroup_Type)
Namespace.addCategoryObject('elementBinding', ML_OperationParameterGroup.name().localName(), ML_OperationParameterGroup)

CodeDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CodeDefinition'), CodeDefinition_Type)
Namespace.addCategoryObject('elementBinding', CodeDefinition.name().localName(), CodeDefinition)

CodeListDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CodeListDictionary'), CodeListDictionary_Type)
Namespace.addCategoryObject('elementBinding', CodeListDictionary.name().localName(), CodeListDictionary)

ML_OperationParameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameter'), ML_OperationParameter_Type)
Namespace.addCategoryObject('elementBinding', ML_OperationParameter.name().localName(), ML_OperationParameter)

ML_UserDefinedCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_UserDefinedCS'), ML_UserDefinedCS_Type)
Namespace.addCategoryObject('elementBinding', ML_UserDefinedCS.name().localName(), ML_UserDefinedCS)

ML_EngineeringCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringCRS'), ML_EngineeringCRS_Type)
Namespace.addCategoryObject('elementBinding', ML_EngineeringCRS.name().localName(), ML_EngineeringCRS)

EllipsoidAlt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'EllipsoidAlt'), EllipsoidAlt_Type)
Namespace.addCategoryObject('elementBinding', EllipsoidAlt.name().localName(), EllipsoidAlt)

ML_TemporalCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalCRS'), ML_TemporalCRS_Type)
Namespace.addCategoryObject('elementBinding', ML_TemporalCRS.name().localName(), ML_TemporalCRS)

CT_CodelistCatalogue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CT_CodelistCatalogue'), CT_CodelistCatalogue_Type)
Namespace.addCategoryObject('elementBinding', CT_CodelistCatalogue.name().localName(), CT_CodelistCatalogue)

MX_DataFile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_DataFile'), MX_DataFile_Type)
Namespace.addCategoryObject('elementBinding', MX_DataFile.name().localName(), MX_DataFile)

OperationMethodAlt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OperationMethodAlt'), OperationMethodAlt_Type)
Namespace.addCategoryObject('elementBinding', OperationMethodAlt.name().localName(), OperationMethodAlt)

ML_SphericalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_SphericalCS'), ML_SphericalCS_Type)
Namespace.addCategoryObject('elementBinding', ML_SphericalCS.name().localName(), ML_SphericalCS)

ML_Conversion = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_Conversion'), ML_Conversion_Type)
Namespace.addCategoryObject('elementBinding', ML_Conversion.name().localName(), ML_Conversion)

ML_ConcatenatedOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ConcatenatedOperation'), ML_ConcatenatedOperation_Type)
Namespace.addCategoryObject('elementBinding', ML_ConcatenatedOperation.name().localName(), ML_ConcatenatedOperation)

ML_DerivedUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedUnit'), ML_DerivedUnit_Type)
Namespace.addCategoryObject('elementBinding', ML_DerivedUnit.name().localName(), ML_DerivedUnit)

ML_UnitDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_UnitDefinition'), ML_UnitDefinition_Type)
Namespace.addCategoryObject('elementBinding', ML_UnitDefinition.name().localName(), ML_UnitDefinition)

ML_AffineCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_AffineCS'), ML_AffineCS_Type)
Namespace.addCategoryObject('elementBinding', ML_AffineCS.name().localName(), ML_AffineCS)

ML_TemporalDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalDatum'), ML_TemporalDatum_Type)
Namespace.addCategoryObject('elementBinding', ML_TemporalDatum.name().localName(), ML_TemporalDatum)

MimeFileType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MimeFileType'), MimeFileType_Type)
Namespace.addCategoryObject('elementBinding', MimeFileType.name().localName(), MimeFileType)

MX_ScopeCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_ScopeCode'), pyxb.bundles.opengis.iso19139.gco.CodeListValue_Type)
Namespace.addCategoryObject('elementBinding', MX_ScopeCode.name().localName(), MX_ScopeCode)

ML_CartesianCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CartesianCS'), ML_CartesianCS_Type)
Namespace.addCategoryObject('elementBinding', ML_CartesianCS.name().localName(), ML_CartesianCS)

ML_PolarCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_PolarCS'), ML_PolarCS_Type)
Namespace.addCategoryObject('elementBinding', ML_PolarCS.name().localName(), ML_PolarCS)

PrimeMeridianAlt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PrimeMeridianAlt'), PrimeMeridianAlt_Type)
Namespace.addCategoryObject('elementBinding', PrimeMeridianAlt.name().localName(), PrimeMeridianAlt)

Anchor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Anchor'), Anchor_Type)
Namespace.addCategoryObject('elementBinding', Anchor.name().localName(), Anchor)

ML_ProjectedCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ProjectedCRS'), ML_ProjectedCRS_Type)
Namespace.addCategoryObject('elementBinding', ML_ProjectedCRS.name().localName(), ML_ProjectedCRS)

ML_LinearCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_LinearCS'), ML_LinearCS_Type)
Namespace.addCategoryObject('elementBinding', ML_LinearCS.name().localName(), ML_LinearCS)

ML_PassThroughOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_PassThroughOperation'), ML_PassThroughOperation_Type)
Namespace.addCategoryObject('elementBinding', ML_PassThroughOperation.name().localName(), ML_PassThroughOperation)

ML_GeodeticCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticCRS'), ML_GeodeticCRS_Type)
Namespace.addCategoryObject('elementBinding', ML_GeodeticCRS.name().localName(), ML_GeodeticCRS)

ML_EngineeringDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringDatum'), ML_EngineeringDatum_Type)
Namespace.addCategoryObject('elementBinding', ML_EngineeringDatum.name().localName(), ML_EngineeringDatum)

MX_Aggregate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_Aggregate'), MX_Aggregate_Type)
Namespace.addCategoryObject('elementBinding', MX_Aggregate.name().localName(), MX_Aggregate)

OperationAlt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OperationAlt'), OperationAlt_Type)
Namespace.addCategoryObject('elementBinding', OperationAlt.name().localName(), OperationAlt)

CrsAlt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CrsAlt'), CrsAlt_Type)
Namespace.addCategoryObject('elementBinding', CrsAlt.name().localName(), CrsAlt)

DatumAlt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DatumAlt'), DatumAlt_Type)
Namespace.addCategoryObject('elementBinding', DatumAlt.name().localName(), DatumAlt)

ML_CompoundCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CompoundCRS'), ML_CompoundCRS_Type)
Namespace.addCategoryObject('elementBinding', ML_CompoundCRS.name().localName(), ML_CompoundCRS)

ML_BaseUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_BaseUnit'), ML_BaseUnit_Type)
Namespace.addCategoryObject('elementBinding', ML_BaseUnit.name().localName(), ML_BaseUnit)

ML_PrimeMeridian = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_PrimeMeridian'), ML_PrimeMeridian_Type)
Namespace.addCategoryObject('elementBinding', ML_PrimeMeridian.name().localName(), ML_PrimeMeridian)

CodeAlternativeExpression = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CodeAlternativeExpression'), CodeAlternativeExpression_Type)
Namespace.addCategoryObject('elementBinding', CodeAlternativeExpression.name().localName(), CodeAlternativeExpression)

MX_DataSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_DataSet'), MX_DataSet_Type)
Namespace.addCategoryObject('elementBinding', MX_DataSet.name().localName(), MX_DataSet)

ML_CodeListDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CodeListDictionary'), ML_CodeListDictionary_Type)
Namespace.addCategoryObject('elementBinding', ML_CodeListDictionary.name().localName(), ML_CodeListDictionary)

OperationParameterAlt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OperationParameterAlt'), OperationParameterAlt_Type)
Namespace.addCategoryObject('elementBinding', OperationParameterAlt.name().localName(), OperationParameterAlt)

ML_VerticalCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCRS'), ML_VerticalCRS_Type)
Namespace.addCategoryObject('elementBinding', ML_VerticalCRS.name().localName(), ML_VerticalCRS)

ML_ImageCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ImageCRS'), ML_ImageCRS_Type)
Namespace.addCategoryObject('elementBinding', ML_ImageCRS.name().localName(), ML_ImageCRS)

ML_VerticalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCS'), ML_VerticalCS_Type)
Namespace.addCategoryObject('elementBinding', ML_VerticalCS.name().localName(), ML_VerticalCS)

ML_ConventionalUnit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ConventionalUnit'), ML_ConventionalUnit_Type)
Namespace.addCategoryObject('elementBinding', ML_ConventionalUnit.name().localName(), ML_ConventionalUnit)

MX_SupportFile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_SupportFile'), MX_SupportFile_Type)
Namespace.addCategoryObject('elementBinding', MX_SupportFile.name().localName(), MX_SupportFile)

ML_Transformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_Transformation'), ML_Transformation_Type)
Namespace.addCategoryObject('elementBinding', ML_Transformation.name().localName(), ML_Transformation)

ML_CodeDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CodeDefinition'), ML_CodeDefinition_Type)
Namespace.addCategoryObject('elementBinding', ML_CodeDefinition.name().localName(), ML_CodeDefinition)

ML_EllipsoidalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_EllipsoidalCS'), ML_EllipsoidalCS_Type)
Namespace.addCategoryObject('elementBinding', ML_EllipsoidalCS.name().localName(), ML_EllipsoidalCS)

ML_CoordinateSystemAxis = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CoordinateSystemAxis'), ML_CoordinateSystemAxis_Type)
Namespace.addCategoryObject('elementBinding', ML_CoordinateSystemAxis.name().localName(), ML_CoordinateSystemAxis)

CoordinateSystemAxisAlt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAxisAlt'), CoordinateSystemAxisAlt_Type)
Namespace.addCategoryObject('elementBinding', CoordinateSystemAxisAlt.name().localName(), CoordinateSystemAxisAlt)

CT_CrsCatalogue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CT_CrsCatalogue'), CT_CrsCatalogue_Type)
Namespace.addCategoryObject('elementBinding', CT_CrsCatalogue.name().localName(), CT_CrsCatalogue)

AbstractCT_Catalogue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AbstractCT_Catalogue'), AbstractCT_Catalogue_Type, abstract=pyxb.binding.datatypes.boolean(1))
Namespace.addCategoryObject('elementBinding', AbstractCT_Catalogue.name().localName(), AbstractCT_Catalogue)

AbstractMX_File = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AbstractMX_File'), AbstractMX_File_Type, abstract=pyxb.binding.datatypes.boolean(1))
Namespace.addCategoryObject('elementBinding', AbstractMX_File.name().localName(), AbstractMX_File)

ML_VerticalDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalDatum'), ML_VerticalDatum_Type)
Namespace.addCategoryObject('elementBinding', ML_VerticalDatum.name().localName(), ML_VerticalDatum)

CoordinateSystemAlt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAlt'), CoordinateSystemAlt_Type)
Namespace.addCategoryObject('elementBinding', CoordinateSystemAlt.name().localName(), CoordinateSystemAlt)

ClAlternativeExpression = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClAlternativeExpression'), ClAlternativeExpression_Type)
Namespace.addCategoryObject('elementBinding', ClAlternativeExpression.name().localName(), ClAlternativeExpression)

UomAlternativeExpression = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UomAlternativeExpression'), UomAlternativeExpression_Type)
Namespace.addCategoryObject('elementBinding', UomAlternativeExpression.name().localName(), UomAlternativeExpression)

CT_UomCatalogue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CT_UomCatalogue'), CT_UomCatalogue_Type)
Namespace.addCategoryObject('elementBinding', CT_UomCatalogue.name().localName(), CT_UomCatalogue)

ML_DerivedCRS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedCRS'), ML_DerivedCRS_Type)
Namespace.addCategoryObject('elementBinding', ML_DerivedCRS.name().localName(), ML_DerivedCRS)

ML_TimeCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_TimeCS'), ML_TimeCS_Type)
Namespace.addCategoryObject('elementBinding', ML_TimeCS.name().localName(), ML_TimeCS)

ML_Ellipsoid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_Ellipsoid'), ML_Ellipsoid_Type)
Namespace.addCategoryObject('elementBinding', ML_Ellipsoid.name().localName(), ML_Ellipsoid)

ML_CylindricalCS = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CylindricalCS'), ML_CylindricalCS_Type)
Namespace.addCategoryObject('elementBinding', ML_CylindricalCS.name().localName(), ML_CylindricalCS)

ML_GeodeticDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticDatum'), ML_GeodeticDatum_Type)
Namespace.addCategoryObject('elementBinding', ML_GeodeticDatum.name().localName(), ML_GeodeticDatum)

ML_OperationMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationMethod'), ML_OperationMethod_Type)
Namespace.addCategoryObject('elementBinding', ML_OperationMethod.name().localName(), ML_OperationMethod)

ML_ImageDatum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ImageDatum'), ML_ImageDatum_Type)
Namespace.addCategoryObject('elementBinding', ML_ImageDatum.name().localName(), ML_ImageDatum)



ML_ImageCRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ImageCRS'), ML_ImageCRS_Type, scope=ML_ImageCRS_PropertyType))
ML_ImageCRS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_ImageCRS')), min_occurs=1, max_occurs=1)
    )
ML_ImageCRS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_ImageCRS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CrsAlt_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=CrsAlt_Type))
CrsAlt_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CrsAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CrsAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CrsAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CrsAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CrsAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
CrsAlt_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CrsAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
CrsAlt_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CrsAlt_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CrsAlt_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
CrsAlt_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CrsAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CrsAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
CrsAlt_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CrsAlt_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CrsAlt_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
CrsAlt_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CrsAlt_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
CrsAlt_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CrsAlt_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CrsAlt_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
CrsAlt_Type._ContentModel = pyxb.binding.content.ParticleModel(CrsAlt_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_EngineeringDatum_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), DatumAlt_PropertyType, scope=ML_EngineeringDatum_Type))
ML_EngineeringDatum_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_EngineeringDatum_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_EngineeringDatum_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_EngineeringDatum_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'anchorDefinition')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'realizationEpoch')), min_occurs=0L, max_occurs=1)
    )
ML_EngineeringDatum_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_EngineeringDatum_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_EngineeringDatum_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_EngineeringDatum_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_EngineeringDatum_Type._GroupModel, min_occurs=1, max_occurs=1)



CrsAlt_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CrsAlt'), CrsAlt_Type, scope=CrsAlt_PropertyType))
CrsAlt_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CrsAlt_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CrsAlt')), min_occurs=1, max_occurs=1)
    )
CrsAlt_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CrsAlt_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_LinearCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_LinearCS_Type))
ML_LinearCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_LinearCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_LinearCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_LinearCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_LinearCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_LinearCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_LinearCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_LinearCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_LinearCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_LinearCS_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_PolarCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_PolarCS'), ML_PolarCS_Type, scope=ML_PolarCS_PropertyType))
ML_PolarCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PolarCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_PolarCS')), min_occurs=1, max_occurs=1)
    )
ML_PolarCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_PolarCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_EngineeringCRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringCRS'), ML_EngineeringCRS_Type, scope=ML_EngineeringCRS_PropertyType))
ML_EngineeringCRS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringCRS')), min_occurs=1, max_occurs=1)
    )
ML_EngineeringCRS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_EngineeringCRS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



BaseUnit_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'BaseUnit'), pyxb.bundles.opengis.gml_3_2.BaseUnitType, scope=BaseUnit_PropertyType, documentation=u'A base unit is a unit of measure that cannot be derived by combination of other base units within a particular system of units.  For example, in the SI system of units, the base units are metre, kilogram, second, Ampere, Kelvin, mole, and candela, for the physical quantity types length, mass, time interval, electric current, thermodynamic temperature, amount of substance and luminous intensity, respectively.\ngml:BaseUnit extends generic gml:UnitDefinition with the property gml:unitsSystem, which carries a reference to the units system to which this base unit is asserted to belong.  '))
BaseUnit_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(BaseUnit_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'BaseUnit')), min_occurs=1, max_occurs=1)
    )
BaseUnit_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(BaseUnit_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



OperationParameterAlt_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OperationParameterAlt'), OperationParameterAlt_Type, scope=OperationParameterAlt_PropertyType))
OperationParameterAlt_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationParameterAlt_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'OperationParameterAlt')), min_occurs=1, max_occurs=1)
    )
OperationParameterAlt_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(OperationParameterAlt_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_CoordinateSystemAxis_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CoordinateSystemAxis'), ML_CoordinateSystemAxis_Type, scope=ML_CoordinateSystemAxis_PropertyType))
ML_CoordinateSystemAxis_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_CoordinateSystemAxis')), min_occurs=1, max_occurs=1)
    )
ML_CoordinateSystemAxis_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_OperationParameterGroup_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), OperationParameterAlt_PropertyType, scope=ML_OperationParameterGroup_Type))
ML_OperationParameterGroup_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_OperationParameterGroup_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_OperationParameterGroup_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_OperationParameterGroup_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'minimumOccurs')), min_occurs=0L, max_occurs=1)
    )
ML_OperationParameterGroup_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_OperationParameterGroup_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'maximumOccurs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'parameter')), min_occurs=2L, max_occurs=None)
    )
ML_OperationParameterGroup_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_OperationParameterGroup_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_OperationParameterGroup_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_OperationParameterGroup_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_SphericalCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_SphericalCS_Type))
ML_SphericalCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_SphericalCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_SphericalCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_SphericalCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_SphericalCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_SphericalCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_SphericalCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_SphericalCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_SphericalCS_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_TemporalDatum_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), DatumAlt_PropertyType, scope=ML_TemporalDatum_Type))
ML_TemporalDatum_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
ML_TemporalDatum_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'origin')), min_occurs=1, max_occurs=1)
    )
ML_TemporalDatum_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
ML_TemporalDatum_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_TemporalDatum_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_TemporalDatum_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_TemporalDatum_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_UnitDefinition_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), UomAlternativeExpression_PropertyType, scope=ML_UnitDefinition_Type))
ML_UnitDefinition_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_UnitDefinition_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_UnitDefinition_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_UnitDefinition_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityTypeReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'catalogSymbol')), min_occurs=0L, max_occurs=1)
    )
ML_UnitDefinition_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_UnitDefinition_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_UnitDefinition_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_UnitDefinition_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_UnitDefinition_Type._GroupModel, min_occurs=1, max_occurs=1)



AbstractMX_File_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fileType'), MimeFileType_PropertyType, scope=AbstractMX_File_Type))

AbstractMX_File_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fileName'), FileName_PropertyType, scope=AbstractMX_File_Type))

AbstractMX_File_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fileDescription'), pyxb.bundles.opengis.iso19139.gco.CharacterString_PropertyType, scope=AbstractMX_File_Type))
AbstractMX_File_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(AbstractMX_File_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileName')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(AbstractMX_File_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileDescription')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(AbstractMX_File_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileType')), min_occurs=1, max_occurs=1)
    )
AbstractMX_File_Type._ContentModel = pyxb.binding.content.ParticleModel(AbstractMX_File_Type._GroupModel, min_occurs=1, max_occurs=1)


MX_SupportFile_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_SupportFile_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileName')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(MX_SupportFile_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileDescription')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(MX_SupportFile_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileType')), min_occurs=1, max_occurs=1)
    )
MX_SupportFile_Type._ContentModel = pyxb.binding.content.ParticleModel(MX_SupportFile_Type._GroupModel, min_occurs=1, max_occurs=1)



DerivedUnit_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'DerivedUnit'), pyxb.bundles.opengis.gml_3_2.DerivedUnitType, scope=DerivedUnit_PropertyType, documentation=u'Derived units are defined by combination of other units.  Derived units are used for quantities other than those corresponding to the base units, such as hertz (s-1) for frequency, Newton (kg.m/s2) for force.  Derived units based directly on base units are usually preferred for quantities other than the fundamental quantities within a system. If a derived unit is not the preferred unit, the gml:ConventionalUnit element should be used instead.\nThe gml:DerivedUnit extends gml:UnitDefinition with the property gml:derivationUnitTerms.'))
DerivedUnit_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(DerivedUnit_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'DerivedUnit')), min_occurs=1, max_occurs=1)
    )
DerivedUnit_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(DerivedUnit_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)


CodeDefinition_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
CodeDefinition_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
CodeDefinition_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeDefinition_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeDefinition_Type._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CodeDefinition_Type._ContentModel = pyxb.binding.content.ParticleModel(CodeDefinition_Type._GroupModel, min_occurs=1, max_occurs=1)



CodeListDictionary_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'codeEntry'), CodeDefinition_PropertyType, scope=CodeListDictionary_Type))
CodeListDictionary_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
CodeListDictionary_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
CodeListDictionary_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
CodeListDictionary_Type._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'dictionaryEntry')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'indirectEntry')), min_occurs=1, max_occurs=1)
    )
CodeListDictionary_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CodeListDictionary_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'codeEntry')), min_occurs=1, max_occurs=None)
    )
CodeListDictionary_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeListDictionary_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
CodeListDictionary_Type._ContentModel = pyxb.binding.content.ParticleModel(CodeListDictionary_Type._GroupModel, min_occurs=1, max_occurs=1)



CT_PrimeMeridian_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'PrimeMeridian'), pyxb.bundles.opengis.gml_3_2.PrimeMeridianType, scope=CT_PrimeMeridian_PropertyType, documentation=u'A gml:PrimeMeridian defines the origin from which longitude values are determined. The default value for the prime meridian gml:identifier value is "Greenwich".'))
CT_PrimeMeridian_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PrimeMeridian_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'PrimeMeridian')), min_occurs=1, max_occurs=1)
    )
CT_PrimeMeridian_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_PrimeMeridian_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_OperationMethod_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationMethod'), ML_OperationMethod_Type, scope=ML_OperationMethod_PropertyType))
ML_OperationMethod_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationMethod_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationMethod')), min_occurs=1, max_occurs=1)
    )
ML_OperationMethod_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_OperationMethod_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_Operation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractCoordinateOperation'), pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperationType, abstract=pyxb.binding.datatypes.boolean(1), scope=CT_Operation_PropertyType, documentation=u'gml:AbstractCoordinateOperation is a mathematical operation on coordinates that transforms or converts coordinates to another coordinate reference system. Many but not all coordinate operations (from CRS A to CRS B) also uniquely define the inverse operation (from CRS B to CRS A). In some cases, the operation method algorithm for the inverse operation is the same as for the forward algorithm, but the signs of some operation parameter values shall be reversed. In other cases, different algorithms are required for the forward and inverse operations, but the same operation parameter values are used. If (some) entirely different parameter values are needed, a different coordinate operation shall be defined.\nThe optional coordinateOperationAccuracy property elements provide estimates of the impact of this coordinate operation on point position accuracy.'))
CT_Operation_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Operation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractCoordinateOperation')), min_occurs=1, max_occurs=1)
    )
CT_Operation_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_Operation_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_OperationMethod_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), OperationMethodAlt_PropertyType, scope=ML_OperationMethod_Type))
ML_OperationMethod_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_OperationMethod_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_OperationMethod_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_OperationMethod_Type._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'formulaCitation')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'formula')), min_occurs=1, max_occurs=1)
    )
ML_OperationMethod_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._GroupModel_6, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'sourceDimensions')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'targetDimensions')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'parameter')), min_occurs=0L, max_occurs=None)
    )
ML_OperationMethod_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_OperationMethod_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_OperationMethod_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_OperationMethod_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_OperationMethod_Type._GroupModel, min_occurs=1, max_occurs=1)



ConventionalUnit_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'ConventionalUnit'), pyxb.bundles.opengis.gml_3_2.ConventionalUnitType, scope=ConventionalUnit_PropertyType, documentation=u'Conventional units that are neither base units nor defined by direct combination of base units are used in many application domains.  For example electronVolt for energy, feet and nautical miles for length.  In most cases there is a known, usually linear, conversion to a preferred unit which is either a base unit or derived by direct combination of base units.\nThe gml:ConventionalUnit extends gml:UnitDefinition with a property that describes a conversion to a preferred unit for this physical quantity.  When the conversion is exact, the element gml:conversionToPreferredUnit should be used, or when the conversion is not exact the element gml:roughConversionToPreferredUnit is available. Both of these elements have the same content model.  The gml:derivationUnitTerm property defined above is included to allow a user to optionally record how this unit may be derived from other ("more primitive") units.'))
ConventionalUnit_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ConventionalUnit_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'ConventionalUnit')), min_occurs=1, max_occurs=1)
    )
ConventionalUnit_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ConventionalUnit_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_Datum_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractDatum'), pyxb.bundles.opengis.gml_3_2.AbstractDatumType, abstract=pyxb.binding.datatypes.boolean(1), scope=CT_Datum_PropertyType, documentation=u'A gml:AbstractDatum specifies the relationship of a coordinate system to the earth, thus creating a coordinate reference system. A datum uses a parameter or set of parameters that determine the location of the origin of the coordinate reference system. Each datum subtype may be associated with only specific types of coordinate systems. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.'))
CT_Datum_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Datum_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractDatum')), min_occurs=1, max_occurs=1)
    )
CT_Datum_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_Datum_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_VerticalDatum_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalDatum'), ML_VerticalDatum_Type, scope=ML_VerticalDatum_PropertyType))
ML_VerticalDatum_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalDatum')), min_occurs=1, max_occurs=1)
    )
ML_VerticalDatum_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_VerticalDatum_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



AbstractCT_Catalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'versionNumber'), pyxb.bundles.opengis.iso19139.gco.CharacterString_PropertyType, scope=AbstractCT_Catalogue_Type))

AbstractCT_Catalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'characterSet'), pyxb.bundles.opengis.iso19139.gmd.MD_CharacterSetCode_PropertyType, scope=AbstractCT_Catalogue_Type))

AbstractCT_Catalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subCatalogue'), CT_Catalogue_PropertyType, scope=AbstractCT_Catalogue_Type))

AbstractCT_Catalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'versionDate'), pyxb.bundles.opengis.iso19139.gco.Date_PropertyType, scope=AbstractCT_Catalogue_Type))

AbstractCT_Catalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), pyxb.bundles.opengis.iso19139.gco.CharacterString_PropertyType, scope=AbstractCT_Catalogue_Type))

AbstractCT_Catalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'language'), pyxb.bundles.opengis.iso19139.gco.CharacterString_PropertyType, scope=AbstractCT_Catalogue_Type))

AbstractCT_Catalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=AbstractCT_Catalogue_Type))

AbstractCT_Catalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldOfApplication'), pyxb.bundles.opengis.iso19139.gco.CharacterString_PropertyType, scope=AbstractCT_Catalogue_Type))

AbstractCT_Catalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'scope'), pyxb.bundles.opengis.iso19139.gco.CharacterString_PropertyType, scope=AbstractCT_Catalogue_Type))
AbstractCT_Catalogue_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldOfApplication')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'versionNumber')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'versionDate')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'language')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'characterSet')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subCatalogue')), min_occurs=0L, max_occurs=None)
    )
AbstractCT_Catalogue_Type._ContentModel = pyxb.binding.content.ParticleModel(AbstractCT_Catalogue_Type._GroupModel, min_occurs=1, max_occurs=1)



CT_UomCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'uomItem'), UnitDefinition_PropertyType, scope=CT_UomCatalogue_Type))
CT_UomCatalogue_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldOfApplication')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'versionNumber')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'versionDate')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'language')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'characterSet')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subCatalogue')), min_occurs=0L, max_occurs=None)
    )
CT_UomCatalogue_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'uomItem')), min_occurs=1, max_occurs=None)
    )
CT_UomCatalogue_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_UomCatalogue_Type._ContentModel = pyxb.binding.content.ParticleModel(CT_UomCatalogue_Type._GroupModel, min_occurs=1, max_occurs=1)



CodeListDictionary_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CodeListDictionary'), CodeListDictionary_Type, scope=CodeListDictionary_PropertyType))
CodeListDictionary_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeListDictionary_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CodeListDictionary')), min_occurs=1, max_occurs=1)
    )
CodeListDictionary_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CodeListDictionary_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_OperationParameter_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), OperationParameterAlt_PropertyType, scope=ML_OperationParameter_Type))
ML_OperationParameter_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_OperationParameter_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_OperationParameter_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_OperationParameter_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'minimumOccurs')), min_occurs=0L, max_occurs=1)
    )
ML_OperationParameter_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_OperationParameter_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_OperationParameter_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_OperationParameter_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_OperationParameter_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_UserDefinedCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_UserDefinedCS_Type))
ML_UserDefinedCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_UserDefinedCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_UserDefinedCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_UserDefinedCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_UserDefinedCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_UserDefinedCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_UserDefinedCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_UserDefinedCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_UserDefinedCS_Type._GroupModel, min_occurs=1, max_occurs=1)



UomAlternativeExpression_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=UomAlternativeExpression_Type))
UomAlternativeExpression_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
UomAlternativeExpression_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
UomAlternativeExpression_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
UomAlternativeExpression_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityTypeReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'catalogSymbol')), min_occurs=0L, max_occurs=1)
    )
UomAlternativeExpression_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
UomAlternativeExpression_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
UomAlternativeExpression_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
UomAlternativeExpression_Type._ContentModel = pyxb.binding.content.ParticleModel(UomAlternativeExpression_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_OperationParameter_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameter'), ML_OperationParameter_Type, scope=ML_OperationParameter_PropertyType))
ML_OperationParameter_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameter_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameter')), min_occurs=1, max_occurs=1)
    )
ML_OperationParameter_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_OperationParameter_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_EngineeringCRS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CrsAlt_PropertyType, scope=ML_EngineeringCRS_Type))
ML_EngineeringCRS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_EngineeringCRS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_EngineeringCRS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_EngineeringCRS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
ML_EngineeringCRS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_EngineeringCRS_Type._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'affineCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'cartesianCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'cylindricalCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'linearCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'polarCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'sphericalCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'userDefinedCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'coordinateSystem')), min_occurs=1, max_occurs=1)
    )
ML_EngineeringCRS_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'engineeringDatum')), min_occurs=1, max_occurs=1)
    )
ML_EngineeringCRS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_EngineeringCRS_Type._GroupModel_9 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_EngineeringCRS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel_9, min_occurs=1, max_occurs=1)
    )
ML_EngineeringCRS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_EngineeringCRS_Type._GroupModel, min_occurs=1, max_occurs=1)



CT_CrsCatalogue_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CT_CrsCatalogue'), CT_CrsCatalogue_Type, scope=CT_CrsCatalogue_PropertyType))
CT_CrsCatalogue_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CT_CrsCatalogue')), min_occurs=1, max_occurs=1)
    )
CT_CrsCatalogue_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_CrsCatalogue_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_DerivedCRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedCRS'), ML_DerivedCRS_Type, scope=ML_DerivedCRS_PropertyType))
ML_DerivedCRS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedCRS')), min_occurs=1, max_occurs=1)
    )
ML_DerivedCRS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_DerivedCRS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CoordinateSystemAlt_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAlt'), CoordinateSystemAlt_Type, scope=CoordinateSystemAlt_PropertyType))
CoordinateSystemAlt_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAlt')), min_occurs=1, max_occurs=1)
    )
CoordinateSystemAlt_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CoordinateSystemAlt_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_CompoundCRS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CrsAlt_PropertyType, scope=ML_CompoundCRS_Type))
ML_CompoundCRS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_CompoundCRS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_CompoundCRS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_CompoundCRS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
ML_CompoundCRS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_CompoundCRS_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'componentReferenceSystem')), min_occurs=2L, max_occurs=None)
    )
ML_CompoundCRS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_CompoundCRS_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_CompoundCRS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_CompoundCRS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_CompoundCRS_Type._GroupModel, min_occurs=1, max_occurs=1)



DatumAlt_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DatumAlt'), DatumAlt_Type, scope=DatumAlt_PropertyType))
DatumAlt_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(DatumAlt_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DatumAlt')), min_occurs=1, max_occurs=1)
    )
DatumAlt_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(DatumAlt_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_CartesianCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_CartesianCS_Type))
ML_CartesianCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_CartesianCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_CartesianCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_CartesianCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_CartesianCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_CartesianCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_CartesianCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_CartesianCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_CartesianCS_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_EllipsoidalCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_EllipsoidalCS'), ML_EllipsoidalCS_Type, scope=ML_EllipsoidalCS_PropertyType))
ML_EllipsoidalCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_EllipsoidalCS')), min_occurs=1, max_occurs=1)
    )
ML_EllipsoidalCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



EllipsoidAlt_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=EllipsoidAlt_Type))
EllipsoidAlt_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
EllipsoidAlt_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
EllipsoidAlt_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
EllipsoidAlt_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
EllipsoidAlt_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
EllipsoidAlt_Type._ContentModel = pyxb.binding.content.ParticleModel(EllipsoidAlt_Type._GroupModel, min_occurs=1, max_occurs=1)



UomAlternativeExpression_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UomAlternativeExpression'), UomAlternativeExpression_Type, scope=UomAlternativeExpression_PropertyType))
UomAlternativeExpression_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(UomAlternativeExpression_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'UomAlternativeExpression')), min_occurs=1, max_occurs=1)
    )
UomAlternativeExpression_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(UomAlternativeExpression_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_CodeDefinition_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CodeAlternativeExpression_PropertyType, scope=ML_CodeDefinition_Type))
ML_CodeDefinition_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_CodeDefinition_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_CodeDefinition_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
ML_CodeDefinition_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_CodeDefinition_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_CodeDefinition_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_CodeDefinition_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_TemporalCRS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CrsAlt_PropertyType, scope=ML_TemporalCRS_Type))
ML_TemporalCRS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_TemporalCRS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_TemporalCRS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_TemporalCRS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
ML_TemporalCRS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_TemporalCRS_Type._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'timeCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'usesTemporalCS')), min_occurs=1, max_occurs=1)
    )
ML_TemporalCRS_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'temporalDatum')), min_occurs=1, max_occurs=1)
    )
ML_TemporalCRS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_TemporalCRS_Type._GroupModel_9 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_TemporalCRS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel_9, min_occurs=1, max_occurs=1)
    )
ML_TemporalCRS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_TemporalCRS_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_ConventionalUnit_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), UomAlternativeExpression_PropertyType, scope=ML_ConventionalUnit_Type))
ML_ConventionalUnit_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_ConventionalUnit_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_ConventionalUnit_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_ConventionalUnit_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityTypeReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'catalogSymbol')), min_occurs=0L, max_occurs=1)
    )
ML_ConventionalUnit_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_ConventionalUnit_Type._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'conversionToPreferredUnit')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'roughConversionToPreferredUnit')), min_occurs=1, max_occurs=1)
    )
ML_ConventionalUnit_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'derivationUnitTerm')), min_occurs=0L, max_occurs=None)
    )
ML_ConventionalUnit_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_ConventionalUnit_Type._GroupModel_9 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_ConventionalUnit_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel_9, min_occurs=1, max_occurs=1)
    )
ML_ConventionalUnit_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_ConventionalUnit_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_BaseUnit_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_BaseUnit'), ML_BaseUnit_Type, scope=ML_BaseUnit_PropertyType))
ML_BaseUnit_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_BaseUnit')), min_occurs=1, max_occurs=1)
    )
ML_BaseUnit_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_BaseUnit_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_CodelistCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'codelistItem'), CT_Codelist_PropertyType, scope=CT_CodelistCatalogue_Type))
CT_CodelistCatalogue_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldOfApplication')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'versionNumber')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'versionDate')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'language')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'characterSet')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subCatalogue')), min_occurs=0L, max_occurs=None)
    )
CT_CodelistCatalogue_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'codelistItem')), min_occurs=1, max_occurs=None)
    )
CT_CodelistCatalogue_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_CodelistCatalogue_Type._ContentModel = pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_DerivedCRS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CrsAlt_PropertyType, scope=ML_DerivedCRS_Type))
ML_DerivedCRS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_DerivedCRS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_DerivedCRS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_DerivedCRS_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
ML_DerivedCRS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_DerivedCRS_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'conversion')), min_occurs=1, max_occurs=1)
    )
ML_DerivedCRS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_DerivedCRS_Type._GroupModel_9 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'baseCRS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'derivedCRSType')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'coordinateSystem')), min_occurs=1, max_occurs=1)
    )
ML_DerivedCRS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_9, min_occurs=1, max_occurs=1)
    )
ML_DerivedCRS_Type._GroupModel_10 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_DerivedCRS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel_10, min_occurs=1, max_occurs=1)
    )
ML_DerivedCRS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_DerivedCRS_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_ImageDatum_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), DatumAlt_PropertyType, scope=ML_ImageDatum_Type))
ML_ImageDatum_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_ImageDatum_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_ImageDatum_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_ImageDatum_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'anchorDefinition')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'realizationEpoch')), min_occurs=0L, max_occurs=1)
    )
ML_ImageDatum_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_ImageDatum_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'pixelInCell')), min_occurs=1, max_occurs=1)
    )
ML_ImageDatum_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_ImageDatum_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_ImageDatum_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_ImageDatum_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_ImageDatum_Type._GroupModel, min_occurs=1, max_occurs=1)



UnitDefinition_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'UnitDefinition'), pyxb.bundles.opengis.gml_3_2.UnitDefinitionType, scope=UnitDefinition_PropertyType, documentation=u'A gml:UnitDefinition is a general definition of a unit of measure. This generic element is used only for units for which no relationship with other units or units systems is known.\nThe content model of gml:UnitDefinition adds three additional properties to gml:Definition, gml:quantityType, gml:quantityTypeReference and gml:catalogSymbol.  \nThe gml:catalogSymbol property optionally gives the short symbol used for this unit. This element is usually used when the relationship of this unit to other units or units systems is unknown.'))
UnitDefinition_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(UnitDefinition_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'UnitDefinition')), min_occurs=1, max_occurs=1)
    )
UnitDefinition_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(UnitDefinition_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



MX_DataFile_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'featureTypes'), pyxb.bundles.opengis.iso19139.gco.GenericName_PropertyType, scope=MX_DataFile_Type))

MX_DataFile_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fileFormat'), pyxb.bundles.opengis.iso19139.gmd.MD_Format_PropertyType, scope=MX_DataFile_Type))
MX_DataFile_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_DataFile_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileName')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(MX_DataFile_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileDescription')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(MX_DataFile_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileType')), min_occurs=1, max_occurs=1)
    )
MX_DataFile_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_DataFile_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'featureTypes')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(MX_DataFile_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileFormat')), min_occurs=1, max_occurs=1)
    )
MX_DataFile_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_DataFile_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(MX_DataFile_Type._GroupModel_2, min_occurs=1, max_occurs=1)
    )
MX_DataFile_Type._ContentModel = pyxb.binding.content.ParticleModel(MX_DataFile_Type._GroupModel, min_occurs=1, max_occurs=1)



OperationMethodAlt_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=OperationMethodAlt_Type))
OperationMethodAlt_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
OperationMethodAlt_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
OperationMethodAlt_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
OperationMethodAlt_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
OperationMethodAlt_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
OperationMethodAlt_Type._ContentModel = pyxb.binding.content.ParticleModel(OperationMethodAlt_Type._GroupModel, min_occurs=1, max_occurs=1)



ClAlternativeExpression_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=ClAlternativeExpression_Type))
ClAlternativeExpression_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ClAlternativeExpression_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ClAlternativeExpression_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
ClAlternativeExpression_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
ClAlternativeExpression_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ClAlternativeExpression_Type._ContentModel = pyxb.binding.content.ParticleModel(ClAlternativeExpression_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_SphericalCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_SphericalCS'), ML_SphericalCS_Type, scope=ML_SphericalCS_PropertyType))
ML_SphericalCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_SphericalCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_SphericalCS')), min_occurs=1, max_occurs=1)
    )
ML_SphericalCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_SphericalCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CodeAlternativeExpression_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CodeAlternativeExpression'), CodeAlternativeExpression_Type, scope=CodeAlternativeExpression_PropertyType))
CodeAlternativeExpression_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CodeAlternativeExpression')), min_occurs=1, max_occurs=1)
    )
CodeAlternativeExpression_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CodeAlternativeExpression_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_Conversion_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), OperationAlt_PropertyType, scope=ML_Conversion_Type))
ML_Conversion_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'coordinateOperationAccuracy')), min_occurs=0L, max_occurs=None)
    )
ML_Conversion_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'method')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'parameterValue')), min_occurs=0L, max_occurs=None)
    )
ML_Conversion_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
ML_Conversion_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_Conversion_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Conversion_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_Conversion_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_Conversion_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_Transformation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), OperationAlt_PropertyType, scope=ML_Transformation_Type))
ML_Transformation_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'operationVersion')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'coordinateOperationAccuracy')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'sourceCRS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'targetCRS')), min_occurs=1, max_occurs=1)
    )
ML_Transformation_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'method')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'parameterValue')), min_occurs=0L, max_occurs=None)
    )
ML_Transformation_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
ML_Transformation_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_Transformation_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Transformation_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_Transformation_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_Transformation_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_ConcatenatedOperation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), OperationAlt_PropertyType, scope=ML_ConcatenatedOperation_Type))
ML_ConcatenatedOperation_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_ConcatenatedOperation_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_ConcatenatedOperation_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_ConcatenatedOperation_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'operationVersion')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'coordinateOperationAccuracy')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'sourceCRS')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'targetCRS')), min_occurs=0L, max_occurs=1)
    )
ML_ConcatenatedOperation_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_ConcatenatedOperation_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'coordOperation')), min_occurs=2L, max_occurs=None)
    )
ML_ConcatenatedOperation_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_ConcatenatedOperation_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_ConcatenatedOperation_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_ConcatenatedOperation_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_CodeDefinition_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CodeDefinition'), ML_CodeDefinition_Type, scope=ML_CodeDefinition_PropertyType))
ML_CodeDefinition_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeDefinition_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_CodeDefinition')), min_occurs=1, max_occurs=1)
    )
ML_CodeDefinition_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_CodeDefinition_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_DerivedUnit_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), UomAlternativeExpression_PropertyType, scope=ML_DerivedUnit_Type))
ML_DerivedUnit_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_DerivedUnit_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_DerivedUnit_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_DerivedUnit_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityTypeReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'catalogSymbol')), min_occurs=0L, max_occurs=1)
    )
ML_DerivedUnit_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_DerivedUnit_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'derivationUnitTerm')), min_occurs=1, max_occurs=None)
    )
ML_DerivedUnit_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_DerivedUnit_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_DerivedUnit_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_DerivedUnit_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_DerivedUnit_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_EngineeringDatum_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringDatum'), ML_EngineeringDatum_Type, scope=ML_EngineeringDatum_PropertyType))
ML_EngineeringDatum_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EngineeringDatum_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_EngineeringDatum')), min_occurs=1, max_occurs=1)
    )
ML_EngineeringDatum_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_EngineeringDatum_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_VerticalCRS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CrsAlt_PropertyType, scope=ML_VerticalCRS_Type))
ML_VerticalCRS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_VerticalCRS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_VerticalCRS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_VerticalCRS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
ML_VerticalCRS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_VerticalCRS_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'verticalCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'verticalDatum')), min_occurs=1, max_occurs=1)
    )
ML_VerticalCRS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_VerticalCRS_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_VerticalCRS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_VerticalCRS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_VerticalCRS_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_AffineCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_AffineCS_Type))
ML_AffineCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_AffineCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_AffineCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_AffineCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_AffineCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_AffineCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_AffineCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_AffineCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_AffineCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_AffineCS_Type._GroupModel, min_occurs=1, max_occurs=1)



CT_CoordinateSystem_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractCoordinateSystem'), pyxb.bundles.opengis.gml_3_2.AbstractCoordinateSystemType, abstract=pyxb.binding.datatypes.boolean(1), scope=CT_CoordinateSystem_PropertyType, documentation=u'gml:AbstractCoordinateSystem is a coordinate system (CS) is the non-repeating sequence of coordinate system axes that spans a given coordinate space. A CS is derived from a set of mathematical rules for specifying how coordinates in a given space are to be assigned to points. The coordinate values in a coordinate tuple shall be recorded in the order in which the coordinate system axes associations are recorded. This abstract complex type shall not be used, extended, or restricted, in an Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.'))
CT_CoordinateSystem_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CoordinateSystem_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractCoordinateSystem')), min_occurs=1, max_occurs=1)
    )
CT_CoordinateSystem_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_CoordinateSystem_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_PolarCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_PolarCS_Type))
ML_PolarCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_PolarCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_PolarCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_PolarCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_PolarCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_PolarCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_PolarCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PolarCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_PolarCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_PolarCS_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_ImageDatum_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ImageDatum'), ML_ImageDatum_Type, scope=ML_ImageDatum_PropertyType))
ML_ImageDatum_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageDatum_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_ImageDatum')), min_occurs=1, max_occurs=1)
    )
ML_ImageDatum_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_ImageDatum_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_ImageCRS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CrsAlt_PropertyType, scope=ML_ImageCRS_Type))
ML_ImageCRS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_ImageCRS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_ImageCRS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_ImageCRS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
ML_ImageCRS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_ImageCRS_Type._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'cartesianCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'affineCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'usesObliqueCartesianCS')), min_occurs=1, max_occurs=1)
    )
ML_ImageCRS_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'imageDatum')), min_occurs=1, max_occurs=1)
    )
ML_ImageCRS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_ImageCRS_Type._GroupModel_9 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_ImageCRS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel_9, min_occurs=1, max_occurs=1)
    )
ML_ImageCRS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_ImageCRS_Type._GroupModel, min_occurs=1, max_occurs=1)



PrimeMeridianAlt_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=PrimeMeridianAlt_Type))
PrimeMeridianAlt_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
PrimeMeridianAlt_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
PrimeMeridianAlt_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
PrimeMeridianAlt_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
PrimeMeridianAlt_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
PrimeMeridianAlt_Type._ContentModel = pyxb.binding.content.ParticleModel(PrimeMeridianAlt_Type._GroupModel, min_occurs=1, max_occurs=1)



ClAlternativeExpression_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ClAlternativeExpression'), ClAlternativeExpression_Type, scope=ClAlternativeExpression_PropertyType))
ClAlternativeExpression_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ClAlternativeExpression_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ClAlternativeExpression')), min_occurs=1, max_occurs=1)
    )
ClAlternativeExpression_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ClAlternativeExpression_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_CompoundCRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CompoundCRS'), ML_CompoundCRS_Type, scope=ML_CompoundCRS_PropertyType))
ML_CompoundCRS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CompoundCRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_CompoundCRS')), min_occurs=1, max_occurs=1)
    )
ML_CompoundCRS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_CompoundCRS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_GeodeticDatum_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), DatumAlt_PropertyType, scope=ML_GeodeticDatum_Type))
ML_GeodeticDatum_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_GeodeticDatum_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_GeodeticDatum_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_GeodeticDatum_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'anchorDefinition')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'realizationEpoch')), min_occurs=0L, max_occurs=1)
    )
ML_GeodeticDatum_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_GeodeticDatum_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'primeMeridian')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'ellipsoid')), min_occurs=1, max_occurs=1)
    )
ML_GeodeticDatum_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_GeodeticDatum_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_GeodeticDatum_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_GeodeticDatum_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_GeodeticDatum_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_CodeListDictionary_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CodeListDictionary'), ML_CodeListDictionary_Type, scope=ML_CodeListDictionary_PropertyType))
ML_CodeListDictionary_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_CodeListDictionary')), min_occurs=1, max_occurs=1)
    )
ML_CodeListDictionary_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_CodeListDictionary_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_CartesianCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CartesianCS'), ML_CartesianCS_Type, scope=ML_CartesianCS_PropertyType))
ML_CartesianCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CartesianCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_CartesianCS')), min_occurs=1, max_occurs=1)
    )
ML_CartesianCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_CartesianCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_ProjectedCRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ProjectedCRS'), ML_ProjectedCRS_Type, scope=ML_ProjectedCRS_PropertyType))
ML_ProjectedCRS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_ProjectedCRS')), min_occurs=1, max_occurs=1)
    )
ML_ProjectedCRS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_ProjectedCRS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_Ellipsoid_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_Ellipsoid'), ML_Ellipsoid_Type, scope=ML_Ellipsoid_PropertyType))
ML_Ellipsoid_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_Ellipsoid')), min_occurs=1, max_occurs=1)
    )
ML_Ellipsoid_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_Ellipsoid_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



Anchor_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Anchor'), Anchor_Type, scope=Anchor_PropertyType))
Anchor_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(Anchor_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Anchor')), min_occurs=1, max_occurs=1)
    )
Anchor_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(Anchor_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_ProjectedCRS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CrsAlt_PropertyType, scope=ML_ProjectedCRS_Type))
ML_ProjectedCRS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_ProjectedCRS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_ProjectedCRS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_5, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_ProjectedCRS_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
ML_ProjectedCRS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_ProjectedCRS_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'conversion')), min_occurs=1, max_occurs=1)
    )
ML_ProjectedCRS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_ProjectedCRS_Type._GroupModel_10 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'baseGeodeticCRS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'baseGeographicCRS')), min_occurs=1, max_occurs=1)
    )
ML_ProjectedCRS_Type._GroupModel_9 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_10, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'cartesianCS')), min_occurs=1, max_occurs=1)
    )
ML_ProjectedCRS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_9, min_occurs=1, max_occurs=1)
    )
ML_ProjectedCRS_Type._GroupModel_11 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_ProjectedCRS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel_11, min_occurs=1, max_occurs=1)
    )
ML_ProjectedCRS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_ProjectedCRS_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_UserDefinedCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_UserDefinedCS'), ML_UserDefinedCS_Type, scope=ML_UserDefinedCS_PropertyType))
ML_UserDefinedCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UserDefinedCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_UserDefinedCS')), min_occurs=1, max_occurs=1)
    )
ML_UserDefinedCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_UserDefinedCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_GeodeticCRS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CrsAlt_PropertyType, scope=ML_GeodeticCRS_Type))
ML_GeodeticCRS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_GeodeticCRS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_GeodeticCRS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_GeodeticCRS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None)
    )
ML_GeodeticCRS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_GeodeticCRS_Type._GroupModel_8 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'ellipsoidalCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'cartesianCS')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'sphericalCS')), min_occurs=1, max_occurs=1)
    )
ML_GeodeticCRS_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel_8, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'geodeticDatum')), min_occurs=1, max_occurs=1)
    )
ML_GeodeticCRS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_GeodeticCRS_Type._GroupModel_9 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_GeodeticCRS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel_9, min_occurs=1, max_occurs=1)
    )
ML_GeodeticCRS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_GeodeticCRS_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_LinearCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_LinearCS'), ML_LinearCS_Type, scope=ML_LinearCS_PropertyType))
ML_LinearCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_LinearCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_LinearCS')), min_occurs=1, max_occurs=1)
    )
ML_LinearCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_LinearCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_PassThroughOperation_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), OperationAlt_PropertyType, scope=ML_PassThroughOperation_Type))
ML_PassThroughOperation_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_PassThroughOperation_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_PassThroughOperation_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_PassThroughOperation_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'operationVersion')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'coordinateOperationAccuracy')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'sourceCRS')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'targetCRS')), min_occurs=0L, max_occurs=1)
    )
ML_PassThroughOperation_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_PassThroughOperation_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'modifiedCoordinate')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'coordOperation')), min_occurs=1, max_occurs=1)
    )
ML_PassThroughOperation_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_PassThroughOperation_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_PassThroughOperation_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_PassThroughOperation_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_PassThroughOperation_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_CodeListDictionary_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), ClAlternativeExpression_PropertyType, scope=ML_CodeListDictionary_Type))
ML_CodeListDictionary_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_CodeListDictionary_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_CodeListDictionary_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_CodeListDictionary_Type._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'dictionaryEntry')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'indirectEntry')), min_occurs=1, max_occurs=1)
    )
ML_CodeListDictionary_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._GroupModel_6, min_occurs=0L, max_occurs=None)
    )
ML_CodeListDictionary_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'codeEntry')), min_occurs=1, max_occurs=None)
    )
ML_CodeListDictionary_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_CodeListDictionary_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_CodeListDictionary_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_CodeListDictionary_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_CodeListDictionary_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_TimeCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_TimeCS_Type))
ML_TimeCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_TimeCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_TimeCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_TimeCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_TimeCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_TimeCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_TimeCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_TimeCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_TimeCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_TimeCS_Type._GroupModel, min_occurs=1, max_occurs=1)



OperationAlt_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OperationAlt'), OperationAlt_Type, scope=OperationAlt_PropertyType))
OperationAlt_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationAlt_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'OperationAlt')), min_occurs=1, max_occurs=1)
    )
OperationAlt_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(OperationAlt_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_UomCatalogue_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CT_UomCatalogue'), CT_UomCatalogue_Type, scope=CT_UomCatalogue_PropertyType))
CT_UomCatalogue_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_UomCatalogue_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CT_UomCatalogue')), min_occurs=1, max_occurs=1)
    )
CT_UomCatalogue_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_UomCatalogue_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



MX_Aggregate_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'aggregateFile'), MX_SupportFile_PropertyType, scope=MX_Aggregate_Type))

MX_Aggregate_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'aggregateCatalogue'), CT_Catalogue_PropertyType, scope=MX_Aggregate_Type))
MX_Aggregate_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gmd'), u'composedOf')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(MX_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gmd'), u'seriesMetadata')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(MX_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gmd'), u'subset')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(MX_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gmd'), u'superset')), min_occurs=0L, max_occurs=None)
    )
MX_Aggregate_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'aggregateCatalogue')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(MX_Aggregate_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'aggregateFile')), min_occurs=0L, max_occurs=None)
    )
MX_Aggregate_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_Aggregate_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(MX_Aggregate_Type._GroupModel_2, min_occurs=1, max_occurs=1)
    )
MX_Aggregate_Type._ContentModel = pyxb.binding.content.ParticleModel(MX_Aggregate_Type._GroupModel, min_occurs=1, max_occurs=1)



MX_Aggregate_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_Aggregate'), MX_Aggregate_Type, scope=MX_Aggregate_PropertyType))
MX_Aggregate_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_Aggregate_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MX_Aggregate')), min_occurs=1, max_occurs=1)
    )
MX_Aggregate_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(MX_Aggregate_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



MX_DataSet_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_DataSet'), MX_DataSet_Type, scope=MX_DataSet_PropertyType))
MX_DataSet_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_DataSet_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MX_DataSet')), min_occurs=1, max_occurs=1)
    )
MX_DataSet_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(MX_DataSet_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



EllipsoidAlt_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'EllipsoidAlt'), EllipsoidAlt_Type, scope=EllipsoidAlt_PropertyType))
EllipsoidAlt_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(EllipsoidAlt_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'EllipsoidAlt')), min_occurs=1, max_occurs=1)
    )
EllipsoidAlt_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(EllipsoidAlt_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



OperationAlt_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=OperationAlt_Type))
OperationAlt_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
OperationAlt_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
OperationAlt_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationAlt_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
OperationAlt_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'operationVersion')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'coordinateOperationAccuracy')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'sourceCRS')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'targetCRS')), min_occurs=0L, max_occurs=1)
    )
OperationAlt_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationAlt_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
OperationAlt_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationAlt_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
OperationAlt_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationAlt_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationAlt_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
OperationAlt_Type._ContentModel = pyxb.binding.content.ParticleModel(OperationAlt_Type._GroupModel, min_occurs=1, max_occurs=1)



CT_Catalogue_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AbstractCT_Catalogue'), AbstractCT_Catalogue_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=CT_Catalogue_PropertyType))
CT_Catalogue_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Catalogue_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'AbstractCT_Catalogue')), min_occurs=1, max_occurs=1)
    )
CT_Catalogue_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_Catalogue_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CodeAlternativeExpression_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=CodeAlternativeExpression_Type))
CodeAlternativeExpression_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
CodeAlternativeExpression_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
CodeAlternativeExpression_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
CodeAlternativeExpression_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=0L, max_occurs=1)
    )
CodeAlternativeExpression_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
CodeAlternativeExpression_Type._ContentModel = pyxb.binding.content.ParticleModel(CodeAlternativeExpression_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_Conversion_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_Conversion'), ML_Conversion_Type, scope=ML_Conversion_PropertyType))
ML_Conversion_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Conversion_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_Conversion')), min_occurs=1, max_occurs=1)
    )
ML_Conversion_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_Conversion_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



DatumAlt_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=DatumAlt_Type))
DatumAlt_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
DatumAlt_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
DatumAlt_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(DatumAlt_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
DatumAlt_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'anchorDefinition')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'realizationEpoch')), min_occurs=0L, max_occurs=1)
    )
DatumAlt_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(DatumAlt_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
DatumAlt_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(DatumAlt_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
DatumAlt_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(DatumAlt_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(DatumAlt_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
DatumAlt_Type._ContentModel = pyxb.binding.content.ParticleModel(DatumAlt_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_GeodeticDatum_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticDatum'), ML_GeodeticDatum_Type, scope=ML_GeodeticDatum_PropertyType))
ML_GeodeticDatum_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticDatum_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticDatum')), min_occurs=1, max_occurs=1)
    )
ML_GeodeticDatum_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_GeodeticDatum_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



MX_ScopeCode_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_ScopeCode'), pyxb.bundles.opengis.iso19139.gco.CodeListValue_Type, scope=MX_ScopeCode_PropertyType))
MX_ScopeCode_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_ScopeCode_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MX_ScopeCode')), min_occurs=1, max_occurs=1)
    )
MX_ScopeCode_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(MX_ScopeCode_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_CodelistValue_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CodeDefinition'), CodeDefinition_Type, scope=CT_CodelistValue_PropertyType))
CT_CodelistValue_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CodelistValue_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CodeDefinition')), min_occurs=1, max_occurs=1)
    )
CT_CodelistValue_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_CodelistValue_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_PrimeMeridian_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), PrimeMeridianAlt_PropertyType, scope=ML_PrimeMeridian_Type))
ML_PrimeMeridian_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_PrimeMeridian_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_PrimeMeridian_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_PrimeMeridian_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'greenwichLongitude')), min_occurs=1, max_occurs=1)
    )
ML_PrimeMeridian_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_PrimeMeridian_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_PrimeMeridian_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_PrimeMeridian_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_PrimeMeridian_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_BaseUnit_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), UomAlternativeExpression_PropertyType, scope=ML_BaseUnit_Type))
ML_BaseUnit_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_BaseUnit_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_BaseUnit_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._GroupModel_4, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_BaseUnit_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'quantityTypeReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'catalogSymbol')), min_occurs=0L, max_occurs=1)
    )
ML_BaseUnit_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_BaseUnit_Type._GroupModel_7 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'unitsSystem')), min_occurs=1, max_occurs=1)
    )
ML_BaseUnit_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._GroupModel_7, min_occurs=1, max_occurs=1)
    )
ML_BaseUnit_Type._GroupModel_8 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_BaseUnit_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._GroupModel_8, min_occurs=1, max_occurs=1)
    )
ML_BaseUnit_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_BaseUnit_Type._GroupModel, min_occurs=1, max_occurs=1)



MX_DataFile_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_DataFile'), MX_DataFile_Type, scope=MX_DataFile_PropertyType))
MX_DataFile_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_DataFile_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MX_DataFile')), min_occurs=1, max_occurs=1)
    )
MX_DataFile_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(MX_DataFile_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



PrimeMeridianAlt_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'PrimeMeridianAlt'), PrimeMeridianAlt_Type, scope=PrimeMeridianAlt_PropertyType))
PrimeMeridianAlt_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(PrimeMeridianAlt_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'PrimeMeridianAlt')), min_occurs=1, max_occurs=1)
    )
PrimeMeridianAlt_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(PrimeMeridianAlt_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CoordinateSystemAxisAlt_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=CoordinateSystemAxisAlt_Type))
CoordinateSystemAxisAlt_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
CoordinateSystemAxisAlt_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
CoordinateSystemAxisAlt_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
CoordinateSystemAxisAlt_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axisAbbrev')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axisDirection')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'minimumValue')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'maximumValue')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'rangeMeaning')), min_occurs=0L, max_occurs=1)
    )
CoordinateSystemAxisAlt_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
CoordinateSystemAxisAlt_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
CoordinateSystemAxisAlt_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
CoordinateSystemAxisAlt_Type._ContentModel = pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_Type._GroupModel, min_occurs=1, max_occurs=1)



CoordinateSystemAlt_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=CoordinateSystemAlt_Type))
CoordinateSystemAlt_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
CoordinateSystemAlt_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
CoordinateSystemAlt_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._GroupModel_3, min_occurs=1, max_occurs=1)
    )
CoordinateSystemAlt_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
CoordinateSystemAlt_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
CoordinateSystemAlt_Type._ContentModel = pyxb.binding.content.ParticleModel(CoordinateSystemAlt_Type._GroupModel, min_occurs=1, max_occurs=1)



MX_SupportFile_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MX_SupportFile'), MX_SupportFile_Type, scope=MX_SupportFile_PropertyType))
MX_SupportFile_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_SupportFile_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MX_SupportFile')), min_occurs=1, max_occurs=1)
    )
MX_SupportFile_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(MX_SupportFile_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CoordinateSystemAxisAlt_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAxisAlt'), CoordinateSystemAxisAlt_Type, scope=CoordinateSystemAxisAlt_PropertyType))
CoordinateSystemAxisAlt_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CoordinateSystemAxisAlt')), min_occurs=1, max_occurs=1)
    )
CoordinateSystemAxisAlt_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CoordinateSystemAxisAlt_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



MX_DataSet_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'supportFile'), MX_SupportFile_PropertyType, scope=MX_DataSet_Type))

MX_DataSet_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'datasetCatalogue'), CT_Catalogue_PropertyType, scope=MX_DataSet_Type))

MX_DataSet_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataFile'), MX_DataFile_PropertyType, scope=MX_DataSet_Type))
MX_DataSet_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_DataSet_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gmd'), u'has')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(MX_DataSet_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.isotc211.org/2005/gmd'), u'partOf')), min_occurs=0L, max_occurs=None)
    )
MX_DataSet_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_DataSet_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataFile')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(MX_DataSet_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'datasetCatalogue')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(MX_DataSet_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'supportFile')), min_occurs=0L, max_occurs=None)
    )
MX_DataSet_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_DataSet_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(MX_DataSet_Type._GroupModel_2, min_occurs=1, max_occurs=1)
    )
MX_DataSet_Type._ContentModel = pyxb.binding.content.ParticleModel(MX_DataSet_Type._GroupModel, min_occurs=1, max_occurs=1)



CT_OperationParameters_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractGeneralOperationParameter'), pyxb.bundles.opengis.gml_3_2.AbstractGeneralOperationParameterType, abstract=pyxb.binding.datatypes.boolean(1), scope=CT_OperationParameters_PropertyType, documentation=u'gml:GeneralOperationParameter is the abstract definition of a parameter or group of parameters used by an operation method.'))
CT_OperationParameters_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OperationParameters_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractGeneralOperationParameter')), min_occurs=1, max_occurs=1)
    )
CT_OperationParameters_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_OperationParameters_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_VerticalDatum_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), DatumAlt_PropertyType, scope=ML_VerticalDatum_Type))
ML_VerticalDatum_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_VerticalDatum_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_VerticalDatum_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_VerticalDatum_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'domainOfValidity')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'anchorDefinition')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'realizationEpoch')), min_occurs=0L, max_occurs=1)
    )
ML_VerticalDatum_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_VerticalDatum_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_VerticalDatum_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_VerticalDatum_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_VerticalDatum_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_PrimeMeridian_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_PrimeMeridian'), ML_PrimeMeridian_Type, scope=ML_PrimeMeridian_PropertyType))
ML_PrimeMeridian_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PrimeMeridian_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_PrimeMeridian')), min_occurs=1, max_occurs=1)
    )
ML_PrimeMeridian_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_PrimeMeridian_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_ConcatenatedOperation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ConcatenatedOperation'), ML_ConcatenatedOperation_Type, scope=ML_ConcatenatedOperation_PropertyType))
ML_ConcatenatedOperation_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_ConcatenatedOperation')), min_occurs=1, max_occurs=1)
    )
ML_ConcatenatedOperation_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_ConcatenatedOperation_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_TimeCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_TimeCS'), ML_TimeCS_Type, scope=ML_TimeCS_PropertyType))
ML_TimeCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TimeCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_TimeCS')), min_occurs=1, max_occurs=1)
    )
ML_TimeCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_TimeCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_GeodeticCRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticCRS'), ML_GeodeticCRS_Type, scope=ML_GeodeticCRS_PropertyType))
ML_GeodeticCRS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_GeodeticCRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_GeodeticCRS')), min_occurs=1, max_occurs=1)
    )
ML_GeodeticCRS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_GeodeticCRS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



OperationParameterAlt_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locale'), pyxb.bundles.opengis.iso19139.gmd.PT_Locale_PropertyType, scope=OperationParameterAlt_Type))
OperationParameterAlt_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
OperationParameterAlt_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
OperationParameterAlt_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
OperationParameterAlt_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'minimumOccurs')), min_occurs=0L, max_occurs=1)
    )
OperationParameterAlt_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
OperationParameterAlt_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=1, max_occurs=1)
    )
OperationParameterAlt_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
OperationParameterAlt_Type._ContentModel = pyxb.binding.content.ParticleModel(OperationParameterAlt_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_AffineCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_AffineCS'), ML_AffineCS_Type, scope=ML_AffineCS_PropertyType))
ML_AffineCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_AffineCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_AffineCS')), min_occurs=1, max_occurs=1)
    )
ML_AffineCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_AffineCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_PassThroughOperation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_PassThroughOperation'), ML_PassThroughOperation_Type, scope=ML_PassThroughOperation_PropertyType))
ML_PassThroughOperation_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_PassThroughOperation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_PassThroughOperation')), min_occurs=1, max_occurs=1)
    )
ML_PassThroughOperation_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_PassThroughOperation_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_VerticalCRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCRS'), ML_VerticalCRS_Type, scope=ML_VerticalCRS_PropertyType))
ML_VerticalCRS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCRS')), min_occurs=1, max_occurs=1)
    )
ML_VerticalCRS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_VerticalCRS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_VerticalCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_VerticalCS_Type))
ML_VerticalCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_VerticalCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_VerticalCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_VerticalCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_VerticalCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_VerticalCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_VerticalCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_VerticalCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_VerticalCS_Type._GroupModel, min_occurs=1, max_occurs=1)



CT_Ellipsoid_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'Ellipsoid'), pyxb.bundles.opengis.gml_3_2.EllipsoidType, scope=CT_Ellipsoid_PropertyType, documentation=u'A gml:Ellipsoid is a geometric figure that may be used to describe the approximate shape of the earth. In mathematical terms, it is a surface formed by the rotation of an ellipse about its minor axis.'))
CT_Ellipsoid_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Ellipsoid_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'Ellipsoid')), min_occurs=1, max_occurs=1)
    )
CT_Ellipsoid_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_Ellipsoid_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CodeDefinition_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CodeDefinition'), CodeDefinition_Type, scope=CodeDefinition_PropertyType))
CodeDefinition_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CodeDefinition_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CodeDefinition')), min_occurs=1, max_occurs=1)
    )
CodeDefinition_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CodeDefinition_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_DerivedUnit_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedUnit'), ML_DerivedUnit_Type, scope=ML_DerivedUnit_PropertyType))
ML_DerivedUnit_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_DerivedUnit_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_DerivedUnit')), min_occurs=1, max_occurs=1)
    )
ML_DerivedUnit_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_DerivedUnit_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_OperationMethod_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'OperationMethod'), pyxb.bundles.opengis.gml_3_2.OperationMethodType, scope=CT_OperationMethod_PropertyType, documentation=u'gml:OperationMethod is a method (algorithm or procedure) used to perform a coordinate operation. Most operation methods use a number of operation parameters, although some coordinate conversions use none. Each coordinate operation using the method assigns values to these parameters.\nThe parameter elements are an unordered list of associations to the set of operation parameters and parameter groups used by this operation method.'))
CT_OperationMethod_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OperationMethod_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'OperationMethod')), min_occurs=1, max_occurs=1)
    )
CT_OperationMethod_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_OperationMethod_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_TemporalCRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalCRS'), ML_TemporalCRS_Type, scope=ML_TemporalCRS_PropertyType))
ML_TemporalCRS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalCRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalCRS')), min_occurs=1, max_occurs=1)
    )
ML_TemporalCRS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_TemporalCRS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_UnitDefinition_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_UnitDefinition'), ML_UnitDefinition_Type, scope=ML_UnitDefinition_PropertyType))
ML_UnitDefinition_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_UnitDefinition_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_UnitDefinition')), min_occurs=1, max_occurs=1)
    )
ML_UnitDefinition_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_UnitDefinition_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_CoordinateSystemAxis_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'CoordinateSystemAxis'), pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxisType, scope=CT_CoordinateSystemAxis_PropertyType, documentation=u'gml:CoordinateSystemAxis is a definition of a coordinate system axis.'))
CT_CoordinateSystemAxis_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CoordinateSystemAxis_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'CoordinateSystemAxis')), min_occurs=1, max_occurs=1)
    )
CT_CoordinateSystemAxis_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_CoordinateSystemAxis_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_CoordinateSystemAxis_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAxisAlt_PropertyType, scope=ML_CoordinateSystemAxis_Type))
ML_CoordinateSystemAxis_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_CoordinateSystemAxis_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_CoordinateSystemAxis_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_CoordinateSystemAxis_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axisAbbrev')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axisDirection')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'minimumValue')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'maximumValue')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'rangeMeaning')), min_occurs=0L, max_occurs=1)
    )
ML_CoordinateSystemAxis_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_CoordinateSystemAxis_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_CoordinateSystemAxis_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_CoordinateSystemAxis_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_CoordinateSystemAxis_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_Transformation_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_Transformation'), ML_Transformation_Type, scope=ML_Transformation_PropertyType))
ML_Transformation_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Transformation_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_Transformation')), min_occurs=1, max_occurs=1)
    )
ML_Transformation_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_Transformation_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_Ellipsoid_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), EllipsoidAlt_PropertyType, scope=ML_Ellipsoid_Type))
ML_Ellipsoid_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_Ellipsoid_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_Ellipsoid_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_Ellipsoid_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'semiMajorAxis')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'secondDefiningParameter')), min_occurs=1, max_occurs=1)
    )
ML_Ellipsoid_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_Ellipsoid_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_Ellipsoid_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_Ellipsoid_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_Ellipsoid_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_EllipsoidalCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_EllipsoidalCS_Type))
ML_EllipsoidalCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_EllipsoidalCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_EllipsoidalCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_EllipsoidalCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_EllipsoidalCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_EllipsoidalCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_EllipsoidalCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_EllipsoidalCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_EllipsoidalCS_Type._GroupModel, min_occurs=1, max_occurs=1)



FileName_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FileName'), FileName_Type, scope=FileName_PropertyType))
FileName_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(FileName_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'FileName')), min_occurs=1, max_occurs=1)
    )
FileName_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(FileName_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_CrsCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'datum'), CT_Datum_PropertyType, scope=CT_CrsCatalogue_Type))

CT_CrsCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'operationMethod'), CT_OperationMethod_PropertyType, scope=CT_CrsCatalogue_Type))

CT_CrsCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'crs'), CT_CRS_PropertyType, scope=CT_CrsCatalogue_Type))

CT_CrsCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'coordinateSystem'), CT_CoordinateSystem_PropertyType, scope=CT_CrsCatalogue_Type))

CT_CrsCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'axis'), CT_CoordinateSystemAxis_PropertyType, scope=CT_CrsCatalogue_Type))

CT_CrsCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'parameters'), CT_OperationParameters_PropertyType, scope=CT_CrsCatalogue_Type))

CT_CrsCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ellipsoid'), CT_Ellipsoid_PropertyType, scope=CT_CrsCatalogue_Type))

CT_CrsCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'operation'), CT_Operation_PropertyType, scope=CT_CrsCatalogue_Type))

CT_CrsCatalogue_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'primeMeridian'), CT_PrimeMeridian_PropertyType, scope=CT_CrsCatalogue_Type))
CT_CrsCatalogue_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scope')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldOfApplication')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'versionNumber')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'versionDate')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'language')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'characterSet')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locale')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subCatalogue')), min_occurs=0L, max_occurs=None)
    )
CT_CrsCatalogue_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'crs')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'coordinateSystem')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'axis')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'datum')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ellipsoid')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'primeMeridian')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'operation')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'operationMethod')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'parameters')), min_occurs=0L, max_occurs=None)
    )
CT_CrsCatalogue_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_CrsCatalogue_Type._ContentModel = pyxb.binding.content.ParticleModel(CT_CrsCatalogue_Type._GroupModel, min_occurs=1, max_occurs=1)



ML_TemporalDatum_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalDatum'), ML_TemporalDatum_Type, scope=ML_TemporalDatum_PropertyType))
ML_TemporalDatum_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_TemporalDatum_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_TemporalDatum')), min_occurs=1, max_occurs=1)
    )
ML_TemporalDatum_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_TemporalDatum_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_CRS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractCRS'), pyxb.bundles.opengis.gml_3_2.AbstractCRSType, abstract=pyxb.binding.datatypes.boolean(1), scope=CT_CRS_PropertyType, documentation=u'gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.'))
CT_CRS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CRS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'AbstractCRS')), min_occurs=1, max_occurs=1)
    )
CT_CRS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_CRS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



MimeFileType_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MimeFileType'), MimeFileType_Type, scope=MimeFileType_PropertyType))
MimeFileType_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MimeFileType_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'MimeFileType')), min_occurs=1, max_occurs=1)
    )
MimeFileType_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(MimeFileType_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



MX_File_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AbstractMX_File'), AbstractMX_File_Type, abstract=pyxb.binding.datatypes.boolean(1), scope=MX_File_PropertyType))
MX_File_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(MX_File_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'AbstractMX_File')), min_occurs=1, max_occurs=1)
    )
MX_File_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(MX_File_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_VerticalCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCS'), ML_VerticalCS_Type, scope=ML_VerticalCS_PropertyType))
ML_VerticalCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_VerticalCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_VerticalCS')), min_occurs=1, max_occurs=1)
    )
ML_VerticalCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_VerticalCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_CodelistCatalogue_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CT_CodelistCatalogue'), CT_CodelistCatalogue_Type, scope=CT_CodelistCatalogue_PropertyType))
CT_CodelistCatalogue_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CT_CodelistCatalogue')), min_occurs=1, max_occurs=1)
    )
CT_CodelistCatalogue_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_CodelistCatalogue_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_CylindricalCS_Type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression'), CoordinateSystemAlt_PropertyType, scope=ML_CylindricalCS_Type))
ML_CylindricalCS_Type._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'metaDataProperty')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'description')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'descriptionReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'identifier')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'name')), min_occurs=0L, max_occurs=None)
    )
ML_CylindricalCS_Type._GroupModel_4 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'remarks')), min_occurs=0L, max_occurs=1)
    )
ML_CylindricalCS_Type._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._GroupModel_4, min_occurs=1, max_occurs=1)
    )
ML_CylindricalCS_Type._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://www.opengis.net/gml/3.2'), u'axis')), min_occurs=1, max_occurs=None)
    )
ML_CylindricalCS_Type._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._GroupModel_5, min_occurs=1, max_occurs=1)
    )
ML_CylindricalCS_Type._GroupModel_6 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alternativeExpression')), min_occurs=1, max_occurs=None)
    )
ML_CylindricalCS_Type._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._GroupModel_6, min_occurs=1, max_occurs=1)
    )
ML_CylindricalCS_Type._ContentModel = pyxb.binding.content.ParticleModel(ML_CylindricalCS_Type._GroupModel, min_occurs=1, max_occurs=1)



OperationMethodAlt_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'OperationMethodAlt'), OperationMethodAlt_Type, scope=OperationMethodAlt_PropertyType))
OperationMethodAlt_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(OperationMethodAlt_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'OperationMethodAlt')), min_occurs=1, max_occurs=1)
    )
OperationMethodAlt_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(OperationMethodAlt_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_ConventionalUnit_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_ConventionalUnit'), ML_ConventionalUnit_Type, scope=ML_ConventionalUnit_PropertyType))
ML_ConventionalUnit_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_ConventionalUnit_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_ConventionalUnit')), min_occurs=1, max_occurs=1)
    )
ML_ConventionalUnit_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_ConventionalUnit_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



CT_Codelist_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CodeListDictionary'), CodeListDictionary_Type, scope=CT_Codelist_PropertyType))
CT_Codelist_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Codelist_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'CodeListDictionary')), min_occurs=1, max_occurs=1)
    )
CT_Codelist_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(CT_Codelist_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_OperationParameterGroup_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameterGroup'), ML_OperationParameterGroup_Type, scope=ML_OperationParameterGroup_PropertyType))
ML_OperationParameterGroup_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_OperationParameterGroup')), min_occurs=1, max_occurs=1)
    )
ML_OperationParameterGroup_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_OperationParameterGroup_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)



ML_CylindricalCS_PropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ML_CylindricalCS'), ML_CylindricalCS_Type, scope=ML_CylindricalCS_PropertyType))
ML_CylindricalCS_PropertyType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(ML_CylindricalCS_PropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ML_CylindricalCS')), min_occurs=1, max_occurs=1)
    )
ML_CylindricalCS_PropertyType._ContentModel = pyxb.binding.content.ParticleModel(ML_CylindricalCS_PropertyType._GroupModel, min_occurs=0L, max_occurs=1)

FileName._setSubstitutionGroup(pyxb.bundles.opengis.iso19139.gco.CharacterString)

ML_OperationParameterGroup._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.OperationParameterGroup)

CodeDefinition._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.Definition)

CodeListDictionary._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.Dictionary)

ML_OperationParameter._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.OperationParameter)

ML_UserDefinedCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.UserDefinedCS)

ML_EngineeringCRS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.EngineeringCRS)

ML_TemporalCRS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.TemporalCRS)

CT_CodelistCatalogue._setSubstitutionGroup(AbstractCT_Catalogue)

MX_DataFile._setSubstitutionGroup(AbstractMX_File)

ML_SphericalCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.SphericalCS)

ML_Conversion._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.Conversion)

ML_ConcatenatedOperation._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.ConcatenatedOperation)

ML_DerivedUnit._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.DerivedUnit)

ML_UnitDefinition._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.UnitDefinition)

ML_AffineCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AffineCS)

ML_TemporalDatum._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.TemporalDatum)

MimeFileType._setSubstitutionGroup(pyxb.bundles.opengis.iso19139.gco.CharacterString)

MX_ScopeCode._setSubstitutionGroup(pyxb.bundles.opengis.iso19139.gmd.MD_ScopeCode)

ML_CartesianCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.CartesianCS)

ML_PolarCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.PolarCS)

Anchor._setSubstitutionGroup(pyxb.bundles.opengis.iso19139.gco.CharacterString)

ML_ProjectedCRS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.ProjectedCRS)

ML_LinearCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.LinearCS)

ML_PassThroughOperation._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.PassThroughOperation)

ML_GeodeticCRS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.GeodeticCRS)

ML_EngineeringDatum._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.EngineeringDatum)

MX_Aggregate._setSubstitutionGroup(pyxb.bundles.opengis.iso19139.gmd.AbstractDS_Aggregate)

ML_CompoundCRS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.CompoundCRS)

ML_BaseUnit._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.BaseUnit)

ML_PrimeMeridian._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.PrimeMeridian)

MX_DataSet._setSubstitutionGroup(pyxb.bundles.opengis.iso19139.gmd.DS_DataSet)

ML_CodeListDictionary._setSubstitutionGroup(CodeListDictionary)

ML_VerticalCRS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.VerticalCRS)

ML_ImageCRS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.ImageCRS)

ML_VerticalCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.VerticalCS)

ML_ConventionalUnit._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.ConventionalUnit)

MX_SupportFile._setSubstitutionGroup(AbstractMX_File)

ML_Transformation._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.Transformation)

ML_CodeDefinition._setSubstitutionGroup(CodeDefinition)

ML_EllipsoidalCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.EllipsoidalCS)

ML_CoordinateSystemAxis._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.CoordinateSystemAxis)

CT_CrsCatalogue._setSubstitutionGroup(AbstractCT_Catalogue)

ML_VerticalDatum._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.VerticalDatum)

CT_UomCatalogue._setSubstitutionGroup(AbstractCT_Catalogue)

ML_DerivedCRS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.DerivedCRS)

ML_TimeCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.TimeCS)

ML_Ellipsoid._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.Ellipsoid)

ML_CylindricalCS._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.CylindricalCS)

ML_GeodeticDatum._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.GeodeticDatum)

ML_OperationMethod._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.OperationMethod)

ML_ImageDatum._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.ImageDatum)
