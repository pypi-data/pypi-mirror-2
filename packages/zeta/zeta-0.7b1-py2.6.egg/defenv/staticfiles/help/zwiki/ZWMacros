[< <style type="text/css"> >]
    h1, h2, h3, h4, h5 { 
        margin : 0px;
        padding: 5px 0px 2px 3px;
        background-color : #EAEAFC;
        border-bottom: 1px solid #CCCCCC;
    }
[< </style> >]

{{ Toc( float='right' ) }}


== ZWiki Macro framework

Macros are direct function calls that can be made from wiki text into the wiki
engine, provided, there is a macro my that name available. Most probably the
macro will return a html content, which will be used to replace the macro
call.

=== Interfacing with a Macro

As mentioned before, macros are direct function calls into wiki engine and so
it looks like a function call. More specifically the macro call will be
directly evaluated as python code and thus follows all the function calling
rules and conventions of python. 

To expound it further, let us take a specific example of ''YearsBefore''
Macro, which computes the time elapsed from a given (month,day,year) and
composes a string like "2 years 2 months before",

Definition of YearsBefore macro,
> [<PRE YearsBefore( template, fromyear, frommonth=1, fromday=1, **kwargs ) >]

''A small primer on python function calls'',
* Arguments to python functions are of two types, positional and keyword. Other
  types of argument passing are not of concern here.
* Position arguments are specified first in a function call, where the first
  passed parameter is recieved as the first argument, second passed parameter
  is recieved as the second argument and so on. All positional parameters
  are mandatory.
* Keyword arguments are received next. Keyword arguments also carry a
  default value, if in case it is not passed.

With this in mind, we will try to decipher ''YearsBefore'' macro

* ''YearsBefore'', is the name of the macro function.
* ''template'', is the first mandatory positional argument providing the
  template of output string.
* ''fromyear'', is the second mandatory positional argument, specifying the
  year.
* ''frommonth'', is optional keyword argument, specifying the month.
* ''fromday'', is option keyword argument, specifying the day.
* ''kwargs'', most of the macro functions have this last arguments to accept a
  variable number of keyword arguments. One use case for this is to
  pass styling attributes, which is explained the section below.

Use case,
> [<PRE started this activity and running this for {{ YearsBefore('past %s', '2008') }} >]

> started this activity and running this for {{ YearsBefore('past %s', '2008') }}

=== Styling paramters

To get the desired CSS styling for the element returned by macro, pass in the styling
attributes as keyword arguments, like,

> [<PRE started this activity and running this for 
  {{ YearsBefore('past %s', '2008', color="red" ) }} >]

> started this activity and running this for 
> {{ YearsBefore('past %s', '2008', color="red" ) }}

Note that, the attribute name is represented as local variable name inside the
macro function. If you are expert CSS author, you will know that there are
CSS-style attribute-names like ''font-size'', ''font-weight'' which are not
valid variables, so, style attribute-names which contain a ''hypen''
cannot be passed as a keyword argument. As an alternative, there is a special
keyword argument (to all macro functions) by name ''style'', which directly
accepts ''semicolon (;)'' seperated style attributes, like,

> [<PRE started this activity and running this for 
   {{ YearsBefore('past %s', '2008', color="red", style="font-weight: bold; font-size: 200%" ) }} >]

> started this activity and running this for 
> {{ YearsBefore('past %s', '2008', color="red", style="font-weight: bold; font-size: 200%" ) }}

Now let us move on to available macros,



== List of ZWiki macros


=== Anchor

: Description ::
    Create an anchor in the document which can be referenced else-wehere.

Positional arguments,

|= anchor | anchor name as fragment, goes under @name attribute
|= text   | optional, text to be display at the anchor

CSS styling accepted as optional keyword arguments


=== Clear

: Description :: 
    Styling macro to clear the DOM elements on both sides, warding off from
    floating effects

Positional arguments, None

Default CSS styling,
> [<PRE {'clear': 'both'} >]

CSS styling accepted as optional keyword arguments


=== Html

: Description ::
    Embed HTML text within wiki doc. Try to use ''~[< ... ~>]'' markup first,
    if advanced styling is required for the embedded HTML text, then this
    macro can come in handy.

Positional arguments,
|= html | HTML text

CSS styling accepted as optional keyword arguments


=== Image

: Description ::
    Embed Images in the doc. Try to use ''Link markup'' to embed images, if
    advanced styling is required, this macro can come in handy.

Positional arguments,
|= src    | source-url for image, goes into @src attribute
|= alt    | alternate text, goes into @alt attribute

keyword argument,
|= height | optional, image height, goes into @height attribute
|= width  | optional, image width, goes into @width attribute
|= href   | optional, href, to convert the image into a hyper-link

Default CSS styling,
> [<PRE {'padding': '0px', 'border': '0px', 'margin': '0px'} >]

CSS styling accepted as optional keyword arguments


=== Images

: Description ::
    Embed Image galleries in the doc. 

Positional arguments,
|= *args  | variable number of image sources (@src), one for each for image

keyword argument,
|= alt    | alternate text (@alt), that goes into each image
|= height | optional, image height, applicable to all image's @height attribute
|= width  | optional, image width, applicable to all image's @width attribute
|= cols   | optional, number of image columns in the gallery, default is 3.

Default CSS styling,
> [<PRE {'padding': '0px', 'border': '0px', 'margin': '10px'} >]

CSS styling accepted as optional keyword arguments


=== ProjectAttributes

: Description ::
    Meant to be used in project front page, displays project attributes, like
    admin, mailinglist, license etc ...

Default CSS styling,
> [<PRE {'padding': '5px', 'margin': '10px 0px 10px 5px', '-moz-border-radius': '5px', 'background': '#e5ecf9'} >]

CSS styling accepted as optional keyword arguments


=== ProjectComponents

: Description ::
    Meant to be used in project front page, displays list of project components

Default CSS styling,
> [<PRE {'padding': '0px', 'border': '0px'} >]

CSS styling accepted as optional keyword arguments


=== ProjectDescription

: Description ::
    Meant to be used in project front page, displays project description

Default CSS styling,
> [<PRE {'padding': '0px', 'border': '0px'} >]

CSS styling accepted as optional keyword arguments


=== ProjectTeam

: Description ::
    Meant to be used in project front page, displays project team-members

Default CSS styling,
> [<PRE {'padding': '5px', 'margin': '10px 0px 10px 5px', '-moz-border-radius': '5px', 'background': '#e5ecf9'} >]

CSS styling accepted as optional keyword arguments


=== ProjectVersions

: Description ::
    Meant to be used in project front page, displays list of project versions

Default CSS styling,
> [<PRE {'padding': '0px', 'border': '0px'} >]

CSS styling accepted as optional keyword arguments



=== Span

: Description ::
    Create a span element. Try using ~``...~`` markup to generate span
    elements, if advanced styling is required, this macro can come in handy.

Positional arguments,
|= text   | optional, text for the span element

Default CSS styling,
> [<PRE {'color': 'gray', 'padding': '2px'} >]

CSS styling accepted as optional keyword arguments


=== Toc

: Description ::
    Macro to generate Table of contents.

Default CSS styling,
> [<PRE {'float': 'left', '-moz-border-radius': '5px', 'padding': '3px', 'width': '20em', 'background': '#f8f7bc', 'position': 'relative', 'margin': '10px'} >]

CSS styling accepted as optional keyword arguments


=== YearsBefore

: Description ::
    Generate a string (based on a template) describing time elapsed since the
    given (day,month,year). The described time is in UTC.

Positional arguments,
|= template | template string.
|= fromyear | from year

keyword argument,
|= frommonth | from month
|= fromday   | from day

CSS styling accepted as optional keyword arguments

