[< <style type="text/css"> >]
    h1, h2, h3, h4, h5 { 
        margin : 0px;
        padding: 5px 0px 2px 3px;
        background-color : #EAEAFC;
        border-bottom: 1px solid #CCCCCC;
    }
[< </style> >]

{{ Toc( float='right' ) }}

== Paster Admin commands
Paster-admin is a command line tool to manage the site.

== List of Commands




        ==== Analytics

        Project analysis, site analysis and repository analysis

        > [<PRE paster request <.ini file> /pasteradmin/analytics [anal=anals] >]

        where,
        :anals ::
            comma separated list of one or more of the following values, \\ 
            [<PRE tags attachs users license projects tickets reviews wiki timeline >]
            If left empty will compute all analytics
        


        ==== Generate application documentation

        Generate documentation from source code.

        > [<PRE paster request <.ini file> /pasteradmin/genwikidoc [docs=docs] >]

        where,
        :docs ::
            comma separated list of one or more of the following values, \\ 
              [<PRE schema vim zwhtml zwmacros zwextensions xmlrpc pasteradmin pygments >]
            If left empty will generate documentation for all the above
            components.
        


        ==== Manage mails with command line

        Fetch / Delete mails from mail server, using this commands line tool

        > [<PRE paster request <.ini file> /pasteradmin/mailcmd \
                [ do=delete ] [ project=projectname ] [ mails=mails ] >]

        where,
        : do      :: specify the action ''stat'' or ''fetch'' or ''delete''
        : project :: specify the project to `do` mail actions
        : mails   :: specify the mail numbers to fetch or delete.
        


        ==== Manage mail server's SQL database

        The mail server should be configured to support virtual domains and
        virtual users. Use this command list/add/del virtual domains and
        virtual users.

        > [<PRE paster request <.ini file> /pasteradmin/maildb  \
                [ domain=action ] [ user=action ] [ name=name ] [ email=email ]
                [ password=password ] >]

        where,
        : do       :: specify the actions ''clean'' or ''setup'' or ''adddom'' or
                      ''deldom'' or ''listdom'' or ''adduser'' or ''deluser'' or
                      ''listuser''
        : name     :: for domain action. Will be interpreted as ''domainname''
        : email    :: for user action. Will be interpreted as ''email''
        : password :: for user action. Will be interpreted as email's password.

        Note that //domain// and //user// parameters are mutually exclusive
        


        ==== Process e-mails

        Fetch / Delete mails from mail server

        > [<PRE paster request <.ini file> /pasteradmin/mailprocess \
                [ ip=<server-ip> ] [ user=<login> ] [ passwd=<password> ]
                [ do=delete ] [ mails=mails ] >]

        where,
        : project :: specify the project to process the mail. If the value is
                     `_all_` all projects will be processed.
        : delete  :: True or False, to delete the mails after processing it.
        


        ==== Project home-page

        Update project homepage.

        > [<PRE paster request <.ini file> /pasteradmin/phomepage <do> <file> [project] >]

        where,
        :do ::
          can be, \\ 
          //push//, to push the <file> as project home-page for [project] \\ 
          //pull//, to pull <project> homepage from database and save it in <file> \\ 

        if [project] is not specified (for //push//), the operation will be
        done on all hosted projects.
        


        ==== Process repository logs

        Fetch repository logs, interpret the log message and update the
        database.

        > [<PRE paster request <.ini file> /pasteradmin/replogprocess \
                [ id=<repid> ] [ project=<projectname> ] [ name=<rep-name> ] >]

        where,
        : id      :: VCS id.
        : project :: Optional projectname
        : name    :: Optional repository name, which will be confirmed with
                     //id//
        


        ==== Xapian search indexing

        Build search index table for database content.

        > [<PRE paster request <.ini file> /pasteradmin/search <do> [doctypes] [replace=1] [querystring] [xid] >]

        where,
        :do :: 
          can be, \\ 
          //index//, to index all documents from tables mentioned in [doctypes] \\ 
          //queryterms//, convert the <querystring> and display the query terms \\ 
          //query//, results for <querystring> \\ 
          //clear//, remove the document identified by //xid//
        :doctypes ::
          Documents for which to build search index, can be a comma separated
          value of,
          [<PRE user, attach, license, staticwiki, project, ticket, review, wiki. >]
          If not specified, index will be built for all documents
        :replace ::
          Overwrite the existing index with new one. If not specified, replace
          will be False
        :querystring ::
          simple query string
        :xid ::
          document id, only for administrators who know what they are doing.
        


        ==== Guest wiki pages

        Push a directory tree of wiki documents as guest wiki pages, or pull guest
        wiki pages from database into a directory tree.

        > [<PRE paster request <.ini file> /pasteradmin/staticwiki <do> [dir] [path] >]

        where,
        :do ::
          can be, \\ 
          //push//, to push directory tree of wiki pages from <dir> into the 
                    database \\ 
          //pull//, to pull static wiki pages from database into <dir> \\ 
          //deleteall//, to delete all static-wiki pages in the database \\ 
          //delete//, to delete static-wiki page specified by <path>
        


        ==== Upgrade database

        When ever a deployed version of application is upgraded with a new
        version, database //might// get outdated. To bring the database in
        consistence with the application, use this command.

        > [<PRE paster request <.ini file> /pasteradmin/upgradedb >]
        


        ==== Upgrade environment directory

        When ever a deployed version of application is upgraded with the new
        version, environment directory //might// get outdated. To bring the
        environment in consistence with application, use this command.

        > [<PRE paster request <.ini file> /pasteradmin/upgradeenv  >]
        


        ==== Upgrade wiki

        Most of the text content in the database support wiki markup. When a
        newer version of ZWiki library is used, upgrade pre-translated
        wiki pages using the latest version.

        > [<PRE paster request <.ini file> /pasteradmin/upgradewiki [what] >]

        where,
        :what ::
          Is comma separated list of tables to upgrade, which can be,
          [<PRE staticwiki, project, ticket, review, wiki >]
        
