[< <style type="text/css"> >]
h1, h2, h3, h4, h5 { 
    margin : 0px;
    padding: 5px 0px 2px 3px;
    background-color : #EAEAFC;
    border-bottom: 1px solid #CCCCCC;
}
[< </style> >]

{{ Toc( float='right' ) }}

=== Project

[[ http://en.wikipedia.org/wiki/Project | Wikipedia ]] defines a project as,

[<Q A project in business and science is a collaborative enterprise,
 frequently involving research or design, that is carefully planned to
 achieve a particular aim. >]

If a project is to be executed in more than couple of months or involves
more than two people, multiple factors come into play.  Like,
   * inter-personal communication
   * changing requirements
   * time estimations
   * version control
   * priority of work
   * cherry picking features
   * quality, etc ...

Over the past decades several methodologies have been proposed, suggesting
frameworks for engineers and developers to execute their projects. It is a
known fact that any framework does well for targeted systems, but fails
when applied on other systems. We have designed Zeta not as a framework or
methodology, it does not encourage any particular software process.
Instead, It is designed as a collection of tools that are integrated with
each other, as well as, integrating with developer's day to day activity.

As a developer one is faced with the issue of juggling with multiple tools for 
documentation,issue tracking, code reviews, version control etc. Zeta helps to 
simplify this, by bringing all onto the same platform and integrating them 
seamlessly. 

''Tools that are indispensable to developers currently''

* Editor or IDE, is the primary means for developers to take their ideas to 
completion.
* Email is ubiquitous, accessible with plethora of devices, any where in world.
* Browser, is the window to the web and growing more sophisticated day by day.

Zeta is designed around them, providing the following primary functionalities,

* Documentation
* Issue tracking
* Version Control Integration
* Review (or code inspection)

These functionalities are very much fundamental to all projects irrespective
of any software methodologies.

=== Project instance

Zeta uses the term //Project// for a collaboration instance. It is an
entity under which users join together and work towards a goal. Any registered 
user can create a new project and by doing so becomes the project administrator. 
The project's administrator can later be changed by site-admin (//admin//) or by
the project admin itself. Being a project's administrator, the user,

* Gets un-restricted access to all pages under that project.
* Divide project activities into different components and assign owners.
* Manage projects with milestones (setting duedate, status etc ...) and versions.
* Manage project teams, from available types of team. 
  // Only ``{c} admin `` user can add new teams //.
* Manage permissions for project teams.

''Teams''

Users are grouped into logical entities called //teams//. In that
sense, a team can be seen as a role the user will be playing in the project. 
Since a user can have multiple roles in a project, he / she can also belong to 
multiple teams (for e.g developer, member etc). Teams can be configured by the 
site-admin using site-admin/SiteConfig tab.

Teams also play an important part in permission management, since all project
level permissions are managed using project-teams instead of assigning permissions
individually. [[ /help/pms | Learn more ]]

''License''

License documents can be added to the site and managed separately. Site
administrator and any registered user with //LICENSE_CREATE// and
//LICENSE_VIEW// permissions can manage site licenses. Hosted projects can
subsequently be tagged with these licenses.

''Milestones and roadmap''

Milestone is a point where hypothesis are expected to become facts, investments
show results, ideas become reality. It is the fulcrum where a team of people
lift themselves from one plane to a higher plane.
[[ http://en.wikipedia.org/wiki/Milestone_(project_management) | Wikipedia's milestone entry ]]
says,

[<Q Within the framework of project management, a milestone is the end of a
 stage that marks the completion of a work package or phase, typically
 marked by a high level event such as completion, endorsement or signing of
 a deliverable, document or a high level review meeting. >]

Under Zeta,

 * For every hosted project under the site, project's administrator can create
   milestones with ''due_date'' and ''description'' and close them as
   ``{g} completed `` or ``{r} cancelled `` with ''closing-remark''.
 * ''Roadmap'', all milestones in a project can be consolidated into its roadmap.
 * Since tickets are tracked with milestone attribute, for every milestone a
   report card of issues will be presented (Figure below).

[[ +/screenshots/mstn_rcard.png | screenshot of report card ]]

''Versions''

After a point, especially when more people are involved in a common goal, it
is hard to say when the goal is met, or when the work is ready for real
world application. Typically a goal is considered met, only when it is
completed in its entirety, accounting for application (or design) integrity,
interoperability and user experience. To symbolise the evolutionary stages of
a project, it is tagged with version names denoting `pre-alpha`, `alpha`,
`beta`, `release candidates` etc...

Zeta, does not enforce any form of version naming or development process,
but users can track their issues (tickets) and
[[ http://en.wikipedia.org/wiki/Triage | triage ]] them with version
attribute. Learn more about version naming from the masters,
  * [[ http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version \
      | Debian package version numbering ]]
  * [[ http://www.python.org/dev/peps/pep-0386/ | From pythonistas ]]

'' Mount points ''

Host your project documents and text files from the repository for easy 
accessibilty. It can be mounted onto the project url and hosted as web pages ([[ /
help/vcs#Mounting directories | learn more ]]). Following
document formats are supported,
  * html
  * wiki
  * plain-text

'' Downloads ''

All important releases, files etc... can be uploaded as attachments to a
project and can be tagged as //download//. Once an attachment under a
project is tagged as //download//, it will be listed in the project-download
page. Note that, you can add meaningful summary to these attachments as
well.

'' Attachments ''

{{ Image( '/screenshots/zwidget_attach.png', 'screenshot of attachment widget',
          float="right", padding="5px", margin="5px",
          style="border-left : 2px solid #d6d6d6;" ) }}

Projects and its resources can be attached with files that are relevant to them.
Use the attachment widget that will be available on attachable resource's page
to upload ( by clicking on the {{ Image( '/zetaicons/attach.png', 'attachment' ) }}
icon) or remove (by clicking on the ``{c}cross-bar``) files.  Subsequently,
users can add meaningful summary to attached files and tag them with //tagnames//.

Specifically, files can be attached to,
  * license
  * project
  * ticket
  * wiki
  * review
                                                                    
'' Tags ''

{{ Image( '/screenshots/zwidget_tag.png', 'screenshot of attachment tag',
          float="right", padding="5px", margin="5px",
          style="border-left : 2px solid #d6d6d6;" ) }}
{{ Image( '/screenshots/tag_chart.png', 'screenshot of tag chart', clear="both",
          float="right", padding="5px", margin="5px",
          style="border-left : 2px solid #d6d6d6;" ) }}

Make it easy to track your resources by tagging.
Zeta resources can be tagged (or labelled) with relevant keywords. Use the
tag-widget that will be available on taggable resource's page to add ( by
clicking on the {{ Image( '/zetaicons/tag_green.png', 'tag' ) }} icon) or
remove ( by clicking on the ``{c}cross-bar``) keywords.

Specifically, following resources can be tagged,
  * attachment
  * license
  * project
  * ticket
  * review
  * wiki

'' Favorites ''

Monitor your selected resource like tickets or wiki pages closely.
Registered users can select,
  * a project
  * wiki-page
  * ticket
  * review

as their favorites. By doing so, they will be added to the watch list and
notified on every update made to their favorites. Just click on the favorite
{{ Image( '/zetaicons/star_selected.png', 'favorite' ) }} icon to select or
de-select.

'' Voting ''

Registered users can //up-vote// or //down-vote//,
    * a wiki-page
    * ticket

Up-voting denotes that the user is interested in the wiki-page or finds that
the ticket is important to him / her. Down-voting may denote that some thing is
wrong with the wiki-page or the ticket being down voted. Click on the
{{ Image( '/zetaicons/thumbsup_x.png', 'Up-Vote' ) }} icon to up-vote and click on
the {{ Image( '/zetaicons/thumbsdown_x.png', 'Down-Vote' ) }} icon to down-vote.

'' Timeline ''

{{ Image( '/screenshots/timeline_chart.png', 'screenshot of timeline chart',
          float="right", padding="5px", margin="5px",
          style="border-left : 2px solid #d6d6d6;" ) }}

Every single update to the database is logged. Users can view these log
messages as a timeline of,
  * updates done by a particular user
  * all updates done under a project
  * updates done by project administrator
  * updates to all licenses or a single license
  * updates to a single wiki-page or all pages under the project
  * updates to a particular ticket or all tickets
  * updates to any particular review or all reviews
  * repositories updates
  * updates to attachments
  * updates to tags

Click on the {{ Image( '/zetaicons/time.png', 'timeline' ) }} icon, to visit timeline.
Timeline is displayed in the context of the page being browsed.
For eg,
  * when visiting timeline from Ticket listing page, will display the
    activity log of all tickets.
  * and, when visiting timeline from a ticket page, will display the activity
    log for that particular ticket only.

''Project homepage''

Customize your project homepage with project overview and important details. The
homepage is in wiki format. Every project that is created under the site, will 
have a default //homepage// as a wiki-page under the project.

Like all wiki pages project's //homepage// are translated and cached for
performance reasons. Thus, it could get out-dated when using dynamic macros.
To manually translate an out-dated //homepage// click on the
{{ Image( '/zetaicons/arrow_refresh.png', 'Translate' ) }} icon.

/* vim: set filetype=zwiki : */
