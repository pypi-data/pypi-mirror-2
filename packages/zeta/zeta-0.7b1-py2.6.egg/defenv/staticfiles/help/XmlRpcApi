[< <style type="text/css"> >]
    h1, h2, h3, h4, h5 { 
        margin : 0px;
        padding: 5px 0px 2px 3px;
        background-color : #EAEAFC;
        border-bottom: 1px solid #CCCCCC;
    }
[< </style> >]

{{ Toc( float='right' ) }}

== XMLRPC API
XMLRPC is a way of interfacing with ''ZETA server'' via HTTP.

== List of XMLRPC API




        === commentonticket( projectname, ticket, comment )
        
        :Description ::
            Comment on `ticket` under project `projectname`

        Positional arguments,
        |= projectname | a valid project-name
        |= ticket      | a valid ticket id
        |= comment     | comment as wiki text

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === commentonwiki( projectname, pagename, comment )

        :Description ::
            Comment on wiki-page, `pagename under project, `projectname`,

        Positional arguments,
        |= projectname | a valid project-name
        |= pagename    | valid and existing wiki page-name
        |= comment     | comment as wiki text

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === configticket( projectname, ticket, summary, type, severity,
        description, promptuser, components, versions, blocking, blockedby,
        parent, status, due_date )
        
        :Description ::
            Configure ticket, `ticket` under project, `projectname`

        Positional arguments,
        |= projectname | a valid project-name
        |= ticket      | a valid ticket id
        |= summary     | summary string, if False, will be skipped
        |= type        | valid ticket type, if False, will be skipped
        |= severity    | valid ticket severity, if False, will be skipped
        |= description | description string, if False, will be skipped
        |= components  | list of component ids, if False, will be skipped
        |= milestones  | list of milestone ids, if False, will be skipped
        |= versions    | list of version ids, if False, will be skipped
        |= blocking    | list of ticket ids blockedby this ticket, if False, will be skipped
        |= blockedby   | list of ticket ids blocking this ticket, if False, will be skipped
        |= parent      | parent ticket id
        |= status      | valid ticket status, if False, will be skipped
        |= due_date    | due_date in mm/dd/yyyy format

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === configwiki( projectname, pagename, type, summary )
        
        :Description ::
            Config wiki-page, `pagename` under project, `projectname`,

        Positional arguments,
        |= projectname | a valid project-name
        |= pagename    | valid and existing wiki page-name
        |= type        | type of wiki page, if False, will be skipped
        |= summary     | summary string, if False, will be skipped

        On success,
            [<PRE { 'rpcstatus'  : 'ok' } >]
        On failure,
            [<PRE
            { 'rpcstatus' : 'fail',
              'message'   : <msg string indicating reason for failure>
            } >]
        


        === liststaticwikis()

        :Description ::
            List all the static wiki page names,

        :Return ::
            On success,
                [<PRE
                { 'rpcstatus' : 'ok',
                  'paths'     : [ <path-url>, <path-url>, .... ]
                } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === listtickets( projectname )
        
        :Description ::
            List all tickets under project `projectname`,

        Positional arguments,
        |= projectname | a valid project-name

        :Return ::
            On success,
                [<PRE
                { 'rpcstatus' : 'ok',
                  'tickets' : { <ticket-id> : [ <summary> ], ... }
                } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === listwikipage( projectname )

        :Description ::
            List wiki pages under project, `projectname`,

        Positional arguments,
        |= projectname | a valid project-name

        :Return ::
            On success,
                [<PRE
                { 'rpcstatus' : 'ok',
                  'wikipages' : [ <page-name>, <page-name>, .... ]
                } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === myprojects()
        :Description ::
            List of participating projects, by the requesting user,

        :Return ::
            On success,
                [<PRE
                { 'rpcstatus'    : 'ok',
                  'projectnames' : [ <projectname>, <projectname>, .... ]
                } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === newstaticwiki( path, content )

        :Description ::
            Create a new static wiki page, under path-url `path`, published
            with `content`
        
        Positional arguments,
        |= path     | url-path, for the new static wiki page
        |= content  | wiki text to publish.

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === newticket( projectname, summary, type, severity, description,
        compenents, milestones, versions, blocking, blockedby, parent )
        
        :Description ::
            Create new ticket under project `projectname`

        Positional arguments,
        |= projectname | a valid project-name
        |= summary     | must be a valid summary string
        |= type        | must be a valid ticket type
        |= severity    | must be a valid ticket severity
        |= description | description string, if False, will be skipped
        |= components  | list of component ids, if False, will be skipped
        |= milestones  | list of milestone ids, if False, will be skipped
        |= versions    | list of version ids, if False, will be skipped
        |= blocking    | list of ticket ids blockedby this ticket, if False, will be skipped
        |= blockedby   | list of ticket ids blocking this ticket, if False, will be skipped
        |= parent      | parent ticket id

        :Return ::
            On success,
                [<PRE
                { 'rpcstatus' : 'ok',
                  'id'        : <id>
                } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === newwikipage( projectname, type, summary )

        :Description ::
            Create a new wiki-page for project, `projectname`.

        Positional arguments,
        |= projectname | a valid project-name
        |= pagename    | new wiki page-name under project,
        |= type        | type of wiki page, if False, default type will be used
        |= summary     | summary string, if False, will assume empty string

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === projectdetails( projectname )
        
        :Description ::
            Project details like components, milestones, versions, teams for
            project, `projectname`,

        Positional arguments,
        |= projectname | name of the project for which the details are required

        :Return::
            On success,
                [<PRE
                { 'rpcstatus'    : 'ok',
                  'components'   : [ ( <compid>, <compname> ), ... ],
                  'milestones'   : [ ( <mstnid>, <milestonename> ), ... ],
                  'versions'     : [ ( <verid>, <versionname> ), ...   ],
                  'projectusers' : [ username, ... ],
                  
                } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === publishstaticwiki( path, content )

        :Description ::
            Publish new content, (or updated content) onto a static wiki page,

        Positional arguments,
        |= path     | a valid and existing url-path
        |= content  | wiki text to publish

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === publishwiki( projectname, pagename, content )
        
        :Description ::
            Publish new content, (or updated content) for wiki-page `pagename`,
            under project, `projectname`,

        Positional arguments,
        |= projectname | a valid project-name
        |= pagename    | valid and existing wiki page-name
        |= content     | content to be published (as the next version).

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === staticwiki( path )

        :Description ::
            Read a static wiki page from url `path`

        Positional arguments,
        |= path     | a valid and existing url-path

        :Return ::
            On success,
                [<PRE
                { 'rpcstatus' : 'ok',
                  'path'      : <path-url>,
                  'text'      : <wiki-text>,
                  'texthtml'  : <html-text>,
                } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === System()
        
        :Description ::
            Get the system table entries,

        :Return ::
            On success,
                [<PRE
                { 'rpcstatus' : 'ok',
                  'entries'   : { key : value, .... }
                } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        

Returns a list of XML-RPC methods for this XML-RPC resource

Returns the documentation for a method

Returns an array of array's for the valid signatures for a
        method.

        The first value of each array is the return value of the
        method. The result is an array to indicate multiple signatures
        a method may be capable of.
        
        


        === tagticket( projectname, ticket, addtags, deltags )
        
        :Description ::
            Add or delete tags from `ticket`,

        Positional arguments,
        |= projectname | a valid project-name
        |= ticket      | a valid ticket id
        |= addtags     | list of tagnames to add, if False, will be skipped
        |= deltags     | list of tagnames to delete, if False, will be skipped

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === tagwiki( projectname, pagename, addtags, deltags )
       
        :Description ::
            Add or delete tags from wiki-page `pagename`, under project
            `projectname`.

        Positional arguments,
        |= projectname | a valid project-name
        |= pagename    | valid and existing wiki page-name
        |= addtags     | list of tagnames to add, if False, will be skipped
        |= deltags     | list of tagnames to delete, if False, will be skipped

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === ticket( projectname, ticket )
        
        :Description ::
            Read ticket `ticket, under project `projectname`

        Positional arguments,
        |= projectname | a valid project-name
        |= ticket      | a valid ticket id

        :Return ::
            On success,
                [<PRE
                { 'rpcstatus'    : 'ok',
                  'id'        : <id>,
                  'summary'   : <summary string>,
                  'type'      : <type string>,
                  'severity'  : <severity string>,
                  'status'    : <status string>,
                  'due_date'  : <due_date in DD/MM/YYYY format>
                  'created_on': <created_in DD/MM/YYYY format>
                  'owner'     : <owner string>,
                  'promptuser': <promptuser string>,
                  'compid'    : <component-id>,
                  'compname'  : <componentname>,
                  'mstnid'    : <milestone-id>,
                  'mstnname'  : <milestone_name>,
                  'verid'     : <version-id>,
                  'vername'   : <version_name>,
                  'parent'    : <parent-ticketid>,
                  'description'      : <description string>,
                  'descriptionhtml'  : <description as html>,
                  'blockedby' : [ <ticket-id>, <ticket-id>, ... ],
                  'blocking'  : [ <ticket-id>, <ticket-id>, ... ],
                  'children'  : [ <ticket-id>, <ticket-id>, ... ]
                } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                }
        


        === ticketfav( projectname, ticket, favorite )
        
        :Description :: 
            Add or remove ticket as favorite,

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === voteticket( projectname, ticket, vote )
        
        :Description ::
            Upvote or Downvote a `ticket`

        Positional arguments,
        |= projectname | a valid project-name
        |= ticket      | a valid ticket id
        |= vote        | either 'up' (up-vote ticket) or 'down' (down-vote ticket)

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                } >]
        


        === votewiki( projectname, pagename, vote )
        
        :Description ::
            Upvote or Downvote wiki-page `pagename`, under project `projectname`

        Positional arguments,
        |= projectname | a valid project-name
        |= pagename    | valid and existing wiki page-name
        |= vote        | either 'up' (up-vote page) or 'down' (down-vote page)

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus'  : 'fail',
                  'message' : <msg string indicating reason for failure>
                } >]
        


        === wiki( projectname, pagename )

        :Description ::
            Read wiki-page `pagename`, for project, `projectname`,

        Positional arguments,
        |= projectname | a valid project-name
        |= pagename    | valid and existing wiki page-name

        :Return ::
            On success,
                { 'rpcstatus' : 'ok',
                  'type'      : <wiki type string>
                  'summary'   : <wiki summary string>
                  'text'      : <wiki text string>
                }
            On failure,
                { 'rpcstatus' : 'fail',
                  'message'   : <msg string indicating reason for failure>
                }
        


        === wikifav( projectname, pagename, favorite )

        :Description ::
            Add or remove wiki-page as favorite from `user`

        Positional arguments,
        |= projectname | a valid project-name
        |= pagename    | valid and existing wiki page-name
        |= favorite    | True (to add as favorite) or False (to remove from favorite)

        :Return ::
            On success,
                [<PRE { 'rpcstatus'  : 'ok' } >]
            On failure,
                [<PRE
                { 'rpcstatus'  : 'fail',
                  'message' : <msg string indicating reason for failure>
                } >]
        

Convenience method to return a Pylons response XMLRPC Fault
