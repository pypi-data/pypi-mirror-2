[< <style type="text/css"> >]
h1, h2, h3, h4, h5 { 
    margin : 0px;
    padding: 5px 0px 2px 3px;
    background-color : #EAEAFC;
    border-bottom: 1px solid #CCCCCC;
}
[< </style> >]

{{ Toc( position='relative', float='right' ) }}

'' [[ http://discoverzeta.com | Check out ]] our latest commercial sales, service and
support for Zeta ''

=== Non functional requirements 

Functional requirements define what a system is supposed to do, whereas,
non-functional requirements define how a system is supposed to be.
Non-functional requirements are often called qualities of a system and can
broadly be catograries based on,
* ''Execution qualities'', such as security and usability, which are
  observable at run time.
* ''Evolution qualities'', such as testability, maintainability,
  extensibility and scalability, which are embodied in the static
  structure of the software system.

=== Need for professional support

Applications, whether open source or the ones obtained with a heavy price tag
always need continued upgrade and maintenance. Especially network
applications, where part of the application's function is executed on the
client side while the remaining at the server side.

Following is one such list of non-functional requirements obtained from 
[[ http://leadinganswers.typepad.com/leading_answers/2009/03/nonfunctional-requirements-minimal-checklist.html | here ]],

''Security''
  * Login requirements - access levels, CRUD levels
  * Password requirements - length, special characters, expiry, recycling
    policies
  * Inactivity timeouts - durations, actions
  * Tailored authorization schemes

''Performance''
  * Response times - application loading, screen open and refresh times, etc
  * Processing times - functions, calculations, imports, exports
  * Query and Reporting times - initial loads and subsequent loads 

''Capacity''
  * Throughput - how many transactions per hour does the system need to be
    able to handle?
  * Storage - how much data does the system need to be able to store?
  * Year-on-year growth requirements

''Availability''
  * Hours of operation - when is it available? Consider weekends, holidays,
    maintenance times, etc
  * Locations of operation - where should it be available from, what are the
    connection requirements?

''Reliability''
  * Mean Time Between Failures - What is the acceptable threshold for
    down-time? e.g. one a year, 4,000 hours
  * Mean Time To Recovery - if broken, how much time is available to get the
    system back up again?

''Integrity''
  * Fault trapping (I/O) - how to handle electronic interface failures, etc
  * Bad data trapping - data imports, flag-and-continue or stop the import
    policies, etc
  * Data integrity - referential integrity in database tables and interfaces
  * Image compression and decompression standards

''Recovery''
  * Recovery process - how do recoveries work, what is the process?
  * Recovery time scales - how quickly should a recovery take to perform?
  * Backup frequencies - how often is the transaction data, set-up data, and
    system (code) backed-up?
  * Backup generations - what are the requirements for restoring to previous
    instance(s)?

''Compatibility''
  * Compatibility with shared applications - What other systems does it need
    to talk to?
  * Compatibility with 3rd party applications - What other systems does it
    have to live with amicably?
  * Compatibility on different operating systems - What does it have to be
    able to run on?
  * Compatibility on different platforms - What are the hardware platforms it
    needs to work on?

''Maintainability''
  * Conformance to architecture standards - What are the standards it needs to
    conform to or have exclusions from?
  * Conformance to design standards - What design standards must be adhered to
    or exclusions created?
  * Conformance to coding standards - What coding standards must be adhered to
    or exclusions created?

''Usability''
  * Look and feel standards - screen element density, layout and flow,
    colours, UI metaphors, keyboard shortcuts
  * Internationalization / localization requirements - languages, spellings,
    keyboards, paper sizes, etc

''Documentation''
  * Required documentation items and audiences for each item

''Training''
  * Educate users for productivity, performance and functional understanding.

''Audit''
  * Audited elements - what business elements will be audited?
  * Audited fields - which data fields will be audited?
  * Audit file characteristics - before image, after image, user and time
    stamp, etc


/* vim: set filetype=zwiki : */
