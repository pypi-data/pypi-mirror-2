[< <style type="text/css"> >]
h1, h2, h3, h4, h5 { 
    margin : 0px;
    padding: 5px 0px 2px 3px;
    background-color : #EAEAFC;
    border-bottom: 1px solid #CCCCCC;
}
[< </style> >]

{{ Toc( float='right' ) }}

=== Permission Management System

Zeta allows you to set up permissions to control user access to various resources.
Rather than set permissions individually, permission is granted to the //team// of which
the user is a part of. The Zeta permission management system is simple and flexible 
and allows users to access resources (like wiki, tickets, licence etc) as part of a
permission group. Zeta also allows grouping of permissions to make permission set-up
easier. Read on to find out more about permission names and permission groups.

Permissions can broadly be categorized under,
# Authentication, and,
# Authorization

==== Authentication

Authentication is confirming the identity of a user, via //username// and
//password//. When user enters matching username and password, he / she is
//authenticated//. Once the user is authenticated, the identity is preserved
via cookies.

''Authentication cookies can optionally include IP address, providing better
security'', [[ /help/IniConfig#authkit.cookie.includeip | Learn more ]]

==== Authorization

Even for an authenticated user, the admin would want to restrict user
access to certain pages or group of pages. This type of access control
is normally called as authorization. In zeta, authorization is implemented
using permission names. 

Permission names (like, WIKI_VIEW, TICKET_CREATE) are
always in capital alphabets and are normally associated with application
functions (like, wiki, ticket, project, etc ...). Almost every interaction
with the server goes through access control.

=== Customization

The ``{b}pms`` framework is implemented with two basic assumptions (or constraints,
as the case may be),

* every resource or group of resources are to be tagged with a permission-name
  based on access type.
* access control are always hierarchical.

As long as permissions / security requirements fit into these constraints,
we can implement the permission tree and plug them into the application. That
way, we can ensure enough flexibility to meet user's requirement.

Before exploring the default authorization rules, let us look explore a bit more
into permission-names.

=== Permission name

A permission name is normally associated with an application's function  like WIKI_VIEW
or TICKET_CREATE etc. 
Permission name is either under a project's context e.g TICKET_CREATE (thus managed 
by project's admin and site admin) or not (only managed by the site admin).

==== Site-level Permissions

These permissions are not specific to projects and are directly assigned to
registered users by site //admin//. Note that even a normal user  can be assigned
''SITE_ADMIN'' permissions.

||{ {margin-left:20px}|
||-
|| {background:#F7F7F7} | LICENSE_CREATE
|| To create a new license or to edit an existing one
||-
|| {background:#F7F7F7} | LICENSE_VIEW 
|| To view existing license
||-
|| {background:#F7F7F7} | STATIWIKI_CREATE
|| To create and edit static wiki pages (guest wiki pages) [[ /help/GuestWiki | Learn more ]]
||-
|| {background:#F7F7F7} | SITE_ADMIN 
|| When assigned, a normal user will be granted to do site-administration
||-
|| {background:#F7F7F7} | EMAIL_VIEW 
|| --TBD--
||}

* If a function supports tags and attachments, adding or removing them is 
  controlled by their respective //CREATE// permission. Eg, users having
  //LICENSE_CREATE// permission can add or remove tags / attachments in
  license.

==== Project-level Permissions

These permissions are specific to each project instance and they are
interpreted only in the project's context. Unlike //site permissions// which are
directly assigned to registered users, //project permissions// are assigned to
project [[ /help/project#Project instance | teams ]]. If a user belongs to more 
than one project-team, then project-permissions granted for the user, will be 
sum of all permissions granted to teams of which the user is a part of.

||{ {margin-left:20px} |
||-
|| {background:#F7F7F7} | PROJECT_VIEW 
|| To view pages under the project context
||}

''VCS  '' 

||{ {margin-left:20px} |
||-
|| {background:#F7F7F7} | VCS_CREATE
|| Integrate with a new repository
||-
|| {background:#F7F7F7} |  VCS_VIEW
|| To view already integrated repositories
||}

'' Review ''

||{ {margin-left:20px} |
||-
|| {background:#F7F7F7} | REVIEW_CREATE
|| Create and edit review cases
||-
|| {background:#F7F7F7} | REVIEW_COMMENT_CREATE
|| To add review comments
||-
|| {background:#F7F7F7} | REVIEW_VIEW
|| To view review cases and comments
||}

'' Ticket management ''
||{ {margin-left:20px} |
||-
|| {background:#F7F7F7} | TICKET_CREATE
|| To create and edit tickets
||-
|| {background:#F7F7F7} | TICKET_VIEW 
|| To view tickets
||-
|| {background:#F7F7F7} | TICKET_STATUS_CREATE
|| To modify ticket status
||-
|| {background:#F7F7F7} | TICKET_COMMENT_CREATE 
|| To create ticket comments and reply to ticket comments

||}

'' Wiki  ''

||{ {margin-left:20px} |
||-
|| {background:#F7F7F7} | WIKI_CREATE
|| To create and edit wiki pages
||-
|| {background:#F7F7F7} | WIKI_VIEW 
|| To view wiki pages
||-
|| {background:#F7F7F7} | WIKICOMMENT_CREATE 
|| To create wiki comments and reply to wiki comments.
||}


'' Other permissions ''
||{ {margin-left:20px} |
||-
|| {background:#F7F7F7} | XMLRPC_VIEW
|| --TBD--
||-
|| {background:#F7F7F7} | SEARCH_VIEW
|| --TBD--
||}

* If a function supports tags and attachments, adding or removing them is 
  controlled by their respective //CREATE// permission. Eg, users having
  //WIKI_CREATE// permission can add or remove tags / attachments in
  wiki pages.
* If a function supports //favorites// (like wiki, ticket ) then, adding or
  removing favorites are controlled by their respective //VIEW// permission.
* If a function supports //voting// (like wiki, ticket) then, up-voting or
  down-voting are controlled by their respective //VIEW// permission.

=== Permission group

Permission groups are logical entities and are not interpreted by the
application directly. The main objective of permission group is to group
several permissions under a logical name (which are always in small
alphabets). Along with addition and removal of permission names to users and teams, administrators can also add permission groups to users and teams. 
This gives another level of abstraction in managing permission names.

For e.g the administrator can group permissions for all developers in the
project  into say '/ devgroup '/ and assign permissions of //VCS_VIEW //, //
WIKI_CREATE //, //TICKET_COMMENT_CREATE //, // TICKET_STATUS_CREATE  // and so
on. Similarly a different group say '/ testgroup '/ and assign permissions of
// WIKI_CREATE //, // TICKET_CREATE // and so on.

Note that permission-groups can be created only by site administrator using 
//SiteAdmin-Permissions //tab

=== Setting up permissions

For site-level permissions,

* Site-admin assigns site-level permissions to users 'individually'.
* The site-admin can also create permission groups with the site-level 
permissions for convenience.

For project-level permissions,

* Site-admin can create a permission group (say permgroup1) - not mandatory , 
merely for convenience
* Either project-admin or site-admin adds users to project teams (say 
developers, members etc)
* Assign specific permissions or permission groups(if created) to project teams.

Now the assigned team has access to the resource which they have been granted
permission for.

=== Authorization hierarchy

Access check is made in the given order,

# Check whether the request is from site-administrator, if so access granted.
# Check whether the request is under a project's context and the user is the
  project's administrator, if so access is granted.
# Check whether the request is under a project's context and the team(s) via
  which the user is associated with the project has got the permission,
  if so access granted.
# Check whether requesting user is directly assigned with the permission(s).
# If `strictauth` site-configuration parameter is disabled, `anonymous` users
  will be granted with the following //VIEW // permissions only,
  'LICENSE_VIEW', 'PROJECT_VIEW', 'TICKET_VIEW', 'REVIEW_VIEW', 'WIKI_VIEW',
  'SEARCH_VIEW'

: anonymous ::
    Anonymous visitors are marked as //anonymous// user. If
    ''zeta.strictauth'' configuration option (at ``{g}site-admin->SiteConfig``)
    is disabled, //anonymous// users will have the following permissions,
    //LICENSE_VIEW//, //PROJECT_VIEW//, //TICKET_VIEW//, //REVIEW_VIEW//,
    //WIKI_VIEW//, //SEARCH_VIEW//
: non-members ::
    Registered users, who are not part of a project's team, are considered
    //non-members// for that project. Access control for such users can be
    configured by project's administrator

Zeta authorization implementation is flexible and can be customized to the user 
requirement. To know more, contact ``{b} support (at) discoverzeta dot com ``.

/* vim: set filetype=zwiki : */
