/* Toggle the options for valid fields 
   depending upon the chosen Salesforce 
   registration object
*/
#sfObjectSignupType:change {
    action-server: populateValidSFObjectFields;
    populateValidSFObjectFields-sfobject: currentFormVar(sfObjectSignupType);
}

/* When we load the rsvp configuration form, we check to see if 
   if a custom form has been requested. If not, we hide the custom
   form configuration fields. Once the page is loaded, client-side
   events handle the hiding and revealing of these fields (see below).
*/
#enableCustomRegistration_1:load {
    action-server: checkForCustomRSVPForm;
}

/* When we load the rsvp configuration form, we check to see if 
   if the user would like to limit registration capacity. 
   If not, we hide the fields listed in config.py's LIMIT_CAPACITY_HIDABLE
   list. Once the page is loaded, client-side events handle the hiding 
   and revealing of these fields (see below).
*/
#limitRegistrationCapacity_1:load {
    action-server: checkForLimitRegistrationCapacity;
}

/* Enable or disable the editing of various
   fields depending upon various wizard-esque
   options in the editing interface are selected 
   or not.
*/
#enableCustomRegistration_1:click {
    action-client: addClass;
    addClass-kssSelector: htmlid(archetypes-fieldname-customRegistration);
    addClass-value: hiddenStructure;
}

#enableCustomRegistration_2:click {
    action-client: removeClass;
    removeClass-kssSelector: htmlid(archetypes-fieldname-customRegistration);
    removeClass-value: hiddenStructure;
}

#limitRegistrationCapacity_1:click {
    action-server: toggleCapacityFieldVisibility;
    toggleCapacityFieldVisibility-formvar: currentFormVar(limitRegistrationCapacity_1);
}

#limitRegistrationCapacity_2:click {
    action-server: toggleCapacityFieldVisibility;
    toggleCapacityFieldVisibility-formvar: currentFormVar(limitRegistrationCapacity_2);
}


/*    action-client: setAttribute;
    setAttribute-kssSelector: htmlid(sfObjectSignupType);
    setAttribute-name: disabled;
    setAttribute-value: 'true';
*/

/*    action-client: replaceHTML;
    replaceHTML-withKssSetup: 'true';
    replaceHTML-kssSelector: htmlid(sfObjectSignupType);
    replaceHTML-html: '<select id="sfObjectSignupType" name="sfObjectSignupType">';
*/