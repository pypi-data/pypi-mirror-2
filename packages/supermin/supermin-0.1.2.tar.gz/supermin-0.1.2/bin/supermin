#!/usr/bin/python
from optparse import OptionParser
from supermin.core import minify, get_available_templates, get_available_engines, \
    add_template, add_engine, update_templates
from supermin import __version__ as version
import sys

def print_help():
    print "supermin %s" % version
    print ""
    print "Usage: supermin myfile.js"
    print "       supermin [options [args]]"
    print ""
    print "Options:"
    print " --templates: lists available and usable templates"
    print " --engines: lists available and installed engines"
    print " --add-engine <name> <engine>: adds a new engine"
    print " --add-template <name> <template>: adds a new template"
    print " --update-templates: gets new templates from github"
    print " --help: prints this"
    print " --version: prints the version"


def run():
    parser = OptionParser()
    parser.add_option('--templates', action='store_true', dest='templates')
    parser.add_option('--engines', action='store_true', dest='engines')
    parser.add_option('--add-engine', action='store_true', dest='add_engine')
    parser.add_option('--add-template', action='store_true', dest='add_template')
    parser.add_option('--update-templates', action='store_true', dest='update_templates')
    parser.add_option('--help', action='store_true', dest='help')
    parser.add_option('--version', action='store_true', dest='version')
    options, args = parser.parse_args()
    if options.templates:
        installed, available = get_available_templates()
        print 'Installed Templates:'
        for name in installed:
            print ' -  %s' % name
        print ''
        print 'Available Templates:'
        for name in available:
            print ' - %s' % name
    elif options.engines:
        installed, available = get_available_engines()
        print 'Installed Engines:'
        for name in installed:
            print ' -  %s' % name
        print ''
        print 'Available Engines:'
        for name in available:
            print ' - %s' % name
    elif options.add_engine:
        assert len(args) == 2
        add_engine(*args)
    elif options.add_template:
        assert len(args) == 2
        add_template(*args)
    elif options.update_templates:
        update_templates()
    elif options.help:
        print_help()
    elif options.version:
        print version
    else:
        assert len(args) == 1
        ret = minify(*args)
        if ret is None:
            print >> sys.stderr,'No templates/engines available'
        else:
            print ret

if __name__ == '__main__':
    run()
else:
    raise Exception("Use supermin.core not this script when working with supermin")
