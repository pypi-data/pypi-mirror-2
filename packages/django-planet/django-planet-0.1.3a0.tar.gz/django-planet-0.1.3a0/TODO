THEMES / DESIGNS / INSPIRATION:
    * http://www.mochimedia.com/
    * ttp://blog.montylounge.com/

RE PATTERNS:
    re.findall('src="(.*?[\.jpg|\.gif|\.png])"', p.content)
    re.findall('href="(.*?[\.mp3|\.m4a|\.wav])"', p.content)
    re.findall('href="(.*?[^\.mp3])"', p.content)
    re.findall('(style=".*?")', p.content)
    re.findall('(<style.*?</style>")', p.content)
    re.findall('(<script.*?</script>")', p.content)

First:
        
    * Feeds (RSS and Atom): for all posts, for posts filtered by tag, author,
    blog, feed or any of its combinations.

Second:
        
    * Make a sample project showing how to integrate it into Pinax
      http://www.pinaxproject.com/
    * Date-based views: by month and year
    * sitemap.xml with django.contrib.sitemaps
    * Use django-atomformat: http://github.com/pinax/atom-format/tree/master
    * Improve add_feed and update_feed commands with multi processing,
    make them more clear and atomic, etc.
    * Optimized content clean & compression of each feed entry (remove
    duplicated/useless tags, bad spaces, and the like).

Maybe:

    * Allow users import an OPML file with their favourite feeds.
    * Use django-foaf to generate foaf xml? http://code.google.com/p/django-foaf/
    * Some other features inspired by semantic attributes of RSS and Atom feeds :P
    
    + crear un django pony y ponerlo en el footer!
    

    +++ hacer una app q le agregue a cada post cuando se crea -según el content-
    diversos tags: mp3s, audio, video, myspace, etc y un js que se fije en el
    listado de tags cuando muestro un post (teaser o view) y les ponga
    "iconitos" lindos que resalten el tag !!!

    * generar XFN ?

    * Distintas vistas: lista simple (sólo titulos y fechas y feed),
    lista detallada (como la actual), vista de imágenes, vista de videos, vista
    de audio

    * Resaltar los posts que tengan palabras como "recommended", "good stuff" y
    demás??? como hace google!

    * clasificar los posts según tengan imágen, cant de palabras, cant de
    palabras distintas, links externos, link de descarga, links a myspace,
    last.fm, youtube, etc.

    * en la vista full del post: convertir todas las palabras que coincidan con
    alguno de sus tags en un link a dicho tag :P

    ++++ Una browsing-history que loguee las urls que navega un user/sessionid
    ===>
        + historial de posts leídos
        + tags favoritos (nube o barchart-like list)
        + blogs favoritos
        + búsquedas recientes

    * el .OPML generado dice que los feeds son "RSS" ¿es correcto? aunque
    algunos son ATOM ¿¿¿???

    * buscar links a youtube en el post.content y reemplazarlos por su <object>
    etc player ?

    ++++ cada post debería poder leerse sin entrar al mismo (ajax?) porque es
    muy molesto (de ahí viene el river of news!). Igualmente dejar el link y la
    view de la página del post full para las search engines!!!

    * box de "referancias externas": wikipedia, myspace, last.fm, otros blogs,
    con todos los links que encuentro en un post.content:

        External references / webliografy(?)
        
        [favicon] Título del post 1
        link: <link> [tiene: imagenes, videos]

        [favicon] Título del post 2
        link: <link> [tiene: imagenes, videos, texto]
        
        [favicon] Título del post 3
        link: <link> [tiene: sólo texto]

    * tabla de blogs relacionados (con todos los blogs a los que linkea el blog
    que estoy viendo)

    * reemplazar todos los links (a posts incluidos en mi planet) que hay dentro
    de un post por la url del post o blog de mi planet así la gente no se vá

    * normalizar tags antes de guardarlos! -noise- => noise
    
    * if not post.content no mostrar link "Read more"!! pero dejar el link en el
    título para los busacdores.

    +++ BUG: el add_feed/update_feed si encuentra feeds duplicados no los
    autualiza! y encima se frena. Empezar por el más antiguo!!!e ir actualizando!
        
     ++ tal vez convenga lista los autores /planet/authors/ agrupados por feed
    en el que escriben, y no al reves como está ahora!

    +++ hacer el bajador de imágenes que genere thumbnails! y las asocie con el
    post! (sólo una): post_images = list(set(re.findall('src="(.*?)"',
    post.content))) que elimine los que empiezan con https !!! porque en
    blogspot las hay! que deje sólo las terminadas en .jpg, .jpeg, .gif, .png !!
    
    * tags inteligentes: analizo el contenido y busco links a
        - youtube -> tag: youtube, video
        - myspace profiles -> myspace, listen, escuchar
        - idem: facebook, purevolume, fotolog, last.fm, insound, amazon, ebay,
            twitter, musicbrainz, jamendo...
        - mp3s -> mp3
        - según el link de descarga -> megaupload, rapidshare, mediafire,
            badongo, upload, zshare...
        - language attribute del feed => english, spanish, etc
        -
    

    * block de posts similares según los tags (con django-tagging app):
        {% similar_posts_for <post> <similar_items_count> %}

    * Hacer algo así como featured tags (block lista o nube) con tags que yo
    considero *grosos* y bien usados: mp3, video, b-sides, free, free-music,
    download, archive.org, jamendo, listen (using settings.py FEATURED_TAGS = [
    "mp3", "b-sides", etc])


    * (better) template tags to allow developers to make better planets

    * add feed Category feature (idem knewmismatic?)
   
  
++++ VIP ++++ 

    * favicon + logo: ANGELES!
    * a better theme: see leah cluver using typekit.
    * Get the first image of a post (from enclosure link or from content),
    download it, generate a thumbnail and asociate it to that post. Then show it
    in list-views!
    * SEO improvement: custom META tags for each view, use SlugField fields for
    any model that has a detail view (blog, feed, post, author) and use it in
    its url. Like /planet/blogs/Experimetal_Etc
    * cache! (template cache or views cache)
    * github pages! django-planet.github.com ? con screenshots, etc
    * haystack (+ solr) integration:
        + new search form/view/templates
        + post view: more (posts) like this (vía sorl feature MRLT)

    sample_project: -> make a django community clone
    * syntax highlighting vía javascript
    * use facebox to show post detail view in a facebox window! => keep river of news principles save

    ++++ escapar los tags cuando los meto en una url!!!
    + mostrar los enclosures!
    * Build a template tag to show a block of latest photos (ie post enclosures
    of type "image/*")

    +++++ RSS feed with OPEN SEARCH support PLEASE!!!!
    + show comments url for each post!
