.. vim:syntax=rest

Basic tasks
===========

Then, those are the old remaining things to do (once we get to the point we
were when scons was inside numpy repository):
    - clean up checkers code + fortran detection
    - clean site.cfg handling
    - Real Ctypes builder
    - Handling command line customization at the same location (CFLAGS and co)
    - doc: user and dev-oriented
    - solution to handle sdist (source files)
    - setuptools integration

Meta Goals:
    - 0.9: clean up core and change compiler detection. Add log system + fake
      scons target for full analysis of running platform.
    - 0.10: Clean up checkers code. Remove duplicated code, clean-up.
    - 0.11: Put documentation in shape. User-doc: customization of
compiler/options/etc... Dev-doc: basic design, custom builders, checkers code,
etc...
    - 0.12: Handles setuptools integration (at least inplace for develop
option, etc...). sdist problems ?

Cleaning checkers modules:
    - Refactor site config custom: remove duplicate between core.libinfo and
      checkers.perflib_info
    - Have test for fortran
    - remove duplicate between check_code and check_include_and_run.

Things to implement in scons (upstream):
    - remove code for building empty programs: replace it by proper sconf (see
      below)

Tests:
    - What can be tested ?

Fortran:
    - improve Fortran runtime detection for upstream integration
    - improve Fortran mangling and dummy main detection for upstream
      integration

Not so important things:
    - improve BrokenMathlib and Mathlib in core, and make them available to
      everyone

Compiler support:
    - have some kind of registry for compiler type per extension
    - improved support for compiler detection

Analysis of running platform
============================

Check:
        - Compilers are working
        - All checkers (perf first, then high level)
        - Display compiler customization
        - Display site-cfg customization (origin).

Upstream scons changes needed:
==============================

(we cannot use external scons before those are integrated in scons)

Builder
-------

New builders we can add to scons (and needed by numscons):

    - a proper CtypesExtension builder
    - pyrex/cython/swig builders ?

Fortran code
------------

Work on sconf for fortran: integrate upstream.

Misc
----

We need the following:

    - Being able to run a builder and capture its output (both stdout and
stderr): difficult. SConf is extremely fragile. May need to wait for 2.0 ?
    - building blocks for checkers

Documentation:
==============
    - scons / distutils integration, global design (BuildDir, directories, etc...)
    - use cases: package developers (examples, etc...), numpy developers,
      building numpy with scons, etc...
