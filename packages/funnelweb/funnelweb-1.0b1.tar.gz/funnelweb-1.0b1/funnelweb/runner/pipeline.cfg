[transmogrifier]
pipeline =
    crawler
    cache
    typeguess
    drop
    template1
    template2
    template3
    template4
    templateauto
    indexguess
#    titleguess
    attachmentguess
    urltidy
#    encode-all
    ploneupload
    ploneupdate
    plonehide
    publish
    plonepublish
    plonealias
#    localupload


[crawler]
blueprint = transmogrify.webcrawler
#
# Crawls site or cache for content
# see http://pypi.python.org/pypi/transmogrify.webcrawler
#
# site_url - the top url to crawl
# ignore - list of regex for urls to not crawl
# cache - local directory to read crawled items from instead of accessing the site directly
# patterns - Regular expressions to substitute before html is parsed. New line seperated 
# subs - Text to replace each item in patterns. Must be the same number of lines as patterns 
# maxsize - don't crawl anything larger than this
# max - Limit crawling to this number of pages
#
url  = 
ignore =
	cgi-bin
	javascript:
cache = ${cache:output}


[cache]
blueprint = transmogrify.webcrawler.cache
#
# Saves content to disk
# see http://pypi.python.org/pypi/transmogrify.webcrawler#cache
#
# output - relative directory to store cached downloads
#
output = funnelwebcache


[typeguess]
blueprint = transmogrify.webcrawler.typerecognitor
#
# Sets Plone content type based on mime-type
# see http://pypi.python.org/pypi/transmogrify.webcrawler#TypeRecognitor
#


[drop]
blueprint = collective.transmogrifier.sections.condition
#
# Useful to drop certain content
# see http://pypi.python.org/pypi/collective.transmogrifier/#condition-section
condition: python:item.get('_mimetype') not in ['application/x-javascript','text/css','text/plain','application/x-java-byte-code'] and item.get('_path','').split('.')[-1] not in ['class']



[template1]
blueprint = transmogrify.htmlcontentextractor
#
# Provide XPath for title, description, text etc.
# see http://pypi.python.org/pypi/transmogrify.htmlcontentextractor
#
# Note that spaces in XPaths must be escaped as &#32;
#
# See
#  http://www.w3schools.com/xpath/default.asp
#  http://blog.browsermob.com/2009/04/test-your-selenium-xpath-easily-with-firebug/
# for XPath info
# 
# e.g.
# title = text //div[@class='body']//h1[1]
# delete1 = optional //div[@class='body']//a[@class='headerlink']
# delete2 =  optional //div[contains(@class,'admonition-description')]
# description = text //div[contains(@class,'admonition-description')]//p[@class='last']
# text = html //div[@class='body']
#

[template2]
blueprint = transmogrify.htmlcontentextractor
#
# Used if no previous templates matched
#

[template3]
blueprint = transmogrify.htmlcontentextractor
#
# Used if no previous templates matched
#

[template4]
blueprint = transmogrify.htmlcontentextractor
#
# Used if no previous templates matched
#


[templateauto]
blueprint = transmogrify.htmlcontentextractor.auto
#
# Guesses XPaths of content by performing a cluster analysis of all the content not already matched 
# see http://pypi.python.org/pypi/transmogrify.htmlcontentextractor@auto
#
disable = False


[indexguess]
blueprint = transmogrify.siteanalyser.defaultpage
#
# Determines an item is a default page for a container if it has many links
# to items in that container even if not contained in that folder 
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#defaultpage
#


[titleguess]
blueprint = transmogrify.siteanalyser.title
#
# Tries to find better page titles by analysing backlink text
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#title
# ignore - regular expressions of link text never to use
#
ignore =
	click
	read more
	close
	Close
	http:
	file:
	img


[attachmentguess]
blueprint = transmogrify.siteanalyser.attach
#
# Finds items only referenced by one page and moves them into a new folder with the page as the default view
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#makeattachments
#
condition = python: subitem.get('_type') in ['Image']
defaultpage = index-html


[urltidy]
blueprint = transmogrify.siteanalyser.relinker
#
# Applies title normalisation rules remove invalid chars from urls. It will also ensure all internal links are corrected
# see http://pypi.python.org/pypi/transmogrify.siteanalyser#relinker
# link_expr - tal to rewrite a path
#
link_expr = python:item['_path'].endswith('.html') and item['_path'][:-5] or item['_path']



[encode-all]
blueprint = collective.transmogrifier.sections.codec
keys =
   text
to = utf8

[changetype]
blueprint = collective.transmogrifier.sections.inserter
#
# Switch the type of the created object if desired
#
key = string:_type
condition = python:item.get('_type')
value = python:{'Folder':'HelpCenterReferenceManualSection','Document':HelpCenterLeafPage}.get(item['_type'],item['_type'])



[ploneupload]
blueprint = transmogrify.ploneremote.remoteconstructor
#
# Adds content to plone via xmlrpc
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteconstructor
# target - the base url for where all content should be created. Can support basic authentication
# e.g. target = http://admin:admin@localhost:8080/Plone
#
target =
type-key = _type
path-key = _path

[ploneupdate]
blueprint = transmogrify.ploneremote.remoteschemaupdater
#
# Updates content of existing object on a remote plone site via xmlrpc
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteschemaupdater
# target - the base url for where all content should be updated. Can support basic authentication
# e.g. target = http://admin:admin@localhost:8080/Plone
#
target = ${ploneupload:target}
type-key = _type
path-key = _path

[plonehide]
blueprint = transmogrify.ploneremote.remotenavigationexcluder
#
# Hide items from the navigation
# (hints to which items should be hidden are set earlier in pipeline)
# by default it will hide items not linked to outside of any body text
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remotenavigationexcluder
#
target = ${ploneupload:target}
type-key = _type
path-key = _path


[publish]
blueprint = collective.transmogrifier.sections.inserter
#
# Set the workflow transition key hint which will be used publish the item.
# This value is later read by [plonepublish] and we can have conditions
# to have different WF transitions for different content types 
#
# Note that images do not have workflow and they inherit
# permission settings of the parent container
#
key = string:_transitions
value = python:["publish"]
condition = python:item.get('_type') != 'Image' and not options.get('disabled')


[plonepublish]
blueprint = transmogrify.ploneremote.remoteworkflowupdater
#
# Publish or otherwise change the workflow state of remote plone content
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteworkflowupdater
#
transitions = submit publish
transitions-key = _transitions
target = ${ploneupload:target}
type-key = _type
path-key = _path


[plonealias]
blueprint = transmogrify.ploneremote.remoteredirector
#
# Creates aliases for items that have moved
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteredirector
target = ${ploneupload:target}
type-key = _type
path-key = _path


[localupload]
blueprint = transmogrify.webcrawler.cache
#
# Save transformed site locally 
# see http://pypi.python.org/pypi/transmogrify.webcrawler#cache
#
output = 
