[server]
# the server will listen on this address and port, 
# use 0.0.0.0 for bind to any addresses
listen=0.0.0.0:2311

# the admin console will listen on this address and port
listen_cmd=0.0.0.0:2312  

# the admin console will listen on this address and port
listen_http=0.0.0.0:2313  

# reflector will listen on the address and port range bellow
reflector=0.0.0.0:52000-52899-52999

# This is the "pickle db" file location. 
# If not found, this file will be created.
# Comment it out to activate authentication
user_db=passwd

# send keep alive packets to every connected clients at regular interval.
# time in seconds. 0 disable the sending of these packets.   
alive_interval=120

# When no packets have been received for "alive_timeout" second, close 
# the connection. Clients can try reconnect soon after. 
# if set to 0 , the server will never close any connection.   
alive_timeout=300



[client]
# To avoid information duplication, and help testing, the client reuses 
# parameters from the server section if the "server" parameter is not set.

# to overwrite listen and public parameters from the server section
# uncomment this "server" parameter 
server=f11asx:2311

# if authentication is enable here are the credentials  
clientname=web232
password=genesis

# the class or the category of your client, for example: workstation,
# server, linux, firewall ..., this help you to identify your client
# from the administration console
classname=clientclass

# the hostname, default is to use the name returned by socket.gethostname() 
#hostname=myhostname.mydomain.com

# send keep alive packets to the server at regular interval.
# time in seconds. 0 disable the sending of these packets.     
alive_interval=120

# When no packets have been received for "alive_timeout" second, close 
# the connection. if set to 0, the client will never close any connection.
# The clients try reconnect soon after the connection was closed.    
# when set to 0, the client will never close the connection by itself.  
alive_timeout=300



# the node_id, this is a unique id, two nodes with same id cannot connect 
# to the server, the default is to use uuid.getnode() that return one
# of the MAC address of the host. Python 2.4 has no uuid module, you
# need to initialize it yourself
#node_id=010203040506

# comma separated list of forwards available through this client, the format is
# forward<num>=protocol:name:host:port
# - protocol is the name of the tcp protocol, this is to help you
#   to know witch application to use to connect to this "forward"
# - name must help you to identify the target and service of the "forward"
# - host is the hostname or IP address of the target of the forward, 
#   use 127.0.0.1 for localhost
# - port is the port of the target 
#          
forwards=echo:test service:127.0.0.1:34567,
         ssh:f11asx:127.0.0.1:22,
         failure:failure:127.0.0.1:26,
         failure2:failure2:192.168.23.333:26,
         ssh:fc6pmx:fc6-pmx:22





















