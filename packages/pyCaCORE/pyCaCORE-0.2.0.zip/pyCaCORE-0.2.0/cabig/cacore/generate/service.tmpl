# This API was generated by pyCaCORE
import ${prefix}.${ZSI_serviceName}_client as services
 
from cabig.cacore.ws.axis import AxisReader, ZSIDebugStreamReader
from cabig.cacore.ws.proxy import *

#for $module in $modules
from $prefix.$module import *
#end for

class ${serviceClassName}:

    def __init__(self, url=None, debug=False):
        locator = services.${ZSI_serviceName}Locator()
        tracefile = None
        if debug: tracefile = ZSIDebugStreamReader()
        self.wsq = locator.get${ZSI_portName}(url=url, 
            readerclass=AxisReader, tracefile=tracefile)
        
    def wrap(self, holder):
        try:
            (pkg, className) = holder.typecode.type
        except AttributeError:
            # not a ZSI holder type, don't try to wrap it
            return holder
        clazz = globals()[className]
        return clazz(holder,self)
        
#for $f in $functions
    def ${f.name}($f.getParamList):
        q = services.${f.name}Request()
    #for $p in $f.params
        #if $p.isObject
        q._${p.name} = ${p.name}.holder
        #else
        q._${p.name} = ${p.name}
        #end if
    #end for
        v = self.wsq.${f.name}(q)
    #if $f.isObject
        #if $f.isArray
        return [self.wrap(i) for i in v.${f.uname}Return.Item]
        #else
        return self.wrap(v.${f.uname}Return)
        #end if
    #else
        return v.${f.uname}Return
    #end if
    
#end for
