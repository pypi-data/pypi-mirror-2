<html metal:use-macro="here/prefs_main_template/macros/master" i18n:domain="fckeditor"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n">




    <div metal:fill-slot="prefs_configlet_main"
      tal:define="fck_utils python:modules['Products.FCKeditor.utils'];
                  getToolByName python:modules['Products.CMFCore.utils'].getToolByName;
                  portal python:getToolByName(context, 'portal_url').getPortalObject();
                  errors options/state/getErrors">
      <h1 i18n:translate="heading_fckeditor_setup">FCK Editor global configuration</h1>

      <a href=""
        class="link-parent"
        tal:attributes="href string: $portal_url/plone_control_panel"
        i18n:domain="plone" i18n:translate="label_up_to_plone_setup">
        Up to Plone Setup
      </a>

      <br />

      <form action=""
            name="reconfig"
            method="post"
            onsubmit="displayAllPrefs()"
            class="enableUnloadProtection"
            tal:attributes="action string:$portal_url/prefs_fckeditor_form"
            tal:define="props python:here.portal_properties.fckeditor_properties;">

      <!-- TODO -->
      <input type="hidden"
             name="start_expanded"
             value="1" />

      <div id="archetypes-schemata-links">
        <span>[
          <a href="javascript:displayBasePrefs()"
             id="base_fieldset"
             style="font-weight:bold"
             i18n:translate="label_display_base_preferences">
               Base preferences
          </a>]
        </span>
        <span>[
          <a href="javascript:displayKeyboardPrefs()"
             id="keyboard_fieldset"
             style=""
             i18n:translate="label_display_keyboard_preferences">
               Keyboard preferences
          </a>]
        </span>
        <span>[
          <a href="javascript:displayBrowserPrefs()"
             id="browser_fieldset"
             style=""
             i18n:translate="label_display_browser_preferences">
               Browser preferences
          </a>]
        </span>
      </div>

      <fieldset id="fckprefs_global"
                style="display:block">
        <legend i18n:translate="legend_fckprefs_global">FCK Editor global configuration</legend>

        <div class="field"
             tal:define="default_skin request/fck_default_skin|props/fck_default_skin;
                         default_skin python:test(default_skin,default_skin,'default')">

          <label for="fck_default_skin" i18n:translate="label_fck_default_skin">
              Editor style
          </label>

          <div class="formHelp" i18n:translate="help_fck_default_skin">
            Choose the editor skin.
          </div>

            <tal:block tal:repeat="skin python:['default','silver','office2003']">
             <tal:skin define="img_skin string:${portal_url}/demoskin_${skin}.png">
                    <input type="radio"
                           class="noborder"
                           name="fck_default_skin"
                           id="fck_default_skin"
                           tal:attributes="value skin;
                                           checked python:test(skin==default_skin, 'ckecked', None);" />
                    <img tal:attributes="src img_skin;
                                         alt skin;
                                         title skin"
                         style="float:none; border: 1px solid #000000; margin-bottom: 1em; width: 340px; height: 74px" />&nbsp;
                    <strong tal:content="skin"></strong><br />
             </tal:skin>

            </tal:block>

        </div>


        <div class="field"
             tal:define="toolbar request/fck_toolbar|props/fck_toolbar;
                         toolbar python:test(toolbar,toolbar,'PloneDefaultToolbar')">

          <label for="fck_toolbar" i18n:translate="label_fck_toolbar">
              Editor toolbar
          </label>

          <div class="formHelp" i18n:translate="help_fck_toolbar">
            Choose the editor toolbars
          </div>

            <tal:block tal:repeat="sToolbar python:[('PloneDefaultToolbar','Plone default toolbar'),
                                                    ('FullToolBar','Full toolbar with all functions'),
                                                    ('Basic','Basic toolbar, with the fewest functions'),
                                                    ('Custom','Customized toolbar (a new field will be available below)')]">
                    <input type="radio"
                           name="fck_toolbar"
                           class="noborder"
                           id="fck_toolbar"
                           onclick="if (this.value!='Custom') document.getElementById('fck_custom_toolbar_block').style.display = 'none';
                                    else document.getElementById('fck_custom_toolbar_block').style.display = 'block'"
                           tal:attributes="value python:sToolbar[0];
                                           checked python:test(sToolbar[0]==toolbar, 'ckecked', None);" />
                    &nbsp;
                    <strong i18n:translate="" tal:content="python:sToolbar[1]">Toolbar</strong><br />

            </tal:block>

        </div>

        <div class="field"  id="fck_custom_toolbar_block">
          <label for="fck_custom_toolbar" i18n:translate="fck_custom_toolbar">FCK Editor Tool Bar Customization</label>

          <div class="formHelp" i18n:translate="help_fck_custom_toolbar">
                  Build your own FCKeditor toolbar set<br />
                  Take care with the syntax<br/>
                  Read <a href="http://wiki.fckeditor.net/Developer's_Guide/Configuration/Toolbar">The toolbar configuration</a> on FCKeditor Wiki web site.<br />
                  Enter in this area the string which be used to compose your toolbar.<br />
                  Choosing a preset toolbar will reinitialize this custom configuration
          </div>

          <textarea name="fck_custom_toolbar"
                          id="fck_custom_toolbar"
                          cols="30"
                          rows="6"
                          tal:define="fck_custom_toolbar request/fck_custom_toolbar | props/fck_custom_toolbar;"
                          tal:content="fck_custom_toolbar">

          </textarea>
        </div>

        <div class="field"
             tal:define="error errors/fck_force_width | nothing"
             tal:attributes="class python:test(error, 'field error', 'field')">
            <label for="fck_force_width" i18n:translate="label_fck_force_width">
              Editor Width.
            </label>

          <div class="formHelp" i18n:translate="help_fck_force_width">
            You can force editor width. <br />
            Not recommanded if you play with your own ATCT and multiple wysiwyg fields.<br />
            You can write '90%' or '600' (for 600px width) or '600px', nothing else (no form control at this time, take care)
          </div>

            <input type="text"
                   name="fck_force_width"
                   id="fck_force_width"
                   tal:attributes="value request/fck_force_width|props/fck_force_width" />
            <div tal:content="error">Validation error output</div>
        </div>

        <div class="field"
             tal:define="error errors/fck_force_height | nothing"
             tal:attributes="class python:test(error, 'field error', 'field')">
            <label for="fck_force_height" i18n:translate="label_fck_force_height">
              Editor Height.
            </label>

          <div class="formHelp" i18n:translate="help_fck_force_height">
            You can force editor height. <br />
            Not recommanded if you play with your own ATCT and multiple wysiwyg fields.<br />
            You can write '90%' (=90*960/100 px)) or '600' (for 600px height) or '600px', nothing else (no control at this time, sorry, take care)
          </div>

            <input type="text"
                   name="fck_force_height"
                   id="fck_force_height"
                   tal:attributes="value request/fck_force_height|props/fck_force_height" />
            <div tal:content="error">Validation error output</div>
        </div>


        <div class="field"
             tal:define="spellchecker request/spellchecker|props/spellchecker;
                         spellchecker python:test(spellchecker,spellchecker,'ieSpell')">

          <label for="spellchecker" i18n:translate="label_spellchecker">
              Spell Checker
          </label>

          <div class="formHelp" i18n:translate="help_spellchecker">
            Choose the spell checker used by FCKEditor.
            By default, FireFox2 and MSIE client side spell checkers are actived (MSIE need IESPell plugin).
            You can choose the WebSpellChecker engine feature provided by http://www.spellchecker.net.
            Or you can also choose php server side speller pages with the "speller pages" option.
            To enable speller pages you need to change the FCKConfig.SpellerPagesServerScript option in your own fckconfig.js customization,
            and read more documentation on fckeditor site.
            More information here :<br />
            - http://docs.fckeditor.net/FCKeditor_2.x/Developers_Guide/Configuration/Spell_Checker   <br />
            - http://spellerpages.sourceforge.net/
          </div>

            <tal:block tal:repeat="sSpellchecker python:[('ieSpell','FF2 or MSIE spell checker'),
                                                         ('WSC','WebSpellChecker'),
                                                         ('SpellerPages','Server side spell checker')]">
                    <input type="radio"
                           name="spellchecker"
                           class="noborder"
                           id="spellchecker"
                           tal:attributes="value python:sSpellchecker[0];
                                           checked python:test(sSpellchecker[0]==spellchecker, 'ckecked', None);" />
                    &nbsp;
                    <strong i18n:translate="" tal:content="python:sSpellchecker[0]">Speller</strong><br />

            </tal:block>

        </div>


        <div class="field">
            <input type="checkbox"
                   class="noborder"
                   name="force_paste_as_text"
                   id="force_paste_as_text"
                   tal:attributes="checked request/force_paste_as_text|props/force_paste_as_text" />
            <label for="force_paste_as_text" i18n:translate="label_force_paste_as_text">
              Force Paste As plain text
            </label>

          <div class="formHelp" i18n:translate="help_force_paste_as_text">
            When checked only CR/LR are changed in &lt;br /&gt; tags whith copy/paste (no more bad tags from MSO).<br />
            It could be interesting ...
          </div>
        </div>



        <div class="field">
            <input class="noborder"
                   type="checkbox"
                   name="allow_latin_entities"
                   id="allow_latin_entities"
                   tal:attributes="checked request/allow_latin_entities|props/allow_latin_entities" />
            <label for="allow_latin_entities" i18n:translate="label_allow_latin_entities">
              Process Latin Entities for ISO-Latin chars
            </label>

          <div class="formHelp" i18n:translate="help_allow_latin_entities">
            When checked latin chars  are changed in html entities (ex : &amp;eacute; for &eacute;)<br />
            With a standard Plone site it's not recommended, because http headers are well formed<br />
            In some situations it could be useful at your own risks<br />
            Take care : the plone catalog will store "&amp;eacute;l&amp;eacute;phant" for "&eacute;l&eacute;phant" ...
          </div>
        </div>




        <div class="field">
            <input class="noborder"
                   type="checkbox"
                   name="fck_default_r2l"
                   id="fck_default_r2l"
                   tal:attributes="checked request/fck_default_r2l|props/fck_default_r2l" />
            <label for="fck_default_r2l" i18n:translate="label_fck_default_r2l">
              R2L : Change Writing direction in Editor
            </label>

          <div class="formHelp" i18n:translate="help_fck_default_r2l">
            When checked the edition start from right to left (for arabic and hebrew languages)
          </div>
        </div>

        <div class="field"
             tal:define="error errors/fck_area_style | nothing"
             tal:attributes="class python:test(error, 'field error', 'field')">
            <label for="fck_area_style" i18n:translate="label_fck_area_style">
              Choose the Css used in Wysiwyg Editor Area.
            </label>

          <div class="formHelp" i18n:translate="help_fck_area_style">
            By default portal_css resources are used with Plone
            You can change it for a list of stylesheets paths (relative to portal) or urls.<br /><br />
            Example (could be very useful when using deliverance) :<br />
             _public/main.css<br />
             _public/fckeditorarea.css<br />
             https://mysite/addonarea.css<br />
          </div>

            <textarea name="fck_area_style"
                          id="fck_area_style"
                          cols="30"
                          rows="3"
                    tal:define="csss request/fck_area_style|props/fck_area_style|python: ()"><tal:block repeat="css csss" replace="structure python:'%s\n' %css"  /></textarea>



        </div>


        <div class="field">
            <input class="noborder"
                   type="checkbox"
                   name="allow_relative_links"
                   id="allow_relative_links"
                   tal:attributes="checked request/allow_relative_links|props/allow_relative_links" />
            <label for="allow_relative_links" i18n:translate="label_allow_relative_links">
              Make links relative before posting to server.
            </label>

          <div class="formHelp" i18n:translate="help_allow_relative_links">
            This option is recommended, especially if you don't use "allow link objects by uid" through the browser.<br />
            This option is not active unless you are using Plone 2.1.x (you need to install sarissa.js on a  Plone 2.0.x site).
          </div>
        </div>



        <div class="field">
            <input type="checkbox"
                   name="allow_server_browsing"
                   id="allow_server_browsing"
                   class="noborder"
                   tal:attributes="checked request/allow_server_browsing|props/allow_server_browsing"
                   onchange="if (this.checked==false) document.getElementById('fckprefs_browser').style.display = 'none';
                             else document.getElementById('fckprefs_browser').style.display = 'block';" />
            <label for="allow_server_browsing" i18n:translate="label_allow_server_browsing">
              Allow Server browsing
            </label>

          <div class="formHelp" i18n:translate="help_allow_server_browsing">
            Check if you want to enable server browsing for internal links and internal images (flash/media) insertion.<br />
            Important : If you disable server browsing content upload through editor (rapid upload) and browser will also be disabled.
          </div>
        </div>

        <div class="field">
          <label i18n:translate="fck_menu_styles">FCK Editor Styles List</label>

          <div class="formHelp" i18n:translate="help_fck_menu_styles">
                  Very Powerful feature : Build your own FCKeditor menu styles Combo box<br />
                  If you want to use classes, of course these classes need to exist in your plone generated css (plone.css or portal_css etc ...)<br />
            Read <a href="http://wiki.fckeditor.net/Developer%27s_Guide/Configuration/Styles">The styles list configuration</a> on FCKeditor Wiki web site.<br />
                  Enter in this area the xml content which be used inside styles tags in xml file according to this documentation.
          </div>

          <textarea name="fck_menu_styles"
                          id="fck_menu_styles"
                          cols="30"
                          rows="6"
                          tal:define="fck_menu_styles request/fck_menu_styles|props/fck_menu_styles;"
                          tal:content="fck_menu_styles">
                </textarea>
        </div>



      </fieldset>


      <div class="visualClear"><!-- --></div>



      <fieldset id="fckprefs_keyboard"
                style="display:none">

        <legend i18n:translate="fckprefs_keyboard">Editor Keyboard Control</legend>

        <div class="field"
             tal:define="keyboard_entermode request/keyboard_entermode|props/keyboard_entermode;
                         keyboard_entermode python:test(keyboard_entermode,
                                                        keyboard_entermode,'p')">

          <label for="keyboard_entermode" i18n:translate="label_keyboard_entermode">
              Keyboard Enter Mode
          </label>

          <div class="formHelp" i18n:translate="help_keyboard_entermode">
            Choose the behavior when pressing on Carriage Return.
          </div>

            <tal:block tal:repeat="sKeyboard_entermode python:[('p','p Tag'),
                                                               ('div','div Tag'),
                                                               ('br','br Tag')]">
                    <input type="radio"
                           name="keyboard_entermode"
                           class="noborder"
                           id="keyboard_entermode"
                           tal:attributes="value python:sKeyboard_entermode[0];
                                           checked python:test(sKeyboard_entermode[0]==keyboard_entermode, 'ckecked', None);" />
                    &nbsp;
                    <strong i18n:translate="" tal:content="structure python:sKeyboard_entermode[1]">p Tag</strong><br />

            </tal:block>

        </div>

        <div class="field"
             tal:define="keyboard_shiftentermode request/keyboard_shiftentermode|props/keyboard_shiftentermode;
                         keyboard_shiftentermode python:test(keyboard_shiftentermode,
                                                        keyboard_shiftentermode,'br')">

          <label for="keyboard_shiftentermode" i18n:translate="label_keyboard_shiftentermode">
              Keyboard Shift Enter Mode
          </label>

          <div class="formHelp" i18n:translate="help_keyboard_shiftentermode">
            Choose the behavior when pressing on SHIFT + Carriage Return.
          </div>

            <tal:block tal:repeat="sKeyboard_shiftentermode python:[('br','br Tag'),
                                                                    ('div','div Tag'),
                                                                    ('p','p Tag')]">
                    <input type="radio"
                           name="keyboard_shiftentermode"
                           class="noborder"
                           id="keyboard_shiftentermode"
                           tal:attributes="value python:sKeyboard_shiftentermode[0];
                                           checked python:test(sKeyboard_shiftentermode[0]==keyboard_shiftentermode, 'ckecked', None);" />
                    &nbsp;
                    <strong i18n:translate="" tal:content="structure python:sKeyboard_shiftentermode[1]">p Tag</strong><br />

            </tal:block>

        </div>

        <div class="field"
             tal:define="keyboard_keystrokesmode request/keyboard_keystrokesmode|props/keyboard_keystrokesmode;
                         keyboard_keystrokesmode python:test(keyboard_keystrokesmode, keyboard_keystrokesmode, 'standard')">

          <label for="keyboard_keystrokesmode" i18n:translate="label_keyboard_keystrokesmode">
              Keystrokes behavior
          </label>

          <div class="formHelp" i18n:translate="help_keyboard_keystrokesmode">
            Choose the Keystroke Mode (standard or custom)
          </div>

            <tal:block tal:repeat="sKeyboard_keystrokesmode python:[('standard','Standard mode'),
                                                                    ('Custom','Customized (a new field will be available below)')]">
                    <input type="radio"
                           name="keyboard_keystrokesmode"
                           class="noborder"
                           id="keyboard_keystrokesmode"
                           onclick="if (this.value!='Custom') document.getElementById('field_keyboard_customkeystrokes').style.display = 'none';
                                    else document.getElementById('field_keyboard_customkeystrokes').style.display = 'block'"
                           tal:attributes="value python:sKeyboard_keystrokesmode[0];
                                           checked python:test(sKeyboard_keystrokesmode[0]==keyboard_keystrokesmode, 'ckecked', None);" />
                    &nbsp;
                    <strong i18n:translate="" tal:content="python:sKeyboard_keystrokesmode[1]">Standard</strong><br />

            </tal:block>

        </div>

        <div class="field"
             id="field_keyboard_customkeystrokes">

          <label for="keyboard_customkeystrokes" i18n:translate="label_keyboard_customkeystrokes">Keystrokes combinations advanced control</label>

          <div class="formHelp" i18n:translate="help_keyboard_customkeystrokes">
                  Choose actions for your specific keystrokes combinations,
                  actions must exist in toolbar (see "custom toolbar" field in base preferences for all available actions), otherwise you will get a javascript error.<br />
                  You can not customize standard browser short cuts (CTRL-C, CTRL-X, CTRL-V, CTRL-S, CTRL-R ...),
                  but you can allow/disallow their use.
          </div>

          <textarea name="keyboard_customkeystrokes"
                          id="keyboard_customkeystrokes"
                          cols="30"
                          rows="6"
                          tal:define="keyboard_customkeystrokes request/keyboard_customkeystrokes | props/keyboard_customkeystrokes;"
                          tal:content="keyboard_customkeystrokes">
                </textarea>
        </div>

      </fieldset>

      <div class="visualClear"><!-- --></div>

      <fieldset id="fckprefs_browser"
                style="display:none">
        <legend i18n:translate="legend_fckprefs_browser">FCK Editor browser configuration</legend>


        <div class="field">
            <input class="noborder"
                   type="checkbox"
                   name="allow_link_byuid"
                   id="allow_link_byuid"
                   tal:attributes="checked request/allow_link_byuid|props/allow_link_byuid" />
            <label for="allow_link_byuid" i18n:translate="label_allow_link_byuid">
              Allow Link objects by UID
            </label>

          <div class="formHelp" i18n:translate="help_allow_link_byuid">
            Check if you want url with Unique ID (no more 404 errors when moving objects) when possible (AT Content Types, Plone 2.1 standard CT).
            Be aware that some robots don't like it (301 redirection).
          </div>
        </div>

        <div class="field">
            <input class="noborder"
                   type="checkbox"
                   name="allow_file_upload"
                   id="allow_file_upload"
                   tal:attributes="checked request/allow_file_upload|props/allow_file_upload" />
            <label for="allow_file_upload" i18n:translate="label_allow_file_upload">
              Allow file upload for links when user have the permission "Add portal Content"
            </label>

          <div class="formHelp" i18n:translate="help_allow_file_upload">
            Uncheck if you want to disable file upload through the browser
          </div>
        </div>

        <div class="field">
            <input class="noborder"
                   type="checkbox"
                   name="allow_image_upload"
                   id="allow_image_upload"
                   tal:attributes="checked request/allow_image_upload|props/allow_image_upload" />
            <label for="allow_image_upload" i18n:translate="label_allow_image_upload">
              Allow image upload when user have the permission "Add portal Content"
            </label>

          <div class="formHelp" i18n:translate="help_allow_image_upload">
            Uncheck if you want to disable image upload through the browser
          </div>
        </div>

        <div class="field">
            <input class="noborder"
                   type="checkbox"
                   name="allow_flash_upload"
                   id="allow_flash_upload"
                   tal:attributes="checked request/allow_flash_upload|props/allow_flash_upload" />
            <label for="allow_flash_upload" i18n:translate="label_allow_flash_upload">
              Allow flash upload when user have the permission "Add portal Content"
            </label>

          <div class="formHelp" i18n:translate="help_allow_flash_upload">
            Uncheck if you want to disable flash upload through the browser
          </div>
        </div>

        <div class="field">

          <label for="file_portal_type" i18n:translate="label_file_portal_type">
            Portal Type for files
          </label>

          <div class="formHelp" i18n:translate="help_file_portal_type">
            Choose the Portal Type for files (used for upload through the browser).
          </div>

          <select name="file_portal_type"
                  tal:define="actual request/file_portal_type|props/file_portal_type">
            <tal:loop repeat="item python:fck_utils.listFileLikeTypes(portal)">
               <option value="portal_type"
                       tal:content="item/type_ui_info"
                       tal:attributes="value item/portal_type;
                                       selected python:(path('item/portal_type') == actual) and 'selected' or nothing">
                                       Portal type info
              </option>
            </tal:loop>
          </select>
        </div>

        <div class="field">

          <label for="image_portal_type" i18n:translate="label_image_portal_type">
            Portal Type for images upload
          </label>

          <div class="formHelp" i18n:translate="help_image_portal_type">
            Choose the Portal Type for images used for uploading images through the browser.
          </div>

          <select name="image_portal_type"
                  tal:define="actual request/image_portal_type|props/image_portal_type">
            <tal:loop repeat="item python:fck_utils.listImageLikeTypes(portal)">
               <option value="portal_type"
                       tal:content="item/type_ui_info"
                       tal:attributes="value item/portal_type;
                                       selected python:(path('item/portal_type') == actual) and 'selected' or nothing">
                                       Portal type info
              </option>
            </tal:loop>
          </select>
        </div>

        <div class="field">

          <label for="folder_portal_type" i18n:translate="label_folder_portal_type">
            Portal Type for folder creation
          </label>

          <div class="formHelp" i18n:translate="help_folder_portal_type">
            Choose the Portal Type for folder creation through the browser.
          </div>

          <select name="folder_portal_type"
                  tal:define="actual request/folder_portal_type|props/folder_portal_type">
            <tal:loop repeat="item python:fck_utils.listFolderLikeTypes(portal)">
               <option value="portal_type"
                       tal:content="item/type_ui_info"
                       tal:attributes="value item/portal_type;
                                       selected python:(path('item/portal_type') == actual) and 'selected' or nothing">
                                       Portal type info
              </option>
            </tal:loop>
          </select>
        </div>

      	<div class="field">
      	  <label i18n:translate="label_browse_images_portal_types">Portal Types for images browsing</label>

      	  <div class="formHelp" i18n:translate="help_browse_images_portal_types">
      	    Choose a list of portal types used for browsing and linking images.
      	  </div>

          <select name="browse_images_portal_types" id="browse_images_portal_types" multiple="multiple"
                  tal:define="actual request/browse_images_portal_types|props/browse_images_portal_types">
            <tal:loop repeat="item python:fck_utils.listImageLikeTypes(portal)">
               <option value="portal_type"
                       tal:content="item/type_ui_info"
                       tal:attributes="value item/portal_type;
                                       selected python:(path('item/portal_type') in actual) and 'selected' or nothing">
                                       Portal type info
              </option>
            </tal:loop>
          </select>
      	</div>

        <div class="field">
          <label for="flash_portal_type" i18n:translate="label_flash_portal_type">
            Portal Type for flash animation upload
          </label>

          <div class="formHelp" i18n:translate="help_flash_portal_type">
              Choose the Portal Type for flash animations (used for uploading flash content through the browser).
          </div>

          <select name="flash_portal_type"
                  tal:define="actual request/flash_portal_type|props/flash_portal_type">
            <tal:loop repeat="item python:fck_utils.listFileLikeTypes(portal)">
               <option value="portal_type"
                       tal:content="item/type_ui_info"
                       tal:attributes="value item/portal_type;
                                       selected python:(path('item/portal_type') == actual) and 'selected' or nothing">
                                       Portal type info
              </option>
            </tal:loop>
          </select>
        </div>

      	<div class="field">
      	  <label i18n:translate="label_browse_flashs_portal_types">Portal Types for flash animation browsing</label>

      	  <div class="formHelp" i18n:translate="help_browse_flashs_portal_types">
      	    Choose a list of portal types used for browsing and linking flash animations.
      	  </div>
          <select name="browse_flashs_portal_types" id="browse_flashs_portal_types" multiple="multiple"
                  tal:define="actual request/browse_flashs_portal_types|props/browse_flashs_portal_types">
            <tal:loop repeat="item python:fck_utils.listFileLikeTypes(portal)">
               <option value="portal_type"
                       tal:content="item/type_ui_info"
                       tal:attributes="value item/portal_type;
                                       selected python:(path('item/portal_type') in actual) and 'selected' or nothing">
                                       Portal type info
              </option>
            </tal:loop>
          </select>

      	</div>



      	<div class="field">
      	  <label i18n:translate="pa_meta_types">Plone Article portal types</label>

      	  <div class="formHelp" i18n:translate="help_pa_meta_types">
      	    Choose a list of PloneArticle based types (for browsing and uploading Article images and attachements).
      	  </div>

          <select name="pa_meta_types" id="pa_meta_types" multiple="multiple"
                  tal:define="actual request/pa_meta_types|props/pa_meta_types">
            <tal:loop repeat="item python:fck_utils.listPloneArticleLikeTypes(portal)">
               <option value="portal_type"
                       tal:content="item/type_ui_info"
                       tal:attributes="value item/portal_type;
                                       selected python:(path('item/portal_type') in actual) and 'selected' or nothing">
                                       Portal type info
              </option>
            </tal:loop>
          </select>

      	</div>


        <div class="field">
            <input class="noborder"
                   type="checkbox"
                   name="fck_force_path"
                   id="fck_force_path"
                  tabindex=""
                   tal:attributes="checked request/fck_force_path|props/fck_force_path"
                   onchange="if (this.checked==true){ this.form.fck_force_other_path.value='';
                                                      this.form.fck_force_other_root.value='' }
                             if (this.form.fck_force_root.checked==true) this.checked=true;" />
            <label for="fck_force_path" i18n:translate="label_fck_force_path">
              Force browser opening folder to Member personal folder
            </label>

          <div class="formHelp" i18n:translate="help_fck_force_path">
            By default the browser opening path is set to the current path<br />
            When this option is checked the member personal folder is used as opening folder<br />
            Note : user is still able to browse the entire site.
          </div>
        </div>

        <div class="field">
          <input type="checkbox"
                 name="fck_force_root"
                 class="noborder"
                 id="fck_force_root"
                 tabindex=""
                 onchange="if (this.checked==true){ this.form.fck_force_path.checked=true;
                                                    this.form.fck_force_other_root.value='';
                                                    this.form.fck_force_other_path.value='' }"
                 tal:attributes="checked request/fck_force_root|props/fck_force_root" />
          <label for="fck_force_root" i18n:translate="label_fck_force_root">
            Force browser root to Member personal folder
          </label>

          <div class="formHelp" i18n:translate="help_fck_force_root">
            By default the browser root is set to the portal root<br />
            When this option is checked the member personal folder is used as browser root<br />
            Note : the user will not be able to browse a parent folder.
          </div>
        </div>

        <div class="field"
             tal:define="error errors/fck_force_other_path | nothing"
             tal:attributes="class python:test(error, 'field error', 'field')">
          <label for="fck_force_other_path" i18n:translate="label_fck_force_other_path">
            Force opening browser folder to a specific path
          </label>
          <div class="formHelp" i18n:translate="help_fck_force_other_path">
            The path must be relative to the portal root<br />
            Ex : If the portal url is &quot;http://myserver.org/mysite&quot;, choose &quot;/mypath&quot; for &quot;http://myserver.org/mysite/mypath&quot; opening path<br/>
            When choosed the user is still able to browse a parent folder.<br/>
            The path need to start with &quot;/&quot; with no &quot;/&quot; as trailing char.<br />
            The path must exist and need to be a browser's root subpath (if used below)
          </div>
          <input type="text"
                 name="fck_force_other_path"
                 id="fck_force_other_path"
                 tabindex=""
                 tal:attributes="value request/fck_force_other_path|props/fck_force_other_path"
                 onkeyup="if (this.value.length!=0) {
                                   this.form.fck_force_path.checked=false;
                                   this.form.fck_force_root.checked=false;
                                   root=this.form.fck_force_other_root;
                                   rootvalue=root.value;
                                   rootlength=rootvalue.length;
                                   pathvalue= this.value;
                                   goodStart=pathvalue.indexOf('/');
                                   if (goodStart!=0) this.value='/'+ pathvalue;
                                   rootSubPos=pathvalue.indexOf(rootvalue+'/');
                                   if (rootlength!=0 && rootSubPos!=0){
                                                                    this.value=rootvalue } }"
                 onblur="lastSlashPos=this.value.lastIndexOf('/');
                         if (this.value.length==lastSlashPos+1) this.value=this.value.substr(0,this.value.length-1)" />

          <div tal:content="error">Validation error output</div>
        </div>

        <div class="field"
             tal:define="error errors/fck_force_other_path_method | nothing"
             tal:attributes="class python:test(error, 'field error', 'field')">
          <label for="fck_force_other_path_method" i18n:translate="label_fck_force_other_path_method">
            Force opening browser folder with a contextual method
          </label>
          <div class="formHelp" i18n:translate="help_fck_force_other_path_method">
            If a contextual method exists with this name the opening path will be calculated using this method.
            If this method exists it will override the browser root configuration.
          </div>
          <input type="text"
                 name="fck_force_other_path_method"
                 id="fck_force_other_path_method"
                 tabindex=""
                 tal:attributes="value request/fck_force_other_path_method|props/fck_force_other_path_method" />

          <div tal:content="error">Validation error output</div>
        </div>


        <div class="field"
             tal:define="error errors/fck_force_other_root | nothing"
             tal:attributes="class python:test(error, 'field error', 'field')">
            <label for="fck_force_other_root" i18n:translate="label_fck_force_other_root">
              Force browser's root to a specific path
            </label>
          <div class="formHelp" i18n:translate="help_fck_force_other_root">
            When choosed the user is not able to browse a parent folder, <br />
            the browser's root is set to this path (relative to the portal root).<br/>
            The path need to start with &quot;/&quot; with no &quot;/&quot; as trailing char.<br />
            The path must exist.
          </div>
          <input type="text"
                 name="fck_force_other_root"
                 id="fck_force_other_root"
                 tabindex=""
                 tal:attributes="value request/fck_force_other_root|props/fck_force_other_root"
                 onkeyup="if (this.value.length!=0) {
                                   this.form.fck_force_path.checked=false;
                                   this.form.fck_force_root.checked=false;
                                   path=this.form.fck_force_other_path;
                                   rootvalue=this.value;
                                   goodStart=rootvalue.indexOf('/');
                                   if (goodStart!=0) this.value='/'+ rootvalue;
                                   pathvalue= path.value;
                                   pathlength=pathvalue.length;
                                   rootSubPos=pathvalue.indexOf(rootvalue);
                                   if (pathlength!=0 && rootSubPos!=0){
                                                                    path.value=rootvalue } }"
                 onblur="if (this.value.length==this.value.lastIndexOf('/')+1) this.value=this.value.substr(0,this.value.length-1)
                         path=this.form.fck_force_other_path;
                         if (path.value.length==path.value.lastIndexOf('/')+1) path.value=path.value.substr(0,path.value.length-1)" />

          <div tal:content="error">Validation error output</div>
        </div>

        <div class="field"
             tal:define="error errors/fck_force_other_root_method | nothing"
             tal:attributes="class python:test(error, 'field error', 'field')">
          <label for="fck_force_other_root_method" i18n:translate="label_fck_force_other_root_method">
            Force browser root with a contextual method
          </label>
          <div class="formHelp" i18n:translate="help_fck_force_other_root_method">
            If a contextual method exists with this name the browser root will be calculated using this method.
            If this method exists it will override the browser root configuration.
          </div>
          <input type="text"
                 name="fck_force_other_root_method"
                 id="fck_force_other_root_method"
                 tabindex=""
                 tal:attributes="value request/fck_force_other_root_method|props/fck_force_other_root_method" />

          <div tal:content="error">Validation error output</div>
        </div>


      	<div class="field">
      	  <label i18n:translate="fck_unpublished_states">States for hidden contents</label>

      	  <div class="formHelp" i18n:translate="help_fck_unpublished_states">
      	    Enter List of states for which contents need to be hidden in browser, even when user have permission view on these contents.
      	  </div>
      	  <select name="fck_unpublished_states" id="fck_unpublished_states" multiple="multiple"
                  tal:define="actual request/fck_unpublished_states|props/fck_unpublished_states">
            <tal:loop repeat="item python:fck_utils.listWorkflowStates(portal)">
               <option value="state"
                       tal:content="item/ui_name"
                       tal:attributes="value item/name;
                                       selected python:(path('item/name') in actual) and 'selected' or nothing">
                State info
              </option>
            </tal:loop>
      	  </select>
      	</div>

      	<div class="field">
      	  <label i18n:translate="fck_unpublished_view_roles">Roles allowed to see hidden contents</label>

      	  <div class="formHelp" i18n:translate="help_fck_unpublished_view_roles">
      	    Enter List of roles allowed to see hidden contents in browser, (don't be anxious : the user always need to have permission View for browsing contents).
      	  </div>
      	  <select name="fck_unpublished_view_roles" id="fck_unpublished_view_roles" multiple="multiple"
                  tal:define="actual request/fck_unpublished_view_roles|props/fck_unpublished_view_roles">
            <tal:loop repeat="item python:fck_utils.listPortalRoles(portal)">
               <option value="role"
                       tal:content="item/ui_name"
                       tal:attributes="value item/name;
                                       selected python:(path('item/name') in actual) and 'selected' or nothing">
                Role info
              </option>
            </tal:loop>
      	  </select>
      	</div>

        </fieldset>


        <div class="formControls">
            <input class="context"
                   type="submit" name="form.button.Save"
                   value="Save"
                   i18n:domain="plone"
                   i18n:attributes="value"
                   tabindex=""/>
            <input class="context"
                   type="submit"
                   name="form.button.Cancel"
                   value="Cancel"
                   tabindex=""
                   i18n:domain="plone"
                   i18n:attributes="value" />
          </div>

        <input type="hidden" name="form.submitted" value="1" />


        <script type="text/javascript" tal:content="structure string:
           // test browser prefs display on load
	         // if (document.getElementById('allow_server_browsing').checked==false) document.getElementById('fckprefs_browser').style.display = 'none' ;
	         var radiotoolbar=document.reconfig.fck_toolbar;
	         if (radiotoolbar)
              {
              for (var i=0; i<radiotoolbar.length;i++)
                  {
                  if (radiotoolbar[i].checked) {
                      if (radiotoolbar[i].value!='Custom') document.getElementById('fck_custom_toolbar_block').style.display = 'none';
                      else document.getElementById('fck_custom_toolbar_block').style.display = 'block';
                      }
                  }
              }
	         var radiokeystrokes=document.reconfig.keyboard_keystrokesmode;
	         if (radiokeystrokes)
              {
              for (var i=0; i<radiokeystrokes.length;i++)
                  {
                  if (radiokeystrokes[i].checked) {
                      if (radiokeystrokes[i].value!='Custom') document.getElementById('field_keyboard_customkeystrokes').style.display = 'none';
                      else document.getElementById('field_keyboard_customkeystrokes').style.display = 'block';
                      }
                  }
              }
           function displayBasePrefs()
           {
             document.getElementById('fckprefs_global').style.display = 'block';
             document.getElementById('fckprefs_keyboard').style.display = 'none';
             document.getElementById('fckprefs_browser').style.display = 'none';
             document.getElementById('base_fieldset').style.fontWeight = 'bold';
             document.getElementById('keyboard_fieldset').style.fontWeight = 'normal';
             document.getElementById('browser_fieldset').style.fontWeight = 'normal';
           }
           function displayKeyboardPrefs()
           {
             document.getElementById('fckprefs_global').style.display = 'none';
             document.getElementById('fckprefs_keyboard').style.display = 'block';
             document.getElementById('fckprefs_browser').style.display = 'none';
             document.getElementById('keyboard_fieldset').style.fontWeight = 'bold';
             document.getElementById('base_fieldset').style.fontWeight = 'normal';
             document.getElementById('browser_fieldset').style.fontWeight = 'normal';
           }
           function displayBrowserPrefs()
           {
             document.getElementById('fckprefs_global').style.display = 'none';
             document.getElementById('fckprefs_keyboard').style.display = 'none';
             document.getElementById('fckprefs_browser').style.display = 'block';
             document.getElementById('browser_fieldset').style.fontWeight = 'bold';
             document.getElementById('base_fieldset').style.fontWeight = 'normal';
             document.getElementById('keyboard_fieldset').style.fontWeight = 'normal';
           }
           function displayAllPrefs()
           {
             document.getElementById('fckprefs_global').style.display = 'block';
             document.getElementById('fckprefs_keyboard').style.display = 'block';
             document.getElementById('fckprefs_browser').style.display = 'block';
           }
         ">
        </script>


      </form>

    </div>

</html>
