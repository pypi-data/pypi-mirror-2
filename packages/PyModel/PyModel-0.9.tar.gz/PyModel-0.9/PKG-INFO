Metadata-Version: 1.0
Name: PyModel
Version: 0.9
Summary: Model-based testing in Python
Home-page: http://staff.washington.edu/jon/pymodel/www/
Author: Jonathan Jacky
Author-email: jon@u.washington.edu
License: GNU General Public License (GPL)
Download-URL: http://staff.washington.edu/jon/pymodel/www/
Description: PyModel: Model-based testing in Python
        ======================================
        
        **PyModel** is an open-source model-based testing framework in Python.
        
        In unit testing, the programmer codes the test cases, and also codes
        assertions that check whether each test case passed.  In model-based
        testing, the programmer codes a "model" that generates as many test
        cases as desired and also acts as the oracle that checks the cases.
        
        Model-based testing is recommended where so many test cases are needed
        that it is not feasible to code them all by hand.  This need arises
        when testing behaviors that exhibit history-dependence and
        nondeterminism, so that many variations (data values, interleavings,
        etc.) should be tested for each scenario (or use case).  Examples
        include communication protocols, web applications, control systems,
        and user interfaces.  
        
        PyModel supports on-the-fly testing, which can generate indefinitely
        long nonrepeating tests as the test run executes.  PyModel can focus
        test cases on scenarios of interest by composition, a versatile
        technique that combines models by synchronizing shared actions and
        interleaving unshared actions.  PyModel can guide test coverage
        according to programmable strategies coded by the programmer.
        
        PyModel provides three programs:
        
         :pma.py: pymodel analyzer, generates a finite state machine (FSM) and
                  computes properties by exploring a model program, FSM, test suite, or
                  a product of these.
         
         :pmg.py: pymodel graphics, generates a file of graphic commands from an FSM.
        
         :pmt.py: pymodel tester, displays traces, generates tests offline,
                  executes offline tests, or generates and executes tests on-the-fly.
        
        Use pma and pmg to visualize and preview the behavior of pmt.  Every
        path through the graph created by pma (and drawn by pmg) is a trace
        (test run) that may be generated by pmt, when pma and pmt are invoked
        with the same arguments.
        
        PyModel requires Python 2.6 (because it uses ``itertools.product``).
        
        PyModel is influenced by NModel, but is not a translation or
        re-implementation.
        
Keywords: model-based testing python model on-the-fly offline composition finite state machine harness stepper automated test run suite oracle nondeterminism synchronizing interleaving strategy coverage protocol trace scenario
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 2.6
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: Topic :: Software Development :: Testing
