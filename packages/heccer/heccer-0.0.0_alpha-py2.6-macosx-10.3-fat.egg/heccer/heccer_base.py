# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _heccer_base
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


HeccerAddressGetValue = _heccer_base.HeccerAddressGetValue
HAVE_FLOAT_H = _heccer_base.HAVE_FLOAT_H
HAVE_INTTYPES_H = _heccer_base.HAVE_INTTYPES_H
HAVE_LIMITS_H = _heccer_base.HAVE_LIMITS_H
HAVE_LOCALECONV = _heccer_base.HAVE_LOCALECONV
HAVE_LOCALE_H = _heccer_base.HAVE_LOCALE_H
HAVE_MEMORY_H = _heccer_base.HAVE_MEMORY_H
HAVE_NEUROSPACES_NEUROSPACES_H = _heccer_base.HAVE_NEUROSPACES_NEUROSPACES_H
HAVE_STDBOOL_H = _heccer_base.HAVE_STDBOOL_H
HAVE_STDINT_H = _heccer_base.HAVE_STDINT_H
HAVE_STDLIB_H = _heccer_base.HAVE_STDLIB_H
HAVE_STRCHR = _heccer_base.HAVE_STRCHR
HAVE_STRINGS_H = _heccer_base.HAVE_STRINGS_H
HAVE_STRING_H = _heccer_base.HAVE_STRING_H
HAVE_SYS_STAT_H = _heccer_base.HAVE_SYS_STAT_H
HAVE_SYS_TYPES_H = _heccer_base.HAVE_SYS_TYPES_H
HAVE_UNISTD_H = _heccer_base.HAVE_UNISTD_H
HAVE__BOOL = _heccer_base.HAVE__BOOL
HECCER_SOURCE_NEUROSPACES = _heccer_base.HECCER_SOURCE_NEUROSPACES
HECCER_SOURCE_TYPING = _heccer_base.HECCER_SOURCE_TYPING
PACKAGE = _heccer_base.PACKAGE
PACKAGE_BUGREPORT = _heccer_base.PACKAGE_BUGREPORT
PACKAGE_NAME = _heccer_base.PACKAGE_NAME
PACKAGE_STRING = _heccer_base.PACKAGE_STRING
PACKAGE_TARNAME = _heccer_base.PACKAGE_TARNAME
PACKAGE_URL = _heccer_base.PACKAGE_URL
PACKAGE_VERSION = _heccer_base.PACKAGE_VERSION
STDC_HEADERS = _heccer_base.STDC_HEADERS
USE_ID_DISASSEM = _heccer_base.USE_ID_DISASSEM
USE_SGLIB = _heccer_base.USE_SGLIB
VERSION = _heccer_base.VERSION
NEUROSPACES_2_HECCER_MAX_FUNCTIONS = _heccer_base.NEUROSPACES_2_HECCER_MAX_FUNCTIONS
HeccerAddressAggregator = _heccer_base.HeccerAddressAggregator
HeccerAddressableSet = _heccer_base.HeccerAddressableSet
HeccerAddressCompartmentVariable = _heccer_base.HeccerAddressCompartmentVariable
HeccerAddressMechanismVariable = _heccer_base.HeccerAddressMechanismVariable
HeccerAddressTableIndex = _heccer_base.HeccerAddressTableIndex
HeccerAddressVariable = _heccer_base.HeccerAddressVariable
class InternalResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternalResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InternalResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dVm"] = _heccer_base.InternalResults_dVm_set
    __swig_getmethods__["dVm"] = _heccer_base.InternalResults_dVm_get
    if _newclass:dVm = _swig_property(_heccer_base.InternalResults_dVm_get, _heccer_base.InternalResults_dVm_set)
    def __init__(self, *args): 
        this = _heccer_base.new_InternalResults(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_InternalResults
    __del__ = lambda self : None;
InternalResults_swigregister = _heccer_base.InternalResults_swigregister
InternalResults_swigregister(InternalResults)

class ExternalResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dConductance"] = _heccer_base.ExternalResults_dConductance_set
    __swig_getmethods__["dConductance"] = _heccer_base.ExternalResults_dConductance_get
    if _newclass:dConductance = _swig_property(_heccer_base.ExternalResults_dConductance_get, _heccer_base.ExternalResults_dConductance_set)
    __swig_setmethods__["dCurrent"] = _heccer_base.ExternalResults_dCurrent_set
    __swig_getmethods__["dCurrent"] = _heccer_base.ExternalResults_dCurrent_get
    if _newclass:dCurrent = _swig_property(_heccer_base.ExternalResults_dCurrent_get, _heccer_base.ExternalResults_dCurrent_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ExternalResults(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ExternalResults
    __del__ = lambda self : None;
ExternalResults_swigregister = _heccer_base.ExternalResults_swigregister
ExternalResults_swigregister(ExternalResults)

class Callout(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Callout, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Callout, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.Callout_mc_set
    __swig_getmethods__["mc"] = _heccer_base.Callout_mc_get
    if _newclass:mc = _swig_property(_heccer_base.Callout_mc_get, _heccer_base.Callout_mc_set)
    __swig_setmethods__["pvAlien"] = _heccer_base.Callout_pvAlien_set
    __swig_getmethods__["pvAlien"] = _heccer_base.Callout_pvAlien_get
    if _newclass:pvAlien = _swig_property(_heccer_base.Callout_pvAlien_get, _heccer_base.Callout_pvAlien_set)
    __swig_setmethods__["pir"] = _heccer_base.Callout_pir_set
    __swig_getmethods__["pir"] = _heccer_base.Callout_pir_get
    if _newclass:pir = _swig_property(_heccer_base.Callout_pir_get, _heccer_base.Callout_pir_set)
    __swig_setmethods__["per"] = _heccer_base.Callout_per_set
    __swig_getmethods__["per"] = _heccer_base.Callout_per_get
    if _newclass:per = _swig_property(_heccer_base.Callout_per_get, _heccer_base.Callout_per_set)
    __swig_setmethods__["pef"] = _heccer_base.Callout_pef_set
    __swig_getmethods__["pef"] = _heccer_base.Callout_pef_get
    if _newclass:pef = _swig_property(_heccer_base.Callout_pef_get, _heccer_base.Callout_pef_set)
    def __init__(self, *args): 
        this = _heccer_base.new_Callout(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_Callout
    __del__ = lambda self : None;
Callout_swigregister = _heccer_base.Callout_swigregister
Callout_swigregister(Callout)

class Compartment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Compartment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Compartment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.Compartment_mc_set
    __swig_getmethods__["mc"] = _heccer_base.Compartment_mc_get
    if _newclass:mc = _swig_property(_heccer_base.Compartment_mc_get, _heccer_base.Compartment_mc_set)
    __swig_setmethods__["iParent"] = _heccer_base.Compartment_iParent_set
    __swig_getmethods__["iParent"] = _heccer_base.Compartment_iParent_get
    if _newclass:iParent = _swig_property(_heccer_base.Compartment_iParent_get, _heccer_base.Compartment_iParent_set)
    __swig_setmethods__["dCm"] = _heccer_base.Compartment_dCm_set
    __swig_getmethods__["dCm"] = _heccer_base.Compartment_dCm_get
    if _newclass:dCm = _swig_property(_heccer_base.Compartment_dCm_get, _heccer_base.Compartment_dCm_set)
    __swig_setmethods__["dEm"] = _heccer_base.Compartment_dEm_set
    __swig_getmethods__["dEm"] = _heccer_base.Compartment_dEm_get
    if _newclass:dEm = _swig_property(_heccer_base.Compartment_dEm_get, _heccer_base.Compartment_dEm_set)
    __swig_setmethods__["dInitVm"] = _heccer_base.Compartment_dInitVm_set
    __swig_getmethods__["dInitVm"] = _heccer_base.Compartment_dInitVm_get
    if _newclass:dInitVm = _swig_property(_heccer_base.Compartment_dInitVm_get, _heccer_base.Compartment_dInitVm_set)
    __swig_setmethods__["dInject"] = _heccer_base.Compartment_dInject_set
    __swig_getmethods__["dInject"] = _heccer_base.Compartment_dInject_get
    if _newclass:dInject = _swig_property(_heccer_base.Compartment_dInject_get, _heccer_base.Compartment_dInject_set)
    __swig_setmethods__["dRa"] = _heccer_base.Compartment_dRa_set
    __swig_getmethods__["dRa"] = _heccer_base.Compartment_dRa_get
    if _newclass:dRa = _swig_property(_heccer_base.Compartment_dRa_get, _heccer_base.Compartment_dRa_set)
    __swig_setmethods__["dRm"] = _heccer_base.Compartment_dRm_set
    __swig_getmethods__["dRm"] = _heccer_base.Compartment_dRm_get
    if _newclass:dRm = _swig_property(_heccer_base.Compartment_dRm_get, _heccer_base.Compartment_dRm_set)
    def __init__(self, *args): 
        this = _heccer_base.new_Compartment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_Compartment
    __del__ = lambda self : None;
Compartment_swigregister = _heccer_base.Compartment_swigregister
Compartment_swigregister(Compartment)

HeccerCompartmentCompile = _heccer_base.HeccerCompartmentCompile
HeccerCompartmentDump = _heccer_base.HeccerCompartmentDump
HeccerCompartmentInitiate = _heccer_base.HeccerCompartmentInitiate
HeccerCompartmentSolveCN = _heccer_base.HeccerCompartmentSolveCN
class EventDistributorMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventDistributorMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventDistributorMatrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pvObject"] = _heccer_base.EventDistributorMatrix_pvObject_set
    __swig_getmethods__["pvObject"] = _heccer_base.EventDistributorMatrix_pvObject_get
    if _newclass:pvObject = _swig_property(_heccer_base.EventDistributorMatrix_pvObject_get, _heccer_base.EventDistributorMatrix_pvObject_set)
    __swig_setmethods__["iTarget"] = _heccer_base.EventDistributorMatrix_iTarget_set
    __swig_getmethods__["iTarget"] = _heccer_base.EventDistributorMatrix_iTarget_get
    if _newclass:iTarget = _swig_property(_heccer_base.EventDistributorMatrix_iTarget_get, _heccer_base.EventDistributorMatrix_iTarget_set)
    __swig_setmethods__["pvProcess"] = _heccer_base.EventDistributorMatrix_pvProcess_set
    __swig_getmethods__["pvProcess"] = _heccer_base.EventDistributorMatrix_pvProcess_get
    if _newclass:pvProcess = _swig_property(_heccer_base.EventDistributorMatrix_pvProcess_get, _heccer_base.EventDistributorMatrix_pvProcess_set)
    def __init__(self, *args): 
        this = _heccer_base.new_EventDistributorMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_EventDistributorMatrix
    __del__ = lambda self : None;
EventDistributorMatrix_swigregister = _heccer_base.EventDistributorMatrix_swigregister
EventDistributorMatrix_swigregister(EventDistributorMatrix)

class EventDistributorData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventDistributorData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventDistributorData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iConnections"] = _heccer_base.EventDistributorData_iConnections_set
    __swig_getmethods__["iConnections"] = _heccer_base.EventDistributorData_iConnections_get
    if _newclass:iConnections = _swig_property(_heccer_base.EventDistributorData_iConnections_get, _heccer_base.EventDistributorData_iConnections_set)
    __swig_setmethods__["iLast"] = _heccer_base.EventDistributorData_iLast_set
    __swig_getmethods__["iLast"] = _heccer_base.EventDistributorData_iLast_get
    if _newclass:iLast = _swig_property(_heccer_base.EventDistributorData_iLast_get, _heccer_base.EventDistributorData_iLast_set)
    __swig_setmethods__["ppedm"] = _heccer_base.EventDistributorData_ppedm_set
    __swig_getmethods__["ppedm"] = _heccer_base.EventDistributorData_ppedm_get
    if _newclass:ppedm = _swig_property(_heccer_base.EventDistributorData_ppedm_get, _heccer_base.EventDistributorData_ppedm_set)
    def __init__(self, *args): 
        this = _heccer_base.new_EventDistributorData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_EventDistributorData
    __del__ = lambda self : None;
EventDistributorData_swigregister = _heccer_base.EventDistributorData_swigregister
EventDistributorData_swigregister(EventDistributorData)

class EventDistributor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventDistributor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventDistributor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pedd"] = _heccer_base.EventDistributor_pedd_set
    __swig_getmethods__["pedd"] = _heccer_base.EventDistributor_pedd_get
    if _newclass:pedd = _swig_property(_heccer_base.EventDistributor_pedd_get, _heccer_base.EventDistributor_pedd_set)
    __swig_setmethods__["eventDistribute"] = _heccer_base.EventDistributor_eventDistribute_set
    __swig_getmethods__["eventDistribute"] = _heccer_base.EventDistributor_eventDistribute_get
    if _newclass:eventDistribute = _swig_property(_heccer_base.EventDistributor_eventDistribute_get, _heccer_base.EventDistributor_eventDistribute_set)
    __swig_setmethods__["iSerialEnd"] = _heccer_base.EventDistributor_iSerialEnd_set
    __swig_getmethods__["iSerialEnd"] = _heccer_base.EventDistributor_iSerialEnd_get
    if _newclass:iSerialEnd = _swig_property(_heccer_base.EventDistributor_iSerialEnd_get, _heccer_base.EventDistributor_iSerialEnd_set)
    __swig_setmethods__["iSerialStart"] = _heccer_base.EventDistributor_iSerialStart_set
    __swig_getmethods__["iSerialStart"] = _heccer_base.EventDistributor_iSerialStart_get
    if _newclass:iSerialStart = _swig_property(_heccer_base.EventDistributor_iSerialStart_get, _heccer_base.EventDistributor_iSerialStart_set)
    def __init__(self, *args): 
        this = _heccer_base.new_EventDistributor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_EventDistributor
    __del__ = lambda self : None;
EventDistributor_swigregister = _heccer_base.EventDistributor_swigregister
EventDistributor_swigregister(EventDistributor)

class EventQueuerMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventQueuerMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventQueuerMatrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pvObject"] = _heccer_base.EventQueuerMatrix_pvObject_set
    __swig_getmethods__["pvObject"] = _heccer_base.EventQueuerMatrix_pvObject_get
    if _newclass:pvObject = _swig_property(_heccer_base.EventQueuerMatrix_pvObject_get, _heccer_base.EventQueuerMatrix_pvObject_set)
    __swig_setmethods__["pdEvent"] = _heccer_base.EventQueuerMatrix_pdEvent_set
    __swig_getmethods__["pdEvent"] = _heccer_base.EventQueuerMatrix_pdEvent_get
    if _newclass:pdEvent = _swig_property(_heccer_base.EventQueuerMatrix_pdEvent_get, _heccer_base.EventQueuerMatrix_pdEvent_set)
    __swig_setmethods__["dDelay"] = _heccer_base.EventQueuerMatrix_dDelay_set
    __swig_getmethods__["dDelay"] = _heccer_base.EventQueuerMatrix_dDelay_get
    if _newclass:dDelay = _swig_property(_heccer_base.EventQueuerMatrix_dDelay_get, _heccer_base.EventQueuerMatrix_dDelay_set)
    __swig_setmethods__["dWeight"] = _heccer_base.EventQueuerMatrix_dWeight_set
    __swig_getmethods__["dWeight"] = _heccer_base.EventQueuerMatrix_dWeight_get
    if _newclass:dWeight = _swig_property(_heccer_base.EventQueuerMatrix_dWeight_get, _heccer_base.EventQueuerMatrix_dWeight_set)
    __swig_setmethods__["pvAccept"] = _heccer_base.EventQueuerMatrix_pvAccept_set
    __swig_getmethods__["pvAccept"] = _heccer_base.EventQueuerMatrix_pvAccept_get
    if _newclass:pvAccept = _swig_property(_heccer_base.EventQueuerMatrix_pvAccept_get, _heccer_base.EventQueuerMatrix_pvAccept_set)
    def __init__(self, *args): 
        this = _heccer_base.new_EventQueuerMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_EventQueuerMatrix
    __del__ = lambda self : None;
EventQueuerMatrix_swigregister = _heccer_base.EventQueuerMatrix_swigregister
EventQueuerMatrix_swigregister(EventQueuerMatrix)

class EventQueuerData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventQueuerData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventQueuerData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iConnectionIndices"] = _heccer_base.EventQueuerData_iConnectionIndices_set
    __swig_getmethods__["iConnectionIndices"] = _heccer_base.EventQueuerData_iConnectionIndices_get
    if _newclass:iConnectionIndices = _swig_property(_heccer_base.EventQueuerData_iConnectionIndices_get, _heccer_base.EventQueuerData_iConnectionIndices_set)
    __swig_setmethods__["ppiSerial2ConnectionIndex"] = _heccer_base.EventQueuerData_ppiSerial2ConnectionIndex_set
    __swig_getmethods__["ppiSerial2ConnectionIndex"] = _heccer_base.EventQueuerData_ppiSerial2ConnectionIndex_get
    if _newclass:ppiSerial2ConnectionIndex = _swig_property(_heccer_base.EventQueuerData_ppiSerial2ConnectionIndex_get, _heccer_base.EventQueuerData_ppiSerial2ConnectionIndex_set)
    __swig_setmethods__["iRows"] = _heccer_base.EventQueuerData_iRows_set
    __swig_getmethods__["iRows"] = _heccer_base.EventQueuerData_iRows_get
    if _newclass:iRows = _swig_property(_heccer_base.EventQueuerData_iRows_get, _heccer_base.EventQueuerData_iRows_set)
    __swig_setmethods__["ppeqm"] = _heccer_base.EventQueuerData_ppeqm_set
    __swig_getmethods__["ppeqm"] = _heccer_base.EventQueuerData_ppeqm_get
    if _newclass:ppeqm = _swig_property(_heccer_base.EventQueuerData_ppeqm_get, _heccer_base.EventQueuerData_ppeqm_set)
    def __init__(self, *args): 
        this = _heccer_base.new_EventQueuerData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_EventQueuerData
    __del__ = lambda self : None;
EventQueuerData_swigregister = _heccer_base.EventQueuerData_swigregister
EventQueuerData_swigregister(EventQueuerData)
EVENTQUEUER_MAX_CONNECTIONS = _heccer_base.EVENTQUEUER_MAX_CONNECTIONS

class EventQueuer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventQueuer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventQueuer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["peqd"] = _heccer_base.EventQueuer_peqd_set
    __swig_getmethods__["peqd"] = _heccer_base.EventQueuer_peqd_get
    if _newclass:peqd = _swig_property(_heccer_base.EventQueuer_peqd_get, _heccer_base.EventQueuer_peqd_set)
    __swig_setmethods__["eventDequeue"] = _heccer_base.EventQueuer_eventDequeue_set
    __swig_getmethods__["eventDequeue"] = _heccer_base.EventQueuer_eventDequeue_get
    if _newclass:eventDequeue = _swig_property(_heccer_base.EventQueuer_eventDequeue_get, _heccer_base.EventQueuer_eventDequeue_set)
    def __init__(self, *args): 
        this = _heccer_base.new_EventQueuer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_EventQueuer
    __del__ = lambda self : None;
EventQueuer_swigregister = _heccer_base.EventQueuer_swigregister
EventQueuer_swigregister(EventQueuer)

class simobj_DES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simobj_DES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simobj_DES, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pcName"] = _heccer_base.simobj_DES_pcName_set
    __swig_getmethods__["pcName"] = _heccer_base.simobj_DES_pcName_get
    if _newclass:pcName = _swig_property(_heccer_base.simobj_DES_pcName_get, _heccer_base.simobj_DES_pcName_set)
    __swig_setmethods__["iStatus"] = _heccer_base.simobj_DES_iStatus_set
    __swig_getmethods__["iStatus"] = _heccer_base.simobj_DES_iStatus_get
    if _newclass:iStatus = _swig_property(_heccer_base.simobj_DES_iStatus_get, _heccer_base.simobj_DES_iStatus_set)
    __swig_setmethods__["iErrorCount"] = _heccer_base.simobj_DES_iErrorCount_set
    __swig_getmethods__["iErrorCount"] = _heccer_base.simobj_DES_iErrorCount_get
    if _newclass:iErrorCount = _swig_property(_heccer_base.simobj_DES_iErrorCount_get, _heccer_base.simobj_DES_iErrorCount_set)
    __swig_setmethods__["iPreSerials"] = _heccer_base.simobj_DES_iPreSerials_set
    __swig_getmethods__["iPreSerials"] = _heccer_base.simobj_DES_iPreSerials_get
    if _newclass:iPreSerials = _swig_property(_heccer_base.simobj_DES_iPreSerials_get, _heccer_base.simobj_DES_iPreSerials_set)
    __swig_setmethods__["piPreSerials"] = _heccer_base.simobj_DES_piPreSerials_set
    __swig_getmethods__["piPreSerials"] = _heccer_base.simobj_DES_piPreSerials_get
    if _newclass:piPreSerials = _swig_property(_heccer_base.simobj_DES_piPreSerials_get, _heccer_base.simobj_DES_piPreSerials_set)
    __swig_setmethods__["pped"] = _heccer_base.simobj_DES_pped_set
    __swig_getmethods__["pped"] = _heccer_base.simobj_DES_pped_get
    if _newclass:pped = _swig_property(_heccer_base.simobj_DES_pped_get, _heccer_base.simobj_DES_pped_set)
    __swig_setmethods__["iCores"] = _heccer_base.simobj_DES_iCores_set
    __swig_getmethods__["iCores"] = _heccer_base.simobj_DES_iCores_get
    if _newclass:iCores = _swig_property(_heccer_base.simobj_DES_iCores_get, _heccer_base.simobj_DES_iCores_set)
    __swig_setmethods__["ppeq"] = _heccer_base.simobj_DES_ppeq_set
    __swig_getmethods__["ppeq"] = _heccer_base.simobj_DES_ppeq_get
    if _newclass:ppeq = _swig_property(_heccer_base.simobj_DES_ppeq_get, _heccer_base.simobj_DES_ppeq_set)
    def __init__(self, *args): 
        this = _heccer_base.new_simobj_DES(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_simobj_DES
    __del__ = lambda self : None;
simobj_DES_swigregister = _heccer_base.simobj_DES_swigregister
simobj_DES_swigregister(simobj_DES)

DESDumpV = _heccer_base.DESDumpV
DESDump = _heccer_base.DESDump
DES_DUMP_SERVICE = _heccer_base.DES_DUMP_SERVICE
DES_DUMP_DISTRIBUTOR_MATRIX = _heccer_base.DES_DUMP_DISTRIBUTOR_MATRIX
DES_DUMP_QUEUER_MATRIX = _heccer_base.DES_DUMP_QUEUER_MATRIX
DESGetDistributor = _heccer_base.DESGetDistributor
DESGetQueuer = _heccer_base.DESGetQueuer
DESNew = _heccer_base.DESNew
EventDistributorAddConnection = _heccer_base.EventDistributorAddConnection
EventDistributorDataGetEntry = _heccer_base.EventDistributorDataGetEntry
EventDistributorDataNew = _heccer_base.EventDistributorDataNew
EventDistributorNew = _heccer_base.EventDistributorNew
EventDistributorSend = _heccer_base.EventDistributorSend
EventDistributorSetSerialRange = _heccer_base.EventDistributorSetSerialRange
EventQueuerDequeue = _heccer_base.EventQueuerDequeue
EventQueuerEnqueue = _heccer_base.EventQueuerEnqueue
EventQueuerGetRowFromSerial = _heccer_base.EventQueuerGetRowFromSerial
EventQueuerNewFromSingleRow = _heccer_base.EventQueuerNewFromSingleRow
EventQueuerProcess = _heccer_base.EventQueuerProcess
EventQueuerSerial2ConnectionIndex = _heccer_base.EventQueuerSerial2ConnectionIndex
EventQueuerSerial2ConnectionIndexAdd = _heccer_base.EventQueuerSerial2ConnectionIndexAdd
EventQueuerSerial2ConnectionIndexSort = _heccer_base.EventQueuerSerial2ConnectionIndexSort
TRUE = _heccer_base.TRUE
FALSE = _heccer_base.FALSE
class Intermediary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Intermediary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Intermediary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iCompartments"] = _heccer_base.Intermediary_iCompartments_set
    __swig_getmethods__["iCompartments"] = _heccer_base.Intermediary_iCompartments_get
    if _newclass:iCompartments = _swig_property(_heccer_base.Intermediary_iCompartments_get, _heccer_base.Intermediary_iCompartments_set)
    __swig_setmethods__["pcomp"] = _heccer_base.Intermediary_pcomp_set
    __swig_getmethods__["pcomp"] = _heccer_base.Intermediary_pcomp_get
    if _newclass:pcomp = _swig_property(_heccer_base.Intermediary_pcomp_get, _heccer_base.Intermediary_pcomp_set)
    __swig_setmethods__["pmca"] = _heccer_base.Intermediary_pmca_set
    __swig_getmethods__["pmca"] = _heccer_base.Intermediary_pmca_get
    if _newclass:pmca = _swig_property(_heccer_base.Intermediary_pmca_get, _heccer_base.Intermediary_pmca_set)
    __swig_setmethods__["piC2m"] = _heccer_base.Intermediary_piC2m_set
    __swig_getmethods__["piC2m"] = _heccer_base.Intermediary_piC2m_get
    if _newclass:piC2m = _swig_property(_heccer_base.Intermediary_piC2m_get, _heccer_base.Intermediary_piC2m_set)
    __swig_setmethods__["iSerialStart"] = _heccer_base.Intermediary_iSerialStart_set
    __swig_getmethods__["iSerialStart"] = _heccer_base.Intermediary_iSerialStart_get
    if _newclass:iSerialStart = _swig_property(_heccer_base.Intermediary_iSerialStart_get, _heccer_base.Intermediary_iSerialStart_set)
    __swig_setmethods__["iSerialEnd"] = _heccer_base.Intermediary_iSerialEnd_set
    __swig_getmethods__["iSerialEnd"] = _heccer_base.Intermediary_iSerialEnd_get
    if _newclass:iSerialEnd = _swig_property(_heccer_base.Intermediary_iSerialEnd_get, _heccer_base.Intermediary_iSerialEnd_set)
    def __init__(self, *args): 
        this = _heccer_base.new_Intermediary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_Intermediary
    __del__ = lambda self : None;
Intermediary_swigregister = _heccer_base.Intermediary_swigregister
Intermediary_swigregister(Intermediary)

HeccerIntermediaryBuildIndex = _heccer_base.HeccerIntermediaryBuildIndex
HeccerIntermediaryDump = _heccer_base.HeccerIntermediaryDump
HeccerIntermediaryLookup = _heccer_base.HeccerIntermediaryLookup
class HeccerOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeccerOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeccerOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iOptions"] = _heccer_base.HeccerOptions_iOptions_set
    __swig_getmethods__["iOptions"] = _heccer_base.HeccerOptions_iOptions_get
    if _newclass:iOptions = _swig_property(_heccer_base.HeccerOptions_iOptions_get, _heccer_base.HeccerOptions_iOptions_set)
    __swig_setmethods__["iCorrections"] = _heccer_base.HeccerOptions_iCorrections_set
    __swig_getmethods__["iCorrections"] = _heccer_base.HeccerOptions_iCorrections_get
    if _newclass:iCorrections = _swig_property(_heccer_base.HeccerOptions_iCorrections_get, _heccer_base.HeccerOptions_iCorrections_set)
    __swig_setmethods__["iIntervalSet"] = _heccer_base.HeccerOptions_iIntervalSet_set
    __swig_getmethods__["iIntervalSet"] = _heccer_base.HeccerOptions_iIntervalSet_get
    if _newclass:iIntervalSet = _swig_property(_heccer_base.HeccerOptions_iIntervalSet_get, _heccer_base.HeccerOptions_iIntervalSet_set)
    __swig_setmethods__["dIntervalStart"] = _heccer_base.HeccerOptions_dIntervalStart_set
    __swig_getmethods__["dIntervalStart"] = _heccer_base.HeccerOptions_dIntervalStart_get
    if _newclass:dIntervalStart = _swig_property(_heccer_base.HeccerOptions_dIntervalStart_get, _heccer_base.HeccerOptions_dIntervalStart_set)
    __swig_setmethods__["dIntervalEnd"] = _heccer_base.HeccerOptions_dIntervalEnd_set
    __swig_getmethods__["dIntervalEnd"] = _heccer_base.HeccerOptions_dIntervalEnd_get
    if _newclass:dIntervalEnd = _swig_property(_heccer_base.HeccerOptions_dIntervalEnd_get, _heccer_base.HeccerOptions_dIntervalEnd_set)
    __swig_setmethods__["iActivatorSet"] = _heccer_base.HeccerOptions_iActivatorSet_set
    __swig_getmethods__["iActivatorSet"] = _heccer_base.HeccerOptions_iActivatorSet_get
    if _newclass:iActivatorSet = _swig_property(_heccer_base.HeccerOptions_iActivatorSet_get, _heccer_base.HeccerOptions_iActivatorSet_set)
    __swig_setmethods__["dConcentrationGateStart"] = _heccer_base.HeccerOptions_dConcentrationGateStart_set
    __swig_getmethods__["dConcentrationGateStart"] = _heccer_base.HeccerOptions_dConcentrationGateStart_get
    if _newclass:dConcentrationGateStart = _swig_property(_heccer_base.HeccerOptions_dConcentrationGateStart_get, _heccer_base.HeccerOptions_dConcentrationGateStart_set)
    __swig_setmethods__["dConcentrationGateEnd"] = _heccer_base.HeccerOptions_dConcentrationGateEnd_set
    __swig_getmethods__["dConcentrationGateEnd"] = _heccer_base.HeccerOptions_dConcentrationGateEnd_get
    if _newclass:dConcentrationGateEnd = _swig_property(_heccer_base.HeccerOptions_dConcentrationGateEnd_get, _heccer_base.HeccerOptions_dConcentrationGateEnd_set)
    __swig_setmethods__["iIntervalEntries"] = _heccer_base.HeccerOptions_iIntervalEntries_set
    __swig_getmethods__["iIntervalEntries"] = _heccer_base.HeccerOptions_iIntervalEntries_get
    if _newclass:iIntervalEntries = _swig_property(_heccer_base.HeccerOptions_iIntervalEntries_get, _heccer_base.HeccerOptions_iIntervalEntries_set)
    __swig_setmethods__["iSmallTableSize"] = _heccer_base.HeccerOptions_iSmallTableSize_set
    __swig_getmethods__["iSmallTableSize"] = _heccer_base.HeccerOptions_iSmallTableSize_get
    if _newclass:iSmallTableSize = _swig_property(_heccer_base.HeccerOptions_iSmallTableSize_get, _heccer_base.HeccerOptions_iSmallTableSize_set)
    def __init__(self, *args): 
        this = _heccer_base.new_HeccerOptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_HeccerOptions
    __del__ = lambda self : None;
HeccerOptions_swigregister = _heccer_base.HeccerOptions_swigregister
HeccerOptions_swigregister(HeccerOptions)

HECCER_OPTION_BRANCHES_FIRST_SCHEDULING = _heccer_base.HECCER_OPTION_BRANCHES_FIRST_SCHEDULING
HECCER_OPTION_BACKWARD_EULER = _heccer_base.HECCER_OPTION_BACKWARD_EULER
HECCER_OPTION_PASSIVE_SYNCHANS = _heccer_base.HECCER_OPTION_PASSIVE_SYNCHANS
HECCER_OPTION_SERIALIZE_AT_FINISH = _heccer_base.HECCER_OPTION_SERIALIZE_AT_FINISH
HECCER_OPTION_ENABLE_INDIVIDUAL_CURRENTS = _heccer_base.HECCER_OPTION_ENABLE_INDIVIDUAL_CURRENTS
HECCER_OPTION_ENABLE_AGGREGATORS = _heccer_base.HECCER_OPTION_ENABLE_AGGREGATORS
HECCER_OPTION_ENABLE_LINEAR_MODE = _heccer_base.HECCER_OPTION_ENABLE_LINEAR_MODE
HECCER_OPTION_ENABLE_LINEAR_MODE_APPLIED = _heccer_base.HECCER_OPTION_ENABLE_LINEAR_MODE_APPLIED
HECCER_CORRECTION_ENABLE_LINEAR_MODE_DISABLED = _heccer_base.HECCER_CORRECTION_ENABLE_LINEAR_MODE_DISABLED
HECCER_INTERVAL_DEFAULT_START = _heccer_base.HECCER_INTERVAL_DEFAULT_START
HECCER_INTERVAL_DEFAULT_END = _heccer_base.HECCER_INTERVAL_DEFAULT_END
HECCER_INTERVAL_CONCENTRATION_GATE_DEFAULT_START = _heccer_base.HECCER_INTERVAL_CONCENTRATION_GATE_DEFAULT_START
HECCER_INTERVAL_CONCENTRATION_GATE_DEFAULT_END = _heccer_base.HECCER_INTERVAL_CONCENTRATION_GATE_DEFAULT_END
HECCER_INTERVAL_DEFAULT_ENTRIES = _heccer_base.HECCER_INTERVAL_DEFAULT_ENTRIES
HECCER_INTERPOL_INTERVAL_DEFAULT_ENTRIES = _heccer_base.HECCER_INTERPOL_INTERVAL_DEFAULT_ENTRIES
class simobj_Heccer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simobj_Heccer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simobj_Heccer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pcName"] = _heccer_base.simobj_Heccer_pcName_set
    __swig_getmethods__["pcName"] = _heccer_base.simobj_Heccer_pcName_get
    if _newclass:pcName = _swig_property(_heccer_base.simobj_Heccer_pcName_get, _heccer_base.simobj_Heccer_pcName_set)
    __swig_setmethods__["iStatus"] = _heccer_base.simobj_Heccer_iStatus_set
    __swig_getmethods__["iStatus"] = _heccer_base.simobj_Heccer_iStatus_get
    if _newclass:iStatus = _swig_property(_heccer_base.simobj_Heccer_iStatus_get, _heccer_base.simobj_Heccer_iStatus_set)
    __swig_setmethods__["iErrorCount"] = _heccer_base.simobj_Heccer_iErrorCount_set
    __swig_getmethods__["iErrorCount"] = _heccer_base.simobj_Heccer_iErrorCount_get
    if _newclass:iErrorCount = _swig_property(_heccer_base.simobj_Heccer_iErrorCount_get, _heccer_base.simobj_Heccer_iErrorCount_set)
    __swig_setmethods__["ho"] = _heccer_base.simobj_Heccer_ho_set
    __swig_getmethods__["ho"] = _heccer_base.simobj_Heccer_ho_get
    if _newclass:ho = _swig_property(_heccer_base.simobj_Heccer_ho_get, _heccer_base.simobj_Heccer_ho_set)
    __swig_setmethods__["dTime"] = _heccer_base.simobj_Heccer_dTime_set
    __swig_getmethods__["dTime"] = _heccer_base.simobj_Heccer_dTime_get
    if _newclass:dTime = _swig_property(_heccer_base.simobj_Heccer_dTime_get, _heccer_base.simobj_Heccer_dTime_set)
    __swig_setmethods__["dStep"] = _heccer_base.simobj_Heccer_dStep_set
    __swig_getmethods__["dStep"] = _heccer_base.simobj_Heccer_dStep_get
    if _newclass:dStep = _swig_property(_heccer_base.simobj_Heccer_dStep_get, _heccer_base.simobj_Heccer_dStep_set)
    __swig_setmethods__["pts"] = _heccer_base.simobj_Heccer_pts_set
    __swig_getmethods__["pts"] = _heccer_base.simobj_Heccer_pts_get
    if _newclass:pts = _swig_property(_heccer_base.simobj_Heccer_pts_get, _heccer_base.simobj_Heccer_pts_set)
    __swig_setmethods__["ped"] = _heccer_base.simobj_Heccer_ped_set
    __swig_getmethods__["ped"] = _heccer_base.simobj_Heccer_ped_get
    if _newclass:ped = _swig_property(_heccer_base.simobj_Heccer_ped_get, _heccer_base.simobj_Heccer_ped_set)
    __swig_setmethods__["peq"] = _heccer_base.simobj_Heccer_peq_set
    __swig_getmethods__["peq"] = _heccer_base.simobj_Heccer_peq_get
    if _newclass:peq = _swig_property(_heccer_base.simobj_Heccer_peq_get, _heccer_base.simobj_Heccer_peq_set)
    __swig_setmethods__["inter"] = _heccer_base.simobj_Heccer_inter_set
    __swig_getmethods__["inter"] = _heccer_base.simobj_Heccer_inter_get
    if _newclass:inter = _swig_property(_heccer_base.simobj_Heccer_inter_get, _heccer_base.simobj_Heccer_inter_set)
    __swig_setmethods__["indexers"] = _heccer_base.simobj_Heccer_indexers_set
    __swig_getmethods__["indexers"] = _heccer_base.simobj_Heccer_indexers_get
    if _newclass:indexers = _swig_property(_heccer_base.simobj_Heccer_indexers_get, _heccer_base.simobj_Heccer_indexers_set)
    __swig_setmethods__["tgt"] = _heccer_base.simobj_Heccer_tgt_set
    __swig_getmethods__["tgt"] = _heccer_base.simobj_Heccer_tgt_get
    if _newclass:tgt = _swig_property(_heccer_base.simobj_Heccer_tgt_get, _heccer_base.simobj_Heccer_tgt_set)
    __swig_setmethods__["tsmt"] = _heccer_base.simobj_Heccer_tsmt_set
    __swig_getmethods__["tsmt"] = _heccer_base.simobj_Heccer_tsmt_get
    if _newclass:tsmt = _swig_property(_heccer_base.simobj_Heccer_tsmt_get, _heccer_base.simobj_Heccer_tsmt_set)
    __swig_setmethods__["vm"] = _heccer_base.simobj_Heccer_vm_set
    __swig_getmethods__["vm"] = _heccer_base.simobj_Heccer_vm_get
    if _newclass:vm = _swig_property(_heccer_base.simobj_Heccer_vm_get, _heccer_base.simobj_Heccer_vm_set)
    def __init__(self, *args): 
        this = _heccer_base.new_simobj_Heccer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_simobj_Heccer
    __del__ = lambda self : None;
simobj_Heccer_swigregister = _heccer_base.simobj_Heccer_swigregister
simobj_Heccer_swigregister(simobj_Heccer)

HECCER_STATUS_PHASE_0 = _heccer_base.HECCER_STATUS_PHASE_0
HECCER_STATUS_PHASE_1 = _heccer_base.HECCER_STATUS_PHASE_1
HECCER_STATUS_PHASE_2 = _heccer_base.HECCER_STATUS_PHASE_2
HECCER_STATUS_PHASE_3 = _heccer_base.HECCER_STATUS_PHASE_3
HECCER_STATUS_PHASE_4 = _heccer_base.HECCER_STATUS_PHASE_4
HECCER_STATUS_PHASE_5 = _heccer_base.HECCER_STATUS_PHASE_5
HeccerAggregatorsCompile = _heccer_base.HeccerAggregatorsCompile
HeccerCanCompile = _heccer_base.HeccerCanCompile
HeccerCompileP1 = _heccer_base.HeccerCompileP1
HeccerCompileP2 = _heccer_base.HeccerCompileP2
HeccerCompileP3 = _heccer_base.HeccerCompileP3
HeccerDumpV = _heccer_base.HeccerDumpV
HeccerDump = _heccer_base.HeccerDump
HECCER_DUMP_SERVICE = _heccer_base.HECCER_DUMP_SERVICE
HECCER_DUMP_INDEXERS_SUMMARY = _heccer_base.HECCER_DUMP_INDEXERS_SUMMARY
HECCER_DUMP_INDEXERS_STRUCTURE = _heccer_base.HECCER_DUMP_INDEXERS_STRUCTURE
HECCER_DUMP_INTERMEDIARY_COMPARTMENTS_PARAMETERS = _heccer_base.HECCER_DUMP_INTERMEDIARY_COMPARTMENTS_PARAMETERS
HECCER_DUMP_INTERMEDIARY_COMPARTMENT_SUMMARY = _heccer_base.HECCER_DUMP_INTERMEDIARY_COMPARTMENT_SUMMARY
HECCER_DUMP_INTERMEDIARY_MECHANISM_SUMMARY = _heccer_base.HECCER_DUMP_INTERMEDIARY_MECHANISM_SUMMARY
HECCER_DUMP_INTERMEDIARY_STRUCTURE = _heccer_base.HECCER_DUMP_INTERMEDIARY_STRUCTURE
HECCER_DUMP_INTERMEDIARY_SUMMARY = _heccer_base.HECCER_DUMP_INTERMEDIARY_SUMMARY
HECCER_DUMP_TABLE_GATE_SUMMARY = _heccer_base.HECCER_DUMP_TABLE_GATE_SUMMARY
HECCER_DUMP_TABLE_GATE_TABLES = _heccer_base.HECCER_DUMP_TABLE_GATE_TABLES
HECCER_DUMP_VM_COMPARTMENT_MATRIX = _heccer_base.HECCER_DUMP_VM_COMPARTMENT_MATRIX
HECCER_DUMP_VM_COMPARTMENT_MATRIX_DIAGONALS = _heccer_base.HECCER_DUMP_VM_COMPARTMENT_MATRIX_DIAGONALS
HECCER_DUMP_VM_COMPARTMENT_OPERATIONS = _heccer_base.HECCER_DUMP_VM_COMPARTMENT_OPERATIONS
HECCER_DUMP_VM_MECHANISM_DATA = _heccer_base.HECCER_DUMP_VM_MECHANISM_DATA
HECCER_DUMP_VM_MECHANISM_OPERATIONS = _heccer_base.HECCER_DUMP_VM_MECHANISM_OPERATIONS
HECCER_DUMP_VM_CHANNEL_POOL_FLUXES = _heccer_base.HECCER_DUMP_VM_CHANNEL_POOL_FLUXES
HECCER_DUMP_VM_SUMMARY = _heccer_base.HECCER_DUMP_VM_SUMMARY
HECCER_DUMP_VM_AGGREGATORS = _heccer_base.HECCER_DUMP_VM_AGGREGATORS
HECCER_DUMP_ALL = _heccer_base.HECCER_DUMP_ALL
HECCER_DUMP_ALL_EXTENDED = _heccer_base.HECCER_DUMP_ALL_EXTENDED
HECCER_DUMP_ALL_REDUCED = _heccer_base.HECCER_DUMP_ALL_REDUCED
HeccerGetVersion = _heccer_base.HeccerGetVersion
HeccerError = _heccer_base.HeccerError
HeccerHeccs = _heccer_base.HeccerHeccs
HeccerInitiate = _heccer_base.HeccerInitiate
HeccerNew = _heccer_base.HeccerNew
HeccerNewP1 = _heccer_base.HeccerNewP1
HeccerNewP2 = _heccer_base.HeccerNewP2
HeccerNewFromFile = _heccer_base.HeccerNewFromFile
HeccerWriteToFile = _heccer_base.HeccerWriteToFile
class MathComponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MathComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathComponent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iType"] = _heccer_base.MathComponent_iType_set
    __swig_getmethods__["iType"] = _heccer_base.MathComponent_iType_get
    if _newclass:iType = _swig_property(_heccer_base.MathComponent_iType_get, _heccer_base.MathComponent_iType_set)
    __swig_setmethods__["iSerial"] = _heccer_base.MathComponent_iSerial_set
    __swig_getmethods__["iSerial"] = _heccer_base.MathComponent_iSerial_get
    if _newclass:iSerial = _swig_property(_heccer_base.MathComponent_iSerial_get, _heccer_base.MathComponent_iSerial_set)
    __swig_setmethods__["iModelSourceType"] = _heccer_base.MathComponent_iModelSourceType_set
    __swig_getmethods__["iModelSourceType"] = _heccer_base.MathComponent_iModelSourceType_get
    if _newclass:iModelSourceType = _swig_property(_heccer_base.MathComponent_iModelSourceType_get, _heccer_base.MathComponent_iModelSourceType_set)
    __swig_setmethods__["iPrototype"] = _heccer_base.MathComponent_iPrototype_set
    __swig_getmethods__["iPrototype"] = _heccer_base.MathComponent_iPrototype_get
    if _newclass:iPrototype = _swig_property(_heccer_base.MathComponent_iPrototype_get, _heccer_base.MathComponent_iPrototype_set)
    def __init__(self, *args): 
        this = _heccer_base.new_MathComponent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_MathComponent
    __del__ = lambda self : None;
MathComponent_swigregister = _heccer_base.MathComponent_swigregister
MathComponent_swigregister(MathComponent)

MATH_TYPE_ChannelAct = _heccer_base.MATH_TYPE_ChannelAct
MATH_TYPE_ChannelConc = _heccer_base.MATH_TYPE_ChannelConc
MATH_TYPE_ChannelActConc = _heccer_base.MATH_TYPE_ChannelActConc
MATH_TYPE_ChannelActInact = _heccer_base.MATH_TYPE_ChannelActInact
MATH_TYPE_ChannelPersistentSteadyStateDualTau = _heccer_base.MATH_TYPE_ChannelPersistentSteadyStateDualTau
MATH_TYPE_ChannelPersistentSteadyStateTau = _heccer_base.MATH_TYPE_ChannelPersistentSteadyStateTau
MATH_TYPE_ChannelSpringMass = _heccer_base.MATH_TYPE_ChannelSpringMass
MATH_TYPE_ChannelSteadyStateSteppedTau = _heccer_base.MATH_TYPE_ChannelSteadyStateSteppedTau
MATH_TYPE_Compartment = _heccer_base.MATH_TYPE_Compartment
MATH_TYPE_ExponentialDecay = _heccer_base.MATH_TYPE_ExponentialDecay
MATH_TYPE_GHK = _heccer_base.MATH_TYPE_GHK
MATH_TYPE_InternalNernst = _heccer_base.MATH_TYPE_InternalNernst
MATH_TYPE_MGBlocker = _heccer_base.MATH_TYPE_MGBlocker
MATH_TYPE_SpikeGenerator = _heccer_base.MATH_TYPE_SpikeGenerator
MATH_TYPE_Concentration = _heccer_base.MATH_TYPE_Concentration
MATH_TYPE_GateConcept = _heccer_base.MATH_TYPE_GateConcept
MATH_TYPE_CallOut_flag = _heccer_base.MATH_TYPE_CallOut_flag
MATH_TYPE_CallOut_conductance_current = _heccer_base.MATH_TYPE_CallOut_conductance_current
class MathComponentArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MathComponentArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathComponentArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iMathComponents"] = _heccer_base.MathComponentArray_iMathComponents_set
    __swig_getmethods__["iMathComponents"] = _heccer_base.MathComponentArray_iMathComponents_get
    if _newclass:iMathComponents = _swig_property(_heccer_base.MathComponentArray_iMathComponents_get, _heccer_base.MathComponentArray_iMathComponents_set)
    __swig_setmethods__["pmc"] = _heccer_base.MathComponentArray_pmc_set
    __swig_getmethods__["pmc"] = _heccer_base.MathComponentArray_pmc_get
    if _newclass:pmc = _swig_property(_heccer_base.MathComponentArray_pmc_get, _heccer_base.MathComponentArray_pmc_set)
    __swig_setmethods__["ppmcIndex"] = _heccer_base.MathComponentArray_ppmcIndex_set
    __swig_getmethods__["ppmcIndex"] = _heccer_base.MathComponentArray_ppmcIndex_get
    if _newclass:ppmcIndex = _swig_property(_heccer_base.MathComponentArray_ppmcIndex_get, _heccer_base.MathComponentArray_ppmcIndex_set)
    __swig_setmethods__["iCursor"] = _heccer_base.MathComponentArray_iCursor_set
    __swig_getmethods__["iCursor"] = _heccer_base.MathComponentArray_iCursor_get
    if _newclass:iCursor = _swig_property(_heccer_base.MathComponentArray_iCursor_get, _heccer_base.MathComponentArray_iCursor_set)
    __swig_setmethods__["pmcCursor"] = _heccer_base.MathComponentArray_pmcCursor_set
    __swig_getmethods__["pmcCursor"] = _heccer_base.MathComponentArray_pmcCursor_get
    if _newclass:pmcCursor = _swig_property(_heccer_base.MathComponentArray_pmcCursor_get, _heccer_base.MathComponentArray_pmcCursor_set)
    def __init__(self, *args): 
        this = _heccer_base.new_MathComponentArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_MathComponentArray
    __del__ = lambda self : None;
MathComponentArray_swigregister = _heccer_base.MathComponentArray_swigregister
MathComponentArray_swigregister(MathComponentArray)

class MathComponentInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MathComponentInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathComponentInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iType"] = _heccer_base.MathComponentInfo_iType_set
    __swig_getmethods__["iType"] = _heccer_base.MathComponentInfo_iType_get
    if _newclass:iType = _swig_property(_heccer_base.MathComponentInfo_iType_get, _heccer_base.MathComponentInfo_iType_set)
    __swig_setmethods__["iChars"] = _heccer_base.MathComponentInfo_iChars_set
    __swig_getmethods__["iChars"] = _heccer_base.MathComponentInfo_iChars_get
    if _newclass:iChars = _swig_property(_heccer_base.MathComponentInfo_iChars_get, _heccer_base.MathComponentInfo_iChars_set)
    def __init__(self, *args): 
        this = _heccer_base.new_MathComponentInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_MathComponentInfo
    __del__ = lambda self : None;
MathComponentInfo_swigregister = _heccer_base.MathComponentInfo_swigregister
MathComponentInfo_swigregister(MathComponentInfo)

MathComponentArrayCallocData = _heccer_base.MathComponentArrayCallocData
MathComponentArrayLookupSerial = _heccer_base.MathComponentArrayLookupSerial
MathComponentArraySetAdvance = _heccer_base.MathComponentArraySetAdvance
MathComponentCopyNext = _heccer_base.MathComponentCopyNext
MathComponentInfoLookup = _heccer_base.MathComponentInfoLookup
MathComponentNext = _heccer_base.MathComponentNext
class SpringMassParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpringMassParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpringMassParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dTau1"] = _heccer_base.SpringMassParameters_dTau1_set
    __swig_getmethods__["dTau1"] = _heccer_base.SpringMassParameters_dTau1_get
    if _newclass:dTau1 = _swig_property(_heccer_base.SpringMassParameters_dTau1_get, _heccer_base.SpringMassParameters_dTau1_set)
    __swig_setmethods__["dTau2"] = _heccer_base.SpringMassParameters_dTau2_set
    __swig_getmethods__["dTau2"] = _heccer_base.SpringMassParameters_dTau2_get
    if _newclass:dTau2 = _swig_property(_heccer_base.SpringMassParameters_dTau2_get, _heccer_base.SpringMassParameters_dTau2_set)
    def __init__(self, *args): 
        this = _heccer_base.new_SpringMassParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_SpringMassParameters
    __del__ = lambda self : None;
SpringMassParameters_swigregister = _heccer_base.SpringMassParameters_swigregister
SpringMassParameters_swigregister(SpringMassParameters)

class ChannelSpringMass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelSpringMass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelSpringMass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ChannelSpringMass_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ChannelSpringMass_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ChannelSpringMass_mc_get, _heccer_base.ChannelSpringMass_mc_set)
    __swig_setmethods__["dReversalPotential"] = _heccer_base.ChannelSpringMass_dReversalPotential_set
    __swig_getmethods__["dReversalPotential"] = _heccer_base.ChannelSpringMass_dReversalPotential_get
    if _newclass:dReversalPotential = _swig_property(_heccer_base.ChannelSpringMass_dReversalPotential_get, _heccer_base.ChannelSpringMass_dReversalPotential_set)
    __swig_setmethods__["iReversalPotential"] = _heccer_base.ChannelSpringMass_iReversalPotential_set
    __swig_getmethods__["iReversalPotential"] = _heccer_base.ChannelSpringMass_iReversalPotential_get
    if _newclass:iReversalPotential = _swig_property(_heccer_base.ChannelSpringMass_iReversalPotential_get, _heccer_base.ChannelSpringMass_iReversalPotential_set)
    __swig_setmethods__["dMaximalConductance"] = _heccer_base.ChannelSpringMass_dMaximalConductance_set
    __swig_getmethods__["dMaximalConductance"] = _heccer_base.ChannelSpringMass_dMaximalConductance_get
    if _newclass:dMaximalConductance = _swig_property(_heccer_base.ChannelSpringMass_dMaximalConductance_get, _heccer_base.ChannelSpringMass_dMaximalConductance_set)
    __swig_setmethods__["iPool"] = _heccer_base.ChannelSpringMass_iPool_set
    __swig_getmethods__["iPool"] = _heccer_base.ChannelSpringMass_iPool_get
    if _newclass:iPool = _swig_property(_heccer_base.ChannelSpringMass_iPool_get, _heccer_base.ChannelSpringMass_iPool_set)
    __swig_setmethods__["dFrequency"] = _heccer_base.ChannelSpringMass_dFrequency_set
    __swig_getmethods__["dFrequency"] = _heccer_base.ChannelSpringMass_dFrequency_get
    if _newclass:dFrequency = _swig_property(_heccer_base.ChannelSpringMass_dFrequency_get, _heccer_base.ChannelSpringMass_dFrequency_set)
    __swig_setmethods__["dInitX"] = _heccer_base.ChannelSpringMass_dInitX_set
    __swig_getmethods__["dInitX"] = _heccer_base.ChannelSpringMass_dInitX_get
    if _newclass:dInitX = _swig_property(_heccer_base.ChannelSpringMass_dInitX_get, _heccer_base.ChannelSpringMass_dInitX_set)
    __swig_setmethods__["dInitY"] = _heccer_base.ChannelSpringMass_dInitY_set
    __swig_getmethods__["dInitY"] = _heccer_base.ChannelSpringMass_dInitY_get
    if _newclass:dInitY = _swig_property(_heccer_base.ChannelSpringMass_dInitY_get, _heccer_base.ChannelSpringMass_dInitY_set)
    __swig_setmethods__["iTable"] = _heccer_base.ChannelSpringMass_iTable_set
    __swig_getmethods__["iTable"] = _heccer_base.ChannelSpringMass_iTable_get
    if _newclass:iTable = _swig_property(_heccer_base.ChannelSpringMass_iTable_get, _heccer_base.ChannelSpringMass_iTable_set)
    __swig_setmethods__["pdEventTimes"] = _heccer_base.ChannelSpringMass_pdEventTimes_set
    __swig_getmethods__["pdEventTimes"] = _heccer_base.ChannelSpringMass_pdEventTimes_get
    if _newclass:pdEventTimes = _swig_property(_heccer_base.ChannelSpringMass_pdEventTimes_get, _heccer_base.ChannelSpringMass_pdEventTimes_set)
    __swig_setmethods__["pcEventTimes"] = _heccer_base.ChannelSpringMass_pcEventTimes_set
    __swig_getmethods__["pcEventTimes"] = _heccer_base.ChannelSpringMass_pcEventTimes_get
    if _newclass:pcEventTimes = _swig_property(_heccer_base.ChannelSpringMass_pcEventTimes_get, _heccer_base.ChannelSpringMass_pcEventTimes_set)
    __swig_setmethods__["parameters"] = _heccer_base.ChannelSpringMass_parameters_set
    __swig_getmethods__["parameters"] = _heccer_base.ChannelSpringMass_parameters_get
    if _newclass:parameters = _swig_property(_heccer_base.ChannelSpringMass_parameters_get, _heccer_base.ChannelSpringMass_parameters_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelSpringMass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelSpringMass
    __del__ = lambda self : None;
ChannelSpringMass_swigregister = _heccer_base.ChannelSpringMass_swigregister
ChannelSpringMass_swigregister(ChannelSpringMass)

class ExponentialDecay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExponentialDecay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExponentialDecay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ExponentialDecay_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ExponentialDecay_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ExponentialDecay_mc_get, _heccer_base.ExponentialDecay_mc_set)
    __swig_setmethods__["dInitValue"] = _heccer_base.ExponentialDecay_dInitValue_set
    __swig_getmethods__["dInitValue"] = _heccer_base.ExponentialDecay_dInitValue_get
    if _newclass:dInitValue = _swig_property(_heccer_base.ExponentialDecay_dInitValue_get, _heccer_base.ExponentialDecay_dInitValue_set)
    __swig_setmethods__["dBeta"] = _heccer_base.ExponentialDecay_dBeta_set
    __swig_getmethods__["dBeta"] = _heccer_base.ExponentialDecay_dBeta_get
    if _newclass:dBeta = _swig_property(_heccer_base.ExponentialDecay_dBeta_get, _heccer_base.ExponentialDecay_dBeta_set)
    __swig_setmethods__["dSteadyState"] = _heccer_base.ExponentialDecay_dSteadyState_set
    __swig_getmethods__["dSteadyState"] = _heccer_base.ExponentialDecay_dSteadyState_get
    if _newclass:dSteadyState = _swig_property(_heccer_base.ExponentialDecay_dSteadyState_get, _heccer_base.ExponentialDecay_dSteadyState_set)
    __swig_setmethods__["dTau"] = _heccer_base.ExponentialDecay_dTau_set
    __swig_getmethods__["dTau"] = _heccer_base.ExponentialDecay_dTau_get
    if _newclass:dTau = _swig_property(_heccer_base.ExponentialDecay_dTau_get, _heccer_base.ExponentialDecay_dTau_set)
    __swig_setmethods__["piExternal"] = _heccer_base.ExponentialDecay_piExternal_set
    __swig_getmethods__["piExternal"] = _heccer_base.ExponentialDecay_piExternal_get
    if _newclass:piExternal = _swig_property(_heccer_base.ExponentialDecay_piExternal_get, _heccer_base.ExponentialDecay_piExternal_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ExponentialDecay(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ExponentialDecay
    __del__ = lambda self : None;
ExponentialDecay_swigregister = _heccer_base.ExponentialDecay_swigregister
ExponentialDecay_swigregister(ExponentialDecay)
EXPONENTIALDECAY_CONTRIBUTORS = _heccer_base.EXPONENTIALDECAY_CONTRIBUTORS

class ConstantNernst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantNernst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantNernst, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ConstantNernst_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ConstantNernst_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ConstantNernst_mc_get, _heccer_base.ConstantNernst_mc_set)
    __swig_setmethods__["dCin"] = _heccer_base.ConstantNernst_dCin_set
    __swig_getmethods__["dCin"] = _heccer_base.ConstantNernst_dCin_get
    if _newclass:dCin = _swig_property(_heccer_base.ConstantNernst_dCin_get, _heccer_base.ConstantNernst_dCin_set)
    __swig_setmethods__["dConstant"] = _heccer_base.ConstantNernst_dConstant_set
    __swig_getmethods__["dConstant"] = _heccer_base.ConstantNernst_dConstant_get
    if _newclass:dConstant = _swig_property(_heccer_base.ConstantNernst_dConstant_get, _heccer_base.ConstantNernst_dConstant_set)
    __swig_setmethods__["dCout"] = _heccer_base.ConstantNernst_dCout_set
    __swig_getmethods__["dCout"] = _heccer_base.ConstantNernst_dCout_get
    if _newclass:dCout = _swig_property(_heccer_base.ConstantNernst_dCout_get, _heccer_base.ConstantNernst_dCout_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ConstantNernst(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ConstantNernst
    __del__ = lambda self : None;
ConstantNernst_swigregister = _heccer_base.ConstantNernst_swigregister
ConstantNernst_swigregister(ConstantNernst)

class ExternalNernst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalNernst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalNernst, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ExternalNernst_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ExternalNernst_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ExternalNernst_mc_get, _heccer_base.ExternalNernst_mc_set)
    __swig_setmethods__["dConstant"] = _heccer_base.ExternalNernst_dConstant_set
    __swig_getmethods__["dConstant"] = _heccer_base.ExternalNernst_dConstant_get
    if _newclass:dConstant = _swig_property(_heccer_base.ExternalNernst_dConstant_get, _heccer_base.ExternalNernst_dConstant_set)
    __swig_setmethods__["dInternal"] = _heccer_base.ExternalNernst_dInternal_set
    __swig_getmethods__["dInternal"] = _heccer_base.ExternalNernst_dInternal_get
    if _newclass:dInternal = _swig_property(_heccer_base.ExternalNernst_dInternal_get, _heccer_base.ExternalNernst_dInternal_set)
    __swig_setmethods__["iExternal"] = _heccer_base.ExternalNernst_iExternal_set
    __swig_getmethods__["iExternal"] = _heccer_base.ExternalNernst_iExternal_get
    if _newclass:iExternal = _swig_property(_heccer_base.ExternalNernst_iExternal_get, _heccer_base.ExternalNernst_iExternal_set)
    __swig_setmethods__["dInitPotential"] = _heccer_base.ExternalNernst_dInitPotential_set
    __swig_getmethods__["dInitPotential"] = _heccer_base.ExternalNernst_dInitPotential_get
    if _newclass:dInitPotential = _swig_property(_heccer_base.ExternalNernst_dInitPotential_get, _heccer_base.ExternalNernst_dInitPotential_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ExternalNernst(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ExternalNernst
    __del__ = lambda self : None;
ExternalNernst_swigregister = _heccer_base.ExternalNernst_swigregister
ExternalNernst_swigregister(ExternalNernst)

class InternalNernst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternalNernst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InternalNernst, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.InternalNernst_mc_set
    __swig_getmethods__["mc"] = _heccer_base.InternalNernst_mc_get
    if _newclass:mc = _swig_property(_heccer_base.InternalNernst_mc_get, _heccer_base.InternalNernst_mc_set)
    __swig_setmethods__["dConstant"] = _heccer_base.InternalNernst_dConstant_set
    __swig_getmethods__["dConstant"] = _heccer_base.InternalNernst_dConstant_get
    if _newclass:dConstant = _swig_property(_heccer_base.InternalNernst_dConstant_get, _heccer_base.InternalNernst_dConstant_set)
    __swig_setmethods__["iInternal"] = _heccer_base.InternalNernst_iInternal_set
    __swig_getmethods__["iInternal"] = _heccer_base.InternalNernst_iInternal_get
    if _newclass:iInternal = _swig_property(_heccer_base.InternalNernst_iInternal_get, _heccer_base.InternalNernst_iInternal_set)
    __swig_setmethods__["dExternal"] = _heccer_base.InternalNernst_dExternal_set
    __swig_getmethods__["dExternal"] = _heccer_base.InternalNernst_dExternal_get
    if _newclass:dExternal = _swig_property(_heccer_base.InternalNernst_dExternal_get, _heccer_base.InternalNernst_dExternal_set)
    __swig_setmethods__["dInitPotential"] = _heccer_base.InternalNernst_dInitPotential_set
    __swig_getmethods__["dInitPotential"] = _heccer_base.InternalNernst_dInitPotential_get
    if _newclass:dInitPotential = _swig_property(_heccer_base.InternalNernst_dInitPotential_get, _heccer_base.InternalNernst_dInitPotential_set)
    def __init__(self, *args): 
        this = _heccer_base.new_InternalNernst(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_InternalNernst
    __del__ = lambda self : None;
InternalNernst_swigregister = _heccer_base.InternalNernst_swigregister
InternalNernst_swigregister(InternalNernst)

class SpikeGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpikeGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpikeGenerator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.SpikeGenerator_mc_set
    __swig_getmethods__["mc"] = _heccer_base.SpikeGenerator_mc_get
    if _newclass:mc = _swig_property(_heccer_base.SpikeGenerator_mc_get, _heccer_base.SpikeGenerator_mc_set)
    __swig_setmethods__["dRefractory"] = _heccer_base.SpikeGenerator_dRefractory_set
    __swig_getmethods__["dRefractory"] = _heccer_base.SpikeGenerator_dRefractory_get
    if _newclass:dRefractory = _swig_property(_heccer_base.SpikeGenerator_dRefractory_get, _heccer_base.SpikeGenerator_dRefractory_set)
    __swig_setmethods__["dThreshold"] = _heccer_base.SpikeGenerator_dThreshold_set
    __swig_getmethods__["dThreshold"] = _heccer_base.SpikeGenerator_dThreshold_get
    if _newclass:dThreshold = _swig_property(_heccer_base.SpikeGenerator_dThreshold_get, _heccer_base.SpikeGenerator_dThreshold_set)
    __swig_setmethods__["dReset"] = _heccer_base.SpikeGenerator_dReset_set
    __swig_getmethods__["dReset"] = _heccer_base.SpikeGenerator_dReset_get
    if _newclass:dReset = _swig_property(_heccer_base.SpikeGenerator_dReset_get, _heccer_base.SpikeGenerator_dReset_set)
    __swig_setmethods__["iSource2Targets"] = _heccer_base.SpikeGenerator_iSource2Targets_set
    __swig_getmethods__["iSource2Targets"] = _heccer_base.SpikeGenerator_iSource2Targets_get
    if _newclass:iSource2Targets = _swig_property(_heccer_base.SpikeGenerator_iSource2Targets_get, _heccer_base.SpikeGenerator_iSource2Targets_set)
    def __init__(self, *args): 
        this = _heccer_base.new_SpikeGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_SpikeGenerator
    __del__ = lambda self : None;
SpikeGenerator_swigregister = _heccer_base.SpikeGenerator_swigregister
SpikeGenerator_swigregister(SpikeGenerator)

class GateKinetic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GateKinetic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GateKinetic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dHHAddNum"] = _heccer_base.GateKinetic_dHHAddNum_set
    __swig_getmethods__["dHHAddNum"] = _heccer_base.GateKinetic_dHHAddNum_get
    if _newclass:dHHAddNum = _swig_property(_heccer_base.GateKinetic_dHHAddNum_get, _heccer_base.GateKinetic_dHHAddNum_set)
    __swig_setmethods__["dHHMult"] = _heccer_base.GateKinetic_dHHMult_set
    __swig_getmethods__["dHHMult"] = _heccer_base.GateKinetic_dHHMult_get
    if _newclass:dHHMult = _swig_property(_heccer_base.GateKinetic_dHHMult_get, _heccer_base.GateKinetic_dHHMult_set)
    __swig_setmethods__["dHHOffsetM"] = _heccer_base.GateKinetic_dHHOffsetM_set
    __swig_getmethods__["dHHOffsetM"] = _heccer_base.GateKinetic_dHHOffsetM_get
    if _newclass:dHHOffsetM = _swig_property(_heccer_base.GateKinetic_dHHOffsetM_get, _heccer_base.GateKinetic_dHHOffsetM_set)
    __swig_setmethods__["iHHFactorFlag"] = _heccer_base.GateKinetic_iHHFactorFlag_set
    __swig_getmethods__["iHHFactorFlag"] = _heccer_base.GateKinetic_iHHFactorFlag_get
    if _newclass:iHHFactorFlag = _swig_property(_heccer_base.GateKinetic_iHHFactorFlag_get, _heccer_base.GateKinetic_iHHFactorFlag_set)
    __swig_setmethods__["dHHAddDen"] = _heccer_base.GateKinetic_dHHAddDen_set
    __swig_getmethods__["dHHAddDen"] = _heccer_base.GateKinetic_dHHAddDen_get
    if _newclass:dHHAddDen = _swig_property(_heccer_base.GateKinetic_dHHAddDen_get, _heccer_base.GateKinetic_dHHAddDen_set)
    __swig_setmethods__["dHHOffsetE"] = _heccer_base.GateKinetic_dHHOffsetE_set
    __swig_getmethods__["dHHOffsetE"] = _heccer_base.GateKinetic_dHHOffsetE_get
    if _newclass:dHHOffsetE = _swig_property(_heccer_base.GateKinetic_dHHOffsetE_get, _heccer_base.GateKinetic_dHHOffsetE_set)
    __swig_setmethods__["dHHDivE"] = _heccer_base.GateKinetic_dHHDivE_set
    __swig_getmethods__["dHHDivE"] = _heccer_base.GateKinetic_dHHDivE_get
    if _newclass:dHHDivE = _swig_property(_heccer_base.GateKinetic_dHHDivE_get, _heccer_base.GateKinetic_dHHDivE_set)
    __swig_setmethods__["dHHMultExp"] = _heccer_base.GateKinetic_dHHMultExp_set
    __swig_getmethods__["dHHMultExp"] = _heccer_base.GateKinetic_dHHMultExp_get
    if _newclass:dHHMultExp = _swig_property(_heccer_base.GateKinetic_dHHMultExp_get, _heccer_base.GateKinetic_dHHMultExp_set)
    def __init__(self, *args): 
        this = _heccer_base.new_GateKinetic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_GateKinetic
    __del__ = lambda self : None;
GateKinetic_swigregister = _heccer_base.GateKinetic_swigregister
GateKinetic_swigregister(GateKinetic)

class GateConceptParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GateConceptParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GateConceptParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gkA"] = _heccer_base.GateConceptParameters_gkA_set
    __swig_getmethods__["gkA"] = _heccer_base.GateConceptParameters_gkA_get
    if _newclass:gkA = _swig_property(_heccer_base.GateConceptParameters_gkA_get, _heccer_base.GateConceptParameters_gkA_set)
    __swig_setmethods__["gkB"] = _heccer_base.GateConceptParameters_gkB_set
    __swig_getmethods__["gkB"] = _heccer_base.GateConceptParameters_gkB_get
    if _newclass:gkB = _swig_property(_heccer_base.GateConceptParameters_gkB_get, _heccer_base.GateConceptParameters_gkB_set)
    def __init__(self, *args): 
        this = _heccer_base.new_GateConceptParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_GateConceptParameters
    __del__ = lambda self : None;
GateConceptParameters_swigregister = _heccer_base.GateConceptParameters_swigregister
GateConceptParameters_swigregister(GateConceptParameters)

class GateConcept(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GateConcept, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GateConcept, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dInitActivation"] = _heccer_base.GateConcept_dInitActivation_set
    __swig_getmethods__["dInitActivation"] = _heccer_base.GateConcept_dInitActivation_get
    if _newclass:dInitActivation = _swig_property(_heccer_base.GateConcept_dInitActivation_get, _heccer_base.GateConcept_dInitActivation_set)
    __swig_setmethods__["iTable"] = _heccer_base.GateConcept_iTable_set
    __swig_getmethods__["iTable"] = _heccer_base.GateConcept_iTable_get
    if _newclass:iTable = _swig_property(_heccer_base.GateConcept_iTable_get, _heccer_base.GateConcept_iTable_set)
    __swig_setmethods__["parameters"] = _heccer_base.GateConcept_parameters_set
    __swig_getmethods__["parameters"] = _heccer_base.GateConcept_parameters_get
    if _newclass:parameters = _swig_property(_heccer_base.GateConcept_parameters_get, _heccer_base.GateConcept_parameters_set)
    __swig_setmethods__["htg"] = _heccer_base.GateConcept_htg_set
    __swig_getmethods__["htg"] = _heccer_base.GateConcept_htg_get
    if _newclass:htg = _swig_property(_heccer_base.GateConcept_htg_get, _heccer_base.GateConcept_htg_set)
    def __init__(self, *args): 
        this = _heccer_base.new_GateConcept(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_GateConcept
    __del__ = lambda self : None;
GateConcept_swigregister = _heccer_base.GateConcept_swigregister
GateConcept_swigregister(GateConcept)

class PoweredGateConcept(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoweredGateConcept, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoweredGateConcept, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iPower"] = _heccer_base.PoweredGateConcept_iPower_set
    __swig_getmethods__["iPower"] = _heccer_base.PoweredGateConcept_iPower_get
    if _newclass:iPower = _swig_property(_heccer_base.PoweredGateConcept_iPower_get, _heccer_base.PoweredGateConcept_iPower_set)
    __swig_setmethods__["gc"] = _heccer_base.PoweredGateConcept_gc_set
    __swig_getmethods__["gc"] = _heccer_base.PoweredGateConcept_gc_get
    if _newclass:gc = _swig_property(_heccer_base.PoweredGateConcept_gc_get, _heccer_base.PoweredGateConcept_gc_set)
    def __init__(self, *args): 
        this = _heccer_base.new_PoweredGateConcept(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_PoweredGateConcept
    __del__ = lambda self : None;
PoweredGateConcept_swigregister = _heccer_base.PoweredGateConcept_swigregister
PoweredGateConcept_swigregister(PoweredGateConcept)

class ChannelActInact(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelActInact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelActInact, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ChannelActInact_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ChannelActInact_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ChannelActInact_mc_get, _heccer_base.ChannelActInact_mc_set)
    __swig_setmethods__["dReversalPotential"] = _heccer_base.ChannelActInact_dReversalPotential_set
    __swig_getmethods__["dReversalPotential"] = _heccer_base.ChannelActInact_dReversalPotential_get
    if _newclass:dReversalPotential = _swig_property(_heccer_base.ChannelActInact_dReversalPotential_get, _heccer_base.ChannelActInact_dReversalPotential_set)
    __swig_setmethods__["iReversalPotential"] = _heccer_base.ChannelActInact_iReversalPotential_set
    __swig_getmethods__["iReversalPotential"] = _heccer_base.ChannelActInact_iReversalPotential_get
    if _newclass:iReversalPotential = _swig_property(_heccer_base.ChannelActInact_iReversalPotential_get, _heccer_base.ChannelActInact_iReversalPotential_set)
    __swig_setmethods__["dMaximalConductance"] = _heccer_base.ChannelActInact_dMaximalConductance_set
    __swig_getmethods__["dMaximalConductance"] = _heccer_base.ChannelActInact_dMaximalConductance_get
    if _newclass:dMaximalConductance = _swig_property(_heccer_base.ChannelActInact_dMaximalConductance_get, _heccer_base.ChannelActInact_dMaximalConductance_set)
    __swig_setmethods__["iPool"] = _heccer_base.ChannelActInact_iPool_set
    __swig_getmethods__["iPool"] = _heccer_base.ChannelActInact_iPool_get
    if _newclass:iPool = _swig_property(_heccer_base.ChannelActInact_iPool_get, _heccer_base.ChannelActInact_iPool_set)
    __swig_setmethods__["pgcActivation"] = _heccer_base.ChannelActInact_pgcActivation_set
    __swig_getmethods__["pgcActivation"] = _heccer_base.ChannelActInact_pgcActivation_get
    if _newclass:pgcActivation = _swig_property(_heccer_base.ChannelActInact_pgcActivation_get, _heccer_base.ChannelActInact_pgcActivation_set)
    __swig_setmethods__["pgcInactivation"] = _heccer_base.ChannelActInact_pgcInactivation_set
    __swig_getmethods__["pgcInactivation"] = _heccer_base.ChannelActInact_pgcInactivation_get
    if _newclass:pgcInactivation = _swig_property(_heccer_base.ChannelActInact_pgcInactivation_get, _heccer_base.ChannelActInact_pgcInactivation_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelActInact(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelActInact
    __del__ = lambda self : None;
ChannelActInact_swigregister = _heccer_base.ChannelActInact_swigregister
ChannelActInact_swigregister(ChannelActInact)

class ChannelAct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelAct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelAct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ChannelAct_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ChannelAct_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ChannelAct_mc_get, _heccer_base.ChannelAct_mc_set)
    __swig_setmethods__["dReversalPotential"] = _heccer_base.ChannelAct_dReversalPotential_set
    __swig_getmethods__["dReversalPotential"] = _heccer_base.ChannelAct_dReversalPotential_get
    if _newclass:dReversalPotential = _swig_property(_heccer_base.ChannelAct_dReversalPotential_get, _heccer_base.ChannelAct_dReversalPotential_set)
    __swig_setmethods__["iReversalPotential"] = _heccer_base.ChannelAct_iReversalPotential_set
    __swig_getmethods__["iReversalPotential"] = _heccer_base.ChannelAct_iReversalPotential_get
    if _newclass:iReversalPotential = _swig_property(_heccer_base.ChannelAct_iReversalPotential_get, _heccer_base.ChannelAct_iReversalPotential_set)
    __swig_setmethods__["dMaximalConductance"] = _heccer_base.ChannelAct_dMaximalConductance_set
    __swig_getmethods__["dMaximalConductance"] = _heccer_base.ChannelAct_dMaximalConductance_get
    if _newclass:dMaximalConductance = _swig_property(_heccer_base.ChannelAct_dMaximalConductance_get, _heccer_base.ChannelAct_dMaximalConductance_set)
    __swig_setmethods__["iPool"] = _heccer_base.ChannelAct_iPool_set
    __swig_getmethods__["iPool"] = _heccer_base.ChannelAct_iPool_get
    if _newclass:iPool = _swig_property(_heccer_base.ChannelAct_iPool_get, _heccer_base.ChannelAct_iPool_set)
    __swig_setmethods__["pgc"] = _heccer_base.ChannelAct_pgc_set
    __swig_getmethods__["pgc"] = _heccer_base.ChannelAct_pgc_get
    if _newclass:pgc = _swig_property(_heccer_base.ChannelAct_pgc_get, _heccer_base.ChannelAct_pgc_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelAct(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelAct
    __del__ = lambda self : None;
ChannelAct_swigregister = _heccer_base.ChannelAct_swigregister
ChannelAct_swigregister(ChannelAct)

class DualTauParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DualTauParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DualTauParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dSteadyState"] = _heccer_base.DualTauParameters_dSteadyState_set
    __swig_getmethods__["dSteadyState"] = _heccer_base.DualTauParameters_dSteadyState_get
    if _newclass:dSteadyState = _swig_property(_heccer_base.DualTauParameters_dSteadyState_get, _heccer_base.DualTauParameters_dSteadyState_set)
    __swig_getmethods__["tau"] = _heccer_base.DualTauParameters_tau_get
    if _newclass:tau = _swig_property(_heccer_base.DualTauParameters_tau_get)
    def __init__(self, *args): 
        this = _heccer_base.new_DualTauParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_DualTauParameters
    __del__ = lambda self : None;
DualTauParameters_swigregister = _heccer_base.DualTauParameters_swigregister
DualTauParameters_swigregister(DualTauParameters)

class DualTauParameters_tau(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DualTauParameters_tau, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DualTauParameters_tau, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dMultiplier"] = _heccer_base.DualTauParameters_tau_dMultiplier_set
    __swig_getmethods__["dMultiplier"] = _heccer_base.DualTauParameters_tau_dMultiplier_get
    if _newclass:dMultiplier = _swig_property(_heccer_base.DualTauParameters_tau_dMultiplier_get, _heccer_base.DualTauParameters_tau_dMultiplier_set)
    __swig_setmethods__["dDeNominatorOffset"] = _heccer_base.DualTauParameters_tau_dDeNominatorOffset_set
    __swig_getmethods__["dDeNominatorOffset"] = _heccer_base.DualTauParameters_tau_dDeNominatorOffset_get
    if _newclass:dDeNominatorOffset = _swig_property(_heccer_base.DualTauParameters_tau_dDeNominatorOffset_get, _heccer_base.DualTauParameters_tau_dDeNominatorOffset_set)
    __swig_setmethods__["dMembraneOffset"] = _heccer_base.DualTauParameters_tau_dMembraneOffset_set
    __swig_getmethods__["dMembraneOffset"] = _heccer_base.DualTauParameters_tau_dMembraneOffset_get
    if _newclass:dMembraneOffset = _swig_property(_heccer_base.DualTauParameters_tau_dMembraneOffset_get, _heccer_base.DualTauParameters_tau_dMembraneOffset_set)
    __swig_setmethods__["dTauDenormalizer"] = _heccer_base.DualTauParameters_tau_dTauDenormalizer_set
    __swig_getmethods__["dTauDenormalizer"] = _heccer_base.DualTauParameters_tau_dTauDenormalizer_get
    if _newclass:dTauDenormalizer = _swig_property(_heccer_base.DualTauParameters_tau_dTauDenormalizer_get, _heccer_base.DualTauParameters_tau_dTauDenormalizer_set)
    def __init__(self, *args): 
        this = _heccer_base.new_DualTauParameters_tau(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_DualTauParameters_tau
    __del__ = lambda self : None;
DualTauParameters_tau_swigregister = _heccer_base.DualTauParameters_tau_swigregister
DualTauParameters_tau_swigregister(DualTauParameters_tau)

class ChannelPersistentSteadyStateDualTau(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelPersistentSteadyStateDualTau, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelPersistentSteadyStateDualTau, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ChannelPersistentSteadyStateDualTau_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ChannelPersistentSteadyStateDualTau_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_mc_get, _heccer_base.ChannelPersistentSteadyStateDualTau_mc_set)
    __swig_setmethods__["dReversalPotential"] = _heccer_base.ChannelPersistentSteadyStateDualTau_dReversalPotential_set
    __swig_getmethods__["dReversalPotential"] = _heccer_base.ChannelPersistentSteadyStateDualTau_dReversalPotential_get
    if _newclass:dReversalPotential = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_dReversalPotential_get, _heccer_base.ChannelPersistentSteadyStateDualTau_dReversalPotential_set)
    __swig_setmethods__["iReversalPotential"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iReversalPotential_set
    __swig_getmethods__["iReversalPotential"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iReversalPotential_get
    if _newclass:iReversalPotential = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_iReversalPotential_get, _heccer_base.ChannelPersistentSteadyStateDualTau_iReversalPotential_set)
    __swig_setmethods__["dMaximalConductance"] = _heccer_base.ChannelPersistentSteadyStateDualTau_dMaximalConductance_set
    __swig_getmethods__["dMaximalConductance"] = _heccer_base.ChannelPersistentSteadyStateDualTau_dMaximalConductance_get
    if _newclass:dMaximalConductance = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_dMaximalConductance_get, _heccer_base.ChannelPersistentSteadyStateDualTau_dMaximalConductance_set)
    __swig_setmethods__["iPool"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iPool_set
    __swig_getmethods__["iPool"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iPool_get
    if _newclass:iPool = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_iPool_get, _heccer_base.ChannelPersistentSteadyStateDualTau_iPool_set)
    __swig_setmethods__["iFirstPower"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iFirstPower_set
    __swig_getmethods__["iFirstPower"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iFirstPower_get
    if _newclass:iFirstPower = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_iFirstPower_get, _heccer_base.ChannelPersistentSteadyStateDualTau_iFirstPower_set)
    __swig_setmethods__["iSecondPower"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iSecondPower_set
    __swig_getmethods__["iSecondPower"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iSecondPower_get
    if _newclass:iSecondPower = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_iSecondPower_get, _heccer_base.ChannelPersistentSteadyStateDualTau_iSecondPower_set)
    __swig_setmethods__["iFirstTable"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iFirstTable_set
    __swig_getmethods__["iFirstTable"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iFirstTable_get
    if _newclass:iFirstTable = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_iFirstTable_get, _heccer_base.ChannelPersistentSteadyStateDualTau_iFirstTable_set)
    __swig_setmethods__["iSecondTable"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iSecondTable_set
    __swig_getmethods__["iSecondTable"] = _heccer_base.ChannelPersistentSteadyStateDualTau_iSecondTable_get
    if _newclass:iSecondTable = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_iSecondTable_get, _heccer_base.ChannelPersistentSteadyStateDualTau_iSecondTable_set)
    __swig_setmethods__["dFirstInitActivation"] = _heccer_base.ChannelPersistentSteadyStateDualTau_dFirstInitActivation_set
    __swig_getmethods__["dFirstInitActivation"] = _heccer_base.ChannelPersistentSteadyStateDualTau_dFirstInitActivation_get
    if _newclass:dFirstInitActivation = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_dFirstInitActivation_get, _heccer_base.ChannelPersistentSteadyStateDualTau_dFirstInitActivation_set)
    __swig_setmethods__["dSecondInitActivation"] = _heccer_base.ChannelPersistentSteadyStateDualTau_dSecondInitActivation_set
    __swig_getmethods__["dSecondInitActivation"] = _heccer_base.ChannelPersistentSteadyStateDualTau_dSecondInitActivation_get
    if _newclass:dSecondInitActivation = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_dSecondInitActivation_get, _heccer_base.ChannelPersistentSteadyStateDualTau_dSecondInitActivation_set)
    __swig_setmethods__["parameters1"] = _heccer_base.ChannelPersistentSteadyStateDualTau_parameters1_set
    __swig_getmethods__["parameters1"] = _heccer_base.ChannelPersistentSteadyStateDualTau_parameters1_get
    if _newclass:parameters1 = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_parameters1_get, _heccer_base.ChannelPersistentSteadyStateDualTau_parameters1_set)
    __swig_setmethods__["parameters2"] = _heccer_base.ChannelPersistentSteadyStateDualTau_parameters2_set
    __swig_getmethods__["parameters2"] = _heccer_base.ChannelPersistentSteadyStateDualTau_parameters2_get
    if _newclass:parameters2 = _swig_property(_heccer_base.ChannelPersistentSteadyStateDualTau_parameters2_get, _heccer_base.ChannelPersistentSteadyStateDualTau_parameters2_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelPersistentSteadyStateDualTau(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelPersistentSteadyStateDualTau
    __del__ = lambda self : None;
ChannelPersistentSteadyStateDualTau_swigregister = _heccer_base.ChannelPersistentSteadyStateDualTau_swigregister
ChannelPersistentSteadyStateDualTau_swigregister(ChannelPersistentSteadyStateDualTau)

class ChannelPersistentSteadyStateTau(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelPersistentSteadyStateTau, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelPersistentSteadyStateTau, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ChannelPersistentSteadyStateTau_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ChannelPersistentSteadyStateTau_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_mc_get, _heccer_base.ChannelPersistentSteadyStateTau_mc_set)
    __swig_setmethods__["dReversalPotential"] = _heccer_base.ChannelPersistentSteadyStateTau_dReversalPotential_set
    __swig_getmethods__["dReversalPotential"] = _heccer_base.ChannelPersistentSteadyStateTau_dReversalPotential_get
    if _newclass:dReversalPotential = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_dReversalPotential_get, _heccer_base.ChannelPersistentSteadyStateTau_dReversalPotential_set)
    __swig_setmethods__["iReversalPotential"] = _heccer_base.ChannelPersistentSteadyStateTau_iReversalPotential_set
    __swig_getmethods__["iReversalPotential"] = _heccer_base.ChannelPersistentSteadyStateTau_iReversalPotential_get
    if _newclass:iReversalPotential = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_iReversalPotential_get, _heccer_base.ChannelPersistentSteadyStateTau_iReversalPotential_set)
    __swig_setmethods__["dMaximalConductance"] = _heccer_base.ChannelPersistentSteadyStateTau_dMaximalConductance_set
    __swig_getmethods__["dMaximalConductance"] = _heccer_base.ChannelPersistentSteadyStateTau_dMaximalConductance_get
    if _newclass:dMaximalConductance = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_dMaximalConductance_get, _heccer_base.ChannelPersistentSteadyStateTau_dMaximalConductance_set)
    __swig_setmethods__["iPool"] = _heccer_base.ChannelPersistentSteadyStateTau_iPool_set
    __swig_getmethods__["iPool"] = _heccer_base.ChannelPersistentSteadyStateTau_iPool_get
    if _newclass:iPool = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_iPool_get, _heccer_base.ChannelPersistentSteadyStateTau_iPool_set)
    __swig_setmethods__["iPower"] = _heccer_base.ChannelPersistentSteadyStateTau_iPower_set
    __swig_getmethods__["iPower"] = _heccer_base.ChannelPersistentSteadyStateTau_iPower_get
    if _newclass:iPower = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_iPower_get, _heccer_base.ChannelPersistentSteadyStateTau_iPower_set)
    __swig_setmethods__["iTable"] = _heccer_base.ChannelPersistentSteadyStateTau_iTable_set
    __swig_getmethods__["iTable"] = _heccer_base.ChannelPersistentSteadyStateTau_iTable_get
    if _newclass:iTable = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_iTable_get, _heccer_base.ChannelPersistentSteadyStateTau_iTable_set)
    __swig_setmethods__["dInitActivation"] = _heccer_base.ChannelPersistentSteadyStateTau_dInitActivation_set
    __swig_getmethods__["dInitActivation"] = _heccer_base.ChannelPersistentSteadyStateTau_dInitActivation_get
    if _newclass:dInitActivation = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_dInitActivation_get, _heccer_base.ChannelPersistentSteadyStateTau_dInitActivation_set)
    __swig_getmethods__["parameters"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_get
    if _newclass:parameters = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_get)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelPersistentSteadyStateTau(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelPersistentSteadyStateTau
    __del__ = lambda self : None;
ChannelPersistentSteadyStateTau_swigregister = _heccer_base.ChannelPersistentSteadyStateTau_swigregister
ChannelPersistentSteadyStateTau_swigregister(ChannelPersistentSteadyStateTau)

class ChannelPersistentSteadyStateTau_parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelPersistentSteadyStateTau_parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelPersistentSteadyStateTau_parameters, name)
    __repr__ = _swig_repr
    __swig_getmethods__["tc"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_get
    if _newclass:tc = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_get)
    __swig_getmethods__["ss"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_get
    if _newclass:ss = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_get)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelPersistentSteadyStateTau_parameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelPersistentSteadyStateTau_parameters
    __del__ = lambda self : None;
ChannelPersistentSteadyStateTau_parameters_swigregister = _heccer_base.ChannelPersistentSteadyStateTau_parameters_swigregister
ChannelPersistentSteadyStateTau_parameters_swigregister(ChannelPersistentSteadyStateTau_parameters)

class ChannelPersistentSteadyStateTau_parameters_tc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelPersistentSteadyStateTau_parameters_tc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelPersistentSteadyStateTau_parameters_tc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dNominator"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dNominator_set
    __swig_getmethods__["dNominator"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dNominator_get
    if _newclass:dNominator = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dNominator_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dNominator_set)
    __swig_setmethods__["dDeNominatorOffset"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dDeNominatorOffset_set
    __swig_getmethods__["dDeNominatorOffset"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dDeNominatorOffset_get
    if _newclass:dDeNominatorOffset = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dDeNominatorOffset_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dDeNominatorOffset_set)
    __swig_setmethods__["dMembraneOffset"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dMembraneOffset_set
    __swig_getmethods__["dMembraneOffset"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dMembraneOffset_get
    if _newclass:dMembraneOffset = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dMembraneOffset_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dMembraneOffset_set)
    __swig_setmethods__["dTauDenormalizer"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dTauDenormalizer_set
    __swig_getmethods__["dTauDenormalizer"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dTauDenormalizer_get
    if _newclass:dTauDenormalizer = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dTauDenormalizer_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_dTauDenormalizer_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelPersistentSteadyStateTau_parameters_tc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelPersistentSteadyStateTau_parameters_tc
    __del__ = lambda self : None;
ChannelPersistentSteadyStateTau_parameters_tc_swigregister = _heccer_base.ChannelPersistentSteadyStateTau_parameters_tc_swigregister
ChannelPersistentSteadyStateTau_parameters_tc_swigregister(ChannelPersistentSteadyStateTau_parameters_tc)

class ChannelPersistentSteadyStateTau_parameters_ss(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelPersistentSteadyStateTau_parameters_ss, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelPersistentSteadyStateTau_parameters_ss, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dNominator"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dNominator_set
    __swig_getmethods__["dNominator"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dNominator_get
    if _newclass:dNominator = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dNominator_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dNominator_set)
    __swig_setmethods__["dMultiplier1"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMultiplier1_set
    __swig_getmethods__["dMultiplier1"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMultiplier1_get
    if _newclass:dMultiplier1 = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMultiplier1_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMultiplier1_set)
    __swig_setmethods__["dMembraneOffset1"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMembraneOffset1_set
    __swig_getmethods__["dMembraneOffset1"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMembraneOffset1_get
    if _newclass:dMembraneOffset1 = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMembraneOffset1_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMembraneOffset1_set)
    __swig_setmethods__["dTauDenormalizer1"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dTauDenormalizer1_set
    __swig_getmethods__["dTauDenormalizer1"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dTauDenormalizer1_get
    if _newclass:dTauDenormalizer1 = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dTauDenormalizer1_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dTauDenormalizer1_set)
    __swig_setmethods__["dMultiplier2"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMultiplier2_set
    __swig_getmethods__["dMultiplier2"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMultiplier2_get
    if _newclass:dMultiplier2 = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMultiplier2_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMultiplier2_set)
    __swig_setmethods__["dMembraneOffset2"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMembraneOffset2_set
    __swig_getmethods__["dMembraneOffset2"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMembraneOffset2_get
    if _newclass:dMembraneOffset2 = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMembraneOffset2_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dMembraneOffset2_set)
    __swig_setmethods__["dTauDenormalizer2"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dTauDenormalizer2_set
    __swig_getmethods__["dTauDenormalizer2"] = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dTauDenormalizer2_get
    if _newclass:dTauDenormalizer2 = _swig_property(_heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dTauDenormalizer2_get, _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_dTauDenormalizer2_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelPersistentSteadyStateTau_parameters_ss(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelPersistentSteadyStateTau_parameters_ss
    __del__ = lambda self : None;
ChannelPersistentSteadyStateTau_parameters_ss_swigregister = _heccer_base.ChannelPersistentSteadyStateTau_parameters_ss_swigregister
ChannelPersistentSteadyStateTau_parameters_ss_swigregister(ChannelPersistentSteadyStateTau_parameters_ss)

class DualSteadyStateParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DualSteadyStateParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DualSteadyStateParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["second"] = _heccer_base.DualSteadyStateParameters_second_set
    __swig_getmethods__["second"] = _heccer_base.DualSteadyStateParameters_second_get
    if _newclass:second = _swig_property(_heccer_base.DualSteadyStateParameters_second_get, _heccer_base.DualSteadyStateParameters_second_set)
    __swig_getmethods__["first"] = _heccer_base.DualSteadyStateParameters_first_get
    if _newclass:first = _swig_property(_heccer_base.DualSteadyStateParameters_first_get)
    def __init__(self, *args): 
        this = _heccer_base.new_DualSteadyStateParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_DualSteadyStateParameters
    __del__ = lambda self : None;
DualSteadyStateParameters_swigregister = _heccer_base.DualSteadyStateParameters_swigregister
DualSteadyStateParameters_swigregister(DualSteadyStateParameters)

class DualSteadyStateParameters_first(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DualSteadyStateParameters_first, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DualSteadyStateParameters_first, name)
    __repr__ = _swig_repr
    __swig_getmethods__["b"] = _heccer_base.DualSteadyStateParameters_first_b_get
    if _newclass:b = _swig_property(_heccer_base.DualSteadyStateParameters_first_b_get)
    __swig_getmethods__["a"] = _heccer_base.DualSteadyStateParameters_first_a_get
    if _newclass:a = _swig_property(_heccer_base.DualSteadyStateParameters_first_a_get)
    def __init__(self, *args): 
        this = _heccer_base.new_DualSteadyStateParameters_first(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_DualSteadyStateParameters_first
    __del__ = lambda self : None;
DualSteadyStateParameters_first_swigregister = _heccer_base.DualSteadyStateParameters_first_swigregister
DualSteadyStateParameters_first_swigregister(DualSteadyStateParameters_first)

class DualSteadyStateParameters_first_b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DualSteadyStateParameters_first_b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DualSteadyStateParameters_first_b, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dMultiplier"] = _heccer_base.DualSteadyStateParameters_first_b_dMultiplier_set
    __swig_getmethods__["dMultiplier"] = _heccer_base.DualSteadyStateParameters_first_b_dMultiplier_get
    if _newclass:dMultiplier = _swig_property(_heccer_base.DualSteadyStateParameters_first_b_dMultiplier_get, _heccer_base.DualSteadyStateParameters_first_b_dMultiplier_set)
    __swig_setmethods__["dTauDenormalizer"] = _heccer_base.DualSteadyStateParameters_first_b_dTauDenormalizer_set
    __swig_getmethods__["dTauDenormalizer"] = _heccer_base.DualSteadyStateParameters_first_b_dTauDenormalizer_get
    if _newclass:dTauDenormalizer = _swig_property(_heccer_base.DualSteadyStateParameters_first_b_dTauDenormalizer_get, _heccer_base.DualSteadyStateParameters_first_b_dTauDenormalizer_set)
    __swig_setmethods__["dMembraneDependenceOffset"] = _heccer_base.DualSteadyStateParameters_first_b_dMembraneDependenceOffset_set
    __swig_getmethods__["dMembraneDependenceOffset"] = _heccer_base.DualSteadyStateParameters_first_b_dMembraneDependenceOffset_get
    if _newclass:dMembraneDependenceOffset = _swig_property(_heccer_base.DualSteadyStateParameters_first_b_dMembraneDependenceOffset_get, _heccer_base.DualSteadyStateParameters_first_b_dMembraneDependenceOffset_set)
    def __init__(self, *args): 
        this = _heccer_base.new_DualSteadyStateParameters_first_b(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_DualSteadyStateParameters_first_b
    __del__ = lambda self : None;
DualSteadyStateParameters_first_b_swigregister = _heccer_base.DualSteadyStateParameters_first_b_swigregister
DualSteadyStateParameters_first_b_swigregister(DualSteadyStateParameters_first_b)

class DualSteadyStateParameters_first_a(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DualSteadyStateParameters_first_a, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DualSteadyStateParameters_first_a, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dMultiplier"] = _heccer_base.DualSteadyStateParameters_first_a_dMultiplier_set
    __swig_getmethods__["dMultiplier"] = _heccer_base.DualSteadyStateParameters_first_a_dMultiplier_get
    if _newclass:dMultiplier = _swig_property(_heccer_base.DualSteadyStateParameters_first_a_dMultiplier_get, _heccer_base.DualSteadyStateParameters_first_a_dMultiplier_set)
    __swig_setmethods__["dMembraneDependenceOffset"] = _heccer_base.DualSteadyStateParameters_first_a_dMembraneDependenceOffset_set
    __swig_getmethods__["dMembraneDependenceOffset"] = _heccer_base.DualSteadyStateParameters_first_a_dMembraneDependenceOffset_get
    if _newclass:dMembraneDependenceOffset = _swig_property(_heccer_base.DualSteadyStateParameters_first_a_dMembraneDependenceOffset_get, _heccer_base.DualSteadyStateParameters_first_a_dMembraneDependenceOffset_set)
    __swig_setmethods__["dDeNominatorOffset"] = _heccer_base.DualSteadyStateParameters_first_a_dDeNominatorOffset_set
    __swig_getmethods__["dDeNominatorOffset"] = _heccer_base.DualSteadyStateParameters_first_a_dDeNominatorOffset_get
    if _newclass:dDeNominatorOffset = _swig_property(_heccer_base.DualSteadyStateParameters_first_a_dDeNominatorOffset_get, _heccer_base.DualSteadyStateParameters_first_a_dDeNominatorOffset_set)
    __swig_setmethods__["dMembraneOffset"] = _heccer_base.DualSteadyStateParameters_first_a_dMembraneOffset_set
    __swig_getmethods__["dMembraneOffset"] = _heccer_base.DualSteadyStateParameters_first_a_dMembraneOffset_get
    if _newclass:dMembraneOffset = _swig_property(_heccer_base.DualSteadyStateParameters_first_a_dMembraneOffset_get, _heccer_base.DualSteadyStateParameters_first_a_dMembraneOffset_set)
    __swig_setmethods__["dTauDenormalizer"] = _heccer_base.DualSteadyStateParameters_first_a_dTauDenormalizer_set
    __swig_getmethods__["dTauDenormalizer"] = _heccer_base.DualSteadyStateParameters_first_a_dTauDenormalizer_get
    if _newclass:dTauDenormalizer = _swig_property(_heccer_base.DualSteadyStateParameters_first_a_dTauDenormalizer_get, _heccer_base.DualSteadyStateParameters_first_a_dTauDenormalizer_set)
    def __init__(self, *args): 
        this = _heccer_base.new_DualSteadyStateParameters_first_a(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_DualSteadyStateParameters_first_a
    __del__ = lambda self : None;
DualSteadyStateParameters_first_a_swigregister = _heccer_base.DualSteadyStateParameters_first_a_swigregister
DualSteadyStateParameters_first_a_swigregister(DualSteadyStateParameters_first_a)

class SteppedTimeConstantParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteppedTimeConstantParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SteppedTimeConstantParameters, name)
    __repr__ = _swig_repr
    __swig_getmethods__["b"] = _heccer_base.SteppedTimeConstantParameters_b_get
    if _newclass:b = _swig_property(_heccer_base.SteppedTimeConstantParameters_b_get)
    __swig_getmethods__["a"] = _heccer_base.SteppedTimeConstantParameters_a_get
    if _newclass:a = _swig_property(_heccer_base.SteppedTimeConstantParameters_a_get)
    def __init__(self, *args): 
        this = _heccer_base.new_SteppedTimeConstantParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_SteppedTimeConstantParameters
    __del__ = lambda self : None;
SteppedTimeConstantParameters_swigregister = _heccer_base.SteppedTimeConstantParameters_swigregister
SteppedTimeConstantParameters_swigregister(SteppedTimeConstantParameters)

class SteppedTimeConstantParameters_b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteppedTimeConstantParameters_b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SteppedTimeConstantParameters_b, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dDeNominatorOffset"] = _heccer_base.SteppedTimeConstantParameters_b_dDeNominatorOffset_set
    __swig_getmethods__["dDeNominatorOffset"] = _heccer_base.SteppedTimeConstantParameters_b_dDeNominatorOffset_get
    if _newclass:dDeNominatorOffset = _swig_property(_heccer_base.SteppedTimeConstantParameters_b_dDeNominatorOffset_get, _heccer_base.SteppedTimeConstantParameters_b_dDeNominatorOffset_set)
    __swig_setmethods__["dMembraneOffset"] = _heccer_base.SteppedTimeConstantParameters_b_dMembraneOffset_set
    __swig_getmethods__["dMembraneOffset"] = _heccer_base.SteppedTimeConstantParameters_b_dMembraneOffset_get
    if _newclass:dMembraneOffset = _swig_property(_heccer_base.SteppedTimeConstantParameters_b_dMembraneOffset_get, _heccer_base.SteppedTimeConstantParameters_b_dMembraneOffset_set)
    __swig_setmethods__["dTauDenormalizer"] = _heccer_base.SteppedTimeConstantParameters_b_dTauDenormalizer_set
    __swig_getmethods__["dTauDenormalizer"] = _heccer_base.SteppedTimeConstantParameters_b_dTauDenormalizer_get
    if _newclass:dTauDenormalizer = _swig_property(_heccer_base.SteppedTimeConstantParameters_b_dTauDenormalizer_get, _heccer_base.SteppedTimeConstantParameters_b_dTauDenormalizer_set)
    def __init__(self, *args): 
        this = _heccer_base.new_SteppedTimeConstantParameters_b(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_SteppedTimeConstantParameters_b
    __del__ = lambda self : None;
SteppedTimeConstantParameters_b_swigregister = _heccer_base.SteppedTimeConstantParameters_b_swigregister
SteppedTimeConstantParameters_b_swigregister(SteppedTimeConstantParameters_b)

class SteppedTimeConstantParameters_a(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteppedTimeConstantParameters_a, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SteppedTimeConstantParameters_a, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dThreshold"] = _heccer_base.SteppedTimeConstantParameters_a_dThreshold_set
    __swig_getmethods__["dThreshold"] = _heccer_base.SteppedTimeConstantParameters_a_dThreshold_get
    if _newclass:dThreshold = _swig_property(_heccer_base.SteppedTimeConstantParameters_a_dThreshold_get, _heccer_base.SteppedTimeConstantParameters_a_dThreshold_set)
    __swig_setmethods__["dLowTarget"] = _heccer_base.SteppedTimeConstantParameters_a_dLowTarget_set
    __swig_getmethods__["dLowTarget"] = _heccer_base.SteppedTimeConstantParameters_a_dLowTarget_get
    if _newclass:dLowTarget = _swig_property(_heccer_base.SteppedTimeConstantParameters_a_dLowTarget_get, _heccer_base.SteppedTimeConstantParameters_a_dLowTarget_set)
    __swig_setmethods__["dHighTarget"] = _heccer_base.SteppedTimeConstantParameters_a_dHighTarget_set
    __swig_getmethods__["dHighTarget"] = _heccer_base.SteppedTimeConstantParameters_a_dHighTarget_get
    if _newclass:dHighTarget = _swig_property(_heccer_base.SteppedTimeConstantParameters_a_dHighTarget_get, _heccer_base.SteppedTimeConstantParameters_a_dHighTarget_set)
    def __init__(self, *args): 
        this = _heccer_base.new_SteppedTimeConstantParameters_a(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_SteppedTimeConstantParameters_a
    __del__ = lambda self : None;
SteppedTimeConstantParameters_a_swigregister = _heccer_base.SteppedTimeConstantParameters_a_swigregister
SteppedTimeConstantParameters_a_swigregister(SteppedTimeConstantParameters_a)

class ChannelSteadyStateSteppedTau(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelSteadyStateSteppedTau, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelSteadyStateSteppedTau, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ChannelSteadyStateSteppedTau_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ChannelSteadyStateSteppedTau_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_mc_get, _heccer_base.ChannelSteadyStateSteppedTau_mc_set)
    __swig_setmethods__["dReversalPotential"] = _heccer_base.ChannelSteadyStateSteppedTau_dReversalPotential_set
    __swig_getmethods__["dReversalPotential"] = _heccer_base.ChannelSteadyStateSteppedTau_dReversalPotential_get
    if _newclass:dReversalPotential = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_dReversalPotential_get, _heccer_base.ChannelSteadyStateSteppedTau_dReversalPotential_set)
    __swig_setmethods__["iReversalPotential"] = _heccer_base.ChannelSteadyStateSteppedTau_iReversalPotential_set
    __swig_getmethods__["iReversalPotential"] = _heccer_base.ChannelSteadyStateSteppedTau_iReversalPotential_get
    if _newclass:iReversalPotential = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_iReversalPotential_get, _heccer_base.ChannelSteadyStateSteppedTau_iReversalPotential_set)
    __swig_setmethods__["dMaximalConductance"] = _heccer_base.ChannelSteadyStateSteppedTau_dMaximalConductance_set
    __swig_getmethods__["dMaximalConductance"] = _heccer_base.ChannelSteadyStateSteppedTau_dMaximalConductance_get
    if _newclass:dMaximalConductance = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_dMaximalConductance_get, _heccer_base.ChannelSteadyStateSteppedTau_dMaximalConductance_set)
    __swig_setmethods__["iPool"] = _heccer_base.ChannelSteadyStateSteppedTau_iPool_set
    __swig_getmethods__["iPool"] = _heccer_base.ChannelSteadyStateSteppedTau_iPool_get
    if _newclass:iPool = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_iPool_get, _heccer_base.ChannelSteadyStateSteppedTau_iPool_set)
    __swig_setmethods__["iFirstPower"] = _heccer_base.ChannelSteadyStateSteppedTau_iFirstPower_set
    __swig_getmethods__["iFirstPower"] = _heccer_base.ChannelSteadyStateSteppedTau_iFirstPower_get
    if _newclass:iFirstPower = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_iFirstPower_get, _heccer_base.ChannelSteadyStateSteppedTau_iFirstPower_set)
    __swig_setmethods__["iSecondPower"] = _heccer_base.ChannelSteadyStateSteppedTau_iSecondPower_set
    __swig_getmethods__["iSecondPower"] = _heccer_base.ChannelSteadyStateSteppedTau_iSecondPower_get
    if _newclass:iSecondPower = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_iSecondPower_get, _heccer_base.ChannelSteadyStateSteppedTau_iSecondPower_set)
    __swig_setmethods__["iFirstTable"] = _heccer_base.ChannelSteadyStateSteppedTau_iFirstTable_set
    __swig_getmethods__["iFirstTable"] = _heccer_base.ChannelSteadyStateSteppedTau_iFirstTable_get
    if _newclass:iFirstTable = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_iFirstTable_get, _heccer_base.ChannelSteadyStateSteppedTau_iFirstTable_set)
    __swig_setmethods__["iSecondTable"] = _heccer_base.ChannelSteadyStateSteppedTau_iSecondTable_set
    __swig_getmethods__["iSecondTable"] = _heccer_base.ChannelSteadyStateSteppedTau_iSecondTable_get
    if _newclass:iSecondTable = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_iSecondTable_get, _heccer_base.ChannelSteadyStateSteppedTau_iSecondTable_set)
    __swig_setmethods__["dFirstInitActivation"] = _heccer_base.ChannelSteadyStateSteppedTau_dFirstInitActivation_set
    __swig_getmethods__["dFirstInitActivation"] = _heccer_base.ChannelSteadyStateSteppedTau_dFirstInitActivation_get
    if _newclass:dFirstInitActivation = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_dFirstInitActivation_get, _heccer_base.ChannelSteadyStateSteppedTau_dFirstInitActivation_set)
    __swig_setmethods__["dSecondInitActivation"] = _heccer_base.ChannelSteadyStateSteppedTau_dSecondInitActivation_set
    __swig_getmethods__["dSecondInitActivation"] = _heccer_base.ChannelSteadyStateSteppedTau_dSecondInitActivation_get
    if _newclass:dSecondInitActivation = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_dSecondInitActivation_get, _heccer_base.ChannelSteadyStateSteppedTau_dSecondInitActivation_set)
    __swig_setmethods__["ss_parameters"] = _heccer_base.ChannelSteadyStateSteppedTau_ss_parameters_set
    __swig_getmethods__["ss_parameters"] = _heccer_base.ChannelSteadyStateSteppedTau_ss_parameters_get
    if _newclass:ss_parameters = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_ss_parameters_get, _heccer_base.ChannelSteadyStateSteppedTau_ss_parameters_set)
    __swig_setmethods__["tc_parameters"] = _heccer_base.ChannelSteadyStateSteppedTau_tc_parameters_set
    __swig_getmethods__["tc_parameters"] = _heccer_base.ChannelSteadyStateSteppedTau_tc_parameters_get
    if _newclass:tc_parameters = _swig_property(_heccer_base.ChannelSteadyStateSteppedTau_tc_parameters_get, _heccer_base.ChannelSteadyStateSteppedTau_tc_parameters_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelSteadyStateSteppedTau(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelSteadyStateSteppedTau
    __del__ = lambda self : None;
ChannelSteadyStateSteppedTau_swigregister = _heccer_base.ChannelSteadyStateSteppedTau_swigregister
ChannelSteadyStateSteppedTau_swigregister(ChannelSteadyStateSteppedTau)

class ActivatorParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActivatorParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActivatorParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dBasalLevel"] = _heccer_base.ActivatorParameters_dBasalLevel_set
    __swig_getmethods__["dBasalLevel"] = _heccer_base.ActivatorParameters_dBasalLevel_get
    if _newclass:dBasalLevel = _swig_property(_heccer_base.ActivatorParameters_dBasalLevel_get, _heccer_base.ActivatorParameters_dBasalLevel_set)
    __swig_setmethods__["dTau"] = _heccer_base.ActivatorParameters_dTau_set
    __swig_getmethods__["dTau"] = _heccer_base.ActivatorParameters_dTau_get
    if _newclass:dTau = _swig_property(_heccer_base.ActivatorParameters_dTau_get, _heccer_base.ActivatorParameters_dTau_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ActivatorParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ActivatorParameters
    __del__ = lambda self : None;
ActivatorParameters_swigregister = _heccer_base.ActivatorParameters_swigregister
ActivatorParameters_swigregister(ActivatorParameters)

class ConcentrationActivator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConcentrationActivator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConcentrationActivator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dInitActivation"] = _heccer_base.ConcentrationActivator_dInitActivation_set
    __swig_getmethods__["dInitActivation"] = _heccer_base.ConcentrationActivator_dInitActivation_get
    if _newclass:dInitActivation = _swig_property(_heccer_base.ConcentrationActivator_dInitActivation_get, _heccer_base.ConcentrationActivator_dInitActivation_set)
    __swig_setmethods__["iTable"] = _heccer_base.ConcentrationActivator_iTable_set
    __swig_getmethods__["iTable"] = _heccer_base.ConcentrationActivator_iTable_get
    if _newclass:iTable = _swig_property(_heccer_base.ConcentrationActivator_iTable_get, _heccer_base.ConcentrationActivator_iTable_set)
    __swig_setmethods__["iActivator"] = _heccer_base.ConcentrationActivator_iActivator_set
    __swig_getmethods__["iActivator"] = _heccer_base.ConcentrationActivator_iActivator_get
    if _newclass:iActivator = _swig_property(_heccer_base.ConcentrationActivator_iActivator_get, _heccer_base.ConcentrationActivator_iActivator_set)
    __swig_setmethods__["parameters"] = _heccer_base.ConcentrationActivator_parameters_set
    __swig_getmethods__["parameters"] = _heccer_base.ConcentrationActivator_parameters_get
    if _newclass:parameters = _swig_property(_heccer_base.ConcentrationActivator_parameters_get, _heccer_base.ConcentrationActivator_parameters_set)
    __swig_setmethods__["htg"] = _heccer_base.ConcentrationActivator_htg_set
    __swig_getmethods__["htg"] = _heccer_base.ConcentrationActivator_htg_get
    if _newclass:htg = _swig_property(_heccer_base.ConcentrationActivator_htg_get, _heccer_base.ConcentrationActivator_htg_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ConcentrationActivator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ConcentrationActivator
    __del__ = lambda self : None;
ConcentrationActivator_swigregister = _heccer_base.ConcentrationActivator_swigregister
ConcentrationActivator_swigregister(ConcentrationActivator)

class PoweredActivatorConcept(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoweredActivatorConcept, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoweredActivatorConcept, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iPower"] = _heccer_base.PoweredActivatorConcept_iPower_set
    __swig_getmethods__["iPower"] = _heccer_base.PoweredActivatorConcept_iPower_get
    if _newclass:iPower = _swig_property(_heccer_base.PoweredActivatorConcept_iPower_get, _heccer_base.PoweredActivatorConcept_iPower_set)
    __swig_setmethods__["ca"] = _heccer_base.PoweredActivatorConcept_ca_set
    __swig_getmethods__["ca"] = _heccer_base.PoweredActivatorConcept_ca_get
    if _newclass:ca = _swig_property(_heccer_base.PoweredActivatorConcept_ca_get, _heccer_base.PoweredActivatorConcept_ca_set)
    def __init__(self, *args): 
        this = _heccer_base.new_PoweredActivatorConcept(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_PoweredActivatorConcept
    __del__ = lambda self : None;
PoweredActivatorConcept_swigregister = _heccer_base.PoweredActivatorConcept_swigregister
PoweredActivatorConcept_swigregister(PoweredActivatorConcept)

class ChannelActConc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelActConc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelActConc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ChannelActConc_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ChannelActConc_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ChannelActConc_mc_get, _heccer_base.ChannelActConc_mc_set)
    __swig_setmethods__["dReversalPotential"] = _heccer_base.ChannelActConc_dReversalPotential_set
    __swig_getmethods__["dReversalPotential"] = _heccer_base.ChannelActConc_dReversalPotential_get
    if _newclass:dReversalPotential = _swig_property(_heccer_base.ChannelActConc_dReversalPotential_get, _heccer_base.ChannelActConc_dReversalPotential_set)
    __swig_setmethods__["iReversalPotential"] = _heccer_base.ChannelActConc_iReversalPotential_set
    __swig_getmethods__["iReversalPotential"] = _heccer_base.ChannelActConc_iReversalPotential_get
    if _newclass:iReversalPotential = _swig_property(_heccer_base.ChannelActConc_iReversalPotential_get, _heccer_base.ChannelActConc_iReversalPotential_set)
    __swig_setmethods__["dMaximalConductance"] = _heccer_base.ChannelActConc_dMaximalConductance_set
    __swig_getmethods__["dMaximalConductance"] = _heccer_base.ChannelActConc_dMaximalConductance_get
    if _newclass:dMaximalConductance = _swig_property(_heccer_base.ChannelActConc_dMaximalConductance_get, _heccer_base.ChannelActConc_dMaximalConductance_set)
    __swig_setmethods__["iPool"] = _heccer_base.ChannelActConc_iPool_set
    __swig_getmethods__["iPool"] = _heccer_base.ChannelActConc_iPool_get
    if _newclass:iPool = _swig_property(_heccer_base.ChannelActConc_iPool_get, _heccer_base.ChannelActConc_iPool_set)
    __swig_setmethods__["pgc"] = _heccer_base.ChannelActConc_pgc_set
    __swig_getmethods__["pgc"] = _heccer_base.ChannelActConc_pgc_get
    if _newclass:pgc = _swig_property(_heccer_base.ChannelActConc_pgc_get, _heccer_base.ChannelActConc_pgc_set)
    __swig_setmethods__["pac"] = _heccer_base.ChannelActConc_pac_set
    __swig_getmethods__["pac"] = _heccer_base.ChannelActConc_pac_get
    if _newclass:pac = _swig_property(_heccer_base.ChannelActConc_pac_get, _heccer_base.ChannelActConc_pac_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelActConc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelActConc
    __del__ = lambda self : None;
ChannelActConc_swigregister = _heccer_base.ChannelActConc_swigregister
ChannelActConc_swigregister(ChannelActConc)

class ChannelConc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelConc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelConc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _heccer_base.ChannelConc_mc_set
    __swig_getmethods__["mc"] = _heccer_base.ChannelConc_mc_get
    if _newclass:mc = _swig_property(_heccer_base.ChannelConc_mc_get, _heccer_base.ChannelConc_mc_set)
    __swig_setmethods__["dReversalPotential"] = _heccer_base.ChannelConc_dReversalPotential_set
    __swig_getmethods__["dReversalPotential"] = _heccer_base.ChannelConc_dReversalPotential_get
    if _newclass:dReversalPotential = _swig_property(_heccer_base.ChannelConc_dReversalPotential_get, _heccer_base.ChannelConc_dReversalPotential_set)
    __swig_setmethods__["iReversalPotential"] = _heccer_base.ChannelConc_iReversalPotential_set
    __swig_getmethods__["iReversalPotential"] = _heccer_base.ChannelConc_iReversalPotential_get
    if _newclass:iReversalPotential = _swig_property(_heccer_base.ChannelConc_iReversalPotential_get, _heccer_base.ChannelConc_iReversalPotential_set)
    __swig_setmethods__["dMaximalConductance"] = _heccer_base.ChannelConc_dMaximalConductance_set
    __swig_getmethods__["dMaximalConductance"] = _heccer_base.ChannelConc_dMaximalConductance_get
    if _newclass:dMaximalConductance = _swig_property(_heccer_base.ChannelConc_dMaximalConductance_get, _heccer_base.ChannelConc_dMaximalConductance_set)
    __swig_setmethods__["iPool"] = _heccer_base.ChannelConc_iPool_set
    __swig_getmethods__["iPool"] = _heccer_base.ChannelConc_iPool_get
    if _newclass:iPool = _swig_property(_heccer_base.ChannelConc_iPool_get, _heccer_base.ChannelConc_iPool_set)
    __swig_setmethods__["pac"] = _heccer_base.ChannelConc_pac_set
    __swig_getmethods__["pac"] = _heccer_base.ChannelConc_pac_get
    if _newclass:pac = _swig_property(_heccer_base.ChannelConc_pac_get, _heccer_base.ChannelConc_pac_set)
    def __init__(self, *args): 
        this = _heccer_base.new_ChannelConc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_ChannelConc
    __del__ = lambda self : None;
ChannelConc_swigregister = _heccer_base.ChannelConc_swigregister
ChannelConc_swigregister(ChannelConc)

HeccerMechanismCompile = _heccer_base.HeccerMechanismCompile
HeccerMechanismIndex2Pointer = _heccer_base.HeccerMechanismIndex2Pointer
HeccerMechanismLink = _heccer_base.HeccerMechanismLink
HeccerMechanismPointer2Index = _heccer_base.HeccerMechanismPointer2Index
HeccerMechanismSolveCN = _heccer_base.HeccerMechanismSolveCN
HeccerMechanismSort = _heccer_base.HeccerMechanismSort
class HeccerInterval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeccerInterval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeccerInterval, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dStart"] = _heccer_base.HeccerInterval_dStart_set
    __swig_getmethods__["dStart"] = _heccer_base.HeccerInterval_dStart_get
    if _newclass:dStart = _swig_property(_heccer_base.HeccerInterval_dStart_get, _heccer_base.HeccerInterval_dStart_set)
    __swig_setmethods__["dEnd"] = _heccer_base.HeccerInterval_dEnd_set
    __swig_getmethods__["dEnd"] = _heccer_base.HeccerInterval_dEnd_get
    if _newclass:dEnd = _swig_property(_heccer_base.HeccerInterval_dEnd_get, _heccer_base.HeccerInterval_dEnd_set)
    __swig_setmethods__["dStep"] = _heccer_base.HeccerInterval_dStep_set
    __swig_getmethods__["dStep"] = _heccer_base.HeccerInterval_dStep_get
    if _newclass:dStep = _swig_property(_heccer_base.HeccerInterval_dStep_get, _heccer_base.HeccerInterval_dStep_set)
    def __init__(self, *args): 
        this = _heccer_base.new_HeccerInterval(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_HeccerInterval
    __del__ = lambda self : None;
HeccerInterval_swigregister = _heccer_base.HeccerInterval_swigregister
HeccerInterval_swigregister(HeccerInterval)

class HeccerTableApproximationOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeccerTableApproximationOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeccerTableApproximationOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iShape"] = _heccer_base.HeccerTableApproximationOptions_iShape_set
    __swig_getmethods__["iShape"] = _heccer_base.HeccerTableApproximationOptions_iShape_get
    if _newclass:iShape = _swig_property(_heccer_base.HeccerTableApproximationOptions_iShape_get, _heccer_base.HeccerTableApproximationOptions_iShape_set)
    def __init__(self, *args): 
        this = _heccer_base.new_HeccerTableApproximationOptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_HeccerTableApproximationOptions
    __del__ = lambda self : None;
HeccerTableApproximationOptions_swigregister = _heccer_base.HeccerTableApproximationOptions_swigregister
HeccerTableApproximationOptions_swigregister(HeccerTableApproximationOptions)

class HeccerTabulatedGate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeccerTabulatedGate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeccerTabulatedGate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pvParameters"] = _heccer_base.HeccerTabulatedGate_pvParameters_set
    __swig_getmethods__["pvParameters"] = _heccer_base.HeccerTabulatedGate_pvParameters_get
    if _newclass:pvParameters = _swig_property(_heccer_base.HeccerTabulatedGate_pvParameters_get, _heccer_base.HeccerTabulatedGate_pvParameters_set)
    __swig_setmethods__["iSizeParameters"] = _heccer_base.HeccerTabulatedGate_iSizeParameters_set
    __swig_getmethods__["iSizeParameters"] = _heccer_base.HeccerTabulatedGate_iSizeParameters_get
    if _newclass:iSizeParameters = _swig_property(_heccer_base.HeccerTabulatedGate_iSizeParameters_get, _heccer_base.HeccerTabulatedGate_iSizeParameters_set)
    __swig_setmethods__["hi"] = _heccer_base.HeccerTabulatedGate_hi_set
    __swig_getmethods__["hi"] = _heccer_base.HeccerTabulatedGate_hi_get
    if _newclass:hi = _swig_property(_heccer_base.HeccerTabulatedGate_hi_get, _heccer_base.HeccerTabulatedGate_hi_set)
    __swig_setmethods__["htao"] = _heccer_base.HeccerTabulatedGate_htao_set
    __swig_getmethods__["htao"] = _heccer_base.HeccerTabulatedGate_htao_get
    if _newclass:htao = _swig_property(_heccer_base.HeccerTabulatedGate_htao_get, _heccer_base.HeccerTabulatedGate_htao_set)
    __swig_setmethods__["iEntries"] = _heccer_base.HeccerTabulatedGate_iEntries_set
    __swig_getmethods__["iEntries"] = _heccer_base.HeccerTabulatedGate_iEntries_get
    if _newclass:iEntries = _swig_property(_heccer_base.HeccerTabulatedGate_iEntries_get, _heccer_base.HeccerTabulatedGate_iEntries_set)
    __swig_setmethods__["pdA"] = _heccer_base.HeccerTabulatedGate_pdA_set
    __swig_getmethods__["pdA"] = _heccer_base.HeccerTabulatedGate_pdA_get
    if _newclass:pdA = _swig_property(_heccer_base.HeccerTabulatedGate_pdA_get, _heccer_base.HeccerTabulatedGate_pdA_set)
    __swig_setmethods__["pdB"] = _heccer_base.HeccerTabulatedGate_pdB_set
    __swig_getmethods__["pdB"] = _heccer_base.HeccerTabulatedGate_pdB_get
    if _newclass:pdB = _swig_property(_heccer_base.HeccerTabulatedGate_pdB_get, _heccer_base.HeccerTabulatedGate_pdB_set)
    def __init__(self, *args): 
        this = _heccer_base.new_HeccerTabulatedGate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_HeccerTabulatedGate
    __del__ = lambda self : None;
HeccerTabulatedGate_swigregister = _heccer_base.HeccerTabulatedGate_swigregister
HeccerTabulatedGate_swigregister(HeccerTabulatedGate)

class HeccerTabulatedSpringMass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeccerTabulatedSpringMass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeccerTabulatedSpringMass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pvParameters"] = _heccer_base.HeccerTabulatedSpringMass_pvParameters_set
    __swig_getmethods__["pvParameters"] = _heccer_base.HeccerTabulatedSpringMass_pvParameters_get
    if _newclass:pvParameters = _swig_property(_heccer_base.HeccerTabulatedSpringMass_pvParameters_get, _heccer_base.HeccerTabulatedSpringMass_pvParameters_set)
    __swig_setmethods__["iSizeParameters"] = _heccer_base.HeccerTabulatedSpringMass_iSizeParameters_set
    __swig_getmethods__["iSizeParameters"] = _heccer_base.HeccerTabulatedSpringMass_iSizeParameters_get
    if _newclass:iSizeParameters = _swig_property(_heccer_base.HeccerTabulatedSpringMass_iSizeParameters_get, _heccer_base.HeccerTabulatedSpringMass_iSizeParameters_set)
    __swig_setmethods__["dX1"] = _heccer_base.HeccerTabulatedSpringMass_dX1_set
    __swig_getmethods__["dX1"] = _heccer_base.HeccerTabulatedSpringMass_dX1_get
    if _newclass:dX1 = _swig_property(_heccer_base.HeccerTabulatedSpringMass_dX1_get, _heccer_base.HeccerTabulatedSpringMass_dX1_set)
    __swig_setmethods__["dX2"] = _heccer_base.HeccerTabulatedSpringMass_dX2_set
    __swig_getmethods__["dX2"] = _heccer_base.HeccerTabulatedSpringMass_dX2_get
    if _newclass:dX2 = _swig_property(_heccer_base.HeccerTabulatedSpringMass_dX2_get, _heccer_base.HeccerTabulatedSpringMass_dX2_set)
    __swig_setmethods__["dY1"] = _heccer_base.HeccerTabulatedSpringMass_dY1_set
    __swig_getmethods__["dY1"] = _heccer_base.HeccerTabulatedSpringMass_dY1_get
    if _newclass:dY1 = _swig_property(_heccer_base.HeccerTabulatedSpringMass_dY1_get, _heccer_base.HeccerTabulatedSpringMass_dY1_set)
    __swig_setmethods__["dY2"] = _heccer_base.HeccerTabulatedSpringMass_dY2_set
    __swig_getmethods__["dY2"] = _heccer_base.HeccerTabulatedSpringMass_dY2_get
    if _newclass:dY2 = _swig_property(_heccer_base.HeccerTabulatedSpringMass_dY2_get, _heccer_base.HeccerTabulatedSpringMass_dY2_set)
    def __init__(self, *args): 
        this = _heccer_base.new_HeccerTabulatedSpringMass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_HeccerTabulatedSpringMass
    __del__ = lambda self : None;
HeccerTabulatedSpringMass_swigregister = _heccer_base.HeccerTabulatedSpringMass_swigregister
HeccerTabulatedSpringMass_swigregister(HeccerTabulatedSpringMass)

HECCER_TABULATED_GATES_MAX = _heccer_base.HECCER_TABULATED_GATES_MAX
class TabulatedGateTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabulatedGateTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TabulatedGateTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["phtg"] = _heccer_base.TabulatedGateTable_phtg_set
    __swig_getmethods__["phtg"] = _heccer_base.TabulatedGateTable_phtg_get
    if _newclass:phtg = _swig_property(_heccer_base.TabulatedGateTable_phtg_get, _heccer_base.TabulatedGateTable_phtg_set)
    __swig_setmethods__["iTabulatedGateCount"] = _heccer_base.TabulatedGateTable_iTabulatedGateCount_set
    __swig_getmethods__["iTabulatedGateCount"] = _heccer_base.TabulatedGateTable_iTabulatedGateCount_get
    if _newclass:iTabulatedGateCount = _swig_property(_heccer_base.TabulatedGateTable_iTabulatedGateCount_get, _heccer_base.TabulatedGateTable_iTabulatedGateCount_set)
    __swig_setmethods__["pdRearranged"] = _heccer_base.TabulatedGateTable_pdRearranged_set
    __swig_getmethods__["pdRearranged"] = _heccer_base.TabulatedGateTable_pdRearranged_get
    if _newclass:pdRearranged = _swig_property(_heccer_base.TabulatedGateTable_pdRearranged_get, _heccer_base.TabulatedGateTable_pdRearranged_set)
    def __init__(self, *args): 
        this = _heccer_base.new_TabulatedGateTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_TabulatedGateTable
    __del__ = lambda self : None;
TabulatedGateTable_swigregister = _heccer_base.TabulatedGateTable_swigregister
TabulatedGateTable_swigregister(TabulatedGateTable)

HECCER_TABULATED_SPRINGMASS_MAX = _heccer_base.HECCER_TABULATED_SPRINGMASS_MAX
class TabulatedSpringMassTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabulatedSpringMassTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TabulatedSpringMassTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["phtsm"] = _heccer_base.TabulatedSpringMassTable_phtsm_set
    __swig_getmethods__["phtsm"] = _heccer_base.TabulatedSpringMassTable_phtsm_get
    if _newclass:phtsm = _swig_property(_heccer_base.TabulatedSpringMassTable_phtsm_get, _heccer_base.TabulatedSpringMassTable_phtsm_set)
    __swig_setmethods__["iTabulatedSpringMassCount"] = _heccer_base.TabulatedSpringMassTable_iTabulatedSpringMassCount_set
    __swig_getmethods__["iTabulatedSpringMassCount"] = _heccer_base.TabulatedSpringMassTable_iTabulatedSpringMassCount_get
    if _newclass:iTabulatedSpringMassCount = _swig_property(_heccer_base.TabulatedSpringMassTable_iTabulatedSpringMassCount_get, _heccer_base.TabulatedSpringMassTable_iTabulatedSpringMassCount_set)
    def __init__(self, *args): 
        this = _heccer_base.new_TabulatedSpringMassTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_TabulatedSpringMassTable
    __del__ = lambda self : None;
TabulatedSpringMassTable_swigregister = _heccer_base.TabulatedSpringMassTable_swigregister
TabulatedSpringMassTable_swigregister(TabulatedSpringMassTable)

HeccerConcentrationGateTabulate = _heccer_base.HeccerConcentrationGateTabulate
HeccerGateConceptTabulate = _heccer_base.HeccerGateConceptTabulate
HeccerTablesDump = _heccer_base.HeccerTablesDump
HeccerTablesRearrange = _heccer_base.HeccerTablesRearrange
HeccerTableValuesDeserialize = _heccer_base.HeccerTableValuesDeserialize
HeccerTableValuesSerialize = _heccer_base.HeccerTableValuesSerialize
HeccerTableInterpolate = _heccer_base.HeccerTableInterpolate
HeccerTabulateAny = _heccer_base.HeccerTabulateAny
PRE_PROTO_TRAVERSAL = _heccer_base.PRE_PROTO_TRAVERSAL
class TranslationServiceData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslationServiceData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TranslationServiceData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pneuro"] = _heccer_base.TranslationServiceData_pneuro_set
    __swig_getmethods__["pneuro"] = _heccer_base.TranslationServiceData_pneuro_get
    if _newclass:pneuro = _swig_property(_heccer_base.TranslationServiceData_pneuro_get, _heccer_base.TranslationServiceData_pneuro_set)
    __swig_setmethods__["ppistRoot"] = _heccer_base.TranslationServiceData_ppistRoot_set
    __swig_getmethods__["ppistRoot"] = _heccer_base.TranslationServiceData_ppistRoot_get
    if _newclass:ppistRoot = _swig_property(_heccer_base.TranslationServiceData_ppistRoot_get, _heccer_base.TranslationServiceData_ppistRoot_set)
    __swig_setmethods__["phsleRoot"] = _heccer_base.TranslationServiceData_phsleRoot_set
    __swig_getmethods__["phsleRoot"] = _heccer_base.TranslationServiceData_phsleRoot_get
    if _newclass:phsleRoot = _swig_property(_heccer_base.TranslationServiceData_phsleRoot_get, _heccer_base.TranslationServiceData_phsleRoot_set)
    __swig_setmethods__["iModel"] = _heccer_base.TranslationServiceData_iModel_set
    __swig_getmethods__["iModel"] = _heccer_base.TranslationServiceData_iModel_get
    if _newclass:iModel = _swig_property(_heccer_base.TranslationServiceData_iModel_get, _heccer_base.TranslationServiceData_iModel_set)
    def __init__(self, *args): 
        this = _heccer_base.new_TranslationServiceData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heccer_base.delete_TranslationServiceData
    __del__ = lambda self : None;
TranslationServiceData_swigregister = _heccer_base.TranslationServiceData_swigregister
TranslationServiceData_swigregister(TranslationServiceData)

HeccerConnectDistributor = _heccer_base.HeccerConnectDistributor
HeccerConnectQueuer = _heccer_base.HeccerConnectQueuer
HeccerConstruct = _heccer_base.HeccerConstruct
new_DoubleArray = _heccer_base.new_DoubleArray
delete_DoubleArray = _heccer_base.delete_DoubleArray
DoubleArray_getitem = _heccer_base.DoubleArray_getitem
DoubleArray_setitem = _heccer_base.DoubleArray_setitem
new_IntArray = _heccer_base.new_IntArray
delete_IntArray = _heccer_base.delete_IntArray
IntArray_getitem = _heccer_base.IntArray_getitem
IntArray_setitem = _heccer_base.IntArray_setitem
new_CompartmentArray = _heccer_base.new_CompartmentArray
delete_CompartmentArray = _heccer_base.delete_CompartmentArray
CompartmentArray_getitem = _heccer_base.CompartmentArray_getitem
CompartmentArray_setitem = _heccer_base.CompartmentArray_setitem


