[buildout]
extends = base.cfg

parts +=
# development tools
    omelette
    releaser
    sphinxbuilder
    test

# deployment tools
    fabfile
    fabric

# generate config files from ./etc_templates
    iptables
    munin-node-conf
    nginx-conf

# Zope instance
    lxml
    zope

eggs +=
# debugging tools
    Products.Clouseau
    Products.DocFinderTab
    Products.PrintingMailHost
    plone.reload
    
zcml +=
     plone.reload


# =========================
# Develop external packages
# =========================
extensions += mr.developer
sources = sources
auto-checkout = *

[sources]
# niteoweb.clickbank = svn https://svn.plone.org/svn/collective/niteoweb.clickbank/trunk


# ===================================================================
# For collective.xdv to work properly, we need a static build of lxml
# and it's dependencies on OS X and x86_64 Linux                     
# ===================================================================
[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml


# ==================================
# Create a development Zope instance
# ==================================
[zope]
recipe = plone.recipe.zope2instance
user = admin:admin
debug-mode = off
verbose-security = on
environment-vars =
    zope_i18n_compile_mo_files = true
eggs =
    \${buildout:eggs}
zcml =
    \${buildout:zcml}


# ===============================================
# Mirrors python namespaces into one handy folder
# ===============================================
[omelette]
recipe = collective.recipe.omelette
eggs = \${zope:eggs}


# ==========================================
# Prepare test-runner for running unit tests
# ==========================================
[test]
recipe = zc.recipe.testrunner
defaults = ['--exit-with-status', '--auto-color', '--auto-progress']
eggs =
    \${buildout:eggs}


# ======================================
# Prepare Sphinx documentation generator
# ======================================
[sphinxbuilder]
recipe = collective.recipe.sphinxbuilder
interpreter = \${buildout:directory}/bin/zopepy


# ==================================================
# Configure zest.releaser package releasing commands
# ==================================================
[releaser]
recipe = zc.recipe.egg
eggs = zest.releaser


# ====================================
# Configure Fabric deployment commands
# ====================================
[fabric]
recipe = zc.recipe.egg
eggs = Fabric

[fabfile]
recipe = collective.recipe.template
input = \${buildout:directory}/etc_templates/fabfile.py.in
output = \${buildout:directory}/fabfile.py

# ==========================================
# Generate config files from ./etc_templates
# ==========================================
[munin-node-conf]
recipe = collective.recipe.template
input = \${buildout:directory}/etc_templates/munin-node.conf.in
output = \${buildout:directory}/etc/munin-node.conf

[nginx-conf]
recipe = collective.recipe.template
input = \${buildout:directory}/etc_templates/nginx.conf.in
output = \${buildout:directory}/etc/nginx.conf

[iptables]
recipe = collective.recipe.template
input = \${buildout:directory}/etc_templates/iptables.in
output = \${buildout:directory}/etc/iptables
