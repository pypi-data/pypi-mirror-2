# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mumoro', [dirname(__file__)])
        except ImportError:
            import _mumoro
            return _mumoro
        if fp is not None:
            try:
                _mod = imp.load_module('_mumoro', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mumoro = swig_import_helper()
    del swig_import_helper
else:
    import _mumoro
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mumoro.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _mumoro.SwigPyIterator_value(self)
    def incr(self, n = 1): return _mumoro.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _mumoro.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _mumoro.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _mumoro.SwigPyIterator_equal(self, *args)
    def copy(self): return _mumoro.SwigPyIterator_copy(self)
    def next(self): return _mumoro.SwigPyIterator_next(self)
    def __next__(self): return _mumoro.SwigPyIterator___next__(self)
    def previous(self): return _mumoro.SwigPyIterator_previous(self)
    def advance(self, *args): return _mumoro.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _mumoro.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _mumoro.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _mumoro.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _mumoro.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _mumoro.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _mumoro.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _mumoro.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Paths(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Paths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Paths, name)
    __repr__ = _swig_repr
    def iterator(self): return _mumoro.Paths_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mumoro.Paths___nonzero__(self)
    def __bool__(self): return _mumoro.Paths___bool__(self)
    def __len__(self): return _mumoro.Paths___len__(self)
    def pop(self): return _mumoro.Paths_pop(self)
    def __getslice__(self, *args): return _mumoro.Paths___getslice__(self, *args)
    def __setslice__(self, *args): return _mumoro.Paths___setslice__(self, *args)
    def __delslice__(self, *args): return _mumoro.Paths___delslice__(self, *args)
    def __delitem__(self, *args): return _mumoro.Paths___delitem__(self, *args)
    def __getitem__(self, *args): return _mumoro.Paths___getitem__(self, *args)
    def __setitem__(self, *args): return _mumoro.Paths___setitem__(self, *args)
    def append(self, *args): return _mumoro.Paths_append(self, *args)
    def empty(self): return _mumoro.Paths_empty(self)
    def size(self): return _mumoro.Paths_size(self)
    def clear(self): return _mumoro.Paths_clear(self)
    def swap(self, *args): return _mumoro.Paths_swap(self, *args)
    def get_allocator(self): return _mumoro.Paths_get_allocator(self)
    def begin(self): return _mumoro.Paths_begin(self)
    def end(self): return _mumoro.Paths_end(self)
    def rbegin(self): return _mumoro.Paths_rbegin(self)
    def rend(self): return _mumoro.Paths_rend(self)
    def pop_back(self): return _mumoro.Paths_pop_back(self)
    def erase(self, *args): return _mumoro.Paths_erase(self, *args)
    def __init__(self, *args): 
        this = _mumoro.new_Paths(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mumoro.Paths_push_back(self, *args)
    def front(self): return _mumoro.Paths_front(self)
    def back(self): return _mumoro.Paths_back(self)
    def assign(self, *args): return _mumoro.Paths_assign(self, *args)
    def resize(self, *args): return _mumoro.Paths_resize(self, *args)
    def insert(self, *args): return _mumoro.Paths_insert(self, *args)
    def reserve(self, *args): return _mumoro.Paths_reserve(self, *args)
    def capacity(self): return _mumoro.Paths_capacity(self)
    __swig_destroy__ = _mumoro.delete_Paths
    __del__ = lambda self : None;
Paths_swigregister = _mumoro.Paths_swigregister
Paths_swigregister(Paths)

class Costs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Costs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Costs, name)
    __repr__ = _swig_repr
    def iterator(self): return _mumoro.Costs_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mumoro.Costs___nonzero__(self)
    def __bool__(self): return _mumoro.Costs___bool__(self)
    def __len__(self): return _mumoro.Costs___len__(self)
    def pop(self): return _mumoro.Costs_pop(self)
    def __getslice__(self, *args): return _mumoro.Costs___getslice__(self, *args)
    def __setslice__(self, *args): return _mumoro.Costs___setslice__(self, *args)
    def __delslice__(self, *args): return _mumoro.Costs___delslice__(self, *args)
    def __delitem__(self, *args): return _mumoro.Costs___delitem__(self, *args)
    def __getitem__(self, *args): return _mumoro.Costs___getitem__(self, *args)
    def __setitem__(self, *args): return _mumoro.Costs___setitem__(self, *args)
    def append(self, *args): return _mumoro.Costs_append(self, *args)
    def empty(self): return _mumoro.Costs_empty(self)
    def size(self): return _mumoro.Costs_size(self)
    def clear(self): return _mumoro.Costs_clear(self)
    def swap(self, *args): return _mumoro.Costs_swap(self, *args)
    def get_allocator(self): return _mumoro.Costs_get_allocator(self)
    def begin(self): return _mumoro.Costs_begin(self)
    def end(self): return _mumoro.Costs_end(self)
    def rbegin(self): return _mumoro.Costs_rbegin(self)
    def rend(self): return _mumoro.Costs_rend(self)
    def pop_back(self): return _mumoro.Costs_pop_back(self)
    def erase(self, *args): return _mumoro.Costs_erase(self, *args)
    def __init__(self, *args): 
        this = _mumoro.new_Costs(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mumoro.Costs_push_back(self, *args)
    def front(self): return _mumoro.Costs_front(self)
    def back(self): return _mumoro.Costs_back(self)
    def assign(self, *args): return _mumoro.Costs_assign(self, *args)
    def resize(self, *args): return _mumoro.Costs_resize(self, *args)
    def insert(self, *args): return _mumoro.Costs_insert(self, *args)
    def reserve(self, *args): return _mumoro.Costs_reserve(self, *args)
    def capacity(self): return _mumoro.Costs_capacity(self)
    __swig_destroy__ = _mumoro.delete_Costs
    __del__ = lambda self : None;
Costs_swigregister = _mumoro.Costs_swigregister
Costs_swigregister(Costs)

class Nodes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Nodes, name)
    __repr__ = _swig_repr
    def iterator(self): return _mumoro.Nodes_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _mumoro.Nodes___nonzero__(self)
    def __bool__(self): return _mumoro.Nodes___bool__(self)
    def __len__(self): return _mumoro.Nodes___len__(self)
    def pop(self): return _mumoro.Nodes_pop(self)
    def __getslice__(self, *args): return _mumoro.Nodes___getslice__(self, *args)
    def __setslice__(self, *args): return _mumoro.Nodes___setslice__(self, *args)
    def __delslice__(self, *args): return _mumoro.Nodes___delslice__(self, *args)
    def __delitem__(self, *args): return _mumoro.Nodes___delitem__(self, *args)
    def __getitem__(self, *args): return _mumoro.Nodes___getitem__(self, *args)
    def __setitem__(self, *args): return _mumoro.Nodes___setitem__(self, *args)
    def append(self, *args): return _mumoro.Nodes_append(self, *args)
    def empty(self): return _mumoro.Nodes_empty(self)
    def size(self): return _mumoro.Nodes_size(self)
    def clear(self): return _mumoro.Nodes_clear(self)
    def swap(self, *args): return _mumoro.Nodes_swap(self, *args)
    def get_allocator(self): return _mumoro.Nodes_get_allocator(self)
    def begin(self): return _mumoro.Nodes_begin(self)
    def end(self): return _mumoro.Nodes_end(self)
    def rbegin(self): return _mumoro.Nodes_rbegin(self)
    def rend(self): return _mumoro.Nodes_rend(self)
    def pop_back(self): return _mumoro.Nodes_pop_back(self)
    def erase(self, *args): return _mumoro.Nodes_erase(self, *args)
    def __init__(self, *args): 
        this = _mumoro.new_Nodes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _mumoro.Nodes_push_back(self, *args)
    def front(self): return _mumoro.Nodes_front(self)
    def back(self): return _mumoro.Nodes_back(self)
    def assign(self, *args): return _mumoro.Nodes_assign(self, *args)
    def resize(self, *args): return _mumoro.Nodes_resize(self, *args)
    def insert(self, *args): return _mumoro.Nodes_insert(self, *args)
    def pop_front(self): return _mumoro.Nodes_pop_front(self)
    def push_front(self, *args): return _mumoro.Nodes_push_front(self, *args)
    def reverse(self): return _mumoro.Nodes_reverse(self)
    __swig_destroy__ = _mumoro.delete_Nodes
    __del__ = lambda self : None;
Nodes_swigregister = _mumoro.Nodes_swigregister
Nodes_swigregister(Nodes)

dist = _mumoro.dist
elevation = _mumoro.elevation
mode_change = _mumoro.mode_change
cost = _mumoro.cost
line_change = _mumoro.line_change
co2 = _mumoro.co2
class Path(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cost"] = _mumoro.Path_cost_set
    __swig_getmethods__["cost"] = _mumoro.Path_cost_get
    if _newclass:cost = _swig_property(_mumoro.Path_cost_get, _mumoro.Path_cost_set)
    __swig_setmethods__["nodes"] = _mumoro.Path_nodes_set
    __swig_getmethods__["nodes"] = _mumoro.Path_nodes_get
    if _newclass:nodes = _swig_property(_mumoro.Path_nodes_get, _mumoro.Path_nodes_set)
    def size(self): return _mumoro.Path_size(self)
    def __init__(self): 
        this = _mumoro.new_Path()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Path
    __del__ = lambda self : None;
Path_swigregister = _mumoro.Path_swigregister
Path_swigregister(Path)

Foot = _mumoro.Foot
Bike = _mumoro.Bike
Car = _mumoro.Car
PublicTransport = _mumoro.PublicTransport
class No_traffic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, No_traffic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, No_traffic, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mumoro.new_No_traffic()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_No_traffic
    __del__ = lambda self : None;
No_traffic_swigregister = _mumoro.No_traffic_swigregister
No_traffic_swigregister(No_traffic)

def martins(*args):
  return _mumoro.martins(*args)
martins = _mumoro.martins

def relaxed_martins(*args):
  return _mumoro.relaxed_martins(*args)
relaxed_martins = _mumoro.relaxed_martins

class Duration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Duration, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mumoro.new_Duration(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(self, *args): return _mumoro.Duration_append(self, *args)
    def __call__(self, *args): return _mumoro.Duration___call__(self, *args)
    __swig_destroy__ = _mumoro.delete_Duration
    __del__ = lambda self : None;
Duration_swigregister = _mumoro.Duration_swigregister
Duration_swigregister(Duration)

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mumoro.new_Node()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mumoro.delete_Node
    __del__ = lambda self : None;
Node_swigregister = _mumoro.Node_swigregister
Node_swigregister(Node)

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mumoro.new_Edge()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["distance"] = _mumoro.Edge_distance_set
    __swig_getmethods__["distance"] = _mumoro.Edge_distance_get
    if _newclass:distance = _swig_property(_mumoro.Edge_distance_get, _mumoro.Edge_distance_set)
    __swig_setmethods__["elevation"] = _mumoro.Edge_elevation_set
    __swig_getmethods__["elevation"] = _mumoro.Edge_elevation_get
    if _newclass:elevation = _swig_property(_mumoro.Edge_elevation_get, _mumoro.Edge_elevation_set)
    __swig_setmethods__["mode_change"] = _mumoro.Edge_mode_change_set
    __swig_getmethods__["mode_change"] = _mumoro.Edge_mode_change_get
    if _newclass:mode_change = _swig_property(_mumoro.Edge_mode_change_get, _mumoro.Edge_mode_change_set)
    __swig_setmethods__["cost"] = _mumoro.Edge_cost_set
    __swig_getmethods__["cost"] = _mumoro.Edge_cost_get
    if _newclass:cost = _swig_property(_mumoro.Edge_cost_get, _mumoro.Edge_cost_set)
    __swig_setmethods__["line_change"] = _mumoro.Edge_line_change_set
    __swig_getmethods__["line_change"] = _mumoro.Edge_line_change_get
    if _newclass:line_change = _swig_property(_mumoro.Edge_line_change_get, _mumoro.Edge_line_change_set)
    __swig_setmethods__["co2"] = _mumoro.Edge_co2_set
    __swig_getmethods__["co2"] = _mumoro.Edge_co2_get
    if _newclass:co2 = _swig_property(_mumoro.Edge_co2_get, _mumoro.Edge_co2_set)
    __swig_setmethods__["duration"] = _mumoro.Edge_duration_set
    __swig_getmethods__["duration"] = _mumoro.Edge_duration_get
    if _newclass:duration = _swig_property(_mumoro.Edge_duration_get, _mumoro.Edge_duration_set)
    __swig_destroy__ = _mumoro.delete_Edge
    __del__ = lambda self : None;
Edge_swigregister = _mumoro.Edge_swigregister
Edge_swigregister(Edge)

class Graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["g"] = _mumoro.Graph_g_set
    __swig_getmethods__["g"] = _mumoro.Graph_g_get
    if _newclass:g = _swig_property(_mumoro.Graph_g_get, _mumoro.Graph_g_set)
    def __init__(self, *args): 
        this = _mumoro.new_Graph(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_edge(self, *args): return _mumoro.Graph_add_edge(self, *args)
    def public_transport_edge(self, *args): return _mumoro.Graph_public_transport_edge(self, *args)
    def dijkstra(self, *args): return _mumoro.Graph_dijkstra(self, *args)
    def save(self, *args): return _mumoro.Graph_save(self, *args)
    def load(self, *args): return _mumoro.Graph_load(self, *args)
    __swig_destroy__ = _mumoro.delete_Graph
    __del__ = lambda self : None;
Graph_swigregister = _mumoro.Graph_swigregister
Graph_swigregister(Graph)


cvar = _mumoro.cvar
invalid_node = cvar.invalid_node

