Have you ever wanted to have logging decorators for logging function calls and for automatic creation of logger object in class, based on class hierarchy.

If your answer is true, here is my implementation https://gist.github.com/1214499. There is very nice option i’ve implemented called subdecorate, enabling for functions in derived classes being logged, even if decorator is only applied on base class function.

This logging decorator implementation can be easily extended.

Install:
    python setup.py install or easy_install PyLogDecorate.

Example code:

    from PyLogDecoratelog import LogCall, LogClass

    @LogCall()
    def test():
    print “x”

    @LogClass({“subdecorate”: True})
    class test1(object):

    @LogCall({“subdecorate”: True})
    def test(self):
    print “znj”

    @LogClass()
    class test2(test1):
    def __init__(self):
    pass

    def test(self):
    print 1/1

    test()
    b=test2()
    b.test()

Hack on folks :) 
