Metadata-Version: 1.0
Name: PyLogDecorate
Version: 0.331
Summary: Advanced python logging decorators.
Home-page: https://github.com/offlinehacker/PyLogDecorate
Author: Jaka Hudoklin
Author-email: jakahudoklin@gmail.com
License: BSD
Description: Have you ever wanted to have logging decorators for logging function calls and for automatic creation of logger object in class, based on class hierarchy.
        
        If your answer is true, here is my implementation https://gist.github.com/1214499. There is very nice option iâ€™ve implemented called subdecorate, enabling for functions in derived classes being logged, even if decorator is only applied on base class function.
        
        This logging decorator implementation can be easily extended.
        
        - Install:
            python setup.py install or easy_install PyLogDecorate.
        
        
        - Example code:
        
         ::
        
            from log import LogCall, LogClass
            
            @LogCall()
            def test():
            print "x"
            
            @LogClass({"subdecorate": True})
            class test1(object):
            name="kekec" 
            name2="kekec2"
            @LogCall({"subdecorate": True, "tracename": "tracetest", "traceattr": "name"})
            def test(self):
            pass
            
            @LogCall({"subdecorate": True, "tracename": "tracetest", "traceattr": "name2"})  
            def test2(self):
            self.logger.debug("Inside base class!")
            
            @LogClass()
            class test2(test1):
            def __init__(self):
            pass
            
            def test(self):
            self.logger.debug("Inside funtion.")
            self.test2()
            
            @LogClass()   
            class test3(test2):
            def __init__(self):
            pass
            
            def test(self):
            self.logger.debug("Inside funtion2.")
            self.test2()
            
            
            test()
            b=test3()
            c=test2()
            b.test()
            c.test()
            
Keywords: python logging decorators
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: BSD License
