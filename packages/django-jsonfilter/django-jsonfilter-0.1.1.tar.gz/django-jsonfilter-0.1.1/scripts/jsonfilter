#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Read django-exported JSON data and output only objects of the specified
model type.
"""
# © Copyright 2010 Éric St-Jean, email: esj a-t w w d d-o-t c a
# 
# This file is part of django-jsonfilter.
# 
#     django-jsonfilter is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by the
#     Free Software Foundation, either version 3 of the License, or (at your
#     option) any later version.
# 
#     django-jsonfilter is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with django-jsonfilter.  If not, see <http://www.gnu.org/licenses/>.
from optparse import OptionParser
import re
import sys

import jsonfilter

if __name__=="__main__":
    usage = "usage: %prog [options] [modelname]"
    parser = OptionParser(usage=usage)
    parser.add_option("-l", "--list-models", dest="list",
                      action="store_true", default=False,
                      help="Just list the model types found in the dump")
    parser.add_option("-f", "--file", dest="filename",
                      help="read data from FILE (default: read from stdin)", 
                      metavar="FILE", default='-')
    parser.add_option("-o", "--ofile", dest="ofilename",
                      help="write data to FILE (default: write to stdout)", 
                      metavar="FILE", default='-')
    (options, args) = parser.parse_args()
    if options.filename == '-':
        fin = sys.stdin
    else:
        fin = open(options.filename, 'r')
    if options.ofilename == '-':
        fout = sys.stdout
    else:
        fout = open(options.ofilename, 'r')

    if not args and not options.list:
        parser.print_help()
        sys.exit(1)

    if options.list:
        fout.write("\n".join(jsonfilter.list_models(fin)) + "\n")
    else:
        previous = m = None
        fout.write('[\n')
        for m in jsonfilter.JSONModelFilter(args[0]).filteriter(fin):
            if previous:
                fout.write(previous + ',\n')
            fout.flush()
            previous = m
        if m:
            fout.write(m + '\n]\n')


