[buildout]
parts =
    plone
    zope2
    ploneproducts
    zopepy
    instance
    fss
    fss-unittests
    test

develop = .
package = iw.fss

find-links =
    http://dist.plone.org
    http://download.zope.org/ppix/
    http://download.zope.org/distribution/
    http://effbot.org/downloads

eggs =
    elementtree
    PILwoTK

[plone]
recipe = plone.recipe.plone

[ploneproducts]
recipe = plone.recipe.distros
urls =
nested-packages =
version-suffix-packages =

[zope2]
recipe = plone.recipe.zope2install
url = ${plone:zope2-url}

[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
extra-paths = ${zope2:location}/lib/python
scripts = zopepy

[instance]
recipe = plone.recipe.zope2instance
zope2-location = ${zope2:location}
user = admin:admin
http-address = 8080
debug-mode = off
verbose-security = off

eggs =
    ${plone:eggs}
    ${buildout:eggs}

products =
    ${plone:location}

[fss]
recipe = iw.recipe.fss
zope-instances =
    ${instance:location}
storages =
    default /

[fss-unittests]
# You need this for unit testing iw.fss
recipe = iw.recipe.cmd:py
on_install = true
on_update = true
cmds =
    >>> import os
    >>> def safe_makedirs(path):
    ...     if not os.path.isdir(path):
    ...         os.makedirs(path)
    ...     return
    >>> instance_dir = '${instance:location}'
    >>> storage_dir = os.path.join(instance_dir, 'var', 'fss_storage')
    >>> safe_makedirs(storage_dir)
    >>> backup_dir = os.path.join(instance_dir, 'var', 'fss_backup')
    >>> safe_makedirs(backup_dir)

[test]
recipe = zc.recipe.egg
eggs =
    iw.fss
    ${plone:eggs}
    ${buildout:eggs}
    plone.recipe.zope2instance
extra-paths =
    ${zope2:location}/lib/python
    ${instance:location}/lib/python
entry-points =
    test=plone.recipe.zope2instance.ctl:main
arguments = ["-C", "${instance:location}/etc/zope.conf", "test", "-m", "${buildout:package}", "--keepbytecode"]