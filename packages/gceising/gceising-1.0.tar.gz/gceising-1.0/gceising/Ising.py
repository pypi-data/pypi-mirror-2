# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

"""
This is a Python SWIG-wrapped C++ program
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Ising', [dirname(__file__)])
        except ImportError:
            import _Ising
            return _Ising
        if fp is not None:
            try:
                _mod = imp.load_module('_Ising', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Ising = swig_import_helper()
    del swig_import_helper
else:
    import _Ising
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Random(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Random, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Random, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Seed"] = _Ising.Random_Seed_set
    __swig_getmethods__["Seed"] = _Ising.Random_Seed_get
    if _newclass:Seed = _swig_property(_Ising.Random_Seed_get, _Ising.Random_Seed_set)
    def __init__(self): 
        this = _Ising.new_Random()
        try: self.this.append(this)
        except: self.this = this
    def Srand(self, *args): return _Ising.Random_Srand(self, *args)
    def Number(self, *args): return _Ising.Random_Number(self, *args)
    def Real(self, *args): return _Ising.Random_Real(self, *args)
    def uNumber32(self): return _Ising.Random_uNumber32(self)
    __swig_destroy__ = _Ising.delete_Random
    __del__ = lambda self : None;
Random_swigregister = _Ising.Random_swigregister
Random_swigregister(Random)

TO32 = _Ising.TO32
class Ising(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ising, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ising, name)
    __repr__ = _swig_repr
    AI_TEMPER = _Ising.Ising_AI_TEMPER
    AI_HAMI = _Ising.Ising_AI_HAMI
    AI_DELT_HAMI = _Ising.Ising_AI_DELT_HAMI
    AI_MAG = _Ising.Ising_AI_MAG
    AI_DELT_MAG = _Ising.Ising_AI_DELT_MAG
    AI_RANDOM = _Ising.Ising_AI_RANDOM
    AI_EXP_DELT_HAMI = _Ising.Ising_AI_EXP_DELT_HAMI
    AI_NUM = _Ising.Ising_AI_NUM
    __swig_setmethods__["m_aArgIO"] = _Ising.Ising_m_aArgIO_set
    __swig_getmethods__["m_aArgIO"] = _Ising.Ising_m_aArgIO_get
    if _newclass:m_aArgIO = _swig_property(_Ising.Ising_m_aArgIO_get, _Ising.Ising_m_aArgIO_set)
    __swig_setmethods__["m_uDim0"] = _Ising.Ising_m_uDim0_set
    __swig_getmethods__["m_uDim0"] = _Ising.Ising_m_uDim0_get
    if _newclass:m_uDim0 = _swig_property(_Ising.Ising_m_uDim0_get, _Ising.Ising_m_uDim0_set)
    __swig_setmethods__["m_uDim1"] = _Ising.Ising_m_uDim1_set
    __swig_getmethods__["m_uDim1"] = _Ising.Ising_m_uDim1_get
    if _newclass:m_uDim1 = _swig_property(_Ising.Ising_m_uDim1_get, _Ising.Ising_m_uDim1_set)
    __swig_setmethods__["m_uN"] = _Ising.Ising_m_uN_set
    __swig_getmethods__["m_uN"] = _Ising.Ising_m_uN_get
    if _newclass:m_uN = _swig_property(_Ising.Ising_m_uN_get, _Ising.Ising_m_uN_set)
    __swig_setmethods__["m_uCurTrial"] = _Ising.Ising_m_uCurTrial_set
    __swig_getmethods__["m_uCurTrial"] = _Ising.Ising_m_uCurTrial_get
    if _newclass:m_uCurTrial = _swig_property(_Ising.Ising_m_uCurTrial_get, _Ising.Ising_m_uCurTrial_set)
    __swig_setmethods__["m_initConf"] = _Ising.Ising_m_initConf_set
    __swig_getmethods__["m_initConf"] = _Ising.Ising_m_initConf_get
    if _newclass:m_initConf = _swig_property(_Ising.Ising_m_initConf_get, _Ising.Ising_m_initConf_set)
    __swig_setmethods__["m_pcStates"] = _Ising.Ising_m_pcStates_set
    __swig_getmethods__["m_pcStates"] = _Ising.Ising_m_pcStates_get
    if _newclass:m_pcStates = _swig_property(_Ising.Ising_m_pcStates_get, _Ising.Ising_m_pcStates_set)
    __swig_setmethods__["m_dBeta"] = _Ising.Ising_m_dBeta_set
    __swig_getmethods__["m_dBeta"] = _Ising.Ising_m_dBeta_get
    if _newclass:m_dBeta = _swig_property(_Ising.Ising_m_dBeta_get, _Ising.Ising_m_dBeta_set)
    __swig_setmethods__["m_dAlpha"] = _Ising.Ising_m_dAlpha_set
    __swig_getmethods__["m_dAlpha"] = _Ising.Ising_m_dAlpha_get
    if _newclass:m_dAlpha = _swig_property(_Ising.Ising_m_dAlpha_get, _Ising.Ising_m_dAlpha_set)
    __swig_setmethods__["m_dUn"] = _Ising.Ising_m_dUn_set
    __swig_getmethods__["m_dUn"] = _Ising.Ising_m_dUn_get
    if _newclass:m_dUn = _swig_property(_Ising.Ising_m_dUn_get, _Ising.Ising_m_dUn_set)
    __swig_setmethods__["m_ullCurMove"] = _Ising.Ising_m_ullCurMove_set
    __swig_getmethods__["m_ullCurMove"] = _Ising.Ising_m_ullCurMove_get
    if _newclass:m_ullCurMove = _swig_property(_Ising.Ising_m_ullCurMove_get, _Ising.Ising_m_ullCurMove_set)
    __swig_setmethods__["m_EN"] = _Ising.Ising_m_EN_set
    __swig_getmethods__["m_EN"] = _Ising.Ising_m_EN_get
    if _newclass:m_EN = _swig_property(_Ising.Ising_m_EN_get, _Ising.Ising_m_EN_set)
    __swig_setmethods__["m_curHami"] = _Ising.Ising_m_curHami_set
    __swig_getmethods__["m_curHami"] = _Ising.Ising_m_curHami_get
    if _newclass:m_curHami = _swig_property(_Ising.Ising_m_curHami_get, _Ising.Ising_m_curHami_set)
    __swig_setmethods__["m_curMag"] = _Ising.Ising_m_curMag_set
    __swig_getmethods__["m_curMag"] = _Ising.Ising_m_curMag_get
    if _newclass:m_curMag = _swig_property(_Ising.Ising_m_curMag_get, _Ising.Ising_m_curMag_set)
    __swig_setmethods__["m_accepted"] = _Ising.Ising_m_accepted_set
    __swig_getmethods__["m_accepted"] = _Ising.Ising_m_accepted_get
    if _newclass:m_accepted = _swig_property(_Ising.Ising_m_accepted_get, _Ising.Ising_m_accepted_set)
    __swig_setmethods__["m_lowEBound"] = _Ising.Ising_m_lowEBound_set
    __swig_getmethods__["m_lowEBound"] = _Ising.Ising_m_lowEBound_get
    if _newclass:m_lowEBound = _swig_property(_Ising.Ising_m_lowEBound_get, _Ising.Ising_m_lowEBound_set)
    __swig_setmethods__["m_highEBound"] = _Ising.Ising_m_highEBound_set
    __swig_getmethods__["m_highEBound"] = _Ising.Ising_m_highEBound_get
    if _newclass:m_highEBound = _swig_property(_Ising.Ising_m_highEBound_get, _Ising.Ising_m_highEBound_set)
    __swig_setmethods__["m_deltaE"] = _Ising.Ising_m_deltaE_set
    __swig_getmethods__["m_deltaE"] = _Ising.Ising_m_deltaE_get
    if _newclass:m_deltaE = _swig_property(_Ising.Ising_m_deltaE_get, _Ising.Ising_m_deltaE_set)
    __swig_setmethods__["m_deltaMag"] = _Ising.Ising_m_deltaMag_set
    __swig_getmethods__["m_deltaMag"] = _Ising.Ising_m_deltaMag_get
    if _newclass:m_deltaMag = _swig_property(_Ising.Ising_m_deltaMag_get, _Ising.Ising_m_deltaMag_set)
    __swig_setmethods__["m_ran"] = _Ising.Ising_m_ran_set
    __swig_getmethods__["m_ran"] = _Ising.Ising_m_ran_get
    if _newclass:m_ran = _swig_property(_Ising.Ising_m_ran_get, _Ising.Ising_m_ran_set)
    __swig_setmethods__["m_ran2"] = _Ising.Ising_m_ran2_set
    __swig_getmethods__["m_ran2"] = _Ising.Ising_m_ran2_get
    if _newclass:m_ran2 = _swig_property(_Ising.Ising_m_ran2_get, _Ising.Ising_m_ran2_set)
    def __init__(self): 
        this = _Ising.new_Ising()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Ising.delete_Ising
    __del__ = lambda self : None;
    def InitParameters(self): return _Ising.Ising_InitParameters(self)
    def SetArg(self, *args): return _Ising.Ising_SetArg(self, *args)
    def GetArg(self, *args): return _Ising.Ising_GetArg(self, *args)
    def SetConf(self, *args): return _Ising.Ising_SetConf(self, *args)
    def InitConf(self, *args): return _Ising.Ising_InitConf(self, *args)
    def DumpConf(self, *args): return _Ising.Ising_DumpConf(self, *args)
    def LoadConf(self, *args): return _Ising.Ising_LoadConf(self, *args)
    def Gauge(self): return _Ising.Ising_Gauge(self)
    def Delt(self): return _Ising.Ising_Delt(self)
    def DeltS(self, *args): return _Ising.Ising_DeltS(self, *args)
    __swig_setmethods__["m_pE"] = _Ising.Ising_m_pE_set
    __swig_getmethods__["m_pE"] = _Ising.Ising_m_pE_get
    if _newclass:m_pE = _swig_property(_Ising.Ising_m_pE_get, _Ising.Ising_m_pE_set)
    def SetEnergyRange(self, *args): return _Ising.Ising_SetEnergyRange(self, *args)
    def E2i(self, *args): return _Ising.Ising_E2i(self, *args)
    def I2e(self, *args): return _Ising.Ising_I2e(self, *args)
    def En2e(self, *args): return _Ising.Ising_En2e(self, *args)
    def M2i(self, *args): return _Ising.Ising_M2i(self, *args)
    def I2m(self, *args): return _Ising.Ising_I2m(self, *args)
    def WarmupToBound(self): return _Ising.Ising_WarmupToBound(self)
    def SetBound(self, *args): return _Ising.Ising_SetBound(self, *args)
    def ETraj2Hist(self, *args): return _Ising.Ising_ETraj2Hist(self, *args)
    def SetTemperature(self, *args): return _Ising.Ising_SetTemperature(self, *args)
    def MetroplisTrial(self, *args): return _Ising.Ising_MetroplisTrial(self, *args)
    __swig_setmethods__["m_pdSE"] = _Ising.Ising_m_pdSE_set
    __swig_getmethods__["m_pdSE"] = _Ising.Ising_m_pdSE_get
    if _newclass:m_pdSE = _swig_property(_Ising.Ising_m_pdSE_get, _Ising.Ising_m_pdSE_set)
    __swig_setmethods__["m_pdBE"] = _Ising.Ising_m_pdBE_set
    __swig_getmethods__["m_pdBE"] = _Ising.Ising_m_pdBE_get
    if _newclass:m_pdBE = _swig_property(_Ising.Ising_m_pdBE_get, _Ising.Ising_m_pdBE_set)
    def SetSefun(self, *args): return _Ising.Ising_SetSefun(self, *args)
    def SetSeBefun(self, *args): return _Ising.Ising_SetSeBefun(self, *args)
    def SetGCESe(self): return _Ising.Ising_SetGCESe(self)
    def SetGCEBe(self): return _Ising.Ising_SetGCEBe(self)
    def GetGCEBe(self, *args): return _Ising.Ising_GetGCEBe(self, *args)
    def GetGCESe(self, *args): return _Ising.Ising_GetGCESe(self, *args)
    def DumpSe(self, *args): return _Ising.Ising_DumpSe(self, *args)
    def LoadSe(self, *args): return _Ising.Ising_LoadSe(self, *args)
    def DumpBe(self, *args): return _Ising.Ising_DumpBe(self, *args)
    def LoadBe(self, *args): return _Ising.Ising_LoadBe(self, *args)
    def DiffSe(self): return _Ising.Ising_DiffSe(self)
    def IntegBe(self): return _Ising.Ising_IntegBe(self)
    def RunSe(self, *args): return _Ising.Ising_RunSe(self, *args)
    def RunSeBound(self, *args): return _Ising.Ising_RunSeBound(self, *args)
    def WolffClusterSE(self, *args): return _Ising.Ising_WolffClusterSE(self, *args)
    def RunWolffSe(self, *args): return _Ising.Ising_RunWolffSe(self, *args)
    def EnsAvgSe2Se(self, *args): return _Ising.Ising_EnsAvgSe2Se(self, *args)
    def EnsAvgSe2NVT(self, *args): return _Ising.Ising_EnsAvgSe2NVT(self, *args)
    def EnsAvgSe2GCE(self, *args): return _Ising.Ising_EnsAvgSe2GCE(self, *args)
    def DosAvgSe2NVT(self, *args): return _Ising.Ising_DosAvgSe2NVT(self, *args)
    def GetRoundtimes(self, *args): return _Ising.Ising_GetRoundtimes(self, *args)
    def MetroplisTrialSe(self, *args): return _Ising.Ising_MetroplisTrialSe(self, *args)
    def MetroplisTrialSeBound(self, *args): return _Ising.Ising_MetroplisTrialSeBound(self, *args)
    def MetroplisTrialGCE(self, *args): return _Ising.Ising_MetroplisTrialGCE(self, *args)
    __swig_setmethods__["m_auLocalFieldPro"] = _Ising.Ising_m_auLocalFieldPro_set
    __swig_getmethods__["m_auLocalFieldPro"] = _Ising.Ising_m_auLocalFieldPro_get
    if _newclass:m_auLocalFieldPro = _swig_property(_Ising.Ising_m_auLocalFieldPro_get, _Ising.Ising_m_auLocalFieldPro_set)
    def SetHeatBath(self, *args): return _Ising.Ising_SetHeatBath(self, *args)
    def HeatBathTrial(self, *args): return _Ising.Ising_HeatBathTrial(self, *args)
    __swig_setmethods__["m_pdLnGe"] = _Ising.Ising_m_pdLnGe_set
    __swig_getmethods__["m_pdLnGe"] = _Ising.Ising_m_pdLnGe_get
    if _newclass:m_pdLnGe = _swig_property(_Ising.Ising_m_pdLnGe_get, _Ising.Ising_m_pdLnGe_set)
    __swig_setmethods__["m_puGeN"] = _Ising.Ising_m_puGeN_set
    __swig_getmethods__["m_puGeN"] = _Ising.Ising_m_puGeN_get
    if _newclass:m_puGeN = _swig_property(_Ising.Ising_m_puGeN_get, _Ising.Ising_m_puGeN_set)
    __swig_setmethods__["m_dLnf"] = _Ising.Ising_m_dLnf_set
    __swig_getmethods__["m_dLnf"] = _Ising.Ising_m_dLnf_get
    if _newclass:m_dLnf = _swig_property(_Ising.Ising_m_dLnf_get, _Ising.Ising_m_dLnf_set)
    __swig_setmethods__["m_dLnfPrecision"] = _Ising.Ising_m_dLnfPrecision_set
    __swig_getmethods__["m_dLnfPrecision"] = _Ising.Ising_m_dLnfPrecision_get
    if _newclass:m_dLnfPrecision = _swig_property(_Ising.Ising_m_dLnfPrecision_get, _Ising.Ising_m_dLnfPrecision_set)
    __swig_setmethods__["m_dFlatRate"] = _Ising.Ising_m_dFlatRate_set
    __swig_getmethods__["m_dFlatRate"] = _Ising.Ising_m_dFlatRate_get
    if _newclass:m_dFlatRate = _swig_property(_Ising.Ising_m_dFlatRate_get, _Ising.Ising_m_dFlatRate_set)
    def SetWL(self, *args): return _Ising.Ising_SetWL(self, *args)
    def WLResetGeN(self): return _Ising.Ising_WLResetGeN(self)
    def WLCheckBelowAVG(self): return _Ising.Ising_WLCheckBelowAVG(self)
    def WangLandauTrial(self, *args): return _Ising.Ising_WangLandauTrial(self, *args)
    def WLResetGeNBound(self): return _Ising.Ising_WLResetGeNBound(self)
    def WLCheckBelowAVGBound(self): return _Ising.Ising_WLCheckBelowAVGBound(self)
    def WangLandauTrialBound(self, *args): return _Ising.Ising_WangLandauTrialBound(self, *args)
    __swig_setmethods__["m_pClusterStack"] = _Ising.Ising_m_pClusterStack_set
    __swig_getmethods__["m_pClusterStack"] = _Ising.Ising_m_pClusterStack_get
    if _newclass:m_pClusterStack = _swig_property(_Ising.Ising_m_pClusterStack_get, _Ising.Ising_m_pClusterStack_set)
    __swig_setmethods__["m_dPadd"] = _Ising.Ising_m_dPadd_set
    __swig_getmethods__["m_dPadd"] = _Ising.Ising_m_dPadd_get
    if _newclass:m_dPadd = _swig_property(_Ising.Ising_m_dPadd_get, _Ising.Ising_m_dPadd_set)
    def WolffCluster(self, *args): return _Ising.Ising_WolffCluster(self, *args)
    __swig_setmethods__["m_pClusterSeq"] = _Ising.Ising_m_pClusterSeq_set
    __swig_getmethods__["m_pClusterSeq"] = _Ising.Ising_m_pClusterSeq_get
    if _newclass:m_pClusterSeq = _swig_property(_Ising.Ising_m_pClusterSeq_get, _Ising.Ising_m_pClusterSeq_set)
    __swig_setmethods__["m_csp"] = _Ising.Ising_m_csp_set
    __swig_getmethods__["m_csp"] = _Ising.Ising_m_csp_get
    if _newclass:m_csp = _swig_property(_Ising.Ising_m_csp_get, _Ising.Ising_m_csp_set)
    __swig_setmethods__["m_segAccumCS"] = _Ising.Ising_m_segAccumCS_set
    __swig_getmethods__["m_segAccumCS"] = _Ising.Ising_m_segAccumCS_get
    if _newclass:m_segAccumCS = _swig_property(_Ising.Ising_m_segAccumCS_get, _Ising.Ising_m_segAccumCS_set)
    __swig_setmethods__["m_dAccumCS"] = _Ising.Ising_m_dAccumCS_set
    __swig_getmethods__["m_dAccumCS"] = _Ising.Ising_m_dAccumCS_get
    if _newclass:m_dAccumCS = _swig_property(_Ising.Ising_m_dAccumCS_get, _Ising.Ising_m_dAccumCS_set)
    __swig_setmethods__["m_GCEWFavgC"] = _Ising.Ising_m_GCEWFavgC_set
    __swig_getmethods__["m_GCEWFavgC"] = _Ising.Ising_m_GCEWFavgC_get
    if _newclass:m_GCEWFavgC = _swig_property(_Ising.Ising_m_GCEWFavgC_get, _Ising.Ising_m_GCEWFavgC_set)
    __swig_setmethods__["m_dGCEWFavgE"] = _Ising.Ising_m_dGCEWFavgE_set
    __swig_getmethods__["m_dGCEWFavgE"] = _Ising.Ising_m_dGCEWFavgE_get
    if _newclass:m_dGCEWFavgE = _swig_property(_Ising.Ising_m_dGCEWFavgE_get, _Ising.Ising_m_dGCEWFavgE_set)
    __swig_setmethods__["m_dGCEWFsegAccumE"] = _Ising.Ising_m_dGCEWFsegAccumE_set
    __swig_getmethods__["m_dGCEWFsegAccumE"] = _Ising.Ising_m_dGCEWFsegAccumE_get
    if _newclass:m_dGCEWFsegAccumE = _swig_property(_Ising.Ising_m_dGCEWFsegAccumE_get, _Ising.Ising_m_dGCEWFsegAccumE_set)
    def ClusterDelt(self, *args): return _Ising.Ising_ClusterDelt(self, *args)
    def WolffClusterGCE(self, *args): return _Ising.Ising_WolffClusterGCE(self, *args)
    __swig_setmethods__["m_curEindex"] = _Ising.Ising_m_curEindex_set
    __swig_getmethods__["m_curEindex"] = _Ising.Ising_m_curEindex_get
    if _newclass:m_curEindex = _swig_property(_Ising.Ising_m_curEindex_get, _Ising.Ising_m_curEindex_set)
    def RanWalkTrailEBound(self, *args): return _Ising.Ising_RanWalkTrailEBound(self, *args)
    def PySetWolff(self): return _Ising.Ising_PySetWolff(self)
    def PySetGEWolff(self): return _Ising.Ising_PySetGEWolff(self)
    def PyGetEnergyRange(self): return _Ising.Ising_PyGetEnergyRange(self)
    def PyETraj2Hist(self, *args): return _Ising.Ising_PyETraj2Hist(self, *args)
    def PyMTraj2Hist(self, *args): return _Ising.Ising_PyMTraj2Hist(self, *args)
Ising_swigregister = _Ising.Ising_swigregister
Ising_swigregister(Ising)

class nvdbl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nvdbl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nvdbl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_pData"] = _Ising.nvdbl_m_pData_set
    __swig_getmethods__["m_pData"] = _Ising.nvdbl_m_pData_get
    if _newclass:m_pData = _swig_property(_Ising.nvdbl_m_pData_get, _Ising.nvdbl_m_pData_set)
    __swig_setmethods__["m_sDelim"] = _Ising.nvdbl_m_sDelim_set
    __swig_getmethods__["m_sDelim"] = _Ising.nvdbl_m_sDelim_get
    if _newclass:m_sDelim = _swig_property(_Ising.nvdbl_m_sDelim_get, _Ising.nvdbl_m_sDelim_set)
    __swig_setmethods__["m_uLen"] = _Ising.nvdbl_m_uLen_set
    __swig_getmethods__["m_uLen"] = _Ising.nvdbl_m_uLen_get
    if _newclass:m_uLen = _swig_property(_Ising.nvdbl_m_uLen_get, _Ising.nvdbl_m_uLen_set)
    def __init__(self, *args): 
        this = _Ising.new_nvdbl(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self, *args): return _Ising.nvdbl_reset(self, *args)
    __swig_destroy__ = _Ising.delete_nvdbl
    __del__ = lambda self : None;
    def fill(self, *args): return _Ising.nvdbl_fill(self, *args)
    def dump(self, *args): return _Ising.nvdbl_dump(self, *args)
    def dump_bin(self, *args): return _Ising.nvdbl_dump_bin(self, *args)
    def load(self, *args): return _Ising.nvdbl_load(self, *args)
    def load_bin(self, *args): return _Ising.nvdbl_load_bin(self, *args)
    def print_cout(self): return _Ising.nvdbl_print_cout(self)
    def sum(self): return _Ising.nvdbl_sum(self)
    def integral(self, *args): return _Ising.nvdbl_integral(self, *args)
    def diff(self, *args): return _Ising.nvdbl_diff(self, *args)
    def mean(self): return _Ising.nvdbl_mean(self)
    def std(self): return _Ising.nvdbl_std(self)
    def jk_mean_std_err_tau(self, *args): return _Ising.nvdbl_jk_mean_std_err_tau(self, *args)
    def mean_std(self, *args): return _Ising.nvdbl_mean_std(self, *args)
    def mean_std_err(self, *args): return _Ising.nvdbl_mean_std_err(self, *args)
    def mean_std_err_blk(self, *args): return _Ising.nvdbl_mean_std_err_blk(self, *args)
    def get_eq(self, *args): return _Ising.nvdbl_get_eq(self, *args)
    def auto_corr(self, *args): return _Ising.nvdbl_auto_corr(self, *args)
    def tunnelup_times(self, *args): return _Ising.nvdbl_tunnelup_times(self, *args)
    def statis(self, *args): return _Ising.nvdbl_statis(self, *args)
    def jk_statis(self, *args): return _Ising.nvdbl_jk_statis(self, *args)
    def jack_knife2(self, start = 0, reduce_factor = 1): return _Ising.nvdbl_jack_knife2(self, start, reduce_factor)
    def jack_knife_mean_error(self, *args): return _Ising.nvdbl_jack_knife_mean_error(self, *args)
    def integrated_time(self, *args): return _Ising.nvdbl_integrated_time(self, *args)
    def expo_times(self, *args): return _Ising.nvdbl_expo_times(self, *args)
nvdbl_swigregister = _Ising.nvdbl_swigregister
nvdbl_swigregister(nvdbl)

class nvint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nvint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nvint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_pData"] = _Ising.nvint_m_pData_set
    __swig_getmethods__["m_pData"] = _Ising.nvint_m_pData_get
    if _newclass:m_pData = _swig_property(_Ising.nvint_m_pData_get, _Ising.nvint_m_pData_set)
    __swig_setmethods__["m_sDelim"] = _Ising.nvint_m_sDelim_set
    __swig_getmethods__["m_sDelim"] = _Ising.nvint_m_sDelim_get
    if _newclass:m_sDelim = _swig_property(_Ising.nvint_m_sDelim_get, _Ising.nvint_m_sDelim_set)
    __swig_setmethods__["m_uLen"] = _Ising.nvint_m_uLen_set
    __swig_getmethods__["m_uLen"] = _Ising.nvint_m_uLen_get
    if _newclass:m_uLen = _swig_property(_Ising.nvint_m_uLen_get, _Ising.nvint_m_uLen_set)
    def __init__(self, *args): 
        this = _Ising.new_nvint(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self, *args): return _Ising.nvint_reset(self, *args)
    __swig_destroy__ = _Ising.delete_nvint
    __del__ = lambda self : None;
    def fill(self, *args): return _Ising.nvint_fill(self, *args)
    def dump(self, *args): return _Ising.nvint_dump(self, *args)
    def dump_bin(self, *args): return _Ising.nvint_dump_bin(self, *args)
    def load(self, *args): return _Ising.nvint_load(self, *args)
    def load_bin(self, *args): return _Ising.nvint_load_bin(self, *args)
    def print_cout(self): return _Ising.nvint_print_cout(self)
    def sum(self): return _Ising.nvint_sum(self)
    def integral(self, *args): return _Ising.nvint_integral(self, *args)
    def diff(self, *args): return _Ising.nvint_diff(self, *args)
    def mean(self): return _Ising.nvint_mean(self)
    def std(self): return _Ising.nvint_std(self)
    def jk_mean_std_err_tau(self, *args): return _Ising.nvint_jk_mean_std_err_tau(self, *args)
    def mean_std(self, *args): return _Ising.nvint_mean_std(self, *args)
    def mean_std_err(self, *args): return _Ising.nvint_mean_std_err(self, *args)
    def mean_std_err_blk(self, *args): return _Ising.nvint_mean_std_err_blk(self, *args)
    def get_eq(self, *args): return _Ising.nvint_get_eq(self, *args)
    def auto_corr(self, *args): return _Ising.nvint_auto_corr(self, *args)
    def tunnelup_times(self, *args): return _Ising.nvint_tunnelup_times(self, *args)
    def statis(self, *args): return _Ising.nvint_statis(self, *args)
    def jk_statis(self, *args): return _Ising.nvint_jk_statis(self, *args)
    def jack_knife2(self, start = 0, reduce_factor = 1): return _Ising.nvint_jack_knife2(self, start, reduce_factor)
    def jack_knife_mean_error(self, *args): return _Ising.nvint_jack_knife_mean_error(self, *args)
    def integrated_time(self, *args): return _Ising.nvint_integrated_time(self, *args)
    def expo_times(self, *args): return _Ising.nvint_expo_times(self, *args)
nvint_swigregister = _Ising.nvint_swigregister
nvint_swigregister(nvint)



