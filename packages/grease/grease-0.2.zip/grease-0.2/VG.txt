Ideal Vector Graphics Lib Qualities:
	- Liberal, open source license (BSD or MIT are best)
	- Well documented
	- Cross-platform
	- Hardware accelerated (i.e., OpenGL based)
Essential Features:
	- Usual shape fill and stroke
	- Bezier curves
	- Supports Porter-Duff composition (http://keithp.com/~keithp/porterduff/p253-porter.pdf)
	- Render-to-texture or equivilant
Nice to have features:
	- Text rendering
	- SVG support

ShivaVG -
	Links:
		http://sourceforge.net/projects/shivavg/
		http://www.khronos.org/openvg/
	Pros: 
		- Implments a standard (Kronos OpenVG)
		- API well Documented in standard spec
		- Built on OpenGL
		- Small dependancy (bundling very possible)
		- Low level API like OpenGL
		- Implemented in ANSI C, And even has python (pyrex) bindings
	Cons:
		- license not ideal (LGPL)
		- No pure python implementation
		- No text rendering
		- OpenVG seems unloved
		- Low level API like OpenGL (may require a layer above for usabillity)
	Contender: Yes

CFAVGL (Casey's Freaking Awesome Vector Graphics Lib):
	Pros:
		- MIT License
		- Is exactly what I want
		- Pure Python and Python/C implementation
		- html5 canvas/processing like API 
		- Built on OpenGL
		- Is faster than heck
	Cons:
		- Isn't implemented
		- Isn't a standard (no one else will know it)
		- I must document and maintain it
		- Will be a toy at first, but a fast toy
	Contender: Unfortunately, yes

Squirtle:
	Link: 
		http://www.supereffective.org/pages/Squirtle-SVG-Library
	Pros:
		- BSD License
		- Pure python implementation
		- Implements a standard
		- Built on pyglet/OpenGL
		- SVG support
		- Lightweight / Single-purpose
	Cons:
		- Not an api as such, just an SVG renderer, and not a complete one (that's hard)
		- Uses immediate mode OpenGL and display lists, which are deprecated
		  but honestly are probably the best way to implement this from python
	Contender: As a complete solution no, for SVG support alone, yes

Qt Arthur -
	Links:
		http://doc.trolltech.com/4.4/qt4-arthur.html
		http://doc.trolltech.com/4.4/qpainter.html
		http://www.riverbankcomputing.co.uk/software/pyqt/intro
	Pros:
		- Very Good Docs
		- SVG support
		- Wide cross-platform back-end support including OpenGL
	Cons:
		- Performance unknown
		- No pure python implementation
		- Qt is itself a huge framework, and not really targeted for games
		- Qt is a pretty huge dependancy, though widely packaged
		- Qt is LGPL, pyQt is GPL (with user license exceptions which confuses me)
		- C++ Impl makes it hard to contemplate my own wrapper
	Contender: I'm thinking no

Cairo -
	Links:
		http://www.cairographics.org/
	Pros:
		- LGPL or MPL
		- Very active project
		- Awesome text rendering via pango
		- SVG support
		- Implemented in C
	Cons:
		- No pure python implementation
		- Does not seem targetted for games, more for print
		- OpenGL backend "experimental"
		- Not really high performance
	Contender: No

Glitz (Part of Cairo project) -
	Lnks:
		http://www.freedesktop.org/wiki/Software/glitz
	Pros:
		- Liberal License
		- C Implementation
		- Cross-platform
		- Built on OpenGL
	Cons:
		- XRender-centric
		- Undocumented
		- Abandonware
		- Deprecated from Cairo itself?
	Contender: No

PyProcessing -
	Links:
		http://pyprocessing.berlios.de/
	Pros:
		- Immediate Mode clean API
		- Well documented (via Java Processing)
		- BSD License
		- Pure python implementation, built on Pyglet
	Cons:
		- PyProcessing not really high performance
		- PyProcessing uses immediate mode OpenGL, which is deprecated
		- PyProcessing is only a pure python implementation
		- Both are more targetted toward rapid eye-candy dev than games
	Contender: No, though good inspiration
