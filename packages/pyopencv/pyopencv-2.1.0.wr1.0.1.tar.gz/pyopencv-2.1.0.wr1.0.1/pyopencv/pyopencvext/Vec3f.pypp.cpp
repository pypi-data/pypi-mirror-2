// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "ndarray.hpp"
#include "Vec3f.pypp.hpp"

namespace bp = boost::python;

void register_Vec3f_class(){

    { //::cv::Vec< float, 3 >
        typedef bp::class_< cv::Vec< float, 3 > > Vec3f_exposer_t;
        Vec3f_exposer_t Vec3f_exposer = Vec3f_exposer_t( "Vec3f", bp::init< >() );
        bp::scope Vec3f_scope( Vec3f_exposer );
        Vec3f_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Vec< float, 3 > >() );
        bp::scope().attr("depth") = (int)cv::Vec<float, 3>::depth;
        bp::scope().attr("channels") = (int)cv::Vec<float, 3>::channels;
        bp::scope().attr("type") = (int)cv::Vec<float, 3>::type;
        Vec3f_exposer.def( bp::init< float >(( bp::arg("v0") )) );
        bp::implicitly_convertible< float, cv::Vec< float, 3 > >();
        Vec3f_exposer.def( bp::init< float, float >(( bp::arg("v0"), bp::arg("v1") )) );
        Vec3f_exposer.def( bp::init< float, float, float >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") )) );
        Vec3f_exposer.def( bp::init< float, float, float, float >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        Vec3f_exposer.def( bp::init< float, float, float, float, float >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4") )) );
        Vec3f_exposer.def( bp::init< float, float, float, float, float, float >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5") )) );
        Vec3f_exposer.def( bp::init< float, float, float, float, float, float, float >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6") )) );
        Vec3f_exposer.def( bp::init< float, float, float, float, float, float, float, float >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7") )) );
        Vec3f_exposer.def( bp::init< float, float, float, float, float, float, float, float, float >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8") )) );
        Vec3f_exposer.def( bp::init< float, float, float, float, float, float, float, float, float, float >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8"), bp::arg("v9") )) );
        Vec3f_exposer.def( bp::init< cv::Vec< float, 3 > const & >(( bp::arg("v") )) );
        { //::cv::Vec< float, 3 >::all
        
            typedef cv::Vec< float, 3 > exported_class_t;
            typedef ::cv::Vec< float, 3 > ( *all_function_type )( float );
            
            Vec3f_exposer.def( 
                "all"
                , all_function_type( &::cv::Vec< float, 3 >::all )
                , ( bp::arg("alpha") ) );
        
        }
        { //::cv::Vec< float, 3 >::cross
        
            typedef cv::Vec< float, 3 > exported_class_t;
            typedef ::cv::Vec< float, 3 > ( exported_class_t::*cross_function_type )( ::cv::Vec< float, 3 > const & ) const;
            
            Vec3f_exposer.def( 
                "cross"
                , cross_function_type( &::cv::Vec< float, 3 >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< float, 3 >::ddot
        
            typedef cv::Vec< float, 3 > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Vec< float, 3 > const & ) const;
            
            Vec3f_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Vec< float, 3 >::ddot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< float, 3 >::dot
        
            typedef cv::Vec< float, 3 > exported_class_t;
            typedef float ( exported_class_t::*dot_function_type )( ::cv::Vec< float, 3 > const & ) const;
            
            Vec3f_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Vec< float, 3 >::dot )
                , ( bp::arg("v") ) );
        
        }
        Vec3f_exposer.def( "__temp_func", &cv::Vec< float, 3 >::operator ::CvScalar  );
        { //::cv::Vec< float, 3 >::operator[]
        
            typedef cv::Vec< float, 3 > exported_class_t;
            typedef float ( exported_class_t::*__getitem___function_type )( int ) const;
            
            Vec3f_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< float, 3 >::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::cv::Vec< float, 3 >::operator[]
        
            typedef cv::Vec< float, 3 > exported_class_t;
            typedef float & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            Vec3f_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< float, 3 >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        Vec3f_exposer.staticmethod( "all" );
        Vec3f_exposer.def("from_ndarray", &bp::from_ndarray< cv::Vec3f >, (bp::arg("arr")) );
        Vec3f_exposer.staticmethod("from_ndarray");
        Vec3f_exposer.add_property("ndarray", &bp::as_ndarray< cv::Vec3f >);
    }

}
