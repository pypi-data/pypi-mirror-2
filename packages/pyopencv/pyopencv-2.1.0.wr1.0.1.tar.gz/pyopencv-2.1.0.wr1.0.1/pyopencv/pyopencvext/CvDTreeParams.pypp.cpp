// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "CvDTreeParams.pypp.hpp"

namespace bp = boost::python;

void register_CvDTreeParams_class(){

    bp::class_< CvDTreeParams >( "CvDTreeParams", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvDTreeParams >() )    
        .def( bp::init< int, int, float, bool, int, int, bool, bool, float const * >(( bp::arg("_max_depth"), bp::arg("_min_sample_count"), bp::arg("_regression_accuracy"), bp::arg("_use_surrogates"), bp::arg("_max_categories"), bp::arg("_cv_folds"), bp::arg("_use_1se_rule"), bp::arg("_truncate_pruned_tree"), bp::arg("_priors") )) )    
        .def_readwrite( "cv_folds", &CvDTreeParams::cv_folds )    
        .def_readwrite( "max_categories", &CvDTreeParams::max_categories )    
        .def_readwrite( "max_depth", &CvDTreeParams::max_depth )    
        .def_readwrite( "min_sample_count", &CvDTreeParams::min_sample_count )    
        .def_readwrite( "regression_accuracy", &CvDTreeParams::regression_accuracy )    
        .def_readwrite( "truncate_pruned_tree", &CvDTreeParams::truncate_pruned_tree )    
        .def_readwrite( "use_1se_rule", &CvDTreeParams::use_1se_rule )    
        .def_readwrite( "use_surrogates", &CvDTreeParams::use_surrogates );

}
