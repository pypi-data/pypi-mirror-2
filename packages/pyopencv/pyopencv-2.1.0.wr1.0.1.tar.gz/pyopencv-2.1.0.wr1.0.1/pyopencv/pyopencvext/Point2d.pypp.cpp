// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "ndarray.hpp"
#include "Point2d.pypp.hpp"

namespace bp = boost::python;

void register_Point2d_class(){

    { //::cv::Point_< double >
        typedef bp::class_< cv::Point_< double > > Point2d_exposer_t;
        Point2d_exposer_t Point2d_exposer = Point2d_exposer_t( "Point2d", bp::init< >() );
        bp::scope Point2d_scope( Point2d_exposer );
        Point2d_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Point_< double > >() );
        Point2d_exposer.def( bp::init< double, double >(( bp::arg("_x"), bp::arg("_y") )) );
        Point2d_exposer.def( bp::init< cv::Point_< double > const & >(( bp::arg("pt") )) );
        Point2d_exposer.def( bp::init< CvPoint const & >(( bp::arg("pt") )) );
        bp::implicitly_convertible< CvPoint const &, cv::Point_< double > >();
        Point2d_exposer.def( bp::init< CvPoint2D32f const & >(( bp::arg("pt") )) );
        bp::implicitly_convertible< CvPoint2D32f const &, cv::Point_< double > >();
        Point2d_exposer.def( bp::init< cv::Size_< double > const & >(( bp::arg("sz") )) );
        bp::implicitly_convertible< cv::Size_< double > const &, cv::Point_< double > >();
        Point2d_exposer.def( bp::init< cv::Vec< double, 2 > const & >(( bp::arg("v") )) );
        bp::implicitly_convertible< cv::Vec< double, 2 > const &, cv::Point_< double > >();
        { //::cv::Point_< double >::ddot
        
            typedef cv::Point_< double > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Point_< double > const & ) const;
            
            Point2d_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Point_< double >::ddot )
                , ( bp::arg("pt") ) );
        
        }
        { //::cv::Point_< double >::dot
        
            typedef cv::Point_< double > exported_class_t;
            typedef double ( exported_class_t::*dot_function_type )( ::cv::Point_< double > const & ) const;
            
            Point2d_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Point_< double >::dot )
                , ( bp::arg("pt") ) );
        
        }
        { //::cv::Point_< double >::inside
        
            typedef cv::Point_< double > exported_class_t;
            typedef bool ( exported_class_t::*inside_function_type )( ::cv::Rect_< double > const & ) const;
            
            Point2d_exposer.def( 
                "inside"
                , inside_function_type( &::cv::Point_< double >::inside )
                , ( bp::arg("r") ) );
        
        }
        Point2d_exposer.def( "__temp_func", &cv::Point_< double >::operator ::CvPoint  );
        Point2d_exposer.def( "__temp_func", &cv::Point_< double >::operator ::CvPoint2D32f  );
        Point2d_exposer.def( "as_Vec2d", &cv::Point_< double >::operator ::cv::Vec< double, 2 >  );
        { //::cv::Point_< double >::operator=
        
            typedef cv::Point_< double > exported_class_t;
            typedef ::cv::Point_< double > & ( exported_class_t::*assign_function_type )( ::cv::Point_< double > const & ) ;
            
            Point2d_exposer.def( 
                "assign"
                , assign_function_type( &::cv::Point_< double >::operator= )
                , ( bp::arg("pt") )
                , bp::return_self< >() );
        
        }
        Point2d_exposer.def_readwrite( "x", &cv::Point_< double >::x );
        Point2d_exposer.def_readwrite( "y", &cv::Point_< double >::y );
        Point2d_exposer.def("from_ndarray", &bp::from_ndarray< cv::Point2d >, (bp::arg("arr")) );
        Point2d_exposer.staticmethod("from_ndarray");
        Point2d_exposer.add_property("ndarray", &bp::as_ndarray< cv::Point2d >);
    }

}
