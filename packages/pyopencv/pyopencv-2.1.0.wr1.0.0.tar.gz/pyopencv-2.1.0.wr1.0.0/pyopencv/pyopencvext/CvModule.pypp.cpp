// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "boost/python/object.hpp"
#include "CvModule.pypp.hpp"

namespace bp = boost::python;

static ::CvModuleInfo * get_info( ::CvModule const & inst ) { return inst.info; }

static ::CvModuleInfo * get_first( ::CvModule const & inst ) { return inst.first; }

static ::CvModuleInfo * get_last( ::CvModule const & inst ) { return inst.last; }

void register_CvModule_class(){

    { //::CvModule
        typedef bp::class_< CvModule > CvModule_exposer_t;
        CvModule_exposer_t CvModule_exposer = CvModule_exposer_t( "CvModule", bp::init< CvModuleInfo * >(( bp::arg("_info") )) );
        bp::scope CvModule_scope( CvModule_exposer );
        CvModule_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< CvModule >() );
        bp::implicitly_convertible< CvModuleInfo *, CvModule >();
        CvModule_exposer.add_property( "info", bp::make_function(&::get_info, bp::return_internal_reference<>()) );
        CvModule_exposer.add_property( "first", bp::make_function(&::get_first, bp::return_internal_reference<>()) );
        CvModule_exposer.add_property( "last", bp::make_function(&::get_last, bp::return_internal_reference<>()) );
    }

}
