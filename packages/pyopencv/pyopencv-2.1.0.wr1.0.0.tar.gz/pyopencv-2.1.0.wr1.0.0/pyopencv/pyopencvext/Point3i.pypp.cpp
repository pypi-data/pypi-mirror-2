// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "ndarray.hpp"
#include "Point3i.pypp.hpp"

namespace bp = boost::python;

void register_Point3i_class(){

    { //::cv::Point3_< int >
        typedef bp::class_< cv::Point3_< int > > Point3i_exposer_t;
        Point3i_exposer_t Point3i_exposer = Point3i_exposer_t( "Point3i", bp::init< >() );
        bp::scope Point3i_scope( Point3i_exposer );
        Point3i_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Point3_< int > >() );
        Point3i_exposer.def( bp::init< int, int, int >(( bp::arg("_x"), bp::arg("_y"), bp::arg("_z") )) );
        Point3i_exposer.def( bp::init< cv::Point3_< int > const & >(( bp::arg("pt") )) );
        Point3i_exposer.def( bp::init< cv::Point_< int > const & >(( bp::arg("pt") )) );
        bp::implicitly_convertible< cv::Point_< int > const &, cv::Point3_< int > >();
        Point3i_exposer.def( bp::init< cv::Vec< int, 3 > const & >(( bp::arg("v") )) );
        bp::implicitly_convertible< cv::Vec< int, 3 > const &, cv::Point3_< int > >();
        { //::cv::Point3_< int >::ddot
        
            typedef cv::Point3_< int > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Point3_< int > const & ) const;
            
            Point3i_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Point3_< int >::ddot )
                , ( bp::arg("pt") ) );
        
        }
        { //::cv::Point3_< int >::dot
        
            typedef cv::Point3_< int > exported_class_t;
            typedef int ( exported_class_t::*dot_function_type )( ::cv::Point3_< int > const & ) const;
            
            Point3i_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Point3_< int >::dot )
                , ( bp::arg("pt") ) );
        
        }
        Point3i_exposer.def( "as_Vec3i", &cv::Point3_< int >::operator ::cv::Vec< int, 3 >  );
        { //::cv::Point3_< int >::operator=
        
            typedef cv::Point3_< int > exported_class_t;
            typedef ::cv::Point3_< int > & ( exported_class_t::*assign_function_type )( ::cv::Point3_< int > const & ) ;
            
            Point3i_exposer.def( 
                "assign"
                , assign_function_type( &::cv::Point3_< int >::operator= )
                , ( bp::arg("pt") )
                , bp::return_self< >() );
        
        }
        Point3i_exposer.def_readwrite( "x", &cv::Point3_< int >::x );
        Point3i_exposer.def_readwrite( "y", &cv::Point3_< int >::y );
        Point3i_exposer.def_readwrite( "z", &cv::Point3_< int >::z );
        Point3i_exposer.def("from_ndarray", &bp::from_ndarray< cv::Point3i >, (bp::arg("arr")) );
        Point3i_exposer.staticmethod("from_ndarray");
        Point3i_exposer.add_property("ndarray", &bp::as_ndarray< cv::Point3i >);
    }

}
