// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "BaseColumnFilter.pypp.hpp"

namespace bp = boost::python;

struct BaseColumnFilter_wrapper : cv::BaseColumnFilter, bp::wrapper< cv::BaseColumnFilter > {

    BaseColumnFilter_wrapper(cv::BaseColumnFilter const & arg )
    : cv::BaseColumnFilter( arg )
      , bp::wrapper< cv::BaseColumnFilter >(){
        // copy constructor
        
    }

    BaseColumnFilter_wrapper( )
    : cv::BaseColumnFilter( )
      , bp::wrapper< cv::BaseColumnFilter >(){
        // null constructor
    
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->cv::BaseColumnFilter::reset(  );
        }
    }
    
    void default_reset(  ) {
        cv::BaseColumnFilter::reset( );
    }

};

void register_BaseColumnFilter_class(){

    bp::class_< BaseColumnFilter_wrapper >( "BaseColumnFilter", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::BaseColumnFilter >() )    
        .def( 
            "reset"
            , (void ( cv::BaseColumnFilter::* )(  ) )(&::cv::BaseColumnFilter::reset)
            , (void ( BaseColumnFilter_wrapper::* )(  ) )(&BaseColumnFilter_wrapper::default_reset) )    
        .def_readwrite( "anchor", &cv::BaseColumnFilter::anchor )    
        .def_readwrite( "ksize", &cv::BaseColumnFilter::ksize );

}
