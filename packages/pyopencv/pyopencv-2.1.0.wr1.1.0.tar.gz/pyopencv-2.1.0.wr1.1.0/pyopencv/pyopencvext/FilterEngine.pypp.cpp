// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "FilterEngine.pypp.hpp"

namespace bp = boost::python;

struct FilterEngine_wrapper : cv::FilterEngine, bp::wrapper< cv::FilterEngine > {

    FilterEngine_wrapper(cv::FilterEngine const & arg )
    : cv::FilterEngine( arg )
      , bp::wrapper< cv::FilterEngine >(){
        // copy constructor
        
    }

    FilterEngine_wrapper( )
    : cv::FilterEngine( )
      , bp::wrapper< cv::FilterEngine >(){
        // null constructor
    
    }

    FilterEngine_wrapper(::cv::Ptr< cv::BaseFilter > const & _filter2D, ::cv::Ptr< cv::BaseRowFilter > const & _rowFilter, ::cv::Ptr< cv::BaseColumnFilter > const & _columnFilter, int srcType, int dstType, int bufType, int _rowBorderType=int(::cv::BORDER_REPLICATE), int _columnBorderType=-0x000000001, ::cv::Scalar const & _borderValue=cv::Scalar_<double>() )
    : cv::FilterEngine( boost::ref(_filter2D), boost::ref(_rowFilter), boost::ref(_columnFilter), srcType, dstType, bufType, _rowBorderType, _columnBorderType, boost::ref(_borderValue) )
      , bp::wrapper< cv::FilterEngine >(){
        // constructor
    
    }

    virtual void apply( ::cv::Mat const & src, ::cv::Mat & dst, ::cv::Rect const & srcRoi=cv::Rect_<int>(0, 0, -0x000000001, -0x000000001), ::cv::Point dstOfs=cv::Point_<int>(0, 0), bool isolated=false ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(src), boost::ref(dst), boost::ref(srcRoi), dstOfs, isolated );
        else{
            this->cv::FilterEngine::apply( boost::ref(src), boost::ref(dst), boost::ref(srcRoi), dstOfs, isolated );
        }
    }
    
    void default_apply( ::cv::Mat const & src, ::cv::Mat & dst, ::cv::Rect const & srcRoi=cv::Rect_<int>(0, 0, -0x000000001, -0x000000001), ::cv::Point dstOfs=cv::Point_<int>(0, 0), bool isolated=false ) {
        cv::FilterEngine::apply( boost::ref(src), boost::ref(dst), boost::ref(srcRoi), dstOfs, isolated );
    }

    virtual int start( ::cv::Size wholeSize, ::cv::Rect roi, int maxBufRows=-0x000000001 ) {
        if( bp::override func_start = this->get_override( "start" ) )
            return func_start( wholeSize, roi, maxBufRows );
        else{
            return this->cv::FilterEngine::start( wholeSize, roi, maxBufRows );
        }
    }
    
    int default_start( ::cv::Size wholeSize, ::cv::Rect roi, int maxBufRows=-0x000000001 ) {
        return cv::FilterEngine::start( wholeSize, roi, maxBufRows );
    }

    virtual int start( ::cv::Mat const & src, ::cv::Rect const & srcRoi=cv::Rect_<int>(0, 0, -0x000000001, -0x000000001), bool isolated=false, int maxBufRows=-0x000000001 ) {
        if( bp::override func_start = this->get_override( "start" ) )
            return func_start( boost::ref(src), boost::ref(srcRoi), isolated, maxBufRows );
        else{
            return this->cv::FilterEngine::start( boost::ref(src), boost::ref(srcRoi), isolated, maxBufRows );
        }
    }
    
    int default_start( ::cv::Mat const & src, ::cv::Rect const & srcRoi=cv::Rect_<int>(0, 0, -0x000000001, -0x000000001), bool isolated=false, int maxBufRows=-0x000000001 ) {
        return cv::FilterEngine::start( boost::ref(src), boost::ref(srcRoi), isolated, maxBufRows );
    }

};

void register_FilterEngine_class(){

    bp::class_< FilterEngine_wrapper >( "FilterEngine", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::FilterEngine >() )    
        .def( bp::init< cv::Ptr< cv::BaseFilter > const &, cv::Ptr< cv::BaseRowFilter > const &, cv::Ptr< cv::BaseColumnFilter > const &, int, int, int, bp::optional< int, int, cv::Scalar const & > >(( bp::arg("_filter2D"), bp::arg("_rowFilter"), bp::arg("_columnFilter"), bp::arg("srcType"), bp::arg("dstType"), bp::arg("bufType"), bp::arg("_rowBorderType")=int(::cv::BORDER_REPLICATE), bp::arg("_columnBorderType")=(int)(-0x000000001), bp::arg("_borderValue")=cv::Scalar_<double>() )) )    
        .def( 
            "apply"
            , (void ( cv::FilterEngine::* )( ::cv::Mat const &,::cv::Mat &,::cv::Rect const &,::cv::Point,bool ) )(&::cv::FilterEngine::apply)
            , (void ( FilterEngine_wrapper::* )( ::cv::Mat const &,::cv::Mat &,::cv::Rect const &,::cv::Point,bool ) )(&FilterEngine_wrapper::default_apply)
            , ( bp::arg("src"), bp::arg("dst"), bp::arg("srcRoi")=cv::Rect_<int>(0, 0, -0x000000001, -0x000000001), bp::arg("dstOfs")=cv::Point_<int>(0, 0), bp::arg("isolated")=(bool)(false) ) )    
        .def( 
            "init"
            , (void ( cv::FilterEngine::* )( ::cv::Ptr< cv::BaseFilter > const &,::cv::Ptr< cv::BaseRowFilter > const &,::cv::Ptr< cv::BaseColumnFilter > const &,int,int,int,int,int,::cv::Scalar const & ) )( &::cv::FilterEngine::init )
            , ( bp::arg("_filter2D"), bp::arg("_rowFilter"), bp::arg("_columnFilter"), bp::arg("srcType"), bp::arg("dstType"), bp::arg("bufType"), bp::arg("_rowBorderType")=int(::cv::BORDER_REPLICATE), bp::arg("_columnBorderType")=(int)(-0x000000001), bp::arg("_borderValue")=cv::Scalar_<double>() ) )    
        .def( 
            "isSeparable"
            , (bool ( cv::FilterEngine::* )(  ) const)( &::cv::FilterEngine::isSeparable ) )    
        .def( 
            "remainingInputRows"
            , (int ( cv::FilterEngine::* )(  ) const)( &::cv::FilterEngine::remainingInputRows ) )    
        .def( 
            "remainingOutputRows"
            , (int ( cv::FilterEngine::* )(  ) const)( &::cv::FilterEngine::remainingOutputRows ) )    
        .def( 
            "start"
            , (int ( cv::FilterEngine::* )( ::cv::Size,::cv::Rect,int ) )(&::cv::FilterEngine::start)
            , (int ( FilterEngine_wrapper::* )( ::cv::Size,::cv::Rect,int ) )(&FilterEngine_wrapper::default_start)
            , ( bp::arg("wholeSize"), bp::arg("roi"), bp::arg("maxBufRows")=(int)(-0x000000001) ) )    
        .def( 
            "start"
            , (int ( cv::FilterEngine::* )( ::cv::Mat const &,::cv::Rect const &,bool,int ) )(&::cv::FilterEngine::start)
            , (int ( FilterEngine_wrapper::* )( ::cv::Mat const &,::cv::Rect const &,bool,int ) )(&FilterEngine_wrapper::default_start)
            , ( bp::arg("src"), bp::arg("srcRoi")=cv::Rect_<int>(0, 0, -0x000000001, -0x000000001), bp::arg("isolated")=(bool)(false), bp::arg("maxBufRows")=(int)(-0x000000001) ) )    
        .def_readwrite( "anchor", &cv::FilterEngine::anchor )    
        .def_readwrite( "borderElemSize", &cv::FilterEngine::borderElemSize )    
        .def_readwrite( "borderTab", &cv::FilterEngine::borderTab )    
        .def_readwrite( "bufStep", &cv::FilterEngine::bufStep )    
        .def_readwrite( "bufType", &cv::FilterEngine::bufType )    
        .def_readwrite( "columnBorderType", &cv::FilterEngine::columnBorderType )    
        .def_readwrite( "columnFilter", &cv::FilterEngine::columnFilter )    
        .def_readwrite( "constBorderRow", &cv::FilterEngine::constBorderRow )    
        .def_readwrite( "constBorderValue", &cv::FilterEngine::constBorderValue )    
        .def_readwrite( "dstType", &cv::FilterEngine::dstType )    
        .def_readwrite( "dstY", &cv::FilterEngine::dstY )    
        .def_readwrite( "dx1", &cv::FilterEngine::dx1 )    
        .def_readwrite( "dx2", &cv::FilterEngine::dx2 )    
        .def_readwrite( "endY", &cv::FilterEngine::endY )    
        .def_readwrite( "filter2D", &cv::FilterEngine::filter2D )    
        .def_readwrite( "ksize", &cv::FilterEngine::ksize )    
        .def_readwrite( "maxWidth", &cv::FilterEngine::maxWidth )    
        .def_readwrite( "ringBuf", &cv::FilterEngine::ringBuf )    
        .def_readwrite( "roi", &cv::FilterEngine::roi )    
        .def_readwrite( "rowBorderType", &cv::FilterEngine::rowBorderType )    
        .def_readwrite( "rowCount", &cv::FilterEngine::rowCount )    
        .def_readwrite( "rowFilter", &cv::FilterEngine::rowFilter )    
        .def_readwrite( "srcRow", &cv::FilterEngine::srcRow )    
        .def_readwrite( "srcType", &cv::FilterEngine::srcType )    
        .def_readwrite( "startY", &cv::FilterEngine::startY )    
        .def_readwrite( "startY0", &cv::FilterEngine::startY0 )    
        .def_readwrite( "wholeSize", &cv::FilterEngine::wholeSize );

}
