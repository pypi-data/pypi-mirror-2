// This file has been generated by Py++.

#include "boost/python.hpp"
#include "opencv_headers.hpp"
#include "pyopencvext_free_functions_p.pypp.hpp"

namespace bp = boost::python;

void register_free_functions_p(){

    { //::sdopencv::patchBasedStdDev
    
        typedef void ( *patchBasedStdDev_function_type )( ::cv::Mat const &,::cv::Size const &,::cv::Mat & );
        
        bp::def( 
            "patchBasedStdDev"
            , patchBasedStdDev_function_type( &::sdopencv::patchBasedStdDev )
            , ( bp::arg("in_image"), bp::arg("patch_size"), bp::arg("out_image") ) );
    
    }

    { //::cv::perspectiveTransform
    
        typedef void ( *perspectiveTransform_function_type )( ::cv::Mat const &,::cv::Mat &,::cv::Mat const & );
        
        bp::def( 
            "perspectiveTransform"
            , perspectiveTransform_function_type( &::cv::perspectiveTransform )
            , ( bp::arg("src"), bp::arg("dst"), bp::arg("m") )
            , "\nPerforms perspective matrix transformation of vectors."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/operations_on_arrays.html#cv-perspectivetransform" );
    
    }

    { //::cv::phase
    
        typedef void ( *phase_function_type )( ::cv::Mat const &,::cv::Mat const &,::cv::Mat &,bool );
        
        bp::def( 
            "phase"
            , phase_function_type( &::cv::phase )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("angle"), bp::arg("angleInDegrees")=(bool)(false) )
            , "\nCalculates the rotation angle of 2d vectors."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/operations_on_arrays.html#cv-phase" );
    
    }

    { //::cv::pointPolygonTest
    
        typedef double ( *pointPolygonTest_function_type )( ::cv::Mat const &,::cv::Point2f,bool );
        
        bp::def( 
            "pointPolygonTest"
            , pointPolygonTest_function_type( &::cv::pointPolygonTest )
            , ( bp::arg("contour"), bp::arg("pt"), bp::arg("measureDist") ) );
    
    }

    { //::cv::polarToCart
    
        typedef void ( *polarToCart_function_type )( ::cv::Mat const &,::cv::Mat const &,::cv::Mat &,::cv::Mat &,bool );
        
        bp::def( 
            "polarToCart"
            , polarToCart_function_type( &::cv::polarToCart )
            , ( bp::arg("magnitude"), bp::arg("angle"), bp::arg("x"), bp::arg("y"), bp::arg("angleInDegrees")=(bool)(false) )
            , "\nComputes x and y coordinates of 2D vectors from their magnitude and "
    "\nangle."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/operations_on_arrays.html#cv-polartocart" );
    
    }

    { //::cv::pow
    
        typedef void ( *pow_function_type )( ::cv::MatND const &,double,::cv::MatND & );
        
        bp::def( 
            "pow"
            , pow_function_type( &::cv::pow )
            , ( bp::arg("a"), bp::arg("power"), bp::arg("b") )
            , "\nRaises every array element to a power."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/operations_on_arrays.html#cv-pow" );
    
    }

    { //::cv::pow
    
        typedef void ( *pow_function_type )( ::cv::Mat const &,double,::cv::Mat & );
        
        bp::def( 
            "pow"
            , pow_function_type( &::cv::pow )
            , ( bp::arg("a"), bp::arg("power"), bp::arg("b") )
            , "\nRaises every array element to a power."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/operations_on_arrays.html#cv-pow" );
    
    }

    { //::cv::preCornerDetect
    
        typedef void ( *preCornerDetect_function_type )( ::cv::Mat const &,::cv::Mat &,int,int );
        
        bp::def( 
            "preCornerDetect"
            , preCornerDetect_function_type( &::cv::preCornerDetect )
            , ( bp::arg("src"), bp::arg("dst"), bp::arg("ksize"), bp::arg("borderType")=int(::cv::BORDER_REFLECT_101) ) );
    
    }

    { //::cv::putText
    
        typedef void ( *putText_function_type )( ::cv::Mat &,::std::string const &,::cv::Point,int,double,::cv::Scalar,int,int,bool );
        
        bp::def( 
            "putText"
            , putText_function_type( &::cv::putText )
            , ( bp::arg("img"), bp::arg("text"), bp::arg("org"), bp::arg("fontFace"), bp::arg("fontScale"), bp::arg("color"), bp::arg("thickness")=(int)(1), bp::arg("linetype")=(int)(8), bp::arg("bottomLeftOrigin")=(bool)(false) )
            , "\nDraws a text string."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/drawing_functions.html#cv-puttext" );
    
    }

    { //::cv::pyrDown
    
        typedef void ( *pyrDown_function_type )( ::cv::Mat const &,::cv::Mat &,::cv::Size const & );
        
        bp::def( 
            "pyrDown"
            , pyrDown_function_type( &::cv::pyrDown )
            , ( bp::arg("src"), bp::arg("dst"), bp::arg("dstsize")=cv::Size_<int>() ) );
    
    }

    { //::cv::pyrUp
    
        typedef void ( *pyrUp_function_type )( ::cv::Mat const &,::cv::Mat &,::cv::Size const & );
        
        bp::def( 
            "pyrUp"
            , pyrUp_function_type( &::cv::pyrUp )
            , ( bp::arg("src"), bp::arg("dst"), bp::arg("dstsize")=cv::Size_<int>() ) );
    
    }

}
