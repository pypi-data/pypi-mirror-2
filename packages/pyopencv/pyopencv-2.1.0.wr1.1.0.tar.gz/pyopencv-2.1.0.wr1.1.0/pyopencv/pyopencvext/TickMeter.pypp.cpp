// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "TickMeter.pypp.hpp"

namespace bp = boost::python;

void register_TickMeter_class(){

    bp::class_< cv::TickMeter >( "TickMeter", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::TickMeter >() )    
        .def( 
            "getCounter"
            , (::int64 ( cv::TickMeter::* )(  ) const)( &::cv::TickMeter::getCounter ) )    
        .def( 
            "getTimeMicro"
            , (double ( cv::TickMeter::* )(  ) const)( &::cv::TickMeter::getTimeMicro ) )    
        .def( 
            "getTimeMilli"
            , (double ( cv::TickMeter::* )(  ) const)( &::cv::TickMeter::getTimeMilli ) )    
        .def( 
            "getTimeSec"
            , (double ( cv::TickMeter::* )(  ) const)( &::cv::TickMeter::getTimeSec ) )    
        .def( 
            "getTimeTicks"
            , (::int64 ( cv::TickMeter::* )(  ) const)( &::cv::TickMeter::getTimeTicks ) )    
        .def( 
            "reset"
            , (void ( cv::TickMeter::* )(  ) )( &::cv::TickMeter::reset ) )    
        .def( 
            "start"
            , (void ( cv::TickMeter::* )(  ) )( &::cv::TickMeter::start ) )    
        .def( 
            "stop"
            , (void ( cv::TickMeter::* )(  ) )( &::cv::TickMeter::stop ) );

}
