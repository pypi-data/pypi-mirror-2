// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "Complexf.pypp.hpp"

namespace bp = boost::python;

void register_Complexf_class(){

    { //::cv::Complex< float >
        typedef bp::class_< cv::Complex< float > > Complexf_exposer_t;
        Complexf_exposer_t Complexf_exposer = Complexf_exposer_t( "Complexf", bp::init< >() );
        bp::scope Complexf_scope( Complexf_exposer );
        Complexf_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Complex< float > >() );
        Complexf_exposer.def( bp::init< float, bp::optional< float > >(( bp::arg("_re"), bp::arg("_im")=0 )) );
        bp::implicitly_convertible< float, cv::Complex< float > >();
        { //::cv::Complex< float >::conj
        
            typedef cv::Complex< float > exported_class_t;
            typedef ::cv::Complex< float > ( exported_class_t::*conj_function_type )(  ) const;
            
            Complexf_exposer.def( 
                "conj"
                , conj_function_type( &::cv::Complex< float >::conj ) );
        
        }
        Complexf_exposer.def_readwrite( "im", &cv::Complex< float >::im );
        Complexf_exposer.def_readwrite( "re", &cv::Complex< float >::re );
    }

}
