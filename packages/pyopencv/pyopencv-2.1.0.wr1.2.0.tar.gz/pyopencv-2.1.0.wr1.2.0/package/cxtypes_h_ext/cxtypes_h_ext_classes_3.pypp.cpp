// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "cxtypes_h_wrapper.hpp"
#include "boost/python/object.hpp"
#include "boost/python/str.hpp"
#include "boost/python/object/life_support.hpp"
#include "ndarray.hpp"
#include "opencv_converters.hpp"
#include "sequence.hpp"
#include "cxtypes_h_ext_classes_3.pypp.hpp"

namespace bp = boost::python;

static CvSeq * get_CvSeq_h_prev( CvSeq const & inst ) { return inst.h_prev; }

static CvSeq * get_CvSeq_h_next( CvSeq const & inst ) { return inst.h_next; }

static CvSeq * get_CvSeq_v_prev( CvSeq const & inst ) { return inst.v_prev; }

static CvSeq * get_CvSeq_v_next( CvSeq const & inst ) { return inst.v_next; }

static ::CvSeqBlock * get_CvSeq_free_blocks( CvSeq const & inst ) { return inst.free_blocks; }

static ::CvSeqBlock * get_CvSeq_first( CvSeq const & inst ) { return inst.first; }

static bp::object get_CvSeq_block_max( CvSeq const & inst ){        
    return inst.block_max? bp::str(inst.block_max): bp::object();
}

static bp::object get_CvSeq_ptr( CvSeq const & inst ){        
    return inst.ptr? bp::str(inst.ptr): bp::object();
}

static cv::MemStorage get_CvSeq_storage(CvSeq const &inst) { return cv::MemStorage(inst.storage); }

static CvSeqBlock * get_CvSeqBlock_prev( CvSeqBlock const & inst ) { return inst.prev; }

static CvSeqBlock * get_CvSeqBlock_next( CvSeqBlock const & inst ) { return inst.next; }

static bp::object get_CvSeqBlock_data( CvSeqBlock const & inst ){        
    return inst.data? bp::str(inst.data): bp::object();
}

static CvSeq * get_CvSet_h_prev( CvSet const & inst ) { return inst.h_prev; }

static CvSeq * get_CvSet_h_next( CvSet const & inst ) { return inst.h_next; }

static CvSeq * get_CvSet_v_prev( CvSet const & inst ) { return inst.v_prev; }

static CvSeq * get_CvSet_v_next( CvSet const & inst ) { return inst.v_next; }

static ::CvSeqBlock * get_CvSet_free_blocks( CvSet const & inst ) { return inst.free_blocks; }

static ::CvSeqBlock * get_CvSet_first( CvSet const & inst ) { return inst.first; }

static bp::object get_CvSet_block_max( CvSet const & inst ){        
    return inst.block_max? bp::str(inst.block_max): bp::object();
}

static bp::object get_CvSet_ptr( CvSet const & inst ){        
    return inst.ptr? bp::str(inst.ptr): bp::object();
}

static ::CvSetElem * get_CvSet_free_elems( CvSet const & inst ) { return inst.free_elems; }

static cv::MemStorage get_CvSet_storage(CvSet const &inst) { return cv::MemStorage(inst.storage); }

static CvSetElem * get_CvSetElem_next_free( CvSetElem const & inst ) { return inst.next_free; }

struct CvString_wrapper : CvString, bp::wrapper< CvString > {

    CvString_wrapper(CvString const & arg )
    : CvString( arg )
      , bp::wrapper< CvString >(){
        // copy constructor
        
    }

    CvString_wrapper()
    : CvString()
      , bp::wrapper< CvString >(){
        // null constructor
        
    }

    static bp::object get_data( CvString const & inst ){        
    return inst.ptr? bp::str((const char *)inst.ptr, inst.len) : bp::object();
}

};

static CvStringHashNode * get_CvStringHashNode_next( CvStringHashNode const & inst ) { return inst.next; }

static CvTypeInfo * get_CvTypeInfo_prev( CvTypeInfo const & inst ) { return inst.prev; }

static CvTypeInfo * get_CvTypeInfo_next( CvTypeInfo const & inst ) { return inst.next; }

static bp::object get_CvTypeInfo_type_name( CvTypeInfo const & inst ){        
    return inst.type_name? bp::str(inst.type_name): bp::object();
}

static bp::object MemStorage_from_CvMemStorage(bp::object const &inst_CvMemStorage)
{
    bp::extract<CvMemStorage *> elem(inst_CvMemStorage);
    if(!elem.check())
    {
        char s[300];
        sprintf( s, "Argument 'inst_CvMemStorage' must contain an object of type CvMemStorage." );
        PyErr_SetString(PyExc_TypeError, s);
        throw bp::error_already_set();
    }

    bp::object result = bp::object(::cv::Ptr< CvMemStorage >(elem()));
    result.attr("_depends") = inst_CvMemStorage;
    return result;
}

static CvMemStorage const &MemStorage_pointee(::cv::Ptr< CvMemStorage > const &inst) { return *((CvMemStorage const *)inst); }

void register_classes_3(){

    bp::class_< CvPoint >( "CvPoint", "\n2D point with integer coordinates (usually zero-based)."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2i instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint >(), "\n2D point with integer coordinates (usually zero-based)."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2i instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint" )    
        .def_readwrite( "x", &CvPoint::x )    
        .def_readwrite( "y", &CvPoint::y );

    bp::class_< CvPoint2D32f >( "CvPoint2D32f", "\n2D point with floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2f instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint2d32f" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint2D32f >(), "\n2D point with floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2f instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint2d32f" )    
        .def_readwrite( "x", &CvPoint2D32f::x )    
        .def_readwrite( "y", &CvPoint2D32f::y );

    bp::class_< CvPoint2D64f >( "CvPoint2D64f", "\n2D point with double precision floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2d instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint2d64f" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint2D64f >(), "\n2D point with double precision floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point2d instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint2d64f" )    
        .def_readwrite( "x", &CvPoint2D64f::x )    
        .def_readwrite( "y", &CvPoint2D64f::y );

    bp::class_< CvPoint3D32f >( "CvPoint3D32f", "\n3D point with floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point3f instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint3d32f" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint3D32f >(), "\n3D point with floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point3f instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint3d32f" )    
        .def_readwrite( "x", &CvPoint3D32f::x )    
        .def_readwrite( "y", &CvPoint3D32f::y )    
        .def_readwrite( "z", &CvPoint3D32f::z );

    bp::class_< CvPoint3D64f >( "CvPoint3D64f", "\n3D point with double precision floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point3d instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint3d64f" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvPoint3D64f >(), "\n3D point with double precision floating-point coordinates."
    "\n"
    "\nWarning: This structure is obsolete. It exists only to support "
    "\nbackward compatibility. Please use class Point3d instead."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/basic_structures.html#cvpoint3d64f" )    
        .def_readwrite( "x", &CvPoint3D64f::x )    
        .def_readwrite( "y", &CvPoint3D64f::y )    
        .def_readwrite( "z", &CvPoint3D64f::z );

    bp::class_< CvSeq >( "CvSeq" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvSeq >() )    
        .def_readwrite( "delta_elems", &CvSeq::delta_elems )    
        .def_readwrite( "elem_size", &CvSeq::elem_size )    
        .def_readwrite( "flags", &CvSeq::flags )    
        .def_readwrite( "header_size", &CvSeq::header_size )    
        .def_readwrite( "total", &CvSeq::total )    
        .add_property( "h_prev", bp::make_function(&::get_CvSeq_h_prev, bp::return_internal_reference<>()) )    
        .add_property( "h_next", bp::make_function(&::get_CvSeq_h_next, bp::return_internal_reference<>()) )    
        .add_property( "v_prev", bp::make_function(&::get_CvSeq_v_prev, bp::return_internal_reference<>()) )    
        .add_property( "v_next", bp::make_function(&::get_CvSeq_v_next, bp::return_internal_reference<>()) )    
        .add_property( "free_blocks", bp::make_function(&::get_CvSeq_free_blocks, bp::return_internal_reference<>()) )    
        .add_property( "first", bp::make_function(&::get_CvSeq_first, bp::return_internal_reference<>()) )    
        .add_property( "block_max", &::get_CvSeq_block_max )    
        .add_property( "ptr", &::get_CvSeq_ptr )    
        .add_property( "storage", bp::make_function(&::get_CvSeq_storage, bp::with_custodian_and_ward_postcall<0, 1>()) );

    bp::class_< CvSeqBlock >( "CvSeqBlock" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvSeqBlock >() )    
        .def_readwrite( "count", &CvSeqBlock::count )    
        .def_readwrite( "start_index", &CvSeqBlock::start_index )    
        .add_property( "prev", bp::make_function(&::get_CvSeqBlock_prev, bp::return_internal_reference<>()) )    
        .add_property( "next", bp::make_function(&::get_CvSeqBlock_next, bp::return_internal_reference<>()) )    
        .add_property( "data", &::get_CvSeqBlock_data );

    bp::class_< CvSet >( "CvSet" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvSet >() )    
        .def_readwrite( "active_count", &CvSet::active_count )    
        .def_readwrite( "delta_elems", &CvSet::delta_elems )    
        .def_readwrite( "elem_size", &CvSet::elem_size )    
        .def_readwrite( "flags", &CvSet::flags )    
        .def_readwrite( "header_size", &CvSet::header_size )    
        .def_readwrite( "total", &CvSet::total )    
        .add_property( "h_prev", bp::make_function(&::get_CvSet_h_prev, bp::return_internal_reference<>()) )    
        .add_property( "h_next", bp::make_function(&::get_CvSet_h_next, bp::return_internal_reference<>()) )    
        .add_property( "v_prev", bp::make_function(&::get_CvSet_v_prev, bp::return_internal_reference<>()) )    
        .add_property( "v_next", bp::make_function(&::get_CvSet_v_next, bp::return_internal_reference<>()) )    
        .add_property( "free_blocks", bp::make_function(&::get_CvSet_free_blocks, bp::return_internal_reference<>()) )    
        .add_property( "first", bp::make_function(&::get_CvSet_first, bp::return_internal_reference<>()) )    
        .add_property( "block_max", &::get_CvSet_block_max )    
        .add_property( "ptr", &::get_CvSet_ptr )    
        .add_property( "free_elems", bp::make_function(&::get_CvSet_free_elems, bp::return_internal_reference<>()) )    
        .add_property( "storage", bp::make_function(&::get_CvSet_storage, bp::with_custodian_and_ward_postcall<0, 1>()) );

    bp::class_< CvSetElem >( "CvSetElem" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvSetElem >() )    
        .def_readwrite( "flags", &CvSetElem::flags )    
        .add_property( "next_free", bp::make_function(&::get_CvSetElem_next_free, bp::return_internal_reference<>()) );

    bp::class_< CvString_wrapper >( "CvString" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvString >() )    
        .add_property( "data", bp::make_function(&CvString_wrapper::get_data) );

    bp::class_< CvStringHashNode >( "CvStringHashNode" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvStringHashNode >() )    
        .def_readwrite( "hashval", &CvStringHashNode::hashval )    
        .def_readwrite( "str", &CvStringHashNode::str )    
        .add_property( "next", bp::make_function(&::get_CvStringHashNode_next, bp::return_internal_reference<>()) );

    bp::class_< CvTypeInfo >( "CvTypeInfo" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvTypeInfo >() )    
        .def_readwrite( "flags", &CvTypeInfo::flags )    
        .def_readwrite( "header_size", &CvTypeInfo::header_size )    
        .add_property( "prev", bp::make_function(&::get_CvTypeInfo_prev, bp::return_internal_reference<>()) )    
        .add_property( "next", bp::make_function(&::get_CvTypeInfo_next, bp::return_internal_reference<>()) )    
        .add_property( "type_name", &::get_CvTypeInfo_type_name );

    { //::cv::Ptr< CvMemStorage >
        typedef bp::class_< cv::Ptr< CvMemStorage > > MemStorage_exposer_t;
        MemStorage_exposer_t MemStorage_exposer = MemStorage_exposer_t( "MemStorage", bp::init< >() );
        bp::scope MemStorage_scope( MemStorage_exposer );
        MemStorage_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Ptr< CvMemStorage > >() );
        { //::cv::Ptr< CvMemStorage >::addref
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef void ( exported_class_t::*addref_function_type )(  ) ;
            
            MemStorage_exposer.def( 
                "addref"
                , addref_function_type( &::cv::Ptr< CvMemStorage >::addref ) );
        
        }
        { //::cv::Ptr< CvMemStorage >::delete_obj
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef void ( exported_class_t::*delete_obj_function_type )(  ) ;
            
            MemStorage_exposer.def( 
                "delete_obj"
                , delete_obj_function_type( &::cv::Ptr< CvMemStorage >::delete_obj ) );
        
        }
        { //::cv::Ptr< CvMemStorage >::empty
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            MemStorage_exposer.def( 
                "empty"
                , empty_function_type( &::cv::Ptr< CvMemStorage >::empty ) );
        
        }
        { //::cv::Ptr< CvMemStorage >::release
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef void ( exported_class_t::*release_function_type )(  ) ;
            
            MemStorage_exposer.def( 
                "release"
                , release_function_type( &::cv::Ptr< CvMemStorage >::release ) );
        
        }
        MemStorage_exposer.def("fromCvMemStorage", &::MemStorage_from_CvMemStorage, (bp::arg("inst_CvMemStorage")));
        MemStorage_exposer.staticmethod("fromCvMemStorage");
        MemStorage_exposer.add_property("pointee", bp::make_function(&::MemStorage_pointee, bp::return_internal_reference<>()));
    }

    { //::cxtypes_h_dummy_struct
        typedef bp::class_< cxtypes_h_dummy_struct > __cxtypes_h_dummy_struct_exposer_t;
        __cxtypes_h_dummy_struct_exposer_t __cxtypes_h_dummy_struct_exposer = __cxtypes_h_dummy_struct_exposer_t( "__cxtypes_h_dummy_struct" );
        bp::scope __cxtypes_h_dummy_struct_scope( __cxtypes_h_dummy_struct_exposer );
        __cxtypes_h_dummy_struct_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cxtypes_h_dummy_struct >() );
        bp::class_< cxtypes_h_dummy_struct::dummy_struct2 >( "dummy_struct2" )    
            .add_property( "this", pyplus_conv::make_addressof_inst_getter< cxtypes_h_dummy_struct::dummy_struct2 >() );
        __cxtypes_h_dummy_struct_exposer.setattr("v0", 0);
    }
    {
        
        bp::def("convert_vector_int8_to_ndarray", &sdcpp::vector_to_ndarray2< char >, (bp::arg("inst_vector_int8")) );
        bp::def("convert_ndarray_to_vector_int8", &sdcpp::ndarray_to_vector2< char >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_uint8_to_ndarray", &sdcpp::vector_to_ndarray2< unsigned char >, (bp::arg("inst_vector_uint8")) );
        bp::def("convert_ndarray_to_vector_uint8", &sdcpp::ndarray_to_vector2< unsigned char >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_int16_to_ndarray", &sdcpp::vector_to_ndarray2< short >, (bp::arg("inst_vector_int16")) );
        bp::def("convert_ndarray_to_vector_int16", &sdcpp::ndarray_to_vector2< short >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_uint16_to_ndarray", &sdcpp::vector_to_ndarray2< unsigned short >, (bp::arg("inst_vector_uint16")) );
        bp::def("convert_ndarray_to_vector_uint16", &sdcpp::ndarray_to_vector2< unsigned short >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_int_to_ndarray", &sdcpp::vector_to_ndarray2< int >, (bp::arg("inst_vector_int")) );
        bp::def("convert_ndarray_to_vector_int", &sdcpp::ndarray_to_vector2< int >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_uint_to_ndarray", &sdcpp::vector_to_ndarray2< unsigned int >, (bp::arg("inst_vector_uint")) );
        bp::def("convert_ndarray_to_vector_uint", &sdcpp::ndarray_to_vector2< unsigned int >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_long_to_ndarray", &sdcpp::vector_to_ndarray2< long >, (bp::arg("inst_vector_long")) );
        bp::def("convert_ndarray_to_vector_long", &sdcpp::ndarray_to_vector2< long >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_ulong_to_ndarray", &sdcpp::vector_to_ndarray2< unsigned long >, (bp::arg("inst_vector_ulong")) );
        bp::def("convert_ndarray_to_vector_ulong", &sdcpp::ndarray_to_vector2< unsigned long >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_int64_to_ndarray", &sdcpp::vector_to_ndarray2< long long >, (bp::arg("inst_vector_int64")) );
        bp::def("convert_ndarray_to_vector_int64", &sdcpp::ndarray_to_vector2< long long >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_uint64_to_ndarray", &sdcpp::vector_to_ndarray2< unsigned long long >, (bp::arg("inst_vector_uint64")) );
        bp::def("convert_ndarray_to_vector_uint64", &sdcpp::ndarray_to_vector2< unsigned long long >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_float32_to_ndarray", &sdcpp::vector_to_ndarray2< float >, (bp::arg("inst_vector_float32")) );
        bp::def("convert_ndarray_to_vector_float32", &sdcpp::ndarray_to_vector2< float >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_float64_to_ndarray", &sdcpp::vector_to_ndarray2< double >, (bp::arg("inst_vector_float64")) );
        bp::def("convert_ndarray_to_vector_float64", &sdcpp::ndarray_to_vector2< double >, (bp::arg("inst_ndarray")) );
        sdcpp::register_sdobject<sdcpp::sequence>();
        sdcpp::register_sdobject<sdcpp::ndarray>();;
    }

}
