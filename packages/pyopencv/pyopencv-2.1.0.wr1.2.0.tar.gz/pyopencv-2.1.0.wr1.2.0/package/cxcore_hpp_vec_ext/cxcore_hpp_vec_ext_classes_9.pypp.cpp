// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "cxcore_hpp_vec_wrapper.hpp"
#include "ndarray.hpp"
#include "opencv_converters.hpp"
#include "cxcore_hpp_vec_ext_classes_9.pypp.hpp"

namespace bp = boost::python;

void register_classes_9(){

    { //::cv::Vec< short, 4 >
        typedef bp::class_< cv::Vec< short, 4 > > Vec4s_exposer_t;
        Vec4s_exposer_t Vec4s_exposer = Vec4s_exposer_t( "Vec4s", bp::init< >() );
        bp::scope Vec4s_scope( Vec4s_exposer );
        Vec4s_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Vec< short, 4 > >() );
        bp::scope().attr("depth") = (int)cv::Vec<short, 4>::depth;
        bp::scope().attr("channels") = (int)cv::Vec<short, 4>::channels;
        bp::scope().attr("type") = (int)cv::Vec<short, 4>::type;
        Vec4s_exposer.def( bp::init< short int >(( bp::arg("v0") )) );
        bp::implicitly_convertible< short int, cv::Vec< short, 4 > >();
        Vec4s_exposer.def( bp::init< short int, short int >(( bp::arg("v0"), bp::arg("v1") )) );
        Vec4s_exposer.def( bp::init< short int, short int, short int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") )) );
        Vec4s_exposer.def( bp::init< short int, short int, short int, short int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        Vec4s_exposer.def( bp::init< short int, short int, short int, short int, short int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4") )) );
        Vec4s_exposer.def( bp::init< short int, short int, short int, short int, short int, short int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5") )) );
        Vec4s_exposer.def( bp::init< short int, short int, short int, short int, short int, short int, short int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6") )) );
        Vec4s_exposer.def( bp::init< short int, short int, short int, short int, short int, short int, short int, short int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7") )) );
        Vec4s_exposer.def( bp::init< short int, short int, short int, short int, short int, short int, short int, short int, short int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8") )) );
        Vec4s_exposer.def( bp::init< short int, short int, short int, short int, short int, short int, short int, short int, short int, short int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8"), bp::arg("v9") )) );
        Vec4s_exposer.def( bp::init< cv::Vec< short, 4 > const & >(( bp::arg("v") )) );
        { //::cv::Vec< short, 4 >::all
        
            typedef cv::Vec< short, 4 > exported_class_t;
            typedef ::cv::Vec< short, 4 > ( *all_function_type )( short int );
            
            Vec4s_exposer.def( 
                "all"
                , all_function_type( &::cv::Vec< short, 4 >::all )
                , ( bp::arg("alpha") ) );
        
        }
        { //::cv::Vec< short, 4 >::cross
        
            typedef cv::Vec< short, 4 > exported_class_t;
            typedef ::cv::Vec< short, 4 > ( exported_class_t::*cross_function_type )( ::cv::Vec< short, 4 > const & ) const;
            
            Vec4s_exposer.def( 
                "cross"
                , cross_function_type( &::cv::Vec< short, 4 >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< short, 4 >::ddot
        
            typedef cv::Vec< short, 4 > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Vec< short, 4 > const & ) const;
            
            Vec4s_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Vec< short, 4 >::ddot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< short, 4 >::dot
        
            typedef cv::Vec< short, 4 > exported_class_t;
            typedef short int ( exported_class_t::*dot_function_type )( ::cv::Vec< short, 4 > const & ) const;
            
            Vec4s_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Vec< short, 4 >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< short, 4 >::operator[]
        
            typedef cv::Vec< short, 4 > exported_class_t;
            typedef short int ( exported_class_t::*__getitem___function_type )( int ) const;
            
            Vec4s_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< short, 4 >::operator[] )
                , ( bp::arg("i") )
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        { //::cv::Vec< short, 4 >::operator[]
        
            typedef cv::Vec< short, 4 > exported_class_t;
            typedef short int & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            Vec4s_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< short, 4 >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        Vec4s_exposer.staticmethod( "all" );
        Vec4s_exposer.add_property("ndarray", &sdcpp::as_ndarray< cv::Vec<short,4> >);
        Vec4s_exposer.def("__iadd__", &__iadd__<cv::Vec4s, cv::Vec4b>, bp::return_self<>() );
        Vec4s_exposer.def("__isub__", &__isub__<cv::Vec4s, cv::Vec4b>, bp::return_self<>() );
        Vec4s_exposer.def("__iadd__", &__iadd__<cv::Vec4s, cv::Vec4s>, bp::return_self<>() );
        Vec4s_exposer.def("__isub__", &__isub__<cv::Vec4s, cv::Vec4s>, bp::return_self<>() );
        Vec4s_exposer.def("__iadd__", &__iadd__<cv::Vec4s, cv::Vec4w>, bp::return_self<>() );
        Vec4s_exposer.def("__isub__", &__isub__<cv::Vec4s, cv::Vec4w>, bp::return_self<>() );
        Vec4s_exposer.def("__iadd__", &__iadd__<cv::Vec4s, cv::Vec4i>, bp::return_self<>() );
        Vec4s_exposer.def("__isub__", &__isub__<cv::Vec4s, cv::Vec4i>, bp::return_self<>() );
        Vec4s_exposer.def("__iadd__", &__iadd__<cv::Vec4s, cv::Vec4f>, bp::return_self<>() );
        Vec4s_exposer.def("__isub__", &__isub__<cv::Vec4s, cv::Vec4f>, bp::return_self<>() );
        Vec4s_exposer.def("__iadd__", &__iadd__<cv::Vec4s, cv::Vec4d>, bp::return_self<>() );
        Vec4s_exposer.def("__isub__", &__isub__<cv::Vec4s, cv::Vec4d>, bp::return_self<>() );
        Vec4s_exposer.def("__add__", &__add__<cv::Vec4s, cv::Vec4s> );
        Vec4s_exposer.def("__sub__", &__sub__<cv::Vec4s, cv::Vec4s> );
        Vec4s_exposer.def("__eq__", &__eq__<cv::Vec4s, cv::Vec4s> );
        Vec4s_exposer.def("__ne__", &__ne__<cv::Vec4s, cv::Vec4s> );
        Vec4s_exposer.def("__imul__", &__imul__<cv::Vec4s, short>, bp::return_self<>() );
        Vec4s_exposer.def("__mul__", &__mul__<cv::Vec4s, short> );
        Vec4s_exposer.def("__rmul__", &__rmul__<short, cv::Vec4s> );
        Vec4s_exposer.def("__neg__", &__neg__<cv::Vec4s> );
    }

    { //::cv::Vec< unsigned char, 2 >
        typedef bp::class_< cv::Vec< unsigned char, 2 > > Vec2b_exposer_t;
        Vec2b_exposer_t Vec2b_exposer = Vec2b_exposer_t( "Vec2b", bp::init< >() );
        bp::scope Vec2b_scope( Vec2b_exposer );
        Vec2b_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Vec< unsigned char, 2 > >() );
        bp::scope().attr("depth") = (int)cv::Vec<unsigned char, 2>::depth;
        bp::scope().attr("channels") = (int)cv::Vec<unsigned char, 2>::channels;
        bp::scope().attr("type") = (int)cv::Vec<unsigned char, 2>::type;
        Vec2b_exposer.def( bp::init< unsigned char >(( bp::arg("v0") )) );
        bp::implicitly_convertible< unsigned char, cv::Vec< unsigned char, 2 > >();
        Vec2b_exposer.def( bp::init< unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1") )) );
        Vec2b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") )) );
        Vec2b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        Vec2b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4") )) );
        Vec2b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5") )) );
        Vec2b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6") )) );
        Vec2b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7") )) );
        Vec2b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8") )) );
        Vec2b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8"), bp::arg("v9") )) );
        Vec2b_exposer.def( bp::init< cv::Vec< unsigned char, 2 > const & >(( bp::arg("v") )) );
        { //::cv::Vec< unsigned char, 2 >::all
        
            typedef cv::Vec< unsigned char, 2 > exported_class_t;
            typedef ::cv::Vec< unsigned char, 2 > ( *all_function_type )( unsigned char );
            
            Vec2b_exposer.def( 
                "all"
                , all_function_type( &::cv::Vec< unsigned char, 2 >::all )
                , ( bp::arg("alpha") ) );
        
        }
        { //::cv::Vec< unsigned char, 2 >::cross
        
            typedef cv::Vec< unsigned char, 2 > exported_class_t;
            typedef ::cv::Vec< unsigned char, 2 > ( exported_class_t::*cross_function_type )( ::cv::Vec< unsigned char, 2 > const & ) const;
            
            Vec2b_exposer.def( 
                "cross"
                , cross_function_type( &::cv::Vec< unsigned char, 2 >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned char, 2 >::ddot
        
            typedef cv::Vec< unsigned char, 2 > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Vec< unsigned char, 2 > const & ) const;
            
            Vec2b_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Vec< unsigned char, 2 >::ddot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned char, 2 >::dot
        
            typedef cv::Vec< unsigned char, 2 > exported_class_t;
            typedef unsigned char ( exported_class_t::*dot_function_type )( ::cv::Vec< unsigned char, 2 > const & ) const;
            
            Vec2b_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Vec< unsigned char, 2 >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned char, 2 >::operator[]
        
            typedef cv::Vec< unsigned char, 2 > exported_class_t;
            typedef unsigned char ( exported_class_t::*__getitem___function_type )( int ) const;
            
            Vec2b_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned char, 2 >::operator[] )
                , ( bp::arg("i") )
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        { //::cv::Vec< unsigned char, 2 >::operator[]
        
            typedef cv::Vec< unsigned char, 2 > exported_class_t;
            typedef unsigned char & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            Vec2b_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned char, 2 >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        Vec2b_exposer.staticmethod( "all" );
        Vec2b_exposer.add_property("ndarray", &sdcpp::as_ndarray< cv::Vec<unsigned char,2> >);
        Vec2b_exposer.def("__iadd__", &__iadd__<cv::Vec2b, cv::Vec2b>, bp::return_self<>() );
        Vec2b_exposer.def("__isub__", &__isub__<cv::Vec2b, cv::Vec2b>, bp::return_self<>() );
        Vec2b_exposer.def("__iadd__", &__iadd__<cv::Vec2b, cv::Vec2s>, bp::return_self<>() );
        Vec2b_exposer.def("__isub__", &__isub__<cv::Vec2b, cv::Vec2s>, bp::return_self<>() );
        Vec2b_exposer.def("__iadd__", &__iadd__<cv::Vec2b, cv::Vec2w>, bp::return_self<>() );
        Vec2b_exposer.def("__isub__", &__isub__<cv::Vec2b, cv::Vec2w>, bp::return_self<>() );
        Vec2b_exposer.def("__iadd__", &__iadd__<cv::Vec2b, cv::Vec2i>, bp::return_self<>() );
        Vec2b_exposer.def("__isub__", &__isub__<cv::Vec2b, cv::Vec2i>, bp::return_self<>() );
        Vec2b_exposer.def("__iadd__", &__iadd__<cv::Vec2b, cv::Vec2f>, bp::return_self<>() );
        Vec2b_exposer.def("__isub__", &__isub__<cv::Vec2b, cv::Vec2f>, bp::return_self<>() );
        Vec2b_exposer.def("__iadd__", &__iadd__<cv::Vec2b, cv::Vec2d>, bp::return_self<>() );
        Vec2b_exposer.def("__isub__", &__isub__<cv::Vec2b, cv::Vec2d>, bp::return_self<>() );
        Vec2b_exposer.def("__add__", &__add__<cv::Vec2b, cv::Vec2b> );
        Vec2b_exposer.def("__sub__", &__sub__<cv::Vec2b, cv::Vec2b> );
        Vec2b_exposer.def("__eq__", &__eq__<cv::Vec2b, cv::Vec2b> );
        Vec2b_exposer.def("__ne__", &__ne__<cv::Vec2b, cv::Vec2b> );
        Vec2b_exposer.def("__imul__", &__imul__<cv::Vec2b, unsigned char>, bp::return_self<>() );
        Vec2b_exposer.def("__mul__", &__mul__<cv::Vec2b, unsigned char> );
        Vec2b_exposer.def("__rmul__", &__rmul__<unsigned char, cv::Vec2b> );
        Vec2b_exposer.def("__neg__", &__neg__<cv::Vec2b> );
    }

    { //::cv::Vec< unsigned char, 3 >
        typedef bp::class_< cv::Vec< unsigned char, 3 > > Vec3b_exposer_t;
        Vec3b_exposer_t Vec3b_exposer = Vec3b_exposer_t( "Vec3b", bp::init< >() );
        bp::scope Vec3b_scope( Vec3b_exposer );
        Vec3b_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Vec< unsigned char, 3 > >() );
        bp::scope().attr("depth") = (int)cv::Vec<unsigned char, 3>::depth;
        bp::scope().attr("channels") = (int)cv::Vec<unsigned char, 3>::channels;
        bp::scope().attr("type") = (int)cv::Vec<unsigned char, 3>::type;
        Vec3b_exposer.def( bp::init< unsigned char >(( bp::arg("v0") )) );
        bp::implicitly_convertible< unsigned char, cv::Vec< unsigned char, 3 > >();
        Vec3b_exposer.def( bp::init< unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1") )) );
        Vec3b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") )) );
        Vec3b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        Vec3b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4") )) );
        Vec3b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5") )) );
        Vec3b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6") )) );
        Vec3b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7") )) );
        Vec3b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8") )) );
        Vec3b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8"), bp::arg("v9") )) );
        Vec3b_exposer.def( bp::init< cv::Vec< unsigned char, 3 > const & >(( bp::arg("v") )) );
        { //::cv::Vec< unsigned char, 3 >::all
        
            typedef cv::Vec< unsigned char, 3 > exported_class_t;
            typedef ::cv::Vec< unsigned char, 3 > ( *all_function_type )( unsigned char );
            
            Vec3b_exposer.def( 
                "all"
                , all_function_type( &::cv::Vec< unsigned char, 3 >::all )
                , ( bp::arg("alpha") ) );
        
        }
        { //::cv::Vec< unsigned char, 3 >::cross
        
            typedef cv::Vec< unsigned char, 3 > exported_class_t;
            typedef ::cv::Vec< unsigned char, 3 > ( exported_class_t::*cross_function_type )( ::cv::Vec< unsigned char, 3 > const & ) const;
            
            Vec3b_exposer.def( 
                "cross"
                , cross_function_type( &::cv::Vec< unsigned char, 3 >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned char, 3 >::ddot
        
            typedef cv::Vec< unsigned char, 3 > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Vec< unsigned char, 3 > const & ) const;
            
            Vec3b_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Vec< unsigned char, 3 >::ddot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned char, 3 >::dot
        
            typedef cv::Vec< unsigned char, 3 > exported_class_t;
            typedef unsigned char ( exported_class_t::*dot_function_type )( ::cv::Vec< unsigned char, 3 > const & ) const;
            
            Vec3b_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Vec< unsigned char, 3 >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned char, 3 >::operator[]
        
            typedef cv::Vec< unsigned char, 3 > exported_class_t;
            typedef unsigned char ( exported_class_t::*__getitem___function_type )( int ) const;
            
            Vec3b_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned char, 3 >::operator[] )
                , ( bp::arg("i") )
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        { //::cv::Vec< unsigned char, 3 >::operator[]
        
            typedef cv::Vec< unsigned char, 3 > exported_class_t;
            typedef unsigned char & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            Vec3b_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned char, 3 >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        Vec3b_exposer.staticmethod( "all" );
        Vec3b_exposer.add_property("ndarray", &sdcpp::as_ndarray< cv::Vec<unsigned char,3> >);
        Vec3b_exposer.def("__iadd__", &__iadd__<cv::Vec3b, cv::Vec3b>, bp::return_self<>() );
        Vec3b_exposer.def("__isub__", &__isub__<cv::Vec3b, cv::Vec3b>, bp::return_self<>() );
        Vec3b_exposer.def("__iadd__", &__iadd__<cv::Vec3b, cv::Vec3s>, bp::return_self<>() );
        Vec3b_exposer.def("__isub__", &__isub__<cv::Vec3b, cv::Vec3s>, bp::return_self<>() );
        Vec3b_exposer.def("__iadd__", &__iadd__<cv::Vec3b, cv::Vec3w>, bp::return_self<>() );
        Vec3b_exposer.def("__isub__", &__isub__<cv::Vec3b, cv::Vec3w>, bp::return_self<>() );
        Vec3b_exposer.def("__iadd__", &__iadd__<cv::Vec3b, cv::Vec3i>, bp::return_self<>() );
        Vec3b_exposer.def("__isub__", &__isub__<cv::Vec3b, cv::Vec3i>, bp::return_self<>() );
        Vec3b_exposer.def("__iadd__", &__iadd__<cv::Vec3b, cv::Vec3f>, bp::return_self<>() );
        Vec3b_exposer.def("__isub__", &__isub__<cv::Vec3b, cv::Vec3f>, bp::return_self<>() );
        Vec3b_exposer.def("__iadd__", &__iadd__<cv::Vec3b, cv::Vec3d>, bp::return_self<>() );
        Vec3b_exposer.def("__isub__", &__isub__<cv::Vec3b, cv::Vec3d>, bp::return_self<>() );
        Vec3b_exposer.def("__add__", &__add__<cv::Vec3b, cv::Vec3b> );
        Vec3b_exposer.def("__sub__", &__sub__<cv::Vec3b, cv::Vec3b> );
        Vec3b_exposer.def("__eq__", &__eq__<cv::Vec3b, cv::Vec3b> );
        Vec3b_exposer.def("__ne__", &__ne__<cv::Vec3b, cv::Vec3b> );
        Vec3b_exposer.def("__imul__", &__imul__<cv::Vec3b, unsigned char>, bp::return_self<>() );
        Vec3b_exposer.def("__mul__", &__mul__<cv::Vec3b, unsigned char> );
        Vec3b_exposer.def("__rmul__", &__rmul__<unsigned char, cv::Vec3b> );
        Vec3b_exposer.def("__neg__", &__neg__<cv::Vec3b> );
    }

    { //::cv::Vec< unsigned char, 4 >
        typedef bp::class_< cv::Vec< unsigned char, 4 > > Vec4b_exposer_t;
        Vec4b_exposer_t Vec4b_exposer = Vec4b_exposer_t( "Vec4b", bp::init< >() );
        bp::scope Vec4b_scope( Vec4b_exposer );
        Vec4b_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Vec< unsigned char, 4 > >() );
        bp::scope().attr("depth") = (int)cv::Vec<unsigned char, 4>::depth;
        bp::scope().attr("channels") = (int)cv::Vec<unsigned char, 4>::channels;
        bp::scope().attr("type") = (int)cv::Vec<unsigned char, 4>::type;
        Vec4b_exposer.def( bp::init< unsigned char >(( bp::arg("v0") )) );
        bp::implicitly_convertible< unsigned char, cv::Vec< unsigned char, 4 > >();
        Vec4b_exposer.def( bp::init< unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1") )) );
        Vec4b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") )) );
        Vec4b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        Vec4b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4") )) );
        Vec4b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5") )) );
        Vec4b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6") )) );
        Vec4b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7") )) );
        Vec4b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8") )) );
        Vec4b_exposer.def( bp::init< unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8"), bp::arg("v9") )) );
        Vec4b_exposer.def( bp::init< cv::Vec< unsigned char, 4 > const & >(( bp::arg("v") )) );
        { //::cv::Vec< unsigned char, 4 >::all
        
            typedef cv::Vec< unsigned char, 4 > exported_class_t;
            typedef ::cv::Vec< unsigned char, 4 > ( *all_function_type )( unsigned char );
            
            Vec4b_exposer.def( 
                "all"
                , all_function_type( &::cv::Vec< unsigned char, 4 >::all )
                , ( bp::arg("alpha") ) );
        
        }
        { //::cv::Vec< unsigned char, 4 >::cross
        
            typedef cv::Vec< unsigned char, 4 > exported_class_t;
            typedef ::cv::Vec< unsigned char, 4 > ( exported_class_t::*cross_function_type )( ::cv::Vec< unsigned char, 4 > const & ) const;
            
            Vec4b_exposer.def( 
                "cross"
                , cross_function_type( &::cv::Vec< unsigned char, 4 >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned char, 4 >::ddot
        
            typedef cv::Vec< unsigned char, 4 > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Vec< unsigned char, 4 > const & ) const;
            
            Vec4b_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Vec< unsigned char, 4 >::ddot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned char, 4 >::dot
        
            typedef cv::Vec< unsigned char, 4 > exported_class_t;
            typedef unsigned char ( exported_class_t::*dot_function_type )( ::cv::Vec< unsigned char, 4 > const & ) const;
            
            Vec4b_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Vec< unsigned char, 4 >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned char, 4 >::operator[]
        
            typedef cv::Vec< unsigned char, 4 > exported_class_t;
            typedef unsigned char ( exported_class_t::*__getitem___function_type )( int ) const;
            
            Vec4b_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned char, 4 >::operator[] )
                , ( bp::arg("i") )
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        { //::cv::Vec< unsigned char, 4 >::operator[]
        
            typedef cv::Vec< unsigned char, 4 > exported_class_t;
            typedef unsigned char & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            Vec4b_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned char, 4 >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        Vec4b_exposer.staticmethod( "all" );
        Vec4b_exposer.add_property("ndarray", &sdcpp::as_ndarray< cv::Vec<unsigned char,4> >);
        Vec4b_exposer.def("__iadd__", &__iadd__<cv::Vec4b, cv::Vec4b>, bp::return_self<>() );
        Vec4b_exposer.def("__isub__", &__isub__<cv::Vec4b, cv::Vec4b>, bp::return_self<>() );
        Vec4b_exposer.def("__iadd__", &__iadd__<cv::Vec4b, cv::Vec4s>, bp::return_self<>() );
        Vec4b_exposer.def("__isub__", &__isub__<cv::Vec4b, cv::Vec4s>, bp::return_self<>() );
        Vec4b_exposer.def("__iadd__", &__iadd__<cv::Vec4b, cv::Vec4w>, bp::return_self<>() );
        Vec4b_exposer.def("__isub__", &__isub__<cv::Vec4b, cv::Vec4w>, bp::return_self<>() );
        Vec4b_exposer.def("__iadd__", &__iadd__<cv::Vec4b, cv::Vec4i>, bp::return_self<>() );
        Vec4b_exposer.def("__isub__", &__isub__<cv::Vec4b, cv::Vec4i>, bp::return_self<>() );
        Vec4b_exposer.def("__iadd__", &__iadd__<cv::Vec4b, cv::Vec4f>, bp::return_self<>() );
        Vec4b_exposer.def("__isub__", &__isub__<cv::Vec4b, cv::Vec4f>, bp::return_self<>() );
        Vec4b_exposer.def("__iadd__", &__iadd__<cv::Vec4b, cv::Vec4d>, bp::return_self<>() );
        Vec4b_exposer.def("__isub__", &__isub__<cv::Vec4b, cv::Vec4d>, bp::return_self<>() );
        Vec4b_exposer.def("__add__", &__add__<cv::Vec4b, cv::Vec4b> );
        Vec4b_exposer.def("__sub__", &__sub__<cv::Vec4b, cv::Vec4b> );
        Vec4b_exposer.def("__eq__", &__eq__<cv::Vec4b, cv::Vec4b> );
        Vec4b_exposer.def("__ne__", &__ne__<cv::Vec4b, cv::Vec4b> );
        Vec4b_exposer.def("__imul__", &__imul__<cv::Vec4b, unsigned char>, bp::return_self<>() );
        Vec4b_exposer.def("__mul__", &__mul__<cv::Vec4b, unsigned char> );
        Vec4b_exposer.def("__rmul__", &__rmul__<unsigned char, cv::Vec4b> );
        Vec4b_exposer.def("__neg__", &__neg__<cv::Vec4b> );
    }

    { //::cv::Vec< unsigned short, 2 >
        typedef bp::class_< cv::Vec< unsigned short, 2 > > Vec2w_exposer_t;
        Vec2w_exposer_t Vec2w_exposer = Vec2w_exposer_t( "Vec2w", bp::init< >() );
        bp::scope Vec2w_scope( Vec2w_exposer );
        Vec2w_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Vec< unsigned short, 2 > >() );
        bp::scope().attr("depth") = (int)cv::Vec<unsigned short, 2>::depth;
        bp::scope().attr("channels") = (int)cv::Vec<unsigned short, 2>::channels;
        bp::scope().attr("type") = (int)cv::Vec<unsigned short, 2>::type;
        Vec2w_exposer.def( bp::init< short unsigned int >(( bp::arg("v0") )) );
        bp::implicitly_convertible< short unsigned int, cv::Vec< unsigned short, 2 > >();
        Vec2w_exposer.def( bp::init< short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1") )) );
        Vec2w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") )) );
        Vec2w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        Vec2w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4") )) );
        Vec2w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5") )) );
        Vec2w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6") )) );
        Vec2w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7") )) );
        Vec2w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8") )) );
        Vec2w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8"), bp::arg("v9") )) );
        Vec2w_exposer.def( bp::init< cv::Vec< unsigned short, 2 > const & >(( bp::arg("v") )) );
        { //::cv::Vec< unsigned short, 2 >::all
        
            typedef cv::Vec< unsigned short, 2 > exported_class_t;
            typedef ::cv::Vec< unsigned short, 2 > ( *all_function_type )( short unsigned int );
            
            Vec2w_exposer.def( 
                "all"
                , all_function_type( &::cv::Vec< unsigned short, 2 >::all )
                , ( bp::arg("alpha") ) );
        
        }
        { //::cv::Vec< unsigned short, 2 >::cross
        
            typedef cv::Vec< unsigned short, 2 > exported_class_t;
            typedef ::cv::Vec< unsigned short, 2 > ( exported_class_t::*cross_function_type )( ::cv::Vec< unsigned short, 2 > const & ) const;
            
            Vec2w_exposer.def( 
                "cross"
                , cross_function_type( &::cv::Vec< unsigned short, 2 >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned short, 2 >::ddot
        
            typedef cv::Vec< unsigned short, 2 > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Vec< unsigned short, 2 > const & ) const;
            
            Vec2w_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Vec< unsigned short, 2 >::ddot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned short, 2 >::dot
        
            typedef cv::Vec< unsigned short, 2 > exported_class_t;
            typedef short unsigned int ( exported_class_t::*dot_function_type )( ::cv::Vec< unsigned short, 2 > const & ) const;
            
            Vec2w_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Vec< unsigned short, 2 >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned short, 2 >::operator[]
        
            typedef cv::Vec< unsigned short, 2 > exported_class_t;
            typedef short unsigned int ( exported_class_t::*__getitem___function_type )( int ) const;
            
            Vec2w_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned short, 2 >::operator[] )
                , ( bp::arg("i") )
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        { //::cv::Vec< unsigned short, 2 >::operator[]
        
            typedef cv::Vec< unsigned short, 2 > exported_class_t;
            typedef short unsigned int & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            Vec2w_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned short, 2 >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        Vec2w_exposer.staticmethod( "all" );
        Vec2w_exposer.add_property("ndarray", &sdcpp::as_ndarray< cv::Vec<unsigned short,2> >);
        Vec2w_exposer.def("__iadd__", &__iadd__<cv::Vec2w, cv::Vec2b>, bp::return_self<>() );
        Vec2w_exposer.def("__isub__", &__isub__<cv::Vec2w, cv::Vec2b>, bp::return_self<>() );
        Vec2w_exposer.def("__iadd__", &__iadd__<cv::Vec2w, cv::Vec2s>, bp::return_self<>() );
        Vec2w_exposer.def("__isub__", &__isub__<cv::Vec2w, cv::Vec2s>, bp::return_self<>() );
        Vec2w_exposer.def("__iadd__", &__iadd__<cv::Vec2w, cv::Vec2w>, bp::return_self<>() );
        Vec2w_exposer.def("__isub__", &__isub__<cv::Vec2w, cv::Vec2w>, bp::return_self<>() );
        Vec2w_exposer.def("__iadd__", &__iadd__<cv::Vec2w, cv::Vec2i>, bp::return_self<>() );
        Vec2w_exposer.def("__isub__", &__isub__<cv::Vec2w, cv::Vec2i>, bp::return_self<>() );
        Vec2w_exposer.def("__iadd__", &__iadd__<cv::Vec2w, cv::Vec2f>, bp::return_self<>() );
        Vec2w_exposer.def("__isub__", &__isub__<cv::Vec2w, cv::Vec2f>, bp::return_self<>() );
        Vec2w_exposer.def("__iadd__", &__iadd__<cv::Vec2w, cv::Vec2d>, bp::return_self<>() );
        Vec2w_exposer.def("__isub__", &__isub__<cv::Vec2w, cv::Vec2d>, bp::return_self<>() );
        Vec2w_exposer.def("__add__", &__add__<cv::Vec2w, cv::Vec2w> );
        Vec2w_exposer.def("__sub__", &__sub__<cv::Vec2w, cv::Vec2w> );
        Vec2w_exposer.def("__eq__", &__eq__<cv::Vec2w, cv::Vec2w> );
        Vec2w_exposer.def("__ne__", &__ne__<cv::Vec2w, cv::Vec2w> );
        Vec2w_exposer.def("__imul__", &__imul__<cv::Vec2w, unsigned short>, bp::return_self<>() );
        Vec2w_exposer.def("__mul__", &__mul__<cv::Vec2w, unsigned short> );
        Vec2w_exposer.def("__rmul__", &__rmul__<unsigned short, cv::Vec2w> );
        Vec2w_exposer.def("__neg__", &__neg__<cv::Vec2w> );
    }

    { //::cv::Vec< unsigned short, 3 >
        typedef bp::class_< cv::Vec< unsigned short, 3 > > Vec3w_exposer_t;
        Vec3w_exposer_t Vec3w_exposer = Vec3w_exposer_t( "Vec3w", bp::init< >() );
        bp::scope Vec3w_scope( Vec3w_exposer );
        Vec3w_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Vec< unsigned short, 3 > >() );
        bp::scope().attr("depth") = (int)cv::Vec<unsigned short, 3>::depth;
        bp::scope().attr("channels") = (int)cv::Vec<unsigned short, 3>::channels;
        bp::scope().attr("type") = (int)cv::Vec<unsigned short, 3>::type;
        Vec3w_exposer.def( bp::init< short unsigned int >(( bp::arg("v0") )) );
        bp::implicitly_convertible< short unsigned int, cv::Vec< unsigned short, 3 > >();
        Vec3w_exposer.def( bp::init< short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1") )) );
        Vec3w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") )) );
        Vec3w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        Vec3w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4") )) );
        Vec3w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5") )) );
        Vec3w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6") )) );
        Vec3w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7") )) );
        Vec3w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8") )) );
        Vec3w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8"), bp::arg("v9") )) );
        Vec3w_exposer.def( bp::init< cv::Vec< unsigned short, 3 > const & >(( bp::arg("v") )) );
        { //::cv::Vec< unsigned short, 3 >::all
        
            typedef cv::Vec< unsigned short, 3 > exported_class_t;
            typedef ::cv::Vec< unsigned short, 3 > ( *all_function_type )( short unsigned int );
            
            Vec3w_exposer.def( 
                "all"
                , all_function_type( &::cv::Vec< unsigned short, 3 >::all )
                , ( bp::arg("alpha") ) );
        
        }
        { //::cv::Vec< unsigned short, 3 >::cross
        
            typedef cv::Vec< unsigned short, 3 > exported_class_t;
            typedef ::cv::Vec< unsigned short, 3 > ( exported_class_t::*cross_function_type )( ::cv::Vec< unsigned short, 3 > const & ) const;
            
            Vec3w_exposer.def( 
                "cross"
                , cross_function_type( &::cv::Vec< unsigned short, 3 >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned short, 3 >::ddot
        
            typedef cv::Vec< unsigned short, 3 > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Vec< unsigned short, 3 > const & ) const;
            
            Vec3w_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Vec< unsigned short, 3 >::ddot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned short, 3 >::dot
        
            typedef cv::Vec< unsigned short, 3 > exported_class_t;
            typedef short unsigned int ( exported_class_t::*dot_function_type )( ::cv::Vec< unsigned short, 3 > const & ) const;
            
            Vec3w_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Vec< unsigned short, 3 >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned short, 3 >::operator[]
        
            typedef cv::Vec< unsigned short, 3 > exported_class_t;
            typedef short unsigned int ( exported_class_t::*__getitem___function_type )( int ) const;
            
            Vec3w_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned short, 3 >::operator[] )
                , ( bp::arg("i") )
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        { //::cv::Vec< unsigned short, 3 >::operator[]
        
            typedef cv::Vec< unsigned short, 3 > exported_class_t;
            typedef short unsigned int & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            Vec3w_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned short, 3 >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        Vec3w_exposer.staticmethod( "all" );
        Vec3w_exposer.add_property("ndarray", &sdcpp::as_ndarray< cv::Vec<unsigned short,3> >);
        Vec3w_exposer.def("__iadd__", &__iadd__<cv::Vec3w, cv::Vec3b>, bp::return_self<>() );
        Vec3w_exposer.def("__isub__", &__isub__<cv::Vec3w, cv::Vec3b>, bp::return_self<>() );
        Vec3w_exposer.def("__iadd__", &__iadd__<cv::Vec3w, cv::Vec3s>, bp::return_self<>() );
        Vec3w_exposer.def("__isub__", &__isub__<cv::Vec3w, cv::Vec3s>, bp::return_self<>() );
        Vec3w_exposer.def("__iadd__", &__iadd__<cv::Vec3w, cv::Vec3w>, bp::return_self<>() );
        Vec3w_exposer.def("__isub__", &__isub__<cv::Vec3w, cv::Vec3w>, bp::return_self<>() );
        Vec3w_exposer.def("__iadd__", &__iadd__<cv::Vec3w, cv::Vec3i>, bp::return_self<>() );
        Vec3w_exposer.def("__isub__", &__isub__<cv::Vec3w, cv::Vec3i>, bp::return_self<>() );
        Vec3w_exposer.def("__iadd__", &__iadd__<cv::Vec3w, cv::Vec3f>, bp::return_self<>() );
        Vec3w_exposer.def("__isub__", &__isub__<cv::Vec3w, cv::Vec3f>, bp::return_self<>() );
        Vec3w_exposer.def("__iadd__", &__iadd__<cv::Vec3w, cv::Vec3d>, bp::return_self<>() );
        Vec3w_exposer.def("__isub__", &__isub__<cv::Vec3w, cv::Vec3d>, bp::return_self<>() );
        Vec3w_exposer.def("__add__", &__add__<cv::Vec3w, cv::Vec3w> );
        Vec3w_exposer.def("__sub__", &__sub__<cv::Vec3w, cv::Vec3w> );
        Vec3w_exposer.def("__eq__", &__eq__<cv::Vec3w, cv::Vec3w> );
        Vec3w_exposer.def("__ne__", &__ne__<cv::Vec3w, cv::Vec3w> );
        Vec3w_exposer.def("__imul__", &__imul__<cv::Vec3w, unsigned short>, bp::return_self<>() );
        Vec3w_exposer.def("__mul__", &__mul__<cv::Vec3w, unsigned short> );
        Vec3w_exposer.def("__rmul__", &__rmul__<unsigned short, cv::Vec3w> );
        Vec3w_exposer.def("__neg__", &__neg__<cv::Vec3w> );
    }

    { //::cv::Vec< unsigned short, 4 >
        typedef bp::class_< cv::Vec< unsigned short, 4 > > Vec4w_exposer_t;
        Vec4w_exposer_t Vec4w_exposer = Vec4w_exposer_t( "Vec4w", bp::init< >() );
        bp::scope Vec4w_scope( Vec4w_exposer );
        Vec4w_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Vec< unsigned short, 4 > >() );
        bp::scope().attr("depth") = (int)cv::Vec<unsigned short, 4>::depth;
        bp::scope().attr("channels") = (int)cv::Vec<unsigned short, 4>::channels;
        bp::scope().attr("type") = (int)cv::Vec<unsigned short, 4>::type;
        Vec4w_exposer.def( bp::init< short unsigned int >(( bp::arg("v0") )) );
        bp::implicitly_convertible< short unsigned int, cv::Vec< unsigned short, 4 > >();
        Vec4w_exposer.def( bp::init< short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1") )) );
        Vec4w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2") )) );
        Vec4w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3") )) );
        Vec4w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4") )) );
        Vec4w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5") )) );
        Vec4w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6") )) );
        Vec4w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7") )) );
        Vec4w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8") )) );
        Vec4w_exposer.def( bp::init< short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int, short unsigned int >(( bp::arg("v0"), bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("v4"), bp::arg("v5"), bp::arg("v6"), bp::arg("v7"), bp::arg("v8"), bp::arg("v9") )) );
        Vec4w_exposer.def( bp::init< cv::Vec< unsigned short, 4 > const & >(( bp::arg("v") )) );
        { //::cv::Vec< unsigned short, 4 >::all
        
            typedef cv::Vec< unsigned short, 4 > exported_class_t;
            typedef ::cv::Vec< unsigned short, 4 > ( *all_function_type )( short unsigned int );
            
            Vec4w_exposer.def( 
                "all"
                , all_function_type( &::cv::Vec< unsigned short, 4 >::all )
                , ( bp::arg("alpha") ) );
        
        }
        { //::cv::Vec< unsigned short, 4 >::cross
        
            typedef cv::Vec< unsigned short, 4 > exported_class_t;
            typedef ::cv::Vec< unsigned short, 4 > ( exported_class_t::*cross_function_type )( ::cv::Vec< unsigned short, 4 > const & ) const;
            
            Vec4w_exposer.def( 
                "cross"
                , cross_function_type( &::cv::Vec< unsigned short, 4 >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned short, 4 >::ddot
        
            typedef cv::Vec< unsigned short, 4 > exported_class_t;
            typedef double ( exported_class_t::*ddot_function_type )( ::cv::Vec< unsigned short, 4 > const & ) const;
            
            Vec4w_exposer.def( 
                "ddot"
                , ddot_function_type( &::cv::Vec< unsigned short, 4 >::ddot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned short, 4 >::dot
        
            typedef cv::Vec< unsigned short, 4 > exported_class_t;
            typedef short unsigned int ( exported_class_t::*dot_function_type )( ::cv::Vec< unsigned short, 4 > const & ) const;
            
            Vec4w_exposer.def( 
                "dot"
                , dot_function_type( &::cv::Vec< unsigned short, 4 >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::cv::Vec< unsigned short, 4 >::operator[]
        
            typedef cv::Vec< unsigned short, 4 > exported_class_t;
            typedef short unsigned int ( exported_class_t::*__getitem___function_type )( int ) const;
            
            Vec4w_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned short, 4 >::operator[] )
                , ( bp::arg("i") )
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        { //::cv::Vec< unsigned short, 4 >::operator[]
        
            typedef cv::Vec< unsigned short, 4 > exported_class_t;
            typedef short unsigned int & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            Vec4w_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::cv::Vec< unsigned short, 4 >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , "\nWrapped function:"
    "\n    operator[]" );
        
        }
        Vec4w_exposer.staticmethod( "all" );
        Vec4w_exposer.add_property("ndarray", &sdcpp::as_ndarray< cv::Vec<unsigned short,4> >);
        Vec4w_exposer.def("__iadd__", &__iadd__<cv::Vec4w, cv::Vec4b>, bp::return_self<>() );
        Vec4w_exposer.def("__isub__", &__isub__<cv::Vec4w, cv::Vec4b>, bp::return_self<>() );
        Vec4w_exposer.def("__iadd__", &__iadd__<cv::Vec4w, cv::Vec4s>, bp::return_self<>() );
        Vec4w_exposer.def("__isub__", &__isub__<cv::Vec4w, cv::Vec4s>, bp::return_self<>() );
        Vec4w_exposer.def("__iadd__", &__iadd__<cv::Vec4w, cv::Vec4w>, bp::return_self<>() );
        Vec4w_exposer.def("__isub__", &__isub__<cv::Vec4w, cv::Vec4w>, bp::return_self<>() );
        Vec4w_exposer.def("__iadd__", &__iadd__<cv::Vec4w, cv::Vec4i>, bp::return_self<>() );
        Vec4w_exposer.def("__isub__", &__isub__<cv::Vec4w, cv::Vec4i>, bp::return_self<>() );
        Vec4w_exposer.def("__iadd__", &__iadd__<cv::Vec4w, cv::Vec4f>, bp::return_self<>() );
        Vec4w_exposer.def("__isub__", &__isub__<cv::Vec4w, cv::Vec4f>, bp::return_self<>() );
        Vec4w_exposer.def("__iadd__", &__iadd__<cv::Vec4w, cv::Vec4d>, bp::return_self<>() );
        Vec4w_exposer.def("__isub__", &__isub__<cv::Vec4w, cv::Vec4d>, bp::return_self<>() );
        Vec4w_exposer.def("__add__", &__add__<cv::Vec4w, cv::Vec4w> );
        Vec4w_exposer.def("__sub__", &__sub__<cv::Vec4w, cv::Vec4w> );
        Vec4w_exposer.def("__eq__", &__eq__<cv::Vec4w, cv::Vec4w> );
        Vec4w_exposer.def("__ne__", &__ne__<cv::Vec4w, cv::Vec4w> );
        Vec4w_exposer.def("__imul__", &__imul__<cv::Vec4w, unsigned short>, bp::return_self<>() );
        Vec4w_exposer.def("__mul__", &__mul__<cv::Vec4w, unsigned short> );
        Vec4w_exposer.def("__rmul__", &__rmul__<unsigned short, cv::Vec4w> );
        Vec4w_exposer.def("__neg__", &__neg__<cv::Vec4w> );
    }

    { //::cxcore_hpp_vec_dummy_struct
        typedef bp::class_< cxcore_hpp_vec_dummy_struct > __cxcore_hpp_vec_dummy_struct_exposer_t;
        __cxcore_hpp_vec_dummy_struct_exposer_t __cxcore_hpp_vec_dummy_struct_exposer = __cxcore_hpp_vec_dummy_struct_exposer_t( "__cxcore_hpp_vec_dummy_struct" );
        bp::scope __cxcore_hpp_vec_dummy_struct_scope( __cxcore_hpp_vec_dummy_struct_exposer );
        __cxcore_hpp_vec_dummy_struct_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cxcore_hpp_vec_dummy_struct >() );
        bp::class_< cxcore_hpp_vec_dummy_struct::dummy_struct2 >( "dummy_struct2" )    
            .add_property( "this", pyplus_conv::make_addressof_inst_getter< cxcore_hpp_vec_dummy_struct::dummy_struct2 >() );
        __cxcore_hpp_vec_dummy_struct_exposer.setattr("v0", 0);
    }
    {
        
        bp::def("convert_vector_Vec6d_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< double, 6 > >, (bp::arg("inst_vector_Vec6d")) );
        bp::def("convert_ndarray_to_vector_Vec6d", &sdcpp::ndarray_to_vector2< cv::Vec< double, 6 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec2w_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< unsigned short, 2 > >, (bp::arg("inst_vector_Vec2w")) );
        bp::def("convert_ndarray_to_vector_Vec2w", &sdcpp::ndarray_to_vector2< cv::Vec< unsigned short, 2 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec3s_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< short, 3 > >, (bp::arg("inst_vector_Vec3s")) );
        bp::def("convert_ndarray_to_vector_Vec3s", &sdcpp::ndarray_to_vector2< cv::Vec< short, 3 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec2i_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< int, 2 > >, (bp::arg("inst_vector_Vec2i")) );
        bp::def("convert_ndarray_to_vector_Vec2i", &sdcpp::ndarray_to_vector2< cv::Vec< int, 2 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec4w_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< unsigned short, 4 > >, (bp::arg("inst_vector_Vec4w")) );
        bp::def("convert_ndarray_to_vector_Vec4w", &sdcpp::ndarray_to_vector2< cv::Vec< unsigned short, 4 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec3w_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< unsigned short, 3 > >, (bp::arg("inst_vector_Vec3w")) );
        bp::def("convert_ndarray_to_vector_Vec3w", &sdcpp::ndarray_to_vector2< cv::Vec< unsigned short, 3 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec4b_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< unsigned char, 4 > >, (bp::arg("inst_vector_Vec4b")) );
        bp::def("convert_ndarray_to_vector_Vec4b", &sdcpp::ndarray_to_vector2< cv::Vec< unsigned char, 4 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec3b_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< unsigned char, 3 > >, (bp::arg("inst_vector_Vec3b")) );
        bp::def("convert_ndarray_to_vector_Vec3b", &sdcpp::ndarray_to_vector2< cv::Vec< unsigned char, 3 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec2b_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< unsigned char, 2 > >, (bp::arg("inst_vector_Vec2b")) );
        bp::def("convert_ndarray_to_vector_Vec2b", &sdcpp::ndarray_to_vector2< cv::Vec< unsigned char, 2 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec4s_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< short, 4 > >, (bp::arg("inst_vector_Vec4s")) );
        bp::def("convert_ndarray_to_vector_Vec4s", &sdcpp::ndarray_to_vector2< cv::Vec< short, 4 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec2s_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< short, 2 > >, (bp::arg("inst_vector_Vec2s")) );
        bp::def("convert_ndarray_to_vector_Vec2s", &sdcpp::ndarray_to_vector2< cv::Vec< short, 2 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec4i_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< int, 4 > >, (bp::arg("inst_vector_Vec4i")) );
        bp::def("convert_ndarray_to_vector_Vec4i", &sdcpp::ndarray_to_vector2< cv::Vec< int, 4 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec3i_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< int, 3 > >, (bp::arg("inst_vector_Vec3i")) );
        bp::def("convert_ndarray_to_vector_Vec3i", &sdcpp::ndarray_to_vector2< cv::Vec< int, 3 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec6f_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< float, 6 > >, (bp::arg("inst_vector_Vec6f")) );
        bp::def("convert_ndarray_to_vector_Vec6f", &sdcpp::ndarray_to_vector2< cv::Vec< float, 6 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec4f_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< float, 4 > >, (bp::arg("inst_vector_Vec4f")) );
        bp::def("convert_ndarray_to_vector_Vec4f", &sdcpp::ndarray_to_vector2< cv::Vec< float, 4 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec3f_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< float, 3 > >, (bp::arg("inst_vector_Vec3f")) );
        bp::def("convert_ndarray_to_vector_Vec3f", &sdcpp::ndarray_to_vector2< cv::Vec< float, 3 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec2f_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< float, 2 > >, (bp::arg("inst_vector_Vec2f")) );
        bp::def("convert_ndarray_to_vector_Vec2f", &sdcpp::ndarray_to_vector2< cv::Vec< float, 2 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec4d_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< double, 4 > >, (bp::arg("inst_vector_Vec4d")) );
        bp::def("convert_ndarray_to_vector_Vec4d", &sdcpp::ndarray_to_vector2< cv::Vec< double, 4 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec3d_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< double, 3 > >, (bp::arg("inst_vector_Vec3d")) );
        bp::def("convert_ndarray_to_vector_Vec3d", &sdcpp::ndarray_to_vector2< cv::Vec< double, 3 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Vec2d_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Vec< double, 2 > >, (bp::arg("inst_vector_Vec2d")) );
        bp::def("convert_ndarray_to_vector_Vec2d", &sdcpp::ndarray_to_vector2< cv::Vec< double, 2 > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_Vec2b_to_Vec2s", &::normal_cast< ::cv::Vec<unsigned char, 2>, ::cv::Vec<short, 2> >, (bp::arg("inst_Vec2b")));
        bp::def("convert_Vec2b_to_Vec2w", &::normal_cast< ::cv::Vec<unsigned char, 2>, ::cv::Vec<unsigned short, 2> >, (bp::arg("inst_Vec2b")));
        bp::def("convert_Vec2b_to_Vec2i", &::normal_cast< ::cv::Vec<unsigned char, 2>, ::cv::Vec<int, 2> >, (bp::arg("inst_Vec2b")));
        bp::def("convert_Vec2b_to_Vec2f", &::normal_cast< ::cv::Vec<unsigned char, 2>, ::cv::Vec<float, 2> >, (bp::arg("inst_Vec2b")));
        bp::def("convert_Vec2b_to_Vec2d", &::normal_cast< ::cv::Vec<unsigned char, 2>, ::cv::Vec<double, 2> >, (bp::arg("inst_Vec2b")));
        bp::def("convert_Vec2s_to_Vec2b", &::normal_cast< ::cv::Vec<short, 2>, ::cv::Vec<unsigned char, 2> >, (bp::arg("inst_Vec2s")));
        bp::def("convert_Vec2s_to_Vec2w", &::normal_cast< ::cv::Vec<short, 2>, ::cv::Vec<unsigned short, 2> >, (bp::arg("inst_Vec2s")));
        bp::def("convert_Vec2s_to_Vec2i", &::normal_cast< ::cv::Vec<short, 2>, ::cv::Vec<int, 2> >, (bp::arg("inst_Vec2s")));
        bp::def("convert_Vec2s_to_Vec2f", &::normal_cast< ::cv::Vec<short, 2>, ::cv::Vec<float, 2> >, (bp::arg("inst_Vec2s")));
        bp::def("convert_Vec2s_to_Vec2d", &::normal_cast< ::cv::Vec<short, 2>, ::cv::Vec<double, 2> >, (bp::arg("inst_Vec2s")));
        bp::def("convert_Vec2w_to_Vec2b", &::normal_cast< ::cv::Vec<unsigned short, 2>, ::cv::Vec<unsigned char, 2> >, (bp::arg("inst_Vec2w")));
        bp::def("convert_Vec2w_to_Vec2s", &::normal_cast< ::cv::Vec<unsigned short, 2>, ::cv::Vec<short, 2> >, (bp::arg("inst_Vec2w")));
        bp::def("convert_Vec2w_to_Vec2i", &::normal_cast< ::cv::Vec<unsigned short, 2>, ::cv::Vec<int, 2> >, (bp::arg("inst_Vec2w")));
        bp::def("convert_Vec2w_to_Vec2f", &::normal_cast< ::cv::Vec<unsigned short, 2>, ::cv::Vec<float, 2> >, (bp::arg("inst_Vec2w")));
        bp::def("convert_Vec2w_to_Vec2d", &::normal_cast< ::cv::Vec<unsigned short, 2>, ::cv::Vec<double, 2> >, (bp::arg("inst_Vec2w")));
        bp::def("convert_Vec2i_to_Vec2b", &::normal_cast< ::cv::Vec<int, 2>, ::cv::Vec<unsigned char, 2> >, (bp::arg("inst_Vec2i")));
        bp::def("convert_Vec2i_to_Vec2s", &::normal_cast< ::cv::Vec<int, 2>, ::cv::Vec<short, 2> >, (bp::arg("inst_Vec2i")));
        bp::def("convert_Vec2i_to_Vec2w", &::normal_cast< ::cv::Vec<int, 2>, ::cv::Vec<unsigned short, 2> >, (bp::arg("inst_Vec2i")));
        bp::def("convert_Vec2i_to_Vec2f", &::normal_cast< ::cv::Vec<int, 2>, ::cv::Vec<float, 2> >, (bp::arg("inst_Vec2i")));
        bp::def("convert_Vec2i_to_Vec2d", &::normal_cast< ::cv::Vec<int, 2>, ::cv::Vec<double, 2> >, (bp::arg("inst_Vec2i")));
        bp::def("convert_Vec2f_to_Vec2b", &::normal_cast< ::cv::Vec<float, 2>, ::cv::Vec<unsigned char, 2> >, (bp::arg("inst_Vec2f")));
        bp::def("convert_Vec2f_to_Vec2s", &::normal_cast< ::cv::Vec<float, 2>, ::cv::Vec<short, 2> >, (bp::arg("inst_Vec2f")));
        bp::def("convert_Vec2f_to_Vec2w", &::normal_cast< ::cv::Vec<float, 2>, ::cv::Vec<unsigned short, 2> >, (bp::arg("inst_Vec2f")));
        bp::def("convert_Vec2f_to_Vec2i", &::normal_cast< ::cv::Vec<float, 2>, ::cv::Vec<int, 2> >, (bp::arg("inst_Vec2f")));
        bp::def("convert_Vec2f_to_Vec2d", &::normal_cast< ::cv::Vec<float, 2>, ::cv::Vec<double, 2> >, (bp::arg("inst_Vec2f")));
        bp::def("convert_Vec2d_to_Vec2b", &::normal_cast< ::cv::Vec<double, 2>, ::cv::Vec<unsigned char, 2> >, (bp::arg("inst_Vec2d")));
        bp::def("convert_Vec2d_to_Vec2s", &::normal_cast< ::cv::Vec<double, 2>, ::cv::Vec<short, 2> >, (bp::arg("inst_Vec2d")));
        bp::def("convert_Vec2d_to_Vec2w", &::normal_cast< ::cv::Vec<double, 2>, ::cv::Vec<unsigned short, 2> >, (bp::arg("inst_Vec2d")));
        bp::def("convert_Vec2d_to_Vec2i", &::normal_cast< ::cv::Vec<double, 2>, ::cv::Vec<int, 2> >, (bp::arg("inst_Vec2d")));
        bp::def("convert_Vec2d_to_Vec2f", &::normal_cast< ::cv::Vec<double, 2>, ::cv::Vec<float, 2> >, (bp::arg("inst_Vec2d")));
        bp::def("convert_Vec3b_to_Vec3s", &::normal_cast< ::cv::Vec<unsigned char, 3>, ::cv::Vec<short, 3> >, (bp::arg("inst_Vec3b")));
        bp::def("convert_Vec3b_to_Vec3w", &::normal_cast< ::cv::Vec<unsigned char, 3>, ::cv::Vec<unsigned short, 3> >, (bp::arg("inst_Vec3b")));
        bp::def("convert_Vec3b_to_Vec3i", &::normal_cast< ::cv::Vec<unsigned char, 3>, ::cv::Vec<int, 3> >, (bp::arg("inst_Vec3b")));
        bp::def("convert_Vec3b_to_Vec3f", &::normal_cast< ::cv::Vec<unsigned char, 3>, ::cv::Vec<float, 3> >, (bp::arg("inst_Vec3b")));
        bp::def("convert_Vec3b_to_Vec3d", &::normal_cast< ::cv::Vec<unsigned char, 3>, ::cv::Vec<double, 3> >, (bp::arg("inst_Vec3b")));
        bp::def("convert_Vec3s_to_Vec3b", &::normal_cast< ::cv::Vec<short, 3>, ::cv::Vec<unsigned char, 3> >, (bp::arg("inst_Vec3s")));
        bp::def("convert_Vec3s_to_Vec3w", &::normal_cast< ::cv::Vec<short, 3>, ::cv::Vec<unsigned short, 3> >, (bp::arg("inst_Vec3s")));
        bp::def("convert_Vec3s_to_Vec3i", &::normal_cast< ::cv::Vec<short, 3>, ::cv::Vec<int, 3> >, (bp::arg("inst_Vec3s")));
        bp::def("convert_Vec3s_to_Vec3f", &::normal_cast< ::cv::Vec<short, 3>, ::cv::Vec<float, 3> >, (bp::arg("inst_Vec3s")));
        bp::def("convert_Vec3s_to_Vec3d", &::normal_cast< ::cv::Vec<short, 3>, ::cv::Vec<double, 3> >, (bp::arg("inst_Vec3s")));
        bp::def("convert_Vec3w_to_Vec3b", &::normal_cast< ::cv::Vec<unsigned short, 3>, ::cv::Vec<unsigned char, 3> >, (bp::arg("inst_Vec3w")));
        bp::def("convert_Vec3w_to_Vec3s", &::normal_cast< ::cv::Vec<unsigned short, 3>, ::cv::Vec<short, 3> >, (bp::arg("inst_Vec3w")));
        bp::def("convert_Vec3w_to_Vec3i", &::normal_cast< ::cv::Vec<unsigned short, 3>, ::cv::Vec<int, 3> >, (bp::arg("inst_Vec3w")));
        bp::def("convert_Vec3w_to_Vec3f", &::normal_cast< ::cv::Vec<unsigned short, 3>, ::cv::Vec<float, 3> >, (bp::arg("inst_Vec3w")));
        bp::def("convert_Vec3w_to_Vec3d", &::normal_cast< ::cv::Vec<unsigned short, 3>, ::cv::Vec<double, 3> >, (bp::arg("inst_Vec3w")));
        bp::def("convert_Vec3i_to_Vec3b", &::normal_cast< ::cv::Vec<int, 3>, ::cv::Vec<unsigned char, 3> >, (bp::arg("inst_Vec3i")));
        bp::def("convert_Vec3i_to_Vec3s", &::normal_cast< ::cv::Vec<int, 3>, ::cv::Vec<short, 3> >, (bp::arg("inst_Vec3i")));
        bp::def("convert_Vec3i_to_Vec3w", &::normal_cast< ::cv::Vec<int, 3>, ::cv::Vec<unsigned short, 3> >, (bp::arg("inst_Vec3i")));
        bp::def("convert_Vec3i_to_Vec3f", &::normal_cast< ::cv::Vec<int, 3>, ::cv::Vec<float, 3> >, (bp::arg("inst_Vec3i")));
        bp::def("convert_Vec3i_to_Vec3d", &::normal_cast< ::cv::Vec<int, 3>, ::cv::Vec<double, 3> >, (bp::arg("inst_Vec3i")));
        bp::def("convert_Vec3f_to_Vec3b", &::normal_cast< ::cv::Vec<float, 3>, ::cv::Vec<unsigned char, 3> >, (bp::arg("inst_Vec3f")));
        bp::def("convert_Vec3f_to_Vec3s", &::normal_cast< ::cv::Vec<float, 3>, ::cv::Vec<short, 3> >, (bp::arg("inst_Vec3f")));
        bp::def("convert_Vec3f_to_Vec3w", &::normal_cast< ::cv::Vec<float, 3>, ::cv::Vec<unsigned short, 3> >, (bp::arg("inst_Vec3f")));
        bp::def("convert_Vec3f_to_Vec3i", &::normal_cast< ::cv::Vec<float, 3>, ::cv::Vec<int, 3> >, (bp::arg("inst_Vec3f")));
        bp::def("convert_Vec3f_to_Vec3d", &::normal_cast< ::cv::Vec<float, 3>, ::cv::Vec<double, 3> >, (bp::arg("inst_Vec3f")));
        bp::def("convert_Vec3d_to_Vec3b", &::normal_cast< ::cv::Vec<double, 3>, ::cv::Vec<unsigned char, 3> >, (bp::arg("inst_Vec3d")));
        bp::def("convert_Vec3d_to_Vec3s", &::normal_cast< ::cv::Vec<double, 3>, ::cv::Vec<short, 3> >, (bp::arg("inst_Vec3d")));
        bp::def("convert_Vec3d_to_Vec3w", &::normal_cast< ::cv::Vec<double, 3>, ::cv::Vec<unsigned short, 3> >, (bp::arg("inst_Vec3d")));
        bp::def("convert_Vec3d_to_Vec3i", &::normal_cast< ::cv::Vec<double, 3>, ::cv::Vec<int, 3> >, (bp::arg("inst_Vec3d")));
        bp::def("convert_Vec3d_to_Vec3f", &::normal_cast< ::cv::Vec<double, 3>, ::cv::Vec<float, 3> >, (bp::arg("inst_Vec3d")));
        bp::def("convert_Vec4b_to_Vec4s", &::normal_cast< ::cv::Vec<unsigned char, 4>, ::cv::Vec<short, 4> >, (bp::arg("inst_Vec4b")));
        bp::def("convert_Vec4b_to_Vec4w", &::normal_cast< ::cv::Vec<unsigned char, 4>, ::cv::Vec<unsigned short, 4> >, (bp::arg("inst_Vec4b")));
        bp::def("convert_Vec4b_to_Vec4i", &::normal_cast< ::cv::Vec<unsigned char, 4>, ::cv::Vec<int, 4> >, (bp::arg("inst_Vec4b")));
        bp::def("convert_Vec4b_to_Vec4f", &::normal_cast< ::cv::Vec<unsigned char, 4>, ::cv::Vec<float, 4> >, (bp::arg("inst_Vec4b")));
        bp::def("convert_Vec4b_to_Vec4d", &::normal_cast< ::cv::Vec<unsigned char, 4>, ::cv::Vec<double, 4> >, (bp::arg("inst_Vec4b")));
        bp::def("convert_Vec4s_to_Vec4b", &::normal_cast< ::cv::Vec<short, 4>, ::cv::Vec<unsigned char, 4> >, (bp::arg("inst_Vec4s")));
        bp::def("convert_Vec4s_to_Vec4w", &::normal_cast< ::cv::Vec<short, 4>, ::cv::Vec<unsigned short, 4> >, (bp::arg("inst_Vec4s")));
        bp::def("convert_Vec4s_to_Vec4i", &::normal_cast< ::cv::Vec<short, 4>, ::cv::Vec<int, 4> >, (bp::arg("inst_Vec4s")));
        bp::def("convert_Vec4s_to_Vec4f", &::normal_cast< ::cv::Vec<short, 4>, ::cv::Vec<float, 4> >, (bp::arg("inst_Vec4s")));
        bp::def("convert_Vec4s_to_Vec4d", &::normal_cast< ::cv::Vec<short, 4>, ::cv::Vec<double, 4> >, (bp::arg("inst_Vec4s")));
        bp::def("convert_Vec4w_to_Vec4b", &::normal_cast< ::cv::Vec<unsigned short, 4>, ::cv::Vec<unsigned char, 4> >, (bp::arg("inst_Vec4w")));
        bp::def("convert_Vec4w_to_Vec4s", &::normal_cast< ::cv::Vec<unsigned short, 4>, ::cv::Vec<short, 4> >, (bp::arg("inst_Vec4w")));
        bp::def("convert_Vec4w_to_Vec4i", &::normal_cast< ::cv::Vec<unsigned short, 4>, ::cv::Vec<int, 4> >, (bp::arg("inst_Vec4w")));
        bp::def("convert_Vec4w_to_Vec4f", &::normal_cast< ::cv::Vec<unsigned short, 4>, ::cv::Vec<float, 4> >, (bp::arg("inst_Vec4w")));
        bp::def("convert_Vec4w_to_Vec4d", &::normal_cast< ::cv::Vec<unsigned short, 4>, ::cv::Vec<double, 4> >, (bp::arg("inst_Vec4w")));
        bp::def("convert_Vec4i_to_Vec4b", &::normal_cast< ::cv::Vec<int, 4>, ::cv::Vec<unsigned char, 4> >, (bp::arg("inst_Vec4i")));
        bp::def("convert_Vec4i_to_Vec4s", &::normal_cast< ::cv::Vec<int, 4>, ::cv::Vec<short, 4> >, (bp::arg("inst_Vec4i")));
        bp::def("convert_Vec4i_to_Vec4w", &::normal_cast< ::cv::Vec<int, 4>, ::cv::Vec<unsigned short, 4> >, (bp::arg("inst_Vec4i")));
        bp::def("convert_Vec4i_to_Vec4f", &::normal_cast< ::cv::Vec<int, 4>, ::cv::Vec<float, 4> >, (bp::arg("inst_Vec4i")));
        bp::def("convert_Vec4i_to_Vec4d", &::normal_cast< ::cv::Vec<int, 4>, ::cv::Vec<double, 4> >, (bp::arg("inst_Vec4i")));
        bp::def("convert_Vec4f_to_Vec4b", &::normal_cast< ::cv::Vec<float, 4>, ::cv::Vec<unsigned char, 4> >, (bp::arg("inst_Vec4f")));
        bp::def("convert_Vec4f_to_Vec4s", &::normal_cast< ::cv::Vec<float, 4>, ::cv::Vec<short, 4> >, (bp::arg("inst_Vec4f")));
        bp::def("convert_Vec4f_to_Vec4w", &::normal_cast< ::cv::Vec<float, 4>, ::cv::Vec<unsigned short, 4> >, (bp::arg("inst_Vec4f")));
        bp::def("convert_Vec4f_to_Vec4i", &::normal_cast< ::cv::Vec<float, 4>, ::cv::Vec<int, 4> >, (bp::arg("inst_Vec4f")));
        bp::def("convert_Vec4f_to_Vec4d", &::normal_cast< ::cv::Vec<float, 4>, ::cv::Vec<double, 4> >, (bp::arg("inst_Vec4f")));
        bp::def("convert_Vec4d_to_Vec4b", &::normal_cast< ::cv::Vec<double, 4>, ::cv::Vec<unsigned char, 4> >, (bp::arg("inst_Vec4d")));
        bp::def("convert_Vec4d_to_Vec4s", &::normal_cast< ::cv::Vec<double, 4>, ::cv::Vec<short, 4> >, (bp::arg("inst_Vec4d")));
        bp::def("convert_Vec4d_to_Vec4w", &::normal_cast< ::cv::Vec<double, 4>, ::cv::Vec<unsigned short, 4> >, (bp::arg("inst_Vec4d")));
        bp::def("convert_Vec4d_to_Vec4i", &::normal_cast< ::cv::Vec<double, 4>, ::cv::Vec<int, 4> >, (bp::arg("inst_Vec4d")));
        bp::def("convert_Vec4d_to_Vec4f", &::normal_cast< ::cv::Vec<double, 4>, ::cv::Vec<float, 4> >, (bp::arg("inst_Vec4d")));
        bp::def("convert_Vec6f_to_Vec6d", &::normal_cast< ::cv::Vec<float, 6>, ::cv::Vec<double, 6> >, (bp::arg("inst_Vec6f")));
        bp::def("convert_Vec6d_to_Vec6f", &::normal_cast< ::cv::Vec<double, 6>, ::cv::Vec<float, 6> >, (bp::arg("inst_Vec6d")));
        bp::def("convert_Complexf_to_Complexd", &::normal_cast< ::cv::Complex<float>, ::cv::Complex<double> >, (bp::arg("inst_Complexf")));
        bp::def("convert_Complexd_to_Complexf", &::normal_cast< ::cv::Complex<double>, ::cv::Complex<float> >, (bp::arg("inst_Complexd")));
        bp::def("convert_vector_Scalar_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Scalar_< double > >, (bp::arg("inst_vector_Scalar")) );
        bp::def("convert_ndarray_to_vector_Scalar", &sdcpp::ndarray_to_vector2< cv::Scalar_< double > >, (bp::arg("inst_ndarray")) );
        bp::def("convert_vector_Range_to_ndarray", &sdcpp::vector_to_ndarray2< cv::Range >, (bp::arg("inst_vector_Range")) );
        bp::def("convert_ndarray_to_vector_Range", &sdcpp::ndarray_to_vector2< cv::Range >, (bp::arg("inst_ndarray")) );;
    }

}
