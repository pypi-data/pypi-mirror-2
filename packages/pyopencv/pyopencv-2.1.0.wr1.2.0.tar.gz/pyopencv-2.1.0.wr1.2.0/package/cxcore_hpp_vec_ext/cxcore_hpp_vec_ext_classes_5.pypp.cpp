// This file has been generated by Py++.

#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "cxcore_hpp_vec_wrapper.hpp"
#include "opencv_headers.hpp"
#include "cxcore_hpp_vec_ext_classes_5.pypp.hpp"

namespace bp = boost::python;

static inline void vector_Vec2d_resize(::std::vector< cv::Vec<double, 2> > &inst, size_t num) { inst.resize(num); }

static inline void vector_Scalar_resize(::std::vector< cv::Scalar_<double> > &inst, size_t num) { inst.resize(num); }

static inline void vector_Range_resize(::std::vector< cv::Range > &inst, size_t num) { inst.resize(num); }

void register_classes_5(){

    { //::std::vector< cv::Vec<double, 2> >
        typedef bp::class_< std::vector< cv::Vec<double, 2> > > vector_Vec2d_exposer_t;
        vector_Vec2d_exposer_t vector_Vec2d_exposer = vector_Vec2d_exposer_t( "vector_Vec2d" );
        bp::scope vector_Vec2d_scope( vector_Vec2d_exposer );
        //WARNING: the next line of code will not compile, because "cv::Vec<double,2>" does not have operator== !
        vector_Vec2d_exposer.def( bp::vector_indexing_suite< ::std::vector< cv::Vec<double, 2> > >() );
        vector_Vec2d_exposer.def("resize", &::vector_Vec2d_resize, ( bp::arg("num") ));
    }

    { //::std::vector< cv::Scalar_<double> >
        typedef bp::class_< std::vector< cv::Scalar_<double> > > vector_Scalar_exposer_t;
        vector_Scalar_exposer_t vector_Scalar_exposer = vector_Scalar_exposer_t( "vector_Scalar" );
        bp::scope vector_Scalar_scope( vector_Scalar_exposer );
        //WARNING: the next line of code will not compile, because "cv::Scalar_<double>" does not have operator== !
        vector_Scalar_exposer.def( bp::vector_indexing_suite< ::std::vector< cv::Scalar_<double> > >() );
        vector_Scalar_exposer.def("resize", &::vector_Scalar_resize, ( bp::arg("num") ));
    }

    { //::std::vector< cv::Range >
        typedef bp::class_< std::vector< cv::Range > > vector_Range_exposer_t;
        vector_Range_exposer_t vector_Range_exposer = vector_Range_exposer_t( "vector_Range" );
        bp::scope vector_Range_scope( vector_Range_exposer );
        vector_Range_exposer.def( bp::vector_indexing_suite< ::std::vector< cv::Range > >() );
        vector_Range_exposer.def("resize", &::vector_Range_resize, ( bp::arg("num") ));
    }

    { //::cv::Complex< double >
        typedef bp::class_< cv::Complex< double > > Complexd_exposer_t;
        Complexd_exposer_t Complexd_exposer = Complexd_exposer_t( "Complexd", bp::init< >() );
        bp::scope Complexd_scope( Complexd_exposer );
        Complexd_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Complex< double > >() );
        Complexd_exposer.def( bp::init< double, bp::optional< double > >(( bp::arg("_re"), bp::arg("_im")=0 )) );
        bp::implicitly_convertible< double, cv::Complex< double > >();
        { //::cv::Complex< double >::conj
        
            typedef cv::Complex< double > exported_class_t;
            typedef ::cv::Complex< double > ( exported_class_t::*conj_function_type )(  ) const;
            
            Complexd_exposer.def( 
                "conj"
                , conj_function_type( &::cv::Complex< double >::conj ) );
        
        }
        Complexd_exposer.def_readwrite( "im", &cv::Complex< double >::im );
        Complexd_exposer.def_readwrite( "re", &cv::Complex< double >::re );
    }

    { //::cv::Complex< float >
        typedef bp::class_< cv::Complex< float > > Complexf_exposer_t;
        Complexf_exposer_t Complexf_exposer = Complexf_exposer_t( "Complexf", bp::init< >() );
        bp::scope Complexf_scope( Complexf_exposer );
        Complexf_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Complex< float > >() );
        Complexf_exposer.def( bp::init< float, bp::optional< float > >(( bp::arg("_re"), bp::arg("_im")=0 )) );
        bp::implicitly_convertible< float, cv::Complex< float > >();
        { //::cv::Complex< float >::conj
        
            typedef cv::Complex< float > exported_class_t;
            typedef ::cv::Complex< float > ( exported_class_t::*conj_function_type )(  ) const;
            
            Complexf_exposer.def( 
                "conj"
                , conj_function_type( &::cv::Complex< float >::conj ) );
        
        }
        Complexf_exposer.def_readwrite( "im", &cv::Complex< float >::im );
        Complexf_exposer.def_readwrite( "re", &cv::Complex< float >::re );
    }

}
