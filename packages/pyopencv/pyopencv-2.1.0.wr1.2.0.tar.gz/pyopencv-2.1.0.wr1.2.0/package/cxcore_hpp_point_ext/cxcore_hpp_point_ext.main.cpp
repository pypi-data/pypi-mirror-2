// This file has been generated by Py++.

#include "boost/python.hpp"

#include "opencv_converters.hpp"

#include "__call_policies.pypp.hpp"

#include "__array_1.pypp.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "__ctypes_integration.pypp.hpp"

#include "cxcore_hpp_point_wrapper.hpp"

#include "cxcore_hpp_point_ext/cxcore_hpp_point_ext_classes_1.pypp.hpp"

#include "cxcore_hpp_point_ext/cxcore_hpp_point_ext_classes_2.pypp.hpp"

#include "cxcore_hpp_point_ext/cxcore_hpp_point_ext_classes_3.pypp.hpp"

namespace bp = boost::python;

#include "ndarray.hpp"

BOOST_PYTHON_MODULE(cxcore_hpp_point_ext){
    bp::implicitly_convertible< cv::MatND, cv::Mat >();

    bp::implicitly_convertible< cv::Point3_< double >, CvPoint3D32f >();

    bp::implicitly_convertible< cv::Point3_< double >, cv::Vec< double, 3 > >();

    bp::implicitly_convertible< cv::Point3_< float >, CvPoint3D32f >();

    bp::implicitly_convertible< cv::Point3_< float >, cv::Vec< float, 3 > >();

    bp::implicitly_convertible< cv::Point3_< int >, CvPoint3D32f >();

    bp::implicitly_convertible< cv::Point3_< int >, cv::Vec< int, 3 > >();

    bp::implicitly_convertible< cv::Point_< double >, CvPoint >();

    bp::implicitly_convertible< cv::Point_< double >, CvPoint2D32f >();

    bp::implicitly_convertible< cv::Point_< double >, cv::Vec< double, 2 > >();

    bp::implicitly_convertible< cv::Point_< float >, CvPoint >();

    bp::implicitly_convertible< cv::Point_< float >, CvPoint2D32f >();

    bp::implicitly_convertible< cv::Point_< float >, cv::Vec< float, 2 > >();

    bp::implicitly_convertible< cv::Point_< int >, CvPoint >();

    bp::implicitly_convertible< cv::Point_< int >, CvPoint2D32f >();

    bp::implicitly_convertible< cv::Point_< int >, cv::Vec< int, 2 > >();

    bp::implicitly_convertible< cv::Seq< cv::Point_< int > >, std::vector< cv::Point_<int> > >();

    bp::def("convert_ndarray_to_Point2i", &sdcpp::from_ndarray< cv::Point_<int> >, (bp::arg("inst_ndarray")) );

    bp::def("convert_Point2i_to_ndarray", &sdcpp::as_ndarray< cv::Point_<int> >, (bp::arg("inst_Point2i")) );

    bp::def("convert_ndarray_to_Point2f", &sdcpp::from_ndarray< cv::Point_<float> >, (bp::arg("inst_ndarray")) );

    bp::def("convert_Point2f_to_ndarray", &sdcpp::as_ndarray< cv::Point_<float> >, (bp::arg("inst_Point2f")) );

    bp::def("convert_ndarray_to_Point2d", &sdcpp::from_ndarray< cv::Point_<double> >, (bp::arg("inst_ndarray")) );

    bp::def("convert_Point2d_to_ndarray", &sdcpp::as_ndarray< cv::Point_<double> >, (bp::arg("inst_Point2d")) );

    bp::def("convert_ndarray_to_Point3i", &sdcpp::from_ndarray< cv::Point3_<int> >, (bp::arg("inst_ndarray")) );

    bp::def("convert_Point3i_to_ndarray", &sdcpp::as_ndarray< cv::Point3_<int> >, (bp::arg("inst_Point3i")) );

    bp::def("convert_ndarray_to_Point3f", &sdcpp::from_ndarray< cv::Point3_<float> >, (bp::arg("inst_ndarray")) );

    bp::def("convert_Point3f_to_ndarray", &sdcpp::as_ndarray< cv::Point3_<float> >, (bp::arg("inst_Point3f")) );

    bp::def("convert_ndarray_to_Point3d", &sdcpp::from_ndarray< cv::Point3_<double> >, (bp::arg("inst_ndarray")) );

    bp::def("convert_Point3d_to_ndarray", &sdcpp::as_ndarray< cv::Point3_<double> >, (bp::arg("inst_Point3d")) );

    bp::def("convert_ndarray_to_Mat", &sdcpp::from_ndarray< cv::Mat >, (bp::arg("inst_ndarray")) );

    bp::def("convert_Mat_to_ndarray", &sdcpp::as_ndarray< cv::Mat >, (bp::arg("inst_Mat")) );

    bp::def("convert_ndarray_to_MatND", &sdcpp::from_ndarray< cv::MatND >, (bp::arg("inst_ndarray")) );

    bp::def("convert_MatND_to_ndarray", &sdcpp::as_ndarray< cv::MatND >, (bp::arg("inst_MatND")) );

    register_classes_1();

    register_classes_2();

    register_classes_3();
}

