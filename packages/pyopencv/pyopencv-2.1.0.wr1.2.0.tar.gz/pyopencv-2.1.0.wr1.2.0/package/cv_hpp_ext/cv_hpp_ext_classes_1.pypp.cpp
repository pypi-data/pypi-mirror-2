// This file has been generated by Py++.

#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "cv_hpp_wrapper.hpp"
#include "opencv_headers.hpp"
#include "cv_hpp_ext_classes_1.pypp.hpp"

namespace bp = boost::python;

static inline void vector_KeyPoint_resize(::std::vector< cv::KeyPoint > &inst, size_t num) { inst.resize(num); }

static inline void vector_Stage_resize(::std::vector< cv::CascadeClassifier::Stage > &inst, size_t num) { inst.resize(num); }

static inline void vector_DTreeNode_resize(::std::vector< cv::CascadeClassifier::DTreeNode > &inst, size_t num) { inst.resize(num); }

static inline void vector_DTree_resize(::std::vector< cv::CascadeClassifier::DTree > &inst, size_t num) { inst.resize(num); }

struct BaseColumnFilter_wrapper : cv::BaseColumnFilter, bp::wrapper< cv::BaseColumnFilter > {

    BaseColumnFilter_wrapper(cv::BaseColumnFilter const & arg )
    : cv::BaseColumnFilter( arg )
      , bp::wrapper< cv::BaseColumnFilter >(){
        // copy constructor
        
    }

    BaseColumnFilter_wrapper( )
    : cv::BaseColumnFilter( )
      , bp::wrapper< cv::BaseColumnFilter >(){
        // null constructor
    
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->cv::BaseColumnFilter::reset(  );
        }
    }
    
    void default_reset(  ) {
        cv::BaseColumnFilter::reset( );
    }

};

struct BaseFilter_wrapper : cv::BaseFilter, bp::wrapper< cv::BaseFilter > {

    BaseFilter_wrapper(cv::BaseFilter const & arg )
    : cv::BaseFilter( arg )
      , bp::wrapper< cv::BaseFilter >(){
        // copy constructor
        
    }

    BaseFilter_wrapper( )
    : cv::BaseFilter( )
      , bp::wrapper< cv::BaseFilter >(){
        // null constructor
    
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->cv::BaseFilter::reset(  );
        }
    }
    
    void default_reset(  ) {
        cv::BaseFilter::reset( );
    }

};

void register_classes_1(){

    { //::std::vector< cv::KeyPoint >
        typedef bp::class_< std::vector< cv::KeyPoint > > vector_KeyPoint_exposer_t;
        vector_KeyPoint_exposer_t vector_KeyPoint_exposer = vector_KeyPoint_exposer_t( "vector_KeyPoint" );
        bp::scope vector_KeyPoint_scope( vector_KeyPoint_exposer );
        //WARNING: the next line of code will not compile, because "cv::KeyPoint" does not have operator== !
        vector_KeyPoint_exposer.def( bp::vector_indexing_suite< ::std::vector< cv::KeyPoint > >() );
        vector_KeyPoint_exposer.def("resize", &::vector_KeyPoint_resize, ( bp::arg("num") ));
    }

    { //::std::vector< cv::CascadeClassifier::Stage >
        typedef bp::class_< std::vector< cv::CascadeClassifier::Stage > > vector_Stage_exposer_t;
        vector_Stage_exposer_t vector_Stage_exposer = vector_Stage_exposer_t( "vector_Stage" );
        bp::scope vector_Stage_scope( vector_Stage_exposer );
        //WARNING: the next line of code will not compile, because "cv::CascadeClassifier::Stage" does not have operator== !
        vector_Stage_exposer.def( bp::vector_indexing_suite< ::std::vector< cv::CascadeClassifier::Stage > >() );
        vector_Stage_exposer.def("resize", &::vector_Stage_resize, ( bp::arg("num") ));
    }

    { //::std::vector< cv::CascadeClassifier::DTreeNode >
        typedef bp::class_< std::vector< cv::CascadeClassifier::DTreeNode > > vector_DTreeNode_exposer_t;
        vector_DTreeNode_exposer_t vector_DTreeNode_exposer = vector_DTreeNode_exposer_t( "vector_DTreeNode" );
        bp::scope vector_DTreeNode_scope( vector_DTreeNode_exposer );
        //WARNING: the next line of code will not compile, because "cv::CascadeClassifier::DTreeNode" does not have operator== !
        vector_DTreeNode_exposer.def( bp::vector_indexing_suite< ::std::vector< cv::CascadeClassifier::DTreeNode > >() );
        vector_DTreeNode_exposer.def("resize", &::vector_DTreeNode_resize, ( bp::arg("num") ));
    }

    { //::std::vector< cv::CascadeClassifier::DTree >
        typedef bp::class_< std::vector< cv::CascadeClassifier::DTree > > vector_DTree_exposer_t;
        vector_DTree_exposer_t vector_DTree_exposer = vector_DTree_exposer_t( "vector_DTree" );
        bp::scope vector_DTree_scope( vector_DTree_exposer );
        //WARNING: the next line of code will not compile, because "cv::CascadeClassifier::DTree" does not have operator== !
        vector_DTree_exposer.def( bp::vector_indexing_suite< ::std::vector< cv::CascadeClassifier::DTree > >() );
        vector_DTree_exposer.def("resize", &::vector_DTree_resize, ( bp::arg("num") ));
    }

    bp::class_< CvLSHOperations, boost::noncopyable >( "CvLSHOperations", bp::no_init )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvLSHOperations >() );

    bp::class_< CvLevMarq >( "CvLevMarq" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvLevMarq >() );

    bp::class_< CvStarDetectorParams >( "CvStarDetectorParams" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvStarDetectorParams >() )    
        .def_readwrite( "lineThresholdBinarized", &CvStarDetectorParams::lineThresholdBinarized )    
        .def_readwrite( "lineThresholdProjected", &CvStarDetectorParams::lineThresholdProjected )    
        .def_readwrite( "maxSize", &CvStarDetectorParams::maxSize )    
        .def_readwrite( "responseThreshold", &CvStarDetectorParams::responseThreshold )    
        .def_readwrite( "suppressNonmaxSize", &CvStarDetectorParams::suppressNonmaxSize );

    bp::class_< BaseColumnFilter_wrapper >( "BaseColumnFilter", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::BaseColumnFilter >() )    
        .def( 
            "reset"
            , (void ( cv::BaseColumnFilter::* )(  ) )(&::cv::BaseColumnFilter::reset)
            , (void ( BaseColumnFilter_wrapper::* )(  ) )(&BaseColumnFilter_wrapper::default_reset) )    
        .def_readwrite( "anchor", &cv::BaseColumnFilter::anchor )    
        .def_readwrite( "ksize", &cv::BaseColumnFilter::ksize );

    bp::class_< BaseFilter_wrapper >( "BaseFilter", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::BaseFilter >() )    
        .def( 
            "reset"
            , (void ( cv::BaseFilter::* )(  ) )(&::cv::BaseFilter::reset)
            , (void ( BaseFilter_wrapper::* )(  ) )(&BaseFilter_wrapper::default_reset) )    
        .def_readwrite( "anchor", &cv::BaseFilter::anchor )    
        .def_readwrite( "ksize", &cv::BaseFilter::ksize );

    bp::class_< cv::BaseRowFilter >( "BaseRowFilter", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::BaseRowFilter >() )    
        .def_readwrite( "anchor", &cv::BaseRowFilter::anchor )    
        .def_readwrite( "ksize", &cv::BaseRowFilter::ksize );

}
