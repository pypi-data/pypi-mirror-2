// This file has been generated by Py++.

#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "cv_h_wrapper.hpp"
#include "opencv_headers.hpp"
#include "boost/python/object.hpp"
#include "boost/python/str.hpp"
#include "opencv_converters.hpp"
#include "boost/python/list.hpp"
#include "boost/python/tuple.hpp"
#include "cv_h_ext_classes_1.pypp.hpp"

namespace bp = boost::python;

static inline void vector_CvSURFPoint_resize(::std::vector< CvSURFPoint > &inst, size_t num) { inst.resize(num); }

static inline void vector_CvConnectedComp_resize(::std::vector< CvConnectedComp > &inst, size_t num) { inst.resize(num); }

static cv::Rect_<int> *get_CvAvgComp_rect(CvAvgComp const &inst) { return (cv::Rect_<int> *)(&inst.rect); }

static ::CvSeq * get_CvChainPtReader_seq( CvChainPtReader const & inst ) { return inst.seq; }

static ::CvSeqBlock * get_CvChainPtReader_block( CvChainPtReader const & inst ) { return inst.block; }

static bp::object get_CvChainPtReader_ptr( CvChainPtReader const & inst ){        
    return inst.ptr? bp::str(inst.ptr): bp::object();
}

static bp::object get_CvChainPtReader_block_min( CvChainPtReader const & inst ){        
    return inst.block_min? bp::str(inst.block_min): bp::object();
}

static bp::object get_CvChainPtReader_block_max( CvChainPtReader const & inst ){        
    return inst.block_max? bp::str(inst.block_max): bp::object();
}

static bp::object get_CvChainPtReader_prev_elem( CvChainPtReader const & inst ){        
    return inst.prev_elem? bp::str(inst.prev_elem): bp::object();
}

static cv::Point_<int> *get_CvChainPtReader_pt(CvChainPtReader const &inst) { return (cv::Point_<int> *)(&inst.pt); }

static cv::Scalar_<double> *get_CvConnectedComp_value(CvConnectedComp const &inst) { return (cv::Scalar_<double> *)(&inst.value); }

static cv::Rect_<int> *get_CvConnectedComp_rect(CvConnectedComp const &inst) { return (cv::Rect_<int> *)(&inst.rect); }

static ::CvSeq * get_CvConnectedComp_contour( CvConnectedComp const & inst ) { return inst.contour; }

static CvSeq * get_CvContourTree_h_prev( CvContourTree const & inst ) { return inst.h_prev; }

static CvSeq * get_CvContourTree_h_next( CvContourTree const & inst ) { return inst.h_next; }

static CvSeq * get_CvContourTree_v_prev( CvContourTree const & inst ) { return inst.v_prev; }

static CvSeq * get_CvContourTree_v_next( CvContourTree const & inst ) { return inst.v_next; }

static ::CvSeqBlock * get_CvContourTree_free_blocks( CvContourTree const & inst ) { return inst.free_blocks; }

static ::CvSeqBlock * get_CvContourTree_first( CvContourTree const & inst ) { return inst.first; }

static bp::object get_CvContourTree_block_max( CvContourTree const & inst ){        
    return inst.block_max? bp::str(inst.block_max): bp::object();
}

static bp::object get_CvContourTree_ptr( CvContourTree const & inst ){        
    return inst.ptr? bp::str(inst.ptr): bp::object();
}

static cv::MemStorage get_CvContourTree_storage(CvContourTree const &inst) { return cv::MemStorage(inst.storage); }

static cv::Point_<int> *get_CvContourTree_p1(CvContourTree const &inst) { return (cv::Point_<int> *)(&inst.p1); }

static cv::Point_<int> *get_CvContourTree_p2(CvContourTree const &inst) { return (cv::Point_<int> *)(&inst.p2); }

static ::CvPoint * get_CvConvexityDefect_start( CvConvexityDefect const & inst ) { return inst.start; }

static ::CvPoint * get_CvConvexityDefect_end( CvConvexityDefect const & inst ) { return inst.end; }

static ::CvPoint * get_CvConvexityDefect_depth_point( CvConvexityDefect const & inst ) { return inst.depth_point; }

static ::CvHaarFeature * get_CvHaarClassifier_haar_feature( CvHaarClassifier const & inst ) { return inst.haar_feature; }

static cv::Mat get_CvHaarClassifier_threshold(CvHaarClassifier const &inst)
{
    cv::Mat threshold2;
    convert_from_array_of_T_to_Mat(inst.threshold, inst.count+0, threshold2);
    return threshold2;
}

static cv::Mat get_CvHaarClassifier_left(CvHaarClassifier const &inst)
{
    cv::Mat left2;
    convert_from_array_of_T_to_Mat(inst.left, inst.count+0, left2);
    return left2;
}

static cv::Mat get_CvHaarClassifier_right(CvHaarClassifier const &inst)
{
    cv::Mat right2;
    convert_from_array_of_T_to_Mat(inst.right, inst.count+0, right2);
    return right2;
}

static cv::Mat get_CvHaarClassifier_alpha(CvHaarClassifier const &inst)
{
    cv::Mat alpha2;
    convert_from_array_of_T_to_Mat(inst.alpha, inst.count+1, alpha2);
    return alpha2;
}

static bp::object get_CvHaarClassifierCascade_stage_classifier( CvHaarClassifierCascade const & inst ){
    bp::list l;
    for(int i = 0; i < inst.count; ++i)
        l.append(inst.stage_classifier[i]);
    return bp::tuple(l);
}

static ::CvHidHaarClassifierCascade * get_CvHaarClassifierCascade_hid_cascade( CvHaarClassifierCascade const & inst ) { return inst.hid_cascade; }

static cv::Size_<int> *get_CvHaarClassifierCascade_orig_window_size(CvHaarClassifierCascade const &inst) { return (cv::Size_<int> *)(&inst.orig_window_size); }

static cv::Size_<int> *get_CvHaarClassifierCascade_real_window_size(CvHaarClassifierCascade const &inst) { return (cv::Size_<int> *)(&inst.real_window_size); }

void register_classes_1(){

    { //::std::vector< CvSURFPoint >
        typedef bp::class_< std::vector< CvSURFPoint > > vector_CvSURFPoint_exposer_t;
        vector_CvSURFPoint_exposer_t vector_CvSURFPoint_exposer = vector_CvSURFPoint_exposer_t( "vector_CvSURFPoint" );
        bp::scope vector_CvSURFPoint_scope( vector_CvSURFPoint_exposer );
        //WARNING: the next line of code will not compile, because "CvSURFPoint" does not have operator== !
        vector_CvSURFPoint_exposer.def( bp::vector_indexing_suite< ::std::vector< CvSURFPoint > >() );
        vector_CvSURFPoint_exposer.def("resize", &::vector_CvSURFPoint_resize, ( bp::arg("num") ));
    }

    { //::std::vector< CvConnectedComp >
        typedef bp::class_< std::vector< CvConnectedComp > > vector_CvConnectedComp_exposer_t;
        vector_CvConnectedComp_exposer_t vector_CvConnectedComp_exposer = vector_CvConnectedComp_exposer_t( "vector_CvConnectedComp" );
        bp::scope vector_CvConnectedComp_scope( vector_CvConnectedComp_exposer );
        //WARNING: the next line of code will not compile, because "CvConnectedComp" does not have operator== !
        vector_CvConnectedComp_exposer.def( bp::vector_indexing_suite< ::std::vector< CvConnectedComp > >() );
        vector_CvConnectedComp_exposer.def("resize", &::vector_CvConnectedComp_resize, ( bp::arg("num") ));
    }

    bp::class_< CvAvgComp >( "CvAvgComp" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvAvgComp >() )    
        .def_readwrite( "neighbors", &CvAvgComp::neighbors )    
        .add_property( "rect", bp::make_function(&::get_CvAvgComp_rect, bp::return_internal_reference<>()) );

    bp::class_< CvChainPtReader >( "CvChainPtReader" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvChainPtReader >() )    
        .def_readwrite( "code", &CvChainPtReader::code )    
        .def_readwrite( "delta_index", &CvChainPtReader::delta_index )    
        .def_readwrite( "header_size", &CvChainPtReader::header_size )    
        .add_property( "seq", bp::make_function(&::get_CvChainPtReader_seq, bp::return_internal_reference<>()) )    
        .add_property( "block", bp::make_function(&::get_CvChainPtReader_block, bp::return_internal_reference<>()) )    
        .add_property( "ptr", &::get_CvChainPtReader_ptr )    
        .add_property( "block_min", &::get_CvChainPtReader_block_min )    
        .add_property( "block_max", &::get_CvChainPtReader_block_max )    
        .add_property( "prev_elem", &::get_CvChainPtReader_prev_elem )    
        .add_property( "pt", bp::make_function(&::get_CvChainPtReader_pt, bp::return_internal_reference<>()) );

    bp::class_< CvConnectedComp >( "CvConnectedComp" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvConnectedComp >() )    
        .def_readwrite( "area", &CvConnectedComp::area )    
        .add_property( "value", bp::make_function(&::get_CvConnectedComp_value, bp::return_internal_reference<>()) )    
        .add_property( "rect", bp::make_function(&::get_CvConnectedComp_rect, bp::return_internal_reference<>()) )    
        .add_property( "contour", bp::make_function(&::get_CvConnectedComp_contour, bp::return_internal_reference<>()) );

    bp::class_< CvContourTree >( "CvContourTree" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvContourTree >() )    
        .def_readwrite( "delta_elems", &CvContourTree::delta_elems )    
        .def_readwrite( "elem_size", &CvContourTree::elem_size )    
        .def_readwrite( "flags", &CvContourTree::flags )    
        .def_readwrite( "header_size", &CvContourTree::header_size )    
        .def_readwrite( "total", &CvContourTree::total )    
        .add_property( "h_prev", bp::make_function(&::get_CvContourTree_h_prev, bp::return_internal_reference<>()) )    
        .add_property( "h_next", bp::make_function(&::get_CvContourTree_h_next, bp::return_internal_reference<>()) )    
        .add_property( "v_prev", bp::make_function(&::get_CvContourTree_v_prev, bp::return_internal_reference<>()) )    
        .add_property( "v_next", bp::make_function(&::get_CvContourTree_v_next, bp::return_internal_reference<>()) )    
        .add_property( "free_blocks", bp::make_function(&::get_CvContourTree_free_blocks, bp::return_internal_reference<>()) )    
        .add_property( "first", bp::make_function(&::get_CvContourTree_first, bp::return_internal_reference<>()) )    
        .add_property( "block_max", &::get_CvContourTree_block_max )    
        .add_property( "ptr", &::get_CvContourTree_ptr )    
        .add_property( "storage", bp::make_function(&::get_CvContourTree_storage, bp::with_custodian_and_ward_postcall<0, 1>()) )    
        .add_property( "p1", bp::make_function(&::get_CvContourTree_p1, bp::return_internal_reference<>()) )    
        .add_property( "p2", bp::make_function(&::get_CvContourTree_p2, bp::return_internal_reference<>()) );

    bp::class_< CvConvexityDefect >( "CvConvexityDefect" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvConvexityDefect >() )    
        .def_readwrite( "depth", &CvConvexityDefect::depth )    
        .add_property( "start", bp::make_function(&::get_CvConvexityDefect_start, bp::return_internal_reference<>()) )    
        .add_property( "end", bp::make_function(&::get_CvConvexityDefect_end, bp::return_internal_reference<>()) )    
        .add_property( "depth_point", bp::make_function(&::get_CvConvexityDefect_depth_point, bp::return_internal_reference<>()) );

    bp::class_< CvFeatureTree >( "CvFeatureTree" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvFeatureTree >() );

    bp::class_< CvHaarClassifier >( "CvHaarClassifier" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvHaarClassifier >() )    
        .def_readwrite( "count", &CvHaarClassifier::count )    
        .add_property( "haar_feature", bp::make_function(&::get_CvHaarClassifier_haar_feature, bp::return_internal_reference<>()) )    
        .add_property( "threshold", &::get_CvHaarClassifier_threshold)    
        .add_property( "left", &::get_CvHaarClassifier_left)    
        .add_property( "right", &::get_CvHaarClassifier_right)    
        .add_property( "alpha", &::get_CvHaarClassifier_alpha);

    bp::class_< CvHaarClassifierCascade >( "CvHaarClassifierCascade" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvHaarClassifierCascade >() )    
        .def_readwrite( "count", &CvHaarClassifierCascade::count )    
        .def_readwrite( "flags", &CvHaarClassifierCascade::flags )    
        .def_readwrite( "scale", &CvHaarClassifierCascade::scale )    
        .add_property( "stage_classifier", &::get_CvHaarClassifierCascade_stage_classifier )    
        .add_property( "hid_cascade", bp::make_function(&::get_CvHaarClassifierCascade_hid_cascade, bp::return_internal_reference<>()) )    
        .add_property( "orig_window_size", bp::make_function(&::get_CvHaarClassifierCascade_orig_window_size, bp::return_internal_reference<>()) )    
        .add_property( "real_window_size", bp::make_function(&::get_CvHaarClassifierCascade_real_window_size, bp::return_internal_reference<>()) );

}
