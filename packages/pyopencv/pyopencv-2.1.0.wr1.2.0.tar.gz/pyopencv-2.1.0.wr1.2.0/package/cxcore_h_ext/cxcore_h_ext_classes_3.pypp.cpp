// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "cxcore_h_wrapper.hpp"
#include "cxcore_h_ext_classes_3.pypp.hpp"

namespace bp = boost::python;

struct KDTreeIndexParams_wrapper : cv::flann::KDTreeIndexParams, bp::wrapper< cv::flann::KDTreeIndexParams > {

    KDTreeIndexParams_wrapper(cv::flann::KDTreeIndexParams const & arg )
    : cv::flann::KDTreeIndexParams( arg )
      , bp::wrapper< cv::flann::KDTreeIndexParams >(){
        // copy constructor
        
    }

    KDTreeIndexParams_wrapper(int trees_=4 )
    : cv::flann::KDTreeIndexParams( trees_ )
      , bp::wrapper< cv::flann::KDTreeIndexParams >(){
        // constructor
    
    }

    virtual ::flann::Index * createIndex( ::cv::Mat const & dataset ) const  {
        if( bp::override func_createIndex = this->get_override( "createIndex" ) )
            return func_createIndex( boost::ref(dataset) );
        else{
            return this->cv::flann::KDTreeIndexParams::createIndex( boost::ref(dataset) );
        }
    }
    
    ::flann::Index * default_createIndex( ::cv::Mat const & dataset ) const  {
        return cv::flann::KDTreeIndexParams::createIndex( boost::ref(dataset) );
    }

};

struct KMeansIndexParams_wrapper : cv::flann::KMeansIndexParams, bp::wrapper< cv::flann::KMeansIndexParams > {

    KMeansIndexParams_wrapper(cv::flann::KMeansIndexParams const & arg )
    : cv::flann::KMeansIndexParams( arg )
      , bp::wrapper< cv::flann::KMeansIndexParams >(){
        // copy constructor
        
    }

    KMeansIndexParams_wrapper(int branching_=32, int iterations_=11, ::cv::flann::flann_centers_init_t centers_init_=::cv::flann::CENTERS_RANDOM, float cb_index_=2.00000000000000011102230246251565404236316680908e-1 )
    : cv::flann::KMeansIndexParams( branching_, iterations_, centers_init_, cb_index_ )
      , bp::wrapper< cv::flann::KMeansIndexParams >(){
        // constructor
    
    }

    virtual ::flann::Index * createIndex( ::cv::Mat const & dataset ) const  {
        if( bp::override func_createIndex = this->get_override( "createIndex" ) )
            return func_createIndex( boost::ref(dataset) );
        else{
            return this->cv::flann::KMeansIndexParams::createIndex( boost::ref(dataset) );
        }
    }
    
    ::flann::Index * default_createIndex( ::cv::Mat const & dataset ) const  {
        return cv::flann::KMeansIndexParams::createIndex( boost::ref(dataset) );
    }

};

struct LinearIndexParams_wrapper : cv::flann::LinearIndexParams, bp::wrapper< cv::flann::LinearIndexParams > {

    LinearIndexParams_wrapper(cv::flann::LinearIndexParams const & arg )
    : cv::flann::LinearIndexParams( arg )
      , bp::wrapper< cv::flann::LinearIndexParams >(){
        // copy constructor
        
    }

    LinearIndexParams_wrapper( )
    : cv::flann::LinearIndexParams( )
      , bp::wrapper< cv::flann::LinearIndexParams >(){
        // null constructor
    
    }

    virtual ::flann::Index * createIndex( ::cv::Mat const & dataset ) const  {
        if( bp::override func_createIndex = this->get_override( "createIndex" ) )
            return func_createIndex( boost::ref(dataset) );
        else{
            return this->cv::flann::LinearIndexParams::createIndex( boost::ref(dataset) );
        }
    }
    
    ::flann::Index * default_createIndex( ::cv::Mat const & dataset ) const  {
        return cv::flann::LinearIndexParams::createIndex( boost::ref(dataset) );
    }

};

struct SavedIndexParams_wrapper : cv::flann::SavedIndexParams, bp::wrapper< cv::flann::SavedIndexParams > {

    SavedIndexParams_wrapper(cv::flann::SavedIndexParams const & arg )
    : cv::flann::SavedIndexParams( arg )
      , bp::wrapper< cv::flann::SavedIndexParams >(){
        // copy constructor
        
    }

    SavedIndexParams_wrapper( )
    : cv::flann::SavedIndexParams( )
      , bp::wrapper< cv::flann::SavedIndexParams >(){
        // null constructor
    
    }

    SavedIndexParams_wrapper(::std::string filename_ )
    : cv::flann::SavedIndexParams( filename_ )
      , bp::wrapper< cv::flann::SavedIndexParams >(){
        // constructor
    
    }

    virtual ::flann::Index * createIndex( ::cv::Mat const & dataset ) const  {
        if( bp::override func_createIndex = this->get_override( "createIndex" ) )
            return func_createIndex( boost::ref(dataset) );
        else{
            return this->cv::flann::SavedIndexParams::createIndex( boost::ref(dataset) );
        }
    }
    
    ::flann::Index * default_createIndex( ::cv::Mat const & dataset ) const  {
        return cv::flann::SavedIndexParams::createIndex( boost::ref(dataset) );
    }

};

void register_classes_3(){

    { //::cv::flann::KDTreeIndexParams
        typedef bp::class_< KDTreeIndexParams_wrapper, bp::bases< cv::flann::IndexParams > > KDTreeIndexParams_exposer_t;
        KDTreeIndexParams_exposer_t KDTreeIndexParams_exposer = KDTreeIndexParams_exposer_t( "KDTreeIndexParams", bp::init< bp::optional< int > >(( bp::arg("trees_")=(int)(4) )) );
        bp::scope KDTreeIndexParams_scope( KDTreeIndexParams_exposer );
        KDTreeIndexParams_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::flann::KDTreeIndexParams >() );
        bp::implicitly_convertible< int, cv::flann::KDTreeIndexParams >();
        { //::cv::flann::KDTreeIndexParams::createIndex
        
            typedef ::flann::Index * ( ::cv::flann::KDTreeIndexParams::*createIndex_function_type )( ::cv::Mat const & ) const;
            typedef ::flann::Index * ( KDTreeIndexParams_wrapper::*default_createIndex_function_type )( ::cv::Mat const & ) const;
            
            KDTreeIndexParams_exposer.def( 
                "createIndex"
                , createIndex_function_type(&::cv::flann::KDTreeIndexParams::createIndex)
                , default_createIndex_function_type(&KDTreeIndexParams_wrapper::default_createIndex)
                , ( bp::arg("dataset") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        KDTreeIndexParams_exposer.def_readwrite( "trees", &cv::flann::KDTreeIndexParams::trees );
    }

    { //::cv::flann::KMeansIndexParams
        typedef bp::class_< KMeansIndexParams_wrapper, bp::bases< cv::flann::IndexParams > > KMeansIndexParams_exposer_t;
        KMeansIndexParams_exposer_t KMeansIndexParams_exposer = KMeansIndexParams_exposer_t( "KMeansIndexParams", bp::init< bp::optional< int, int, cv::flann::flann_centers_init_t, float > >(( bp::arg("branching_")=(int)(32), bp::arg("iterations_")=(int)(11), bp::arg("centers_init_")=::cv::flann::CENTERS_RANDOM, bp::arg("cb_index_")=2.00000000000000011102230246251565404236316680908e-1 )) );
        bp::scope KMeansIndexParams_scope( KMeansIndexParams_exposer );
        KMeansIndexParams_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::flann::KMeansIndexParams >() );
        bp::implicitly_convertible< int, cv::flann::KMeansIndexParams >();
        { //::cv::flann::KMeansIndexParams::createIndex
        
            typedef ::flann::Index * ( ::cv::flann::KMeansIndexParams::*createIndex_function_type )( ::cv::Mat const & ) const;
            typedef ::flann::Index * ( KMeansIndexParams_wrapper::*default_createIndex_function_type )( ::cv::Mat const & ) const;
            
            KMeansIndexParams_exposer.def( 
                "createIndex"
                , createIndex_function_type(&::cv::flann::KMeansIndexParams::createIndex)
                , default_createIndex_function_type(&KMeansIndexParams_wrapper::default_createIndex)
                , ( bp::arg("dataset") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        KMeansIndexParams_exposer.def_readwrite( "branching", &cv::flann::KMeansIndexParams::branching );
        KMeansIndexParams_exposer.def_readwrite( "cb_index", &cv::flann::KMeansIndexParams::cb_index );
        KMeansIndexParams_exposer.def_readwrite( "centers_init", &cv::flann::KMeansIndexParams::centers_init );
        KMeansIndexParams_exposer.def_readwrite( "iterations", &cv::flann::KMeansIndexParams::iterations );
    }

    bp::class_< LinearIndexParams_wrapper, bp::bases< cv::flann::IndexParams > >( "LinearIndexParams", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::flann::LinearIndexParams >() )    
        .def( 
            "createIndex"
            , (::flann::Index * ( cv::flann::LinearIndexParams::* )( ::cv::Mat const & ) const)(&::cv::flann::LinearIndexParams::createIndex)
            , (::flann::Index * ( LinearIndexParams_wrapper::* )( ::cv::Mat const & ) const)(&LinearIndexParams_wrapper::default_createIndex)
            , ( bp::arg("dataset") )
            , bp::return_value_policy< bp::reference_existing_object >() );

    { //::cv::flann::SavedIndexParams
        typedef bp::class_< SavedIndexParams_wrapper, bp::bases< cv::flann::IndexParams > > SavedIndexParams_exposer_t;
        SavedIndexParams_exposer_t SavedIndexParams_exposer = SavedIndexParams_exposer_t( "SavedIndexParams", bp::init< >() );
        bp::scope SavedIndexParams_scope( SavedIndexParams_exposer );
        SavedIndexParams_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::flann::SavedIndexParams >() );
        SavedIndexParams_exposer.def( bp::init< std::string >(( bp::arg("filename_") )) );
        bp::implicitly_convertible< std::string, cv::flann::SavedIndexParams >();
        { //::cv::flann::SavedIndexParams::createIndex
        
            typedef ::flann::Index * ( ::cv::flann::SavedIndexParams::*createIndex_function_type )( ::cv::Mat const & ) const;
            typedef ::flann::Index * ( SavedIndexParams_wrapper::*default_createIndex_function_type )( ::cv::Mat const & ) const;
            
            SavedIndexParams_exposer.def( 
                "createIndex"
                , createIndex_function_type(&::cv::flann::SavedIndexParams::createIndex)
                , default_createIndex_function_type(&SavedIndexParams_wrapper::default_createIndex)
                , ( bp::arg("dataset") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        SavedIndexParams_exposer.def_readwrite( "filename", &cv::flann::SavedIndexParams::filename );
    }

    { //::cv::flann::SearchParams
        typedef bp::class_< cv::flann::SearchParams > SearchParams_exposer_t;
        SearchParams_exposer_t SearchParams_exposer = SearchParams_exposer_t( "SearchParams", bp::init< bp::optional< int > >(( bp::arg("checks_")=(int)(32) )) );
        bp::scope SearchParams_scope( SearchParams_exposer );
        SearchParams_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::flann::SearchParams >() );
        bp::implicitly_convertible< int, cv::flann::SearchParams >();
        SearchParams_exposer.def_readwrite( "checks", &cv::flann::SearchParams::checks );
    }

    { //::cxcore_h_dummy_struct
        typedef bp::class_< cxcore_h_dummy_struct > __cxcore_h_dummy_struct_exposer_t;
        __cxcore_h_dummy_struct_exposer_t __cxcore_h_dummy_struct_exposer = __cxcore_h_dummy_struct_exposer_t( "__cxcore_h_dummy_struct" );
        bp::scope __cxcore_h_dummy_struct_scope( __cxcore_h_dummy_struct_exposer );
        __cxcore_h_dummy_struct_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cxcore_h_dummy_struct >() );
        bp::class_< cxcore_h_dummy_struct::dummy_struct2 >( "dummy_struct2" )    
            .add_property( "this", pyplus_conv::make_addressof_inst_getter< cxcore_h_dummy_struct::dummy_struct2 >() );
        __cxcore_h_dummy_struct_exposer.setattr("v0", 0);
    }
    {;
    }

    bp::class_< flann::Index >( "flann_Index" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< flann::Index >() );

}
