// This file has been generated by Py++.

#include "boost/python.hpp"
#include "cxcore_h_wrapper.hpp"
#include "cxcore_h_ext_enumerations.pypp.hpp"

namespace bp = boost::python;

void register_enumerations(){

    bp::enum_< cv::flann::flann_algorithm_t>("flann_algorithm_t")
        .value("LINEAR", cv::flann::LINEAR)
        .value("KDTREE", cv::flann::KDTREE)
        .value("KMEANS", cv::flann::KMEANS)
        .value("COMPOSITE", cv::flann::COMPOSITE)
        .value("SAVED", cv::flann::SAVED)
        .value("AUTOTUNED", cv::flann::AUTOTUNED)
        .export_values()
        ;

    bp::enum_< cv::flann::flann_centers_init_t>("flann_centers_init_t")
        .value("CENTERS_RANDOM", cv::flann::CENTERS_RANDOM)
        .value("CENTERS_GONZALES", cv::flann::CENTERS_GONZALES)
        .value("CENTERS_KMEANSPP", cv::flann::CENTERS_KMEANSPP)
        .export_values()
        ;

    bp::enum_< cv::flann::flann_distance_t>("flann_distance_t")
        .value("EUCLIDEAN", cv::flann::EUCLIDEAN)
        .value("MANHATTAN", cv::flann::MANHATTAN)
        .value("MINKOWSKI", cv::flann::MINKOWSKI)
        .export_values()
        ;

    bp::enum_< cv::flann::flann_log_level_t>("flann_log_level_t")
        .value("LOG_NONE", cv::flann::LOG_NONE)
        .value("LOG_FATAL", cv::flann::LOG_FATAL)
        .value("LOG_ERROR", cv::flann::LOG_ERROR)
        .value("LOG_WARN", cv::flann::LOG_WARN)
        .value("LOG_INFO", cv::flann::LOG_INFO)
        .export_values()
        ;

}
