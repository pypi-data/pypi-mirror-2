// This file has been generated by Py++.

#include "boost/python.hpp"

#include "boost/python/object.hpp"

#include "boost/python/tuple.hpp"

#include "opencv_extra.hpp"

#include "__call_policies.pypp.hpp"

#include "opencv_converters.hpp"

#include "__ctypes_integration.pypp.hpp"

#include "highgui_wrapper.hpp"

#include "highgui_ext/highgui_ext_classes_1.pypp.hpp"

#include "highgui_ext/highgui_ext_free_functions.pypp.hpp"

namespace bp = boost::python;

static boost::python::tuple createTrackbar_a255009d4d0c76c9c0a784685d2594ee( ::std::string const & trackbarname, ::std::string const & winname, Py_intptr_t value, int count, boost::python::object onChange=bp::object(), boost::python::object userdata=bp::object() ){
    bp::tuple z_onChange= bp::make_tuple(onChange, userdata);
    int result = ::cv::createTrackbar(trackbarname, winname, reinterpret_cast< int * >( value ), count, sdTrackbarCallback2, (void *)(z_onChange.ptr()));
    return bp::make_tuple( result, z_onChange );
}

static void cvConvertImage_9d5028440635df77832885475bf0ea00( ::cv::Mat & src, ::cv::Mat & dst, int flags=0 ){
    ::cvConvertImage(get_CvMat_ptr(src), get_CvMat_ptr(dst), flags);
}

static boost::python::object cvInitSystem_f0aa383f9ae0b2f0bf89bbcb5e73da23( bp::list const & argv ){
    int argv2=bp::len(argv);
    std::vector<char const *> argv3;
    argv3.resize(argv2); while(--argv2 >= 0) argv3[argv2]=bp::extract<char const *>(argv[argv2]);
    int result = ::cvInitSystem(argv2, (char * *)(&argv3[0]));
    return bp::object( result );
}

static boost::python::object cvSetMouseCallback_c212defec0903d7de57c5c0b0ee9b03d( char const * window_name, boost::python::object on_mouse, boost::python::object param=bp::object() ){
    boost::python::tuple z_on_mouse= bp::make_tuple(on_mouse, param);
    ::cvSetMouseCallback(window_name, sdMouseCallback, (void *)(z_on_mouse.ptr()));
    typedef bp::return_value_policy< bp::reference_existing_object > call_policies_t;
    return bp::object( z_on_mouse );
}

static boost::python::tuple imencode_7058867f40db2ceceebdc74b4943c841( ::std::string const & ext, ::cv::Mat const & img, ::std::vector< int > const & params=std::vector<int>() ){
    std::vector<unsigned char> buf2;
    bool result = ::cv::imencode(ext, img, buf2, params);
    return bp::make_tuple( result, buf2 );
}

BOOST_PYTHON_MODULE(highgui_ext){
    { //::cv::createTrackbar
    
        typedef boost::python::tuple ( *_createTrackbar_function_type )( ::std::string const &,::std::string const &,Py_intptr_t,int,boost::python::object,boost::python::object );
        
        bp::def( 
            "_createTrackbar"
            , _createTrackbar_function_type( &createTrackbar_a255009d4d0c76c9c0a784685d2594ee )
            , ( bp::arg("trackbarname"), bp::arg("winname"), bp::arg("value"), bp::arg("count"), bp::arg("onChange")=bp::object(), bp::arg("userdata")=bp::object() )
            , "\nCreates a trackbar and attaches it to the specified window."
    "\nWrapped function:"
    "\n    createTrackbar"
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/user_interface.html#cv-createtrackbar"
    "\nArgument 'onChange' is a Python function that should look like below:"\
    "\n    def on_trackbar(pos, user_data):"\
    "\n        ..."\
    "\nArgument 'userdata' is a Python object that is passed to function "\
    "\non_trackbar() as 'user_data'." );
    
    }

    { //::cvConvertImage
    
        typedef void ( *convertImage_function_type )( ::cv::Mat &,::cv::Mat &,int );
        
        bp::def( 
            "convertImage"
            , convertImage_function_type( &cvConvertImage_9d5028440635df77832885475bf0ea00 )
            , ( bp::arg("src"), bp::arg("dst"), bp::arg("flags")=(int)(0) )
            , "\nConverts one image to another with an optional vertical flip."
    "\nWrapped function:"
    "\n    cvConvertImage"
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/c/user_interface.html#convertimage#convertimage"
    "\nArgument 'src':"\
    "\n    C++ type: ::CvArr const *"\
    "\n    Python type: Mat"\
    "\nArgument 'dst':"\
    "\n    C++ type: ::CvArr *"\
    "\n    Python type: Mat" );
    
    }

    { //::cvInitSystem
    
        typedef boost::python::object ( *initSystem_function_type )( bp::list const & );
        
        bp::def( 
            "initSystem"
            , initSystem_function_type( &cvInitSystem_f0aa383f9ae0b2f0bf89bbcb5e73da23 )
            , ( bp::arg("argv") )
            , "\nInitializes HighGUI."
    "\nWrapped function:"
    "\n    cvInitSystem"
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/c/user_interface.html#convertimage#initsystem"
    "\nArgument 'argc':"\
    "\n    Dependent argument: omitted from input. Its value is derived from "\
    "\n    argument 'argv'."\
    "\nArgument 'argv':"\
    "\n    C++ type: char * *"\
    "\n    Python type: list of strings" );
    
    }

    { //::cvSetMouseCallback
    
        typedef boost::python::object ( *_cvSetMouseCallback_function_type )( char const *,boost::python::object,boost::python::object );
        
        bp::def( 
            "_cvSetMouseCallback"
            , _cvSetMouseCallback_function_type( &cvSetMouseCallback_c212defec0903d7de57c5c0b0ee9b03d )
            , ( bp::arg("window_name"), bp::arg("on_mouse"), bp::arg("param")=bp::object() )
            , "\nAssigns callback for mouse events."
    "\nWrapped function:"
    "\n    cvSetMouseCallback"
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/c/user_interface.html#convertimage#setmousecallback"
    "\nArgument 'on_mouse' is a Python function that should look like below:"\
    "\n    def on_mouse(event, x, y, flags, user_data):"\
    "\n        ..."\
    "\nArgument 'param' is a Python object that is passed to function "\
    "\non_mouse() as 'user_data'." );
    
    }

    { //::cv::imencode
    
        typedef boost::python::tuple ( *imencode_function_type )( ::std::string const &,cv::Mat const &,std::vector<int> const & );
        
        bp::def( 
            "imencode"
            , imencode_function_type( &imencode_7058867f40db2ceceebdc74b4943c841 )
            , ( bp::arg("ext"), bp::arg("img"), bp::arg("params")=std::vector<int>() )
            , "\nEncode an image into a memory buffer."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/reading_and_writing_images_and_video.html#cv-imencode"
    "\nArgument 'buf':"\
    "\n    C++ type: ::std::vector< unsigned char > &"\
    "\n    Python type: vector_uint8"\
    "\n    Output argument: omitted from input and returned as output."\
    "\nReturns:"\
    "\n    ((bool), buf)" );
    
    }

    register_classes_1();

    register_free_functions();
}

