// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "opencv_converters.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "ml_wrapper.hpp"
#include "ml_ext_classes_6.pypp.hpp"

namespace bp = boost::python;

struct CvERTrees_wrapper : CvERTrees, bp::wrapper< CvERTrees > {

    CvERTrees_wrapper(CvERTrees const & arg )
    : CvERTrees( arg )
      , bp::wrapper< CvERTrees >(){
        // copy constructor
        
    }

    CvERTrees_wrapper( )
    : CvERTrees( )
      , bp::wrapper< CvERTrees >(){
        // null constructor
    
    }

    virtual bool train( ::CvMat const * _train_data, int _tflag, ::CvMat const * _responses, ::CvMat const * _var_idx=0, ::CvMat const * _sample_idx=0, ::CvMat const * _var_type=0, ::CvMat const * _missing_mask=0, ::CvRTParams params=::CvRTParams( ) ) {
        namespace bpl = boost::python;
        if( bpl::override func_train = this->get_override( "train" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_train.ptr(), _train_data, _tflag, _responses, _var_idx, _sample_idx, _var_type, _missing_mask, params );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvERTrees::train( boost::python::ptr(_train_data), _tflag, boost::python::ptr(_responses), boost::python::ptr(_var_idx), boost::python::ptr(_sample_idx), boost::python::ptr(_var_type), boost::python::ptr(_missing_mask), params );
        }
    }
    
    static boost::python::object default_train_9f93dc7be6c6cee516880b16f5290b4d( ::CvERTrees & inst, ::cv::Mat & _train_data, int _tflag, ::cv::Mat & _responses, ::cv::Mat _var_idx=cv::Mat(), ::cv::Mat _sample_idx=cv::Mat(), ::cv::Mat _var_type=cv::Mat(), ::cv::Mat _missing_mask=cv::Mat(), ::CvRTParams params=::CvRTParams( ) ){
        bool result;
        if( dynamic_cast< CvERTrees_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::CvERTrees::train(get_CvMat_ptr(_train_data), _tflag, get_CvMat_ptr(_responses), get_CvMat_ptr(_var_idx), get_CvMat_ptr(_sample_idx), get_CvMat_ptr(_var_type), get_CvMat_ptr(_missing_mask), params);
        }
        else{
            result = inst.train(get_CvMat_ptr(_train_data), _tflag, get_CvMat_ptr(_responses), get_CvMat_ptr(_var_idx), get_CvMat_ptr(_sample_idx), get_CvMat_ptr(_var_type), get_CvMat_ptr(_missing_mask), params);
        }
        return bp::object( result );
    }

    virtual bool train( ::cv::Mat const & _train_data, int _tflag, ::cv::Mat const & _responses, ::cv::Mat const & _var_idx=cv::Mat(), ::cv::Mat const & _sample_idx=cv::Mat(), ::cv::Mat const & _var_type=cv::Mat(), ::cv::Mat const & _missing_mask=cv::Mat(), ::CvRTParams params=::CvRTParams( ) ) {
        if( bp::override func_train = this->get_override( "train" ) )
            return func_train( boost::ref(_train_data), _tflag, boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), boost::ref(_var_type), boost::ref(_missing_mask), params );
        else{
            return this->CvERTrees::train( boost::ref(_train_data), _tflag, boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), boost::ref(_var_type), boost::ref(_missing_mask), params );
        }
    }
    
    bool default_train( ::cv::Mat const & _train_data, int _tflag, ::cv::Mat const & _responses, ::cv::Mat const & _var_idx=cv::Mat(), ::cv::Mat const & _sample_idx=cv::Mat(), ::cv::Mat const & _var_type=cv::Mat(), ::cv::Mat const & _missing_mask=cv::Mat(), ::CvRTParams params=::CvRTParams( ) ) {
        return CvERTrees::train( boost::ref(_train_data), _tflag, boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), boost::ref(_var_type), boost::ref(_missing_mask), params );
    }

    virtual bool train( ::CvMLData * data, ::CvRTParams params=::CvRTParams( ) ) {
        if( bp::override func_train = this->get_override( "train" ) )
            return func_train( boost::python::ptr(data), params );
        else{
            return this->CvERTrees::train( boost::python::ptr(data), params );
        }
    }
    
    bool default_train( ::CvMLData * data, ::CvRTParams params=::CvRTParams( ) ) {
        return CvERTrees::train( boost::python::ptr(data), params );
    }

    virtual float calc_error( ::CvMLData * _data, int type, ::std::vector< float > * resp=0 ) {
        if( bp::override func_calc_error = this->get_override( "calc_error" ) )
            return func_calc_error( boost::python::ptr(_data), type, boost::python::ptr(resp) );
        else{
            return this->CvRTrees::calc_error( boost::python::ptr(_data), type, boost::python::ptr(resp) );
        }
    }
    
    float default_calc_error( ::CvMLData * _data, int type, ::std::vector< float > * resp=0 ) {
        return CvRTrees::calc_error( boost::python::ptr(_data), type, boost::python::ptr(resp) );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->CvRTrees::clear(  );
        }
    }
    
    void default_clear(  ) {
        CvRTrees::clear( );
    }

    virtual float get_proximity( ::CvMat const * sample1, ::CvMat const * sample2, ::CvMat const * missing1=0, ::CvMat const * missing2=0 ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_get_proximity = this->get_override( "get_proximity" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_get_proximity.ptr(), sample1, sample2, missing1, missing2 );
            return bpl::extract< float >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvRTrees::get_proximity( boost::python::ptr(sample1), boost::python::ptr(sample2), boost::python::ptr(missing1), boost::python::ptr(missing2) );
        }
    }
    
    static boost::python::object default_get_proximity( ::CvRTrees const & inst, ::cv::Mat & sample1, ::cv::Mat & sample2, ::cv::Mat missing1=cv::Mat(), ::cv::Mat missing2=cv::Mat() ){
        float result;
        if( dynamic_cast< CvERTrees_wrapper const* >( boost::addressof( inst ) ) ){
            result = inst.::CvRTrees::get_proximity(get_CvMat_ptr(sample1), get_CvMat_ptr(sample2), get_CvMat_ptr(missing1), get_CvMat_ptr(missing2));
        }
        else{
            result = inst.get_proximity(get_CvMat_ptr(sample1), get_CvMat_ptr(sample2), get_CvMat_ptr(missing1), get_CvMat_ptr(missing2));
        }
        return bp::object( result );
    }

    virtual float get_train_error(  ) {
        if( bp::override func_get_train_error = this->get_override( "get_train_error" ) )
            return func_get_train_error(  );
        else{
            return this->CvRTrees::get_train_error(  );
        }
    }
    
    float default_get_train_error(  ) {
        return CvRTrees::get_train_error( );
    }

    virtual ::CvMat const * get_var_importance(  ) {
        if( bp::override func_get_var_importance = this->get_override( "get_var_importance" ) )
            return func_get_var_importance(  );
        else{
            return this->CvRTrees::get_var_importance(  );
        }
    }
    
    ::CvMat const * default_get_var_importance(  ) {
        return CvRTrees::get_var_importance( );
    }

    virtual void load( char const * filename, char const * name=0 ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( filename, name );
        else{
            this->CvStatModel::load( filename, name );
        }
    }
    
    void default_load( char const * filename, char const * name=0 ) {
        CvStatModel::load( filename, name );
    }

    virtual float predict( ::CvMat const * sample, ::CvMat const * missing=0 ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_predict = this->get_override( "predict" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_predict.ptr(), sample, missing );
            return bpl::extract< float >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvRTrees::predict( boost::python::ptr(sample), boost::python::ptr(missing) );
        }
    }
    
    static boost::python::object default_predict_8f760c2403d8e76b3c8cb03f101d0997( ::CvRTrees const & inst, ::cv::Mat & sample, ::cv::Mat missing=cv::Mat() ){
        float result;
        if( dynamic_cast< CvERTrees_wrapper const* >( boost::addressof( inst ) ) ){
            result = inst.::CvRTrees::predict(get_CvMat_ptr(sample), get_CvMat_ptr(missing));
        }
        else{
            result = inst.predict(get_CvMat_ptr(sample), get_CvMat_ptr(missing));
        }
        return bp::object( result );
    }

    virtual float predict( ::cv::Mat const & sample, ::cv::Mat const & missing=cv::Mat() ) const  {
        if( bp::override func_predict = this->get_override( "predict" ) )
            return func_predict( boost::ref(sample), boost::ref(missing) );
        else{
            return this->CvRTrees::predict( boost::ref(sample), boost::ref(missing) );
        }
    }
    
    float default_predict( ::cv::Mat const & sample, ::cv::Mat const & missing=cv::Mat() ) const  {
        return CvRTrees::predict( boost::ref(sample), boost::ref(missing) );
    }

    virtual float predict_prob( ::CvMat const * sample, ::CvMat const * missing=0 ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_predict_prob = this->get_override( "predict_prob" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_predict_prob.ptr(), sample, missing );
            return bpl::extract< float >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvRTrees::predict_prob( boost::python::ptr(sample), boost::python::ptr(missing) );
        }
    }
    
    static boost::python::object default_predict_prob_4a1ffb549242708ef963dcd84a06f27d( ::CvRTrees const & inst, ::cv::Mat & sample, ::cv::Mat missing=cv::Mat() ){
        float result;
        if( dynamic_cast< CvERTrees_wrapper const* >( boost::addressof( inst ) ) ){
            result = inst.::CvRTrees::predict_prob(get_CvMat_ptr(sample), get_CvMat_ptr(missing));
        }
        else{
            result = inst.predict_prob(get_CvMat_ptr(sample), get_CvMat_ptr(missing));
        }
        return bp::object( result );
    }

    virtual float predict_prob( ::cv::Mat const & sample, ::cv::Mat const & missing=cv::Mat() ) const  {
        if( bp::override func_predict_prob = this->get_override( "predict_prob" ) )
            return func_predict_prob( boost::ref(sample), boost::ref(missing) );
        else{
            return this->CvRTrees::predict_prob( boost::ref(sample), boost::ref(missing) );
        }
    }
    
    float default_predict_prob( ::cv::Mat const & sample, ::cv::Mat const & missing=cv::Mat() ) const  {
        return CvRTrees::predict_prob( boost::ref(sample), boost::ref(missing) );
    }

    virtual void read( ::CvFileStorage * fs, ::CvFileNode * node ) {
        namespace bpl = boost::python;
        if( bpl::override func_read = this->get_override( "read" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_read.ptr(), fs, node );
        }
        else{
            CvRTrees::read( boost::python::ptr(fs), boost::python::ptr(node) );
        }
    }
    
    static void default_read( ::CvRTrees & inst, ::cv::FileStorage & fs, ::cv::FileNode & node ){
        if( dynamic_cast< CvERTrees_wrapper * >( boost::addressof( inst ) ) ){
            inst.::CvRTrees::read(fs.fs, *(node));
        }
        else{
            inst.read(fs.fs, *(node));
        }
    }

    virtual void save( char const * filename, char const * name=0 ) const  {
        if( bp::override func_save = this->get_override( "save" ) )
            func_save( filename, name );
        else{
            this->CvStatModel::save( filename, name );
        }
    }
    
    void default_save( char const * filename, char const * name=0 ) const  {
        CvStatModel::save( filename, name );
    }

    virtual void write( ::CvFileStorage * fs, char const * name ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_write = this->get_override( "write" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_write.ptr(), fs, name );
        }
        else{
            CvRTrees::write( boost::python::ptr(fs), name );
        }
    }
    
    static void default_write( ::CvRTrees const & inst, ::cv::FileStorage & fs, char const * name ){
        if( dynamic_cast< CvERTrees_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::CvRTrees::write(fs.fs, name);
        }
        else{
            inst.write(fs.fs, name);
        }
    }

};

struct CvForestTree_wrapper : CvForestTree, bp::wrapper< CvForestTree > {

    CvForestTree_wrapper(CvForestTree const & arg )
    : CvForestTree( arg )
      , bp::wrapper< CvForestTree >(){
        // copy constructor
        
    }

    CvForestTree_wrapper( )
    : CvForestTree( )
      , bp::wrapper< CvForestTree >(){
        // null constructor
    
    }

    virtual int get_var_count(  ) const  {
        if( bp::override func_get_var_count = this->get_override( "get_var_count" ) )
            return func_get_var_count(  );
        else{
            return this->CvForestTree::get_var_count(  );
        }
    }
    
    int default_get_var_count(  ) const  {
        return CvForestTree::get_var_count( );
    }

    virtual void read( ::CvFileStorage * fs, ::CvFileNode * node, ::CvRTrees * forest, ::CvDTreeTrainData * _data ) {
        namespace bpl = boost::python;
        if( bpl::override func_read = this->get_override( "read" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_read.ptr(), fs, node, forest, _data );
        }
        else{
            CvForestTree::read( boost::python::ptr(fs), boost::python::ptr(node), boost::python::ptr(forest), boost::python::ptr(_data) );
        }
    }
    
    static void default_read_8d6757d6bbd70f87efa21a9a88d7b91b( ::CvForestTree & inst, ::cv::FileStorage & fs, ::cv::FileNode & node, ::CvRTrees * forest, ::CvDTreeTrainData * _data ){
        if( dynamic_cast< CvForestTree_wrapper * >( boost::addressof( inst ) ) ){
            inst.::CvForestTree::read(fs.fs, *(node), forest, _data);
        }
        else{
            inst.read(fs.fs, *(node), forest, _data);
        }
    }

    virtual void read( ::CvFileStorage * fs, ::CvFileNode * node ) {
        namespace bpl = boost::python;
        if( bpl::override func_read = this->get_override( "read" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_read.ptr(), fs, node );
        }
        else{
            CvForestTree::read( boost::python::ptr(fs), boost::python::ptr(node) );
        }
    }
    
    static void default_read_21f4d9d118da24ef774e945ac72443bf( ::CvForestTree & inst, ::cv::FileStorage & fs, ::cv::FileNode & node ){
        if( dynamic_cast< CvForestTree_wrapper * >( boost::addressof( inst ) ) ){
            inst.::CvForestTree::read(fs.fs, *(node));
        }
        else{
            inst.read(fs.fs, *(node));
        }
    }

    virtual void read( ::CvFileStorage * fs, ::CvFileNode * node, ::CvDTreeTrainData * data ) {
        namespace bpl = boost::python;
        if( bpl::override func_read = this->get_override( "read" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_read.ptr(), fs, node, data );
        }
        else{
            CvForestTree::read( boost::python::ptr(fs), boost::python::ptr(node), boost::python::ptr(data) );
        }
    }
    
    static void default_read_f1eddefe30282eed3e835c344b312841( ::CvForestTree & inst, ::cv::FileStorage & fs, ::cv::FileNode & node, ::CvDTreeTrainData * data ){
        if( dynamic_cast< CvForestTree_wrapper * >( boost::addressof( inst ) ) ){
            inst.::CvForestTree::read(fs.fs, *(node), data);
        }
        else{
            inst.read(fs.fs, *(node), data);
        }
    }

    virtual bool train( ::CvDTreeTrainData * _train_data, ::CvMat const * _subsample_idx, ::CvRTrees * forest ) {
        namespace bpl = boost::python;
        if( bpl::override func_train = this->get_override( "train" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_train.ptr(), _train_data, _subsample_idx, forest );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvForestTree::train( boost::python::ptr(_train_data), boost::python::ptr(_subsample_idx), boost::python::ptr(forest) );
        }
    }
    
    static boost::python::object default_train_4bc7f79d4a1e6910af357373bfa4eddb( ::CvForestTree & inst, ::CvDTreeTrainData * _train_data, ::cv::Mat & _subsample_idx, ::CvRTrees * forest ){
        bool result;
        if( dynamic_cast< CvForestTree_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::CvForestTree::train(_train_data, get_CvMat_ptr(_subsample_idx), forest);
        }
        else{
            result = inst.train(_train_data, get_CvMat_ptr(_subsample_idx), forest);
        }
        return bp::object( result );
    }

    virtual bool train( ::CvMat const * _train_data, int _tflag, ::CvMat const * _responses, ::CvMat const * _var_idx=0, ::CvMat const * _sample_idx=0, ::CvMat const * _var_type=0, ::CvMat const * _missing_mask=0, ::CvDTreeParams params=::CvDTreeParams( ) ) {
        namespace bpl = boost::python;
        if( bpl::override func_train = this->get_override( "train" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_train.ptr(), _train_data, _tflag, _responses, _var_idx, _sample_idx, _var_type, _missing_mask, params );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvForestTree::train( boost::python::ptr(_train_data), _tflag, boost::python::ptr(_responses), boost::python::ptr(_var_idx), boost::python::ptr(_sample_idx), boost::python::ptr(_var_type), boost::python::ptr(_missing_mask), params );
        }
    }
    
    static boost::python::object default_train_96f2f7218741280e2a32a5f6ce32c0f0( ::CvForestTree & inst, ::cv::Mat & _train_data, int _tflag, ::cv::Mat & _responses, ::cv::Mat _var_idx=cv::Mat(), ::cv::Mat _sample_idx=cv::Mat(), ::cv::Mat _var_type=cv::Mat(), ::cv::Mat _missing_mask=cv::Mat(), ::CvDTreeParams params=::CvDTreeParams( ) ){
        bool result;
        if( dynamic_cast< CvForestTree_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::CvForestTree::train(get_CvMat_ptr(_train_data), _tflag, get_CvMat_ptr(_responses), get_CvMat_ptr(_var_idx), get_CvMat_ptr(_sample_idx), get_CvMat_ptr(_var_type), get_CvMat_ptr(_missing_mask), params);
        }
        else{
            result = inst.train(get_CvMat_ptr(_train_data), _tflag, get_CvMat_ptr(_responses), get_CvMat_ptr(_var_idx), get_CvMat_ptr(_sample_idx), get_CvMat_ptr(_var_type), get_CvMat_ptr(_missing_mask), params);
        }
        return bp::object( result );
    }

    virtual bool train( ::CvDTreeTrainData * _train_data, ::CvMat const * _subsample_idx ) {
        namespace bpl = boost::python;
        if( bpl::override func_train = this->get_override( "train" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_train.ptr(), _train_data, _subsample_idx );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvForestTree::train( boost::python::ptr(_train_data), boost::python::ptr(_subsample_idx) );
        }
    }
    
    static boost::python::object default_train_89d20e49296df69e16cdfc2afd830b46( ::CvForestTree & inst, ::CvDTreeTrainData * _train_data, ::cv::Mat & _subsample_idx ){
        bool result;
        if( dynamic_cast< CvForestTree_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::CvForestTree::train(_train_data, get_CvMat_ptr(_subsample_idx));
        }
        else{
            result = inst.train(_train_data, get_CvMat_ptr(_subsample_idx));
        }
        return bp::object( result );
    }

    virtual float calc_error( ::CvMLData * _data, int type, ::std::vector< float > * resp=0 ) {
        if( bp::override func_calc_error = this->get_override( "calc_error" ) )
            return func_calc_error( boost::python::ptr(_data), type, boost::python::ptr(resp) );
        else{
            return this->CvDTree::calc_error( boost::python::ptr(_data), type, boost::python::ptr(resp) );
        }
    }
    
    float default_calc_error( ::CvMLData * _data, int type, ::std::vector< float > * resp=0 ) {
        return CvDTree::calc_error( boost::python::ptr(_data), type, boost::python::ptr(resp) );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->CvDTree::clear(  );
        }
    }
    
    void default_clear(  ) {
        CvDTree::clear( );
    }

    virtual ::CvMat const * get_var_importance(  ) {
        if( bp::override func_get_var_importance = this->get_override( "get_var_importance" ) )
            return func_get_var_importance(  );
        else{
            return this->CvDTree::get_var_importance(  );
        }
    }
    
    ::CvMat const * default_get_var_importance(  ) {
        return CvDTree::get_var_importance( );
    }

    virtual void load( char const * filename, char const * name=0 ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( filename, name );
        else{
            this->CvStatModel::load( filename, name );
        }
    }
    
    void default_load( char const * filename, char const * name=0 ) {
        CvStatModel::load( filename, name );
    }

    virtual CvDTreeNode * predict( ::CvMat const * _sample, ::CvMat const * _missing_data_mask=0, bool preprocessed_input=false ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_predict = this->get_override( "predict" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_predict.ptr(), _sample, _missing_data_mask, preprocessed_input );
            return bpl::extract< CvDTreeNode * >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvDTree::predict( boost::python::ptr(_sample), boost::python::ptr(_missing_data_mask), preprocessed_input );
        }
    }
    
    static boost::python::object default_predict_76f915d59fbfe6ec6c36b63903c7e6de( ::CvDTree const & inst, ::cv::Mat & _sample, ::cv::Mat _missing_data_mask=cv::Mat(), bool preprocessed_input=false ){
        CvDTreeNode * result;
        if( dynamic_cast< CvForestTree_wrapper const* >( boost::addressof( inst ) ) ){
            result = inst.::CvDTree::predict(get_CvMat_ptr(_sample), get_CvMat_ptr(_missing_data_mask), preprocessed_input);
        }
        else{
            result = inst.predict(get_CvMat_ptr(_sample), get_CvMat_ptr(_missing_data_mask), preprocessed_input);
        }
        typedef bp::return_internal_reference< > call_policies_t3;
        return bp::object( pyplusplus::call_policies::make_object< call_policies_t3, CvDTreeNode * >( result ) );
    }

    virtual ::CvDTreeNode * predict( ::cv::Mat const & _sample, ::cv::Mat const & _missing_data_mask=cv::Mat(), bool preprocessed_input=false ) const  {
        if( bp::override func_predict = this->get_override( "predict" ) )
            return func_predict( boost::ref(_sample), boost::ref(_missing_data_mask), preprocessed_input );
        else{
            return this->CvDTree::predict( boost::ref(_sample), boost::ref(_missing_data_mask), preprocessed_input );
        }
    }
    
    ::CvDTreeNode * default_predict( ::cv::Mat const & _sample, ::cv::Mat const & _missing_data_mask=cv::Mat(), bool preprocessed_input=false ) const  {
        return CvDTree::predict( boost::ref(_sample), boost::ref(_missing_data_mask), preprocessed_input );
    }

    virtual void save( char const * filename, char const * name=0 ) const  {
        if( bp::override func_save = this->get_override( "save" ) )
            func_save( filename, name );
        else{
            this->CvStatModel::save( filename, name );
        }
    }
    
    void default_save( char const * filename, char const * name=0 ) const  {
        CvStatModel::save( filename, name );
    }

    virtual bool train( ::CvMLData * _data, ::CvDTreeParams _params=::CvDTreeParams( ) ) {
        if( bp::override func_train = this->get_override( "train" ) )
            return func_train( boost::python::ptr(_data), _params );
        else{
            return this->CvDTree::train( boost::python::ptr(_data), _params );
        }
    }
    
    bool default_train( ::CvMLData * _data, ::CvDTreeParams _params=::CvDTreeParams( ) ) {
        return CvDTree::train( boost::python::ptr(_data), _params );
    }

    virtual bool train( ::cv::Mat const & _train_data, int _tflag, ::cv::Mat const & _responses, ::cv::Mat const & _var_idx=cv::Mat(), ::cv::Mat const & _sample_idx=cv::Mat(), ::cv::Mat const & _var_type=cv::Mat(), ::cv::Mat const & _missing_mask=cv::Mat(), ::CvDTreeParams params=::CvDTreeParams( ) ) {
        if( bp::override func_train = this->get_override( "train" ) )
            return func_train( boost::ref(_train_data), _tflag, boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), boost::ref(_var_type), boost::ref(_missing_mask), params );
        else{
            return this->CvDTree::train( boost::ref(_train_data), _tflag, boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), boost::ref(_var_type), boost::ref(_missing_mask), params );
        }
    }
    
    bool default_train( ::cv::Mat const & _train_data, int _tflag, ::cv::Mat const & _responses, ::cv::Mat const & _var_idx=cv::Mat(), ::cv::Mat const & _sample_idx=cv::Mat(), ::cv::Mat const & _var_type=cv::Mat(), ::cv::Mat const & _missing_mask=cv::Mat(), ::CvDTreeParams params=::CvDTreeParams( ) ) {
        return CvDTree::train( boost::ref(_train_data), _tflag, boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), boost::ref(_var_type), boost::ref(_missing_mask), params );
    }

    virtual void write( ::CvFileStorage * fs, char const * name ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_write = this->get_override( "write" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_write.ptr(), fs, name );
        }
        else{
            CvDTree::write( boost::python::ptr(fs), name );
        }
    }
    
    static void default_write_d5b05f94ebb65d268cbd4756fe0d6221( ::CvDTree const & inst, ::cv::FileStorage & fs, char const * name ){
        if( dynamic_cast< CvForestTree_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::CvDTree::write(fs.fs, name);
        }
        else{
            inst.write(fs.fs, name);
        }
    }

    virtual void write( ::CvFileStorage * fs ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_write = this->get_override( "write" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_write.ptr(), fs );
        }
        else{
            CvDTree::write( boost::python::ptr(fs) );
        }
    }
    
    static void default_write_d1e064f966d50e01902f80ef0f045741( ::CvDTree const & inst, ::cv::FileStorage & fs ){
        if( dynamic_cast< CvForestTree_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::CvDTree::write(fs.fs);
        }
        else{
            inst.write(fs.fs);
        }
    }

};

struct CvForestERTree_wrapper : CvForestERTree, bp::wrapper< CvForestERTree > {

    CvForestERTree_wrapper(CvForestERTree const & arg )
    : CvForestERTree( arg )
      , bp::wrapper< CvForestERTree >(){
        // copy constructor
        
    }

    CvForestERTree_wrapper()
    : CvForestERTree()
      , bp::wrapper< CvForestERTree >(){
        // null constructor
        
    }

    virtual float calc_error( ::CvMLData * _data, int type, ::std::vector< float > * resp=0 ) {
        if( bp::override func_calc_error = this->get_override( "calc_error" ) )
            return func_calc_error( boost::python::ptr(_data), type, boost::python::ptr(resp) );
        else{
            return this->CvDTree::calc_error( boost::python::ptr(_data), type, boost::python::ptr(resp) );
        }
    }
    
    float default_calc_error( ::CvMLData * _data, int type, ::std::vector< float > * resp=0 ) {
        return CvDTree::calc_error( boost::python::ptr(_data), type, boost::python::ptr(resp) );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->CvDTree::clear(  );
        }
    }
    
    void default_clear(  ) {
        CvDTree::clear( );
    }

    virtual int get_var_count(  ) const  {
        if( bp::override func_get_var_count = this->get_override( "get_var_count" ) )
            return func_get_var_count(  );
        else{
            return this->CvForestTree::get_var_count(  );
        }
    }
    
    int default_get_var_count(  ) const  {
        return CvForestTree::get_var_count( );
    }

    virtual ::CvMat const * get_var_importance(  ) {
        if( bp::override func_get_var_importance = this->get_override( "get_var_importance" ) )
            return func_get_var_importance(  );
        else{
            return this->CvDTree::get_var_importance(  );
        }
    }
    
    ::CvMat const * default_get_var_importance(  ) {
        return CvDTree::get_var_importance( );
    }

    virtual void load( char const * filename, char const * name=0 ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( filename, name );
        else{
            this->CvStatModel::load( filename, name );
        }
    }
    
    void default_load( char const * filename, char const * name=0 ) {
        CvStatModel::load( filename, name );
    }

    virtual CvDTreeNode * predict( ::CvMat const * _sample, ::CvMat const * _missing_data_mask=0, bool preprocessed_input=false ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_predict = this->get_override( "predict" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_predict.ptr(), _sample, _missing_data_mask, preprocessed_input );
            return bpl::extract< CvDTreeNode * >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvDTree::predict( boost::python::ptr(_sample), boost::python::ptr(_missing_data_mask), preprocessed_input );
        }
    }
    
    static boost::python::object default_predict_76f915d59fbfe6ec6c36b63903c7e6de( ::CvDTree const & inst, ::cv::Mat & _sample, ::cv::Mat _missing_data_mask=cv::Mat(), bool preprocessed_input=false ){
        CvDTreeNode * result;
        if( dynamic_cast< CvForestERTree_wrapper const* >( boost::addressof( inst ) ) ){
            result = inst.::CvDTree::predict(get_CvMat_ptr(_sample), get_CvMat_ptr(_missing_data_mask), preprocessed_input);
        }
        else{
            result = inst.predict(get_CvMat_ptr(_sample), get_CvMat_ptr(_missing_data_mask), preprocessed_input);
        }
        typedef bp::return_internal_reference< > call_policies_t4;
        return bp::object( pyplusplus::call_policies::make_object< call_policies_t4, CvDTreeNode * >( result ) );
    }

    virtual ::CvDTreeNode * predict( ::cv::Mat const & _sample, ::cv::Mat const & _missing_data_mask=cv::Mat(), bool preprocessed_input=false ) const  {
        if( bp::override func_predict = this->get_override( "predict" ) )
            return func_predict( boost::ref(_sample), boost::ref(_missing_data_mask), preprocessed_input );
        else{
            return this->CvDTree::predict( boost::ref(_sample), boost::ref(_missing_data_mask), preprocessed_input );
        }
    }
    
    ::CvDTreeNode * default_predict( ::cv::Mat const & _sample, ::cv::Mat const & _missing_data_mask=cv::Mat(), bool preprocessed_input=false ) const  {
        return CvDTree::predict( boost::ref(_sample), boost::ref(_missing_data_mask), preprocessed_input );
    }

    virtual void read( ::CvFileStorage * fs, ::CvFileNode * node, ::CvRTrees * forest, ::CvDTreeTrainData * _data ) {
        namespace bpl = boost::python;
        if( bpl::override func_read = this->get_override( "read" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_read.ptr(), fs, node, forest, _data );
        }
        else{
            CvForestTree::read( boost::python::ptr(fs), boost::python::ptr(node), boost::python::ptr(forest), boost::python::ptr(_data) );
        }
    }
    
    static void default_read_8d6757d6bbd70f87efa21a9a88d7b91b( ::CvForestTree & inst, ::cv::FileStorage & fs, ::cv::FileNode & node, ::CvRTrees * forest, ::CvDTreeTrainData * _data ){
        if( dynamic_cast< CvForestERTree_wrapper * >( boost::addressof( inst ) ) ){
            inst.::CvForestTree::read(fs.fs, *(node), forest, _data);
        }
        else{
            inst.read(fs.fs, *(node), forest, _data);
        }
    }

    virtual void read( ::CvFileStorage * fs, ::CvFileNode * node ) {
        namespace bpl = boost::python;
        if( bpl::override func_read = this->get_override( "read" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_read.ptr(), fs, node );
        }
        else{
            CvForestTree::read( boost::python::ptr(fs), boost::python::ptr(node) );
        }
    }
    
    static void default_read_21f4d9d118da24ef774e945ac72443bf( ::CvForestTree & inst, ::cv::FileStorage & fs, ::cv::FileNode & node ){
        if( dynamic_cast< CvForestERTree_wrapper * >( boost::addressof( inst ) ) ){
            inst.::CvForestTree::read(fs.fs, *(node));
        }
        else{
            inst.read(fs.fs, *(node));
        }
    }

    virtual void read( ::CvFileStorage * fs, ::CvFileNode * node, ::CvDTreeTrainData * data ) {
        namespace bpl = boost::python;
        if( bpl::override func_read = this->get_override( "read" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_read.ptr(), fs, node, data );
        }
        else{
            CvForestTree::read( boost::python::ptr(fs), boost::python::ptr(node), boost::python::ptr(data) );
        }
    }
    
    static void default_read_f1eddefe30282eed3e835c344b312841( ::CvForestTree & inst, ::cv::FileStorage & fs, ::cv::FileNode & node, ::CvDTreeTrainData * data ){
        if( dynamic_cast< CvForestERTree_wrapper * >( boost::addressof( inst ) ) ){
            inst.::CvForestTree::read(fs.fs, *(node), data);
        }
        else{
            inst.read(fs.fs, *(node), data);
        }
    }

    virtual void save( char const * filename, char const * name=0 ) const  {
        if( bp::override func_save = this->get_override( "save" ) )
            func_save( filename, name );
        else{
            this->CvStatModel::save( filename, name );
        }
    }
    
    void default_save( char const * filename, char const * name=0 ) const  {
        CvStatModel::save( filename, name );
    }

    virtual bool train( ::CvMLData * _data, ::CvDTreeParams _params=::CvDTreeParams( ) ) {
        if( bp::override func_train = this->get_override( "train" ) )
            return func_train( boost::python::ptr(_data), _params );
        else{
            return this->CvDTree::train( boost::python::ptr(_data), _params );
        }
    }
    
    bool default_train( ::CvMLData * _data, ::CvDTreeParams _params=::CvDTreeParams( ) ) {
        return CvDTree::train( boost::python::ptr(_data), _params );
    }

    virtual bool train( ::cv::Mat const & _train_data, int _tflag, ::cv::Mat const & _responses, ::cv::Mat const & _var_idx=cv::Mat(), ::cv::Mat const & _sample_idx=cv::Mat(), ::cv::Mat const & _var_type=cv::Mat(), ::cv::Mat const & _missing_mask=cv::Mat(), ::CvDTreeParams params=::CvDTreeParams( ) ) {
        if( bp::override func_train = this->get_override( "train" ) )
            return func_train( boost::ref(_train_data), _tflag, boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), boost::ref(_var_type), boost::ref(_missing_mask), params );
        else{
            return this->CvDTree::train( boost::ref(_train_data), _tflag, boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), boost::ref(_var_type), boost::ref(_missing_mask), params );
        }
    }
    
    bool default_train( ::cv::Mat const & _train_data, int _tflag, ::cv::Mat const & _responses, ::cv::Mat const & _var_idx=cv::Mat(), ::cv::Mat const & _sample_idx=cv::Mat(), ::cv::Mat const & _var_type=cv::Mat(), ::cv::Mat const & _missing_mask=cv::Mat(), ::CvDTreeParams params=::CvDTreeParams( ) ) {
        return CvDTree::train( boost::ref(_train_data), _tflag, boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), boost::ref(_var_type), boost::ref(_missing_mask), params );
    }

    virtual bool train( ::CvDTreeTrainData * _train_data, ::CvMat const * _subsample_idx, ::CvRTrees * forest ) {
        namespace bpl = boost::python;
        if( bpl::override func_train = this->get_override( "train" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_train.ptr(), _train_data, _subsample_idx, forest );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvForestTree::train( boost::python::ptr(_train_data), boost::python::ptr(_subsample_idx), boost::python::ptr(forest) );
        }
    }
    
    static boost::python::object default_train_4bc7f79d4a1e6910af357373bfa4eddb( ::CvForestTree & inst, ::CvDTreeTrainData * _train_data, ::cv::Mat & _subsample_idx, ::CvRTrees * forest ){
        bool result;
        if( dynamic_cast< CvForestERTree_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::CvForestTree::train(_train_data, get_CvMat_ptr(_subsample_idx), forest);
        }
        else{
            result = inst.train(_train_data, get_CvMat_ptr(_subsample_idx), forest);
        }
        return bp::object( result );
    }

    virtual bool train( ::CvMat const * _train_data, int _tflag, ::CvMat const * _responses, ::CvMat const * _var_idx=0, ::CvMat const * _sample_idx=0, ::CvMat const * _var_type=0, ::CvMat const * _missing_mask=0, ::CvDTreeParams params=::CvDTreeParams( ) ) {
        namespace bpl = boost::python;
        if( bpl::override func_train = this->get_override( "train" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_train.ptr(), _train_data, _tflag, _responses, _var_idx, _sample_idx, _var_type, _missing_mask, params );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvForestTree::train( boost::python::ptr(_train_data), _tflag, boost::python::ptr(_responses), boost::python::ptr(_var_idx), boost::python::ptr(_sample_idx), boost::python::ptr(_var_type), boost::python::ptr(_missing_mask), params );
        }
    }
    
    static boost::python::object default_train_96f2f7218741280e2a32a5f6ce32c0f0( ::CvForestTree & inst, ::cv::Mat & _train_data, int _tflag, ::cv::Mat & _responses, ::cv::Mat _var_idx=cv::Mat(), ::cv::Mat _sample_idx=cv::Mat(), ::cv::Mat _var_type=cv::Mat(), ::cv::Mat _missing_mask=cv::Mat(), ::CvDTreeParams params=::CvDTreeParams( ) ){
        bool result;
        if( dynamic_cast< CvForestERTree_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::CvForestTree::train(get_CvMat_ptr(_train_data), _tflag, get_CvMat_ptr(_responses), get_CvMat_ptr(_var_idx), get_CvMat_ptr(_sample_idx), get_CvMat_ptr(_var_type), get_CvMat_ptr(_missing_mask), params);
        }
        else{
            result = inst.train(get_CvMat_ptr(_train_data), _tflag, get_CvMat_ptr(_responses), get_CvMat_ptr(_var_idx), get_CvMat_ptr(_sample_idx), get_CvMat_ptr(_var_type), get_CvMat_ptr(_missing_mask), params);
        }
        return bp::object( result );
    }

    virtual bool train( ::CvDTreeTrainData * _train_data, ::CvMat const * _subsample_idx ) {
        namespace bpl = boost::python;
        if( bpl::override func_train = this->get_override( "train" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_train.ptr(), _train_data, _subsample_idx );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvForestTree::train( boost::python::ptr(_train_data), boost::python::ptr(_subsample_idx) );
        }
    }
    
    static boost::python::object default_train_89d20e49296df69e16cdfc2afd830b46( ::CvForestTree & inst, ::CvDTreeTrainData * _train_data, ::cv::Mat & _subsample_idx ){
        bool result;
        if( dynamic_cast< CvForestERTree_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::CvForestTree::train(_train_data, get_CvMat_ptr(_subsample_idx));
        }
        else{
            result = inst.train(_train_data, get_CvMat_ptr(_subsample_idx));
        }
        return bp::object( result );
    }

    virtual void write( ::CvFileStorage * fs, char const * name ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_write = this->get_override( "write" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_write.ptr(), fs, name );
        }
        else{
            CvDTree::write( boost::python::ptr(fs), name );
        }
    }
    
    static void default_write_d5b05f94ebb65d268cbd4756fe0d6221( ::CvDTree const & inst, ::cv::FileStorage & fs, char const * name ){
        if( dynamic_cast< CvForestERTree_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::CvDTree::write(fs.fs, name);
        }
        else{
            inst.write(fs.fs, name);
        }
    }

    virtual void write( ::CvFileStorage * fs ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_write = this->get_override( "write" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_write.ptr(), fs );
        }
        else{
            CvDTree::write( boost::python::ptr(fs) );
        }
    }
    
    static void default_write_d1e064f966d50e01902f80ef0f045741( ::CvDTree const & inst, ::cv::FileStorage & fs ){
        if( dynamic_cast< CvForestERTree_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::CvDTree::write(fs.fs);
        }
        else{
            inst.write(fs.fs);
        }
    }

};

void register_classes_6(){

    bp::class_< CvERTrees_wrapper, bp::bases< CvRTrees > >( "CvERTrees", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvERTrees >() )    
        .def( 
            "train"
            , (boost::python::object (*)( CvERTrees &,::cv::Mat &,int,::cv::Mat &,::cv::Mat,::cv::Mat,::cv::Mat,::cv::Mat,CvRTParams ))( &CvERTrees_wrapper::default_train_9f93dc7be6c6cee516880b16f5290b4d )
            , ( bp::arg("inst"), bp::arg("_train_data"), bp::arg("_tflag"), bp::arg("_responses"), bp::arg("_var_idx")=cv::Mat(), bp::arg("_sample_idx")=cv::Mat(), bp::arg("_var_type")=cv::Mat(), bp::arg("_missing_mask")=cv::Mat(), bp::arg("params")=::CvRTParams( ) )
            , "\nArgument '_train_data':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_responses':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_var_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_sample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_var_type':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_missing_mask':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "train"
            , (bool ( CvERTrees::* )( ::cv::Mat const &,int,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::CvRTParams ) )(&::CvERTrees::train)
            , (bool ( CvERTrees_wrapper::* )( ::cv::Mat const &,int,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::CvRTParams ) )(&CvERTrees_wrapper::default_train)
            , ( bp::arg("_train_data"), bp::arg("_tflag"), bp::arg("_responses"), bp::arg("_var_idx")=cv::Mat(), bp::arg("_sample_idx")=cv::Mat(), bp::arg("_var_type")=cv::Mat(), bp::arg("_missing_mask")=cv::Mat(), bp::arg("params")=::CvRTParams( ) ) )    
        .def( 
            "train"
            , (bool ( CvERTrees::* )( ::CvMLData *,::CvRTParams ) )(&::CvERTrees::train)
            , (bool ( CvERTrees_wrapper::* )( ::CvMLData *,::CvRTParams ) )(&CvERTrees_wrapper::default_train)
            , ( bp::arg("data"), bp::arg("params")=::CvRTParams( ) ) )    
        .def( 
            "calc_error"
            , (float ( CvRTrees::* )( ::CvMLData *,int,::std::vector< float > * ) )(&::CvRTrees::calc_error)
            , (float ( CvERTrees_wrapper::* )( ::CvMLData *,int,::std::vector< float > * ) )(&CvERTrees_wrapper::default_calc_error)
            , ( bp::arg("_data"), bp::arg("type"), bp::arg("resp")=bp::object() ) )    
        .def( 
            "clear"
            , (void ( CvRTrees::* )(  ) )(&::CvRTrees::clear)
            , (void ( CvERTrees_wrapper::* )(  ) )(&CvERTrees_wrapper::default_clear) )    
        .def( 
            "get_proximity"
            , (boost::python::object (*)( CvRTrees const &,::cv::Mat &,::cv::Mat &,::cv::Mat,::cv::Mat ))( &CvERTrees_wrapper::default_get_proximity )
            , ( bp::arg("inst"), bp::arg("sample1"), bp::arg("sample2"), bp::arg("missing1")=cv::Mat(), bp::arg("missing2")=cv::Mat() )
            , "\nArgument 'sample1':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument 'sample2':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument 'missing1':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument 'missing2':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "get_train_error"
            , (float ( CvRTrees::* )(  ) )(&::CvRTrees::get_train_error)
            , (float ( CvERTrees_wrapper::* )(  ) )(&CvERTrees_wrapper::default_get_train_error) )    
        .def( 
            "get_var_importance"
            , (::CvMat const * ( CvRTrees::* )(  ) )(&::CvRTrees::get_var_importance)
            , (::CvMat const * ( CvERTrees_wrapper::* )(  ) )(&CvERTrees_wrapper::default_get_var_importance)
            , bp::return_internal_reference< >() )    
        .def( 
            "load"
            , (void ( CvStatModel::* )( char const *,char const * ) )(&::CvStatModel::load)
            , (void ( CvERTrees_wrapper::* )( char const *,char const * ) )(&CvERTrees_wrapper::default_load)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( 
            "predict"
            , (boost::python::object (*)( CvRTrees const &,::cv::Mat &,::cv::Mat ))( &CvERTrees_wrapper::default_predict_8f760c2403d8e76b3c8cb03f101d0997 )
            , ( bp::arg("inst"), bp::arg("sample"), bp::arg("missing")=cv::Mat() )
            , "\nArgument 'sample':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument 'missing':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "predict"
            , (float ( CvRTrees::* )( ::cv::Mat const &,::cv::Mat const & ) const)(&::CvRTrees::predict)
            , (float ( CvERTrees_wrapper::* )( ::cv::Mat const &,::cv::Mat const & ) const)(&CvERTrees_wrapper::default_predict)
            , ( bp::arg("sample"), bp::arg("missing")=cv::Mat() ) )    
        .def( 
            "predict_prob"
            , (boost::python::object (*)( CvRTrees const &,::cv::Mat &,::cv::Mat ))( &CvERTrees_wrapper::default_predict_prob_4a1ffb549242708ef963dcd84a06f27d )
            , ( bp::arg("inst"), bp::arg("sample"), bp::arg("missing")=cv::Mat() )
            , "\nArgument 'sample':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument 'missing':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "predict_prob"
            , (float ( CvRTrees::* )( ::cv::Mat const &,::cv::Mat const & ) const)(&::CvRTrees::predict_prob)
            , (float ( CvERTrees_wrapper::* )( ::cv::Mat const &,::cv::Mat const & ) const)(&CvERTrees_wrapper::default_predict_prob)
            , ( bp::arg("sample"), bp::arg("missing")=cv::Mat() ) )    
        .def( 
            "read"
            , (void (*)( CvRTrees &,::cv::FileStorage &,::cv::FileNode & ))( &CvERTrees_wrapper::default_read )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("node") )
            , "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage"\
    "\nArgument 'node':"\
    "\n    C++ type: ::CvFileNode *"\
    "\n    Python type: FileNode" )    
        .def( 
            "save"
            , (void ( CvStatModel::* )( char const *,char const * ) const)(&::CvStatModel::save)
            , (void ( CvERTrees_wrapper::* )( char const *,char const * ) const)(&CvERTrees_wrapper::default_save)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( 
            "write"
            , (void (*)( CvRTrees const &,::cv::FileStorage &,char const * ))( &CvERTrees_wrapper::default_write )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("name") )
            , "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage" );

    bp::class_< CvForestTree_wrapper, bp::bases< CvDTree > >( "CvForestTree", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvForestTree >() )    
        .def( 
            "get_var_count"
            , (int ( CvForestTree::* )(  ) const)(&::CvForestTree::get_var_count)
            , (int ( CvForestTree_wrapper::* )(  ) const)(&CvForestTree_wrapper::default_get_var_count) )    
        .def( 
            "read_8d6757d6bbd70f87efa21a9a88d7b91b"
            , (void (*)( CvForestTree &,::cv::FileStorage &,::cv::FileNode &,CvRTrees *,CvDTreeTrainData * ))( &CvForestTree_wrapper::default_read_8d6757d6bbd70f87efa21a9a88d7b91b )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("node"), bp::arg("forest"), bp::arg("_data") )
            , "\nWrapped function:"
    "\n    read"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage"\
    "\nArgument 'node':"\
    "\n    C++ type: ::CvFileNode *"\
    "\n    Python type: FileNode" )    
        .def( 
            "read_21f4d9d118da24ef774e945ac72443bf"
            , (void (*)( CvForestTree &,::cv::FileStorage &,::cv::FileNode & ))( &CvForestTree_wrapper::default_read_21f4d9d118da24ef774e945ac72443bf )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("node") )
            , "\nWrapped function:"
    "\n    read"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage"\
    "\nArgument 'node':"\
    "\n    C++ type: ::CvFileNode *"\
    "\n    Python type: FileNode" )    
        .def( 
            "read_f1eddefe30282eed3e835c344b312841"
            , (void (*)( CvForestTree &,::cv::FileStorage &,::cv::FileNode &,CvDTreeTrainData * ))( &CvForestTree_wrapper::default_read_f1eddefe30282eed3e835c344b312841 )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("node"), bp::arg("data") )
            , "\nWrapped function:"
    "\n    read"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage"\
    "\nArgument 'node':"\
    "\n    C++ type: ::CvFileNode *"\
    "\n    Python type: FileNode" )    
        .def( 
            "train"
            , (boost::python::object (*)( CvForestTree &,CvDTreeTrainData *,::cv::Mat &,CvRTrees * ))( &CvForestTree_wrapper::default_train_4bc7f79d4a1e6910af357373bfa4eddb )
            , ( bp::arg("inst"), bp::arg("_train_data"), bp::arg("_subsample_idx"), bp::arg("forest") )
            , "\nArgument '_subsample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "train"
            , (boost::python::object (*)( CvForestTree &,::cv::Mat &,int,::cv::Mat &,::cv::Mat,::cv::Mat,::cv::Mat,::cv::Mat,CvDTreeParams ))( &CvForestTree_wrapper::default_train_96f2f7218741280e2a32a5f6ce32c0f0 )
            , ( bp::arg("inst"), bp::arg("_train_data"), bp::arg("_tflag"), bp::arg("_responses"), bp::arg("_var_idx")=cv::Mat(), bp::arg("_sample_idx")=cv::Mat(), bp::arg("_var_type")=cv::Mat(), bp::arg("_missing_mask")=cv::Mat(), bp::arg("params")=::CvDTreeParams( ) )
            , "\nArgument '_train_data':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_responses':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_var_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_sample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_var_type':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_missing_mask':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "train"
            , (boost::python::object (*)( CvForestTree &,CvDTreeTrainData *,::cv::Mat & ))( &CvForestTree_wrapper::default_train_89d20e49296df69e16cdfc2afd830b46 )
            , ( bp::arg("inst"), bp::arg("_train_data"), bp::arg("_subsample_idx") )
            , "\nArgument '_subsample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "calc_error"
            , (float ( CvDTree::* )( ::CvMLData *,int,::std::vector< float > * ) )(&::CvDTree::calc_error)
            , (float ( CvForestTree_wrapper::* )( ::CvMLData *,int,::std::vector< float > * ) )(&CvForestTree_wrapper::default_calc_error)
            , ( bp::arg("_data"), bp::arg("type"), bp::arg("resp")=bp::object() ) )    
        .def( 
            "clear"
            , (void ( CvDTree::* )(  ) )(&::CvDTree::clear)
            , (void ( CvForestTree_wrapper::* )(  ) )(&CvForestTree_wrapper::default_clear) )    
        .def( 
            "get_var_importance"
            , (::CvMat const * ( CvDTree::* )(  ) )(&::CvDTree::get_var_importance)
            , (::CvMat const * ( CvForestTree_wrapper::* )(  ) )(&CvForestTree_wrapper::default_get_var_importance)
            , bp::return_internal_reference< >() )    
        .def( 
            "load"
            , (void ( CvStatModel::* )( char const *,char const * ) )(&::CvStatModel::load)
            , (void ( CvForestTree_wrapper::* )( char const *,char const * ) )(&CvForestTree_wrapper::default_load)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( 
            "predict"
            , (boost::python::object (*)( CvDTree const &,::cv::Mat &,::cv::Mat,bool ))( &CvForestTree_wrapper::default_predict_76f915d59fbfe6ec6c36b63903c7e6de )
            , ( bp::arg("inst"), bp::arg("_sample"), bp::arg("_missing_data_mask")=cv::Mat(), bp::arg("preprocessed_input")=(bool)(false) )
            , "\nArgument '_sample':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_missing_data_mask':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "predict"
            , (::CvDTreeNode * ( CvDTree::* )( ::cv::Mat const &,::cv::Mat const &,bool ) const)(&::CvDTree::predict)
            , (::CvDTreeNode * ( CvForestTree_wrapper::* )( ::cv::Mat const &,::cv::Mat const &,bool ) const)(&CvForestTree_wrapper::default_predict)
            , ( bp::arg("_sample"), bp::arg("_missing_data_mask")=cv::Mat(), bp::arg("preprocessed_input")=(bool)(false) )
            , bp::return_internal_reference< >() )    
        .def( 
            "save"
            , (void ( CvStatModel::* )( char const *,char const * ) const)(&::CvStatModel::save)
            , (void ( CvForestTree_wrapper::* )( char const *,char const * ) const)(&CvForestTree_wrapper::default_save)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( 
            "train"
            , (bool ( CvDTree::* )( ::CvMLData *,::CvDTreeParams ) )(&::CvDTree::train)
            , (bool ( CvForestTree_wrapper::* )( ::CvMLData *,::CvDTreeParams ) )(&CvForestTree_wrapper::default_train)
            , ( bp::arg("_data"), bp::arg("_params")=::CvDTreeParams( ) ) )    
        .def( 
            "train"
            , (bool ( CvDTree::* )( ::cv::Mat const &,int,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::CvDTreeParams ) )(&::CvDTree::train)
            , (bool ( CvForestTree_wrapper::* )( ::cv::Mat const &,int,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::CvDTreeParams ) )(&CvForestTree_wrapper::default_train)
            , ( bp::arg("_train_data"), bp::arg("_tflag"), bp::arg("_responses"), bp::arg("_var_idx")=cv::Mat(), bp::arg("_sample_idx")=cv::Mat(), bp::arg("_var_type")=cv::Mat(), bp::arg("_missing_mask")=cv::Mat(), bp::arg("params")=::CvDTreeParams( ) ) )    
        .def( 
            "write_d5b05f94ebb65d268cbd4756fe0d6221"
            , (void (*)( CvDTree const &,::cv::FileStorage &,char const * ))( &CvForestTree_wrapper::default_write_d5b05f94ebb65d268cbd4756fe0d6221 )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("name") )
            , "\nWrapped function:"
    "\n    write"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage" )    
        .def( 
            "write_d1e064f966d50e01902f80ef0f045741"
            , (void (*)( CvDTree const &,::cv::FileStorage & ))( &CvForestTree_wrapper::default_write_d1e064f966d50e01902f80ef0f045741 )
            , ( bp::arg("inst"), bp::arg("fs") )
            , "\nWrapped function:"
    "\n    write"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage" );

    bp::class_< CvForestERTree_wrapper, bp::bases< CvForestTree > >( "CvForestERTree" )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvForestERTree >() )    
        .def( 
            "calc_error"
            , (float ( CvDTree::* )( ::CvMLData *,int,::std::vector< float > * ) )(&::CvDTree::calc_error)
            , (float ( CvForestERTree_wrapper::* )( ::CvMLData *,int,::std::vector< float > * ) )(&CvForestERTree_wrapper::default_calc_error)
            , ( bp::arg("_data"), bp::arg("type"), bp::arg("resp")=bp::object() ) )    
        .def( 
            "clear"
            , (void ( CvDTree::* )(  ) )(&::CvDTree::clear)
            , (void ( CvForestERTree_wrapper::* )(  ) )(&CvForestERTree_wrapper::default_clear) )    
        .def( 
            "get_var_count"
            , (int ( CvForestTree::* )(  ) const)(&::CvForestTree::get_var_count)
            , (int ( CvForestERTree_wrapper::* )(  ) const)(&CvForestERTree_wrapper::default_get_var_count) )    
        .def( 
            "get_var_importance"
            , (::CvMat const * ( CvDTree::* )(  ) )(&::CvDTree::get_var_importance)
            , (::CvMat const * ( CvForestERTree_wrapper::* )(  ) )(&CvForestERTree_wrapper::default_get_var_importance)
            , bp::return_internal_reference< >() )    
        .def( 
            "load"
            , (void ( CvStatModel::* )( char const *,char const * ) )(&::CvStatModel::load)
            , (void ( CvForestERTree_wrapper::* )( char const *,char const * ) )(&CvForestERTree_wrapper::default_load)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( 
            "predict"
            , (boost::python::object (*)( CvDTree const &,::cv::Mat &,::cv::Mat,bool ))( &CvForestERTree_wrapper::default_predict_76f915d59fbfe6ec6c36b63903c7e6de )
            , ( bp::arg("inst"), bp::arg("_sample"), bp::arg("_missing_data_mask")=cv::Mat(), bp::arg("preprocessed_input")=(bool)(false) )
            , "\nArgument '_sample':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_missing_data_mask':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "predict"
            , (::CvDTreeNode * ( CvDTree::* )( ::cv::Mat const &,::cv::Mat const &,bool ) const)(&::CvDTree::predict)
            , (::CvDTreeNode * ( CvForestERTree_wrapper::* )( ::cv::Mat const &,::cv::Mat const &,bool ) const)(&CvForestERTree_wrapper::default_predict)
            , ( bp::arg("_sample"), bp::arg("_missing_data_mask")=cv::Mat(), bp::arg("preprocessed_input")=(bool)(false) )
            , bp::return_internal_reference< >() )    
        .def( 
            "read_8d6757d6bbd70f87efa21a9a88d7b91b"
            , (void (*)( CvForestTree &,::cv::FileStorage &,::cv::FileNode &,CvRTrees *,CvDTreeTrainData * ))( &CvForestERTree_wrapper::default_read_8d6757d6bbd70f87efa21a9a88d7b91b )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("node"), bp::arg("forest"), bp::arg("_data") )
            , "\nWrapped function:"
    "\n    read"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage"\
    "\nArgument 'node':"\
    "\n    C++ type: ::CvFileNode *"\
    "\n    Python type: FileNode" )    
        .def( 
            "read_21f4d9d118da24ef774e945ac72443bf"
            , (void (*)( CvForestTree &,::cv::FileStorage &,::cv::FileNode & ))( &CvForestERTree_wrapper::default_read_21f4d9d118da24ef774e945ac72443bf )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("node") )
            , "\nWrapped function:"
    "\n    read"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage"\
    "\nArgument 'node':"\
    "\n    C++ type: ::CvFileNode *"\
    "\n    Python type: FileNode" )    
        .def( 
            "read_f1eddefe30282eed3e835c344b312841"
            , (void (*)( CvForestTree &,::cv::FileStorage &,::cv::FileNode &,CvDTreeTrainData * ))( &CvForestERTree_wrapper::default_read_f1eddefe30282eed3e835c344b312841 )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("node"), bp::arg("data") )
            , "\nWrapped function:"
    "\n    read"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage"\
    "\nArgument 'node':"\
    "\n    C++ type: ::CvFileNode *"\
    "\n    Python type: FileNode" )    
        .def( 
            "save"
            , (void ( CvStatModel::* )( char const *,char const * ) const)(&::CvStatModel::save)
            , (void ( CvForestERTree_wrapper::* )( char const *,char const * ) const)(&CvForestERTree_wrapper::default_save)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( 
            "train"
            , (bool ( CvDTree::* )( ::CvMLData *,::CvDTreeParams ) )(&::CvDTree::train)
            , (bool ( CvForestERTree_wrapper::* )( ::CvMLData *,::CvDTreeParams ) )(&CvForestERTree_wrapper::default_train)
            , ( bp::arg("_data"), bp::arg("_params")=::CvDTreeParams( ) ) )    
        .def( 
            "train"
            , (bool ( CvDTree::* )( ::cv::Mat const &,int,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::CvDTreeParams ) )(&::CvDTree::train)
            , (bool ( CvForestERTree_wrapper::* )( ::cv::Mat const &,int,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::CvDTreeParams ) )(&CvForestERTree_wrapper::default_train)
            , ( bp::arg("_train_data"), bp::arg("_tflag"), bp::arg("_responses"), bp::arg("_var_idx")=cv::Mat(), bp::arg("_sample_idx")=cv::Mat(), bp::arg("_var_type")=cv::Mat(), bp::arg("_missing_mask")=cv::Mat(), bp::arg("params")=::CvDTreeParams( ) ) )    
        .def( 
            "train"
            , (boost::python::object (*)( CvForestTree &,CvDTreeTrainData *,::cv::Mat &,CvRTrees * ))( &CvForestERTree_wrapper::default_train_4bc7f79d4a1e6910af357373bfa4eddb )
            , ( bp::arg("inst"), bp::arg("_train_data"), bp::arg("_subsample_idx"), bp::arg("forest") )
            , "\nArgument '_subsample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "train"
            , (boost::python::object (*)( CvForestTree &,::cv::Mat &,int,::cv::Mat &,::cv::Mat,::cv::Mat,::cv::Mat,::cv::Mat,CvDTreeParams ))( &CvForestERTree_wrapper::default_train_96f2f7218741280e2a32a5f6ce32c0f0 )
            , ( bp::arg("inst"), bp::arg("_train_data"), bp::arg("_tflag"), bp::arg("_responses"), bp::arg("_var_idx")=cv::Mat(), bp::arg("_sample_idx")=cv::Mat(), bp::arg("_var_type")=cv::Mat(), bp::arg("_missing_mask")=cv::Mat(), bp::arg("params")=::CvDTreeParams( ) )
            , "\nArgument '_train_data':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_responses':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_var_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_sample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_var_type':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_missing_mask':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "train"
            , (boost::python::object (*)( CvForestTree &,CvDTreeTrainData *,::cv::Mat & ))( &CvForestERTree_wrapper::default_train_89d20e49296df69e16cdfc2afd830b46 )
            , ( bp::arg("inst"), bp::arg("_train_data"), bp::arg("_subsample_idx") )
            , "\nArgument '_subsample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "write_d5b05f94ebb65d268cbd4756fe0d6221"
            , (void (*)( CvDTree const &,::cv::FileStorage &,char const * ))( &CvForestERTree_wrapper::default_write_d5b05f94ebb65d268cbd4756fe0d6221 )
            , ( bp::arg("inst"), bp::arg("fs"), bp::arg("name") )
            , "\nWrapped function:"
    "\n    write"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage" )    
        .def( 
            "write_d1e064f966d50e01902f80ef0f045741"
            , (void (*)( CvDTree const &,::cv::FileStorage & ))( &CvForestERTree_wrapper::default_write_d1e064f966d50e01902f80ef0f045741 )
            , ( bp::arg("inst"), bp::arg("fs") )
            , "\nWrapped function:"
    "\n    write"
    "\nArgument 'fs':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage" );

}
