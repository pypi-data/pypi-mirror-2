// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "opencv_converters.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "ml_wrapper.hpp"
#include "opencv_converters.hpp"
#include "ml_ext_classes_7.pypp.hpp"

namespace bp = boost::python;

struct CvKNearest_wrapper : CvKNearest, bp::wrapper< CvKNearest > {

    CvKNearest_wrapper(CvKNearest const & arg )
    : CvKNearest( arg )
      , bp::wrapper< CvKNearest >(){
        // copy constructor
        
    }

    CvKNearest_wrapper( )
    : CvKNearest( )
      , bp::wrapper< CvKNearest >(){
        // null constructor
    
    }

    CvKNearest_wrapper(::CvMat const * _train_data, ::CvMat const * _responses, ::CvMat const * _sample_idx=0, bool _is_regression=false, int max_k=32 )
    : CvKNearest( boost::python::ptr(_train_data), boost::python::ptr(_responses), boost::python::ptr(_sample_idx), _is_regression, max_k )
      , bp::wrapper< CvKNearest >(){
        // constructor
    
    }

    CvKNearest_wrapper(::cv::Mat const & _train_data, ::cv::Mat const & _responses, ::cv::Mat const & _sample_idx=cv::Mat(), bool _is_regression=false, int max_k=32 )
    : CvKNearest( boost::ref(_train_data), boost::ref(_responses), boost::ref(_sample_idx), _is_regression, max_k )
      , bp::wrapper< CvKNearest >(){
        // constructor
    
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->CvKNearest::clear(  );
        }
    }
    
    void default_clear(  ) {
        CvKNearest::clear( );
    }

    virtual bool train( ::CvMat const * _train_data, ::CvMat const * _responses, ::CvMat const * _sample_idx=0, bool is_regression=false, int _max_k=32, bool _update_base=false ) {
        namespace bpl = boost::python;
        if( bpl::override func_train = this->get_override( "train" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_train.ptr(), _train_data, _responses, _sample_idx, is_regression, _max_k, _update_base );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvKNearest::train( boost::python::ptr(_train_data), boost::python::ptr(_responses), boost::python::ptr(_sample_idx), is_regression, _max_k, _update_base );
        }
    }
    
    static boost::python::object default_train_1e01fd8b58a9d09df6e9b4c9038d3fa5( ::CvKNearest & inst, ::cv::Mat & _train_data, ::cv::Mat & _responses, ::cv::Mat _sample_idx=cv::Mat(), bool is_regression=false, int _max_k=32, bool _update_base=false ){
        bool result;
        if( dynamic_cast< CvKNearest_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::CvKNearest::train(get_CvMat_ptr(_train_data), get_CvMat_ptr(_responses), get_CvMat_ptr(_sample_idx), is_regression, _max_k, _update_base);
        }
        else{
            result = inst.train(get_CvMat_ptr(_train_data), get_CvMat_ptr(_responses), get_CvMat_ptr(_sample_idx), is_regression, _max_k, _update_base);
        }
        return bp::object( result );
    }

    virtual bool train( ::cv::Mat const & _train_data, ::cv::Mat const & _responses, ::cv::Mat const & _sample_idx=cv::Mat(), bool is_regression=false, int _max_k=32, bool _update_base=false ) {
        if( bp::override func_train = this->get_override( "train" ) )
            return func_train( boost::ref(_train_data), boost::ref(_responses), boost::ref(_sample_idx), is_regression, _max_k, _update_base );
        else{
            return this->CvKNearest::train( boost::ref(_train_data), boost::ref(_responses), boost::ref(_sample_idx), is_regression, _max_k, _update_base );
        }
    }
    
    bool default_train( ::cv::Mat const & _train_data, ::cv::Mat const & _responses, ::cv::Mat const & _sample_idx=cv::Mat(), bool is_regression=false, int _max_k=32, bool _update_base=false ) {
        return CvKNearest::train( boost::ref(_train_data), boost::ref(_responses), boost::ref(_sample_idx), is_regression, _max_k, _update_base );
    }

    virtual void load( char const * filename, char const * name=0 ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( filename, name );
        else{
            this->CvStatModel::load( filename, name );
        }
    }
    
    void default_load( char const * filename, char const * name=0 ) {
        CvStatModel::load( filename, name );
    }

    virtual void read( ::CvFileStorage * storage, ::CvFileNode * node ) {
        namespace bpl = boost::python;
        if( bpl::override func_read = this->get_override( "read" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_read.ptr(), storage, node );
        }
        else{
            CvStatModel::read( boost::python::ptr(storage), boost::python::ptr(node) );
        }
    }
    
    static void default_read( ::CvStatModel & inst, ::cv::FileStorage & storage, ::cv::FileNode & node ){
        if( dynamic_cast< CvKNearest_wrapper * >( boost::addressof( inst ) ) ){
            inst.::CvStatModel::read(storage.fs, *(node));
        }
        else{
            inst.read(storage.fs, *(node));
        }
    }

    virtual void save( char const * filename, char const * name=0 ) const  {
        if( bp::override func_save = this->get_override( "save" ) )
            func_save( filename, name );
        else{
            this->CvStatModel::save( filename, name );
        }
    }
    
    void default_save( char const * filename, char const * name=0 ) const  {
        CvStatModel::save( filename, name );
    }

    virtual void write( ::CvFileStorage * storage, char const * name ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_write = this->get_override( "write" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_write.ptr(), storage, name );
        }
        else{
            CvStatModel::write( boost::python::ptr(storage), name );
        }
    }
    
    static void default_write( ::CvStatModel const & inst, ::cv::FileStorage & storage, char const * name ){
        if( dynamic_cast< CvKNearest_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::CvStatModel::write(storage.fs, name);
        }
        else{
            inst.write(storage.fs, name);
        }
    }

    bp::object sd_find_nearest( cv::Mat const & _samples, int k, cv::Mat &results, 
        bool return_neighbors_by_addr, cv::Mat &neighbor_responses, cv::Mat &dist ) {
        if(!return_neighbors_by_addr)
            return bp::object(find_nearest((::CvMat const *)get_CvMat_ptr(_samples), k, get_CvMat_ptr(results), 
                0, get_CvMat_ptr(neighbor_responses), get_CvMat_ptr(dist)));
                
        std::vector<int> neighbors2; neighbors2.resize(k*_samples.rows);
        float return_value = find_nearest((::CvMat const *)get_CvMat_ptr(_samples), k, get_CvMat_ptr(results), 
            (const float **)&neighbors2[0], get_CvMat_ptr(neighbor_responses), get_CvMat_ptr(dist));
        return bp::make_tuple(bp::object(return_value), convert_from_T_to_object(neighbors2));
    }

};

struct CvNormalBayesClassifier_wrapper : CvNormalBayesClassifier, bp::wrapper< CvNormalBayesClassifier > {

    CvNormalBayesClassifier_wrapper(CvNormalBayesClassifier const & arg )
    : CvNormalBayesClassifier( arg )
      , bp::wrapper< CvNormalBayesClassifier >(){
        // copy constructor
        
    }

    CvNormalBayesClassifier_wrapper( )
    : CvNormalBayesClassifier( )
      , bp::wrapper< CvNormalBayesClassifier >(){
        // null constructor
    
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->CvNormalBayesClassifier::clear(  );
        }
    }
    
    void default_clear(  ) {
        CvNormalBayesClassifier::clear( );
    }

    virtual float predict( ::CvMat const * _samples, ::CvMat * results=0 ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_predict = this->get_override( "predict" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_predict.ptr(), _samples, results );
            return bpl::extract< float >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvNormalBayesClassifier::predict( boost::python::ptr(_samples), boost::python::ptr(results) );
        }
    }
    
    static boost::python::object default_predict_1d36a61abf97d25a0226e18815d76391( ::CvNormalBayesClassifier const & inst, ::cv::Mat & _samples, ::cv::Mat results=cv::Mat() ){
        float result;
        if( dynamic_cast< CvNormalBayesClassifier_wrapper const* >( boost::addressof( inst ) ) ){
            result = inst.::CvNormalBayesClassifier::predict(get_CvMat_ptr(_samples), get_CvMat_ptr(results));
        }
        else{
            result = inst.predict(get_CvMat_ptr(_samples), get_CvMat_ptr(results));
        }
        return bp::object( result );
    }

    virtual float predict( ::cv::Mat const & _samples, ::cv::Mat * results=0 ) const  {
        if( bp::override func_predict = this->get_override( "predict" ) )
            return func_predict( boost::ref(_samples), boost::python::ptr(results) );
        else{
            return this->CvNormalBayesClassifier::predict( boost::ref(_samples), boost::python::ptr(results) );
        }
    }
    
    float default_predict( ::cv::Mat const & _samples, ::cv::Mat * results=0 ) const  {
        return CvNormalBayesClassifier::predict( boost::ref(_samples), boost::python::ptr(results) );
    }

    virtual void read( ::CvFileStorage * storage, ::CvFileNode * node ) {
        namespace bpl = boost::python;
        if( bpl::override func_read = this->get_override( "read" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_read.ptr(), storage, node );
        }
        else{
            CvNormalBayesClassifier::read( boost::python::ptr(storage), boost::python::ptr(node) );
        }
    }
    
    static void default_read( ::CvNormalBayesClassifier & inst, ::cv::FileStorage & storage, ::cv::FileNode & node ){
        if( dynamic_cast< CvNormalBayesClassifier_wrapper * >( boost::addressof( inst ) ) ){
            inst.::CvNormalBayesClassifier::read(storage.fs, *(node));
        }
        else{
            inst.read(storage.fs, *(node));
        }
    }

    virtual bool train( ::CvMat const * _train_data, ::CvMat const * _responses, ::CvMat const * _var_idx=0, ::CvMat const * _sample_idx=0, bool update=false ) {
        namespace bpl = boost::python;
        if( bpl::override func_train = this->get_override( "train" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_train.ptr(), _train_data, _responses, _var_idx, _sample_idx, update );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return CvNormalBayesClassifier::train( boost::python::ptr(_train_data), boost::python::ptr(_responses), boost::python::ptr(_var_idx), boost::python::ptr(_sample_idx), update );
        }
    }
    
    static boost::python::object default_train_6a363548a0937608c0ae8843b948b178( ::CvNormalBayesClassifier & inst, ::cv::Mat & _train_data, ::cv::Mat & _responses, ::cv::Mat _var_idx=cv::Mat(), ::cv::Mat _sample_idx=cv::Mat(), bool update=false ){
        bool result;
        if( dynamic_cast< CvNormalBayesClassifier_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::CvNormalBayesClassifier::train(get_CvMat_ptr(_train_data), get_CvMat_ptr(_responses), get_CvMat_ptr(_var_idx), get_CvMat_ptr(_sample_idx), update);
        }
        else{
            result = inst.train(get_CvMat_ptr(_train_data), get_CvMat_ptr(_responses), get_CvMat_ptr(_var_idx), get_CvMat_ptr(_sample_idx), update);
        }
        return bp::object( result );
    }

    virtual bool train( ::cv::Mat const & _train_data, ::cv::Mat const & _responses, ::cv::Mat const & _var_idx=cv::Mat(), ::cv::Mat const & _sample_idx=cv::Mat(), bool update=false ) {
        if( bp::override func_train = this->get_override( "train" ) )
            return func_train( boost::ref(_train_data), boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), update );
        else{
            return this->CvNormalBayesClassifier::train( boost::ref(_train_data), boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), update );
        }
    }
    
    bool default_train( ::cv::Mat const & _train_data, ::cv::Mat const & _responses, ::cv::Mat const & _var_idx=cv::Mat(), ::cv::Mat const & _sample_idx=cv::Mat(), bool update=false ) {
        return CvNormalBayesClassifier::train( boost::ref(_train_data), boost::ref(_responses), boost::ref(_var_idx), boost::ref(_sample_idx), update );
    }

    virtual void write( ::CvFileStorage * storage, char const * name ) const  {
        namespace bpl = boost::python;
        if( bpl::override func_write = this->get_override( "write" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_write.ptr(), storage, name );
        }
        else{
            CvNormalBayesClassifier::write( boost::python::ptr(storage), name );
        }
    }
    
    static void default_write( ::CvNormalBayesClassifier const & inst, ::cv::FileStorage & storage, char const * name ){
        if( dynamic_cast< CvNormalBayesClassifier_wrapper const* >( boost::addressof( inst ) ) ){
            inst.::CvNormalBayesClassifier::write(storage.fs, name);
        }
        else{
            inst.write(storage.fs, name);
        }
    }

    virtual void load( char const * filename, char const * name=0 ) {
        if( bp::override func_load = this->get_override( "load" ) )
            func_load( filename, name );
        else{
            this->CvStatModel::load( filename, name );
        }
    }
    
    void default_load( char const * filename, char const * name=0 ) {
        CvStatModel::load( filename, name );
    }

    virtual void save( char const * filename, char const * name=0 ) const  {
        if( bp::override func_save = this->get_override( "save" ) )
            func_save( filename, name );
        else{
            this->CvStatModel::save( filename, name );
        }
    }
    
    void default_save( char const * filename, char const * name=0 ) const  {
        CvStatModel::save( filename, name );
    }

    CvNormalBayesClassifier_wrapper(::cv::Mat const & _train_data, ::cv::Mat const & _responses, ::cv::Mat const & _var_idx=cv::Mat(), ::cv::Mat const & _sample_idx=cv::Mat() )
    : CvNormalBayesClassifier()
      , bp::wrapper< CvNormalBayesClassifier >(){
        // constructor
        train( _train_data, _responses, _var_idx, _sample_idx );
    }

};

void register_classes_7(){

    bp::class_< CvKNearest_wrapper, bp::bases< CvStatModel > >( "CvKNearest", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvKNearest >() )    
        .def( bp::init< CvMat const *, CvMat const *, bp::optional< CvMat const *, bool, int > >(( bp::arg("_train_data"), bp::arg("_responses"), bp::arg("_sample_idx")=bp::object(), bp::arg("_is_regression")=(bool)(false), bp::arg("max_k")=(int)(32) ), "\nWrapped function:"
    "\n    CvKNearest"
    "\nArgument '_train_data':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_responses':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_sample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat") )    
        .def( bp::init< cv::Mat const &, cv::Mat const &, bp::optional< cv::Mat const &, bool, int > >(( bp::arg("_train_data"), bp::arg("_responses"), bp::arg("_sample_idx")=cv::Mat(), bp::arg("_is_regression")=(bool)(false), bp::arg("max_k")=(int)(32) )) )    
        .def( 
            "clear"
            , (void ( CvKNearest::* )(  ) )(&::CvKNearest::clear)
            , (void ( CvKNearest_wrapper::* )(  ) )(&CvKNearest_wrapper::default_clear) )    
        .def( 
            "get_max_k"
            , (int ( CvKNearest::* )(  ) const)( &::CvKNearest::get_max_k ) )    
        .def( 
            "get_sample_count"
            , (int ( CvKNearest::* )(  ) const)( &::CvKNearest::get_sample_count ) )    
        .def( 
            "get_var_count"
            , (int ( CvKNearest::* )(  ) const)( &::CvKNearest::get_var_count ) )    
        .def( 
            "is_regression"
            , (bool ( CvKNearest::* )(  ) const)( &::CvKNearest::is_regression ) )    
        .def( 
            "train"
            , (boost::python::object (*)( CvKNearest &,::cv::Mat &,::cv::Mat &,::cv::Mat,bool,int,bool ))( &CvKNearest_wrapper::default_train_1e01fd8b58a9d09df6e9b4c9038d3fa5 )
            , ( bp::arg("inst"), bp::arg("_train_data"), bp::arg("_responses"), bp::arg("_sample_idx")=cv::Mat(), bp::arg("is_regression")=(bool)(false), bp::arg("_max_k")=(int)(32), bp::arg("_update_base")=(bool)(false) )
            , "\nArgument '_train_data':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_responses':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_sample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "train"
            , (bool ( CvKNearest::* )( ::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,bool,int,bool ) )(&::CvKNearest::train)
            , (bool ( CvKNearest_wrapper::* )( ::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,bool,int,bool ) )(&CvKNearest_wrapper::default_train)
            , ( bp::arg("_train_data"), bp::arg("_responses"), bp::arg("_sample_idx")=cv::Mat(), bp::arg("is_regression")=(bool)(false), bp::arg("_max_k")=(int)(32), bp::arg("_update_base")=(bool)(false) ) )    
        .def( 
            "load"
            , (void ( CvStatModel::* )( char const *,char const * ) )(&::CvStatModel::load)
            , (void ( CvKNearest_wrapper::* )( char const *,char const * ) )(&CvKNearest_wrapper::default_load)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( 
            "read"
            , (void (*)( CvStatModel &,::cv::FileStorage &,::cv::FileNode & ))( &CvKNearest_wrapper::default_read )
            , ( bp::arg("inst"), bp::arg("storage"), bp::arg("node") )
            , "\nArgument 'storage':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage"\
    "\nArgument 'node':"\
    "\n    C++ type: ::CvFileNode *"\
    "\n    Python type: FileNode" )    
        .def( 
            "save"
            , (void ( CvStatModel::* )( char const *,char const * ) const)(&::CvStatModel::save)
            , (void ( CvKNearest_wrapper::* )( char const *,char const * ) const)(&CvKNearest_wrapper::default_save)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( 
            "write"
            , (void (*)( CvStatModel const &,::cv::FileStorage &,char const * ))( &CvKNearest_wrapper::default_write )
            , ( bp::arg("inst"), bp::arg("storage"), bp::arg("name") )
            , "\nArgument 'storage':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage" )    
        .def("find_nearest", &CvKNearest_wrapper::sd_find_nearest
        , (bp::arg("_samples"), bp::arg("k"), bp::arg("results"), bp::arg("return_neighbors_by_addr")=false, bp::arg("neighbor_response")=cv::Mat(), bp::arg("dist")=cv::Mat() ));

    bp::class_< CvMLData >( "CvMLData", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvMLData >() )    
        .def( 
            "chahge_var_idx"
            , (void ( CvMLData::* )( int,bool ) )( &::CvMLData::chahge_var_idx )
            , ( bp::arg("vi"), bp::arg("state") ) )    
        .def( 
            "change_var_type"
            , (void ( CvMLData::* )( int,int ) )( &::CvMLData::change_var_type )
            , ( bp::arg("var_idx"), bp::arg("type") ) )    
        .def( 
            "get_delimiter"
            , (char ( CvMLData::* )(  ) )( &::CvMLData::get_delimiter ) )    
        .def( 
            "get_miss_ch"
            , (char ( CvMLData::* )(  ) )( &::CvMLData::get_miss_ch ) )    
        .def( 
            "get_missing"
            , (::CvMat const * ( CvMLData::* )(  ) )( &::CvMLData::get_missing )
            , bp::return_internal_reference< >() )    
        .def( 
            "get_response_idx"
            , (int ( CvMLData::* )(  ) )( &::CvMLData::get_response_idx ) )    
        .def( 
            "get_responses"
            , (::CvMat const * ( CvMLData::* )(  ) )( &::CvMLData::get_responses )
            , bp::return_internal_reference< >() )    
        .def( 
            "get_test_sample_idx"
            , (::CvMat const * ( CvMLData::* )(  ) )( &::CvMLData::get_test_sample_idx )
            , bp::return_internal_reference< >() )    
        .def( 
            "get_train_sample_idx"
            , (::CvMat const * ( CvMLData::* )(  ) )( &::CvMLData::get_train_sample_idx )
            , bp::return_internal_reference< >() )    
        .def( 
            "get_values"
            , (::CvMat const * ( CvMLData::* )(  ) )( &::CvMLData::get_values )
            , bp::return_internal_reference< >() )    
        .def( 
            "get_var_idx"
            , (::CvMat const * ( CvMLData::* )(  ) )( &::CvMLData::get_var_idx )
            , bp::return_internal_reference< >() )    
        .def( 
            "get_var_type"
            , (int ( CvMLData::* )( int ) )( &::CvMLData::get_var_type )
            , ( bp::arg("var_idx") ) )    
        .def( 
            "get_var_types"
            , (::CvMat const * ( CvMLData::* )(  ) )( &::CvMLData::get_var_types )
            , bp::return_internal_reference< >() )    
        .def( 
            "mix_train_and_test_idx"
            , (void ( CvMLData::* )(  ) )( &::CvMLData::mix_train_and_test_idx ) )    
        .def( 
            "read_csv"
            , (int ( CvMLData::* )( char const * ) )( &::CvMLData::read_csv )
            , ( bp::arg("filename") ) )    
        .def( 
            "set_delimiter"
            , (void ( CvMLData::* )( char ) )( &::CvMLData::set_delimiter )
            , ( bp::arg("ch") ) )    
        .def( 
            "set_miss_ch"
            , (void ( CvMLData::* )( char ) )( &::CvMLData::set_miss_ch )
            , ( bp::arg("ch") ) )    
        .def( 
            "set_response_idx"
            , (void ( CvMLData::* )( int ) )( &::CvMLData::set_response_idx )
            , ( bp::arg("idx") ) )    
        .def( 
            "set_train_test_split"
            , (void ( CvMLData::* )( ::CvTrainTestSplit const * ) )( &::CvMLData::set_train_test_split )
            , ( bp::arg("spl") ) )    
        .def( 
            "set_var_types"
            , (void ( CvMLData::* )( char const * ) )( &::CvMLData::set_var_types )
            , ( bp::arg("str") ) );

    bp::class_< CvNormalBayesClassifier_wrapper, bp::bases< CvStatModel > >( "CvNormalBayesClassifier", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< CvNormalBayesClassifier >() )    
        .def( 
            "clear"
            , (void ( CvNormalBayesClassifier::* )(  ) )(&::CvNormalBayesClassifier::clear)
            , (void ( CvNormalBayesClassifier_wrapper::* )(  ) )(&CvNormalBayesClassifier_wrapper::default_clear) )    
        .def( 
            "predict"
            , (boost::python::object (*)( CvNormalBayesClassifier const &,::cv::Mat &,::cv::Mat ))( &CvNormalBayesClassifier_wrapper::default_predict_1d36a61abf97d25a0226e18815d76391 )
            , ( bp::arg("inst"), bp::arg("_samples"), bp::arg("results")=cv::Mat() )
            , "\nArgument '_samples':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument 'results':"\
    "\n    C++ type: ::CvMat *"\
    "\n    Python type: Mat" )    
        .def( 
            "predict"
            , (float ( CvNormalBayesClassifier::* )( ::cv::Mat const &,::cv::Mat * ) const)(&::CvNormalBayesClassifier::predict)
            , (float ( CvNormalBayesClassifier_wrapper::* )( ::cv::Mat const &,::cv::Mat * ) const)(&CvNormalBayesClassifier_wrapper::default_predict)
            , ( bp::arg("_samples"), bp::arg("results")=bp::object() ) )    
        .def( 
            "read"
            , (void (*)( CvNormalBayesClassifier &,::cv::FileStorage &,::cv::FileNode & ))( &CvNormalBayesClassifier_wrapper::default_read )
            , ( bp::arg("inst"), bp::arg("storage"), bp::arg("node") )
            , "\nArgument 'storage':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage"\
    "\nArgument 'node':"\
    "\n    C++ type: ::CvFileNode *"\
    "\n    Python type: FileNode" )    
        .def( 
            "train"
            , (boost::python::object (*)( CvNormalBayesClassifier &,::cv::Mat &,::cv::Mat &,::cv::Mat,::cv::Mat,bool ))( &CvNormalBayesClassifier_wrapper::default_train_6a363548a0937608c0ae8843b948b178 )
            , ( bp::arg("inst"), bp::arg("_train_data"), bp::arg("_responses"), bp::arg("_var_idx")=cv::Mat(), bp::arg("_sample_idx")=cv::Mat(), bp::arg("update")=(bool)(false) )
            , "\nArgument '_train_data':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_responses':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_var_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat"\
    "\nArgument '_sample_idx':"\
    "\n    C++ type: ::CvMat const *"\
    "\n    Python type: Mat" )    
        .def( 
            "train"
            , (bool ( CvNormalBayesClassifier::* )( ::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,bool ) )(&::CvNormalBayesClassifier::train)
            , (bool ( CvNormalBayesClassifier_wrapper::* )( ::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,::cv::Mat const &,bool ) )(&CvNormalBayesClassifier_wrapper::default_train)
            , ( bp::arg("_train_data"), bp::arg("_responses"), bp::arg("_var_idx")=cv::Mat(), bp::arg("_sample_idx")=cv::Mat(), bp::arg("update")=(bool)(false) ) )    
        .def( 
            "write"
            , (void (*)( CvNormalBayesClassifier const &,::cv::FileStorage &,char const * ))( &CvNormalBayesClassifier_wrapper::default_write )
            , ( bp::arg("inst"), bp::arg("storage"), bp::arg("name") )
            , "\nArgument 'storage':"\
    "\n    C++ type: ::CvFileStorage *"\
    "\n    Python type: FileStorage" )    
        .def( 
            "load"
            , (void ( CvStatModel::* )( char const *,char const * ) )(&::CvStatModel::load)
            , (void ( CvNormalBayesClassifier_wrapper::* )( char const *,char const * ) )(&CvNormalBayesClassifier_wrapper::default_load)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( 
            "save"
            , (void ( CvStatModel::* )( char const *,char const * ) const)(&::CvStatModel::save)
            , (void ( CvNormalBayesClassifier_wrapper::* )( char const *,char const * ) const)(&CvNormalBayesClassifier_wrapper::default_save)
            , ( bp::arg("filename"), bp::arg("name")=bp::object() ) )    
        .def( bp::init< cv::Mat const &, cv::Mat const &, bp::optional< cv::Mat const &, cv::Mat const & > >(( bp::arg("_train_data"), bp::arg("_responses"), bp::arg("_var_idx")=cv::Mat(), bp::arg("_sample_idx")=cv::Mat() )) );

}
