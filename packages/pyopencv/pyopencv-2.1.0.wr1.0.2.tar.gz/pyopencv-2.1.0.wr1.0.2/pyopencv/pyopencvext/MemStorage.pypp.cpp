// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "boost/python/object/life_support.hpp"
#include "MemStorage.pypp.hpp"

namespace bp = boost::python;

static bp::object from_CvMemStorage(bp::object const &inst_CvMemStorage)
{
    bp::extract<CvMemStorage *> elem(inst_CvMemStorage);
    if(!elem.check())
    {
        char s[300];
        sprintf( s, "Argument 'inst_CvMemStorage' must contain an object of type CvMemStorage." );
        PyErr_SetString(PyExc_TypeError, s);
        throw bp::error_already_set();
    }

    bp::object result = bp::object(::cv::Ptr< CvMemStorage >(elem()));
    bp::objects::make_nurse_and_patient(result.ptr(), inst_CvMemStorage.ptr());
    return result;
}

static CvMemStorage const &pointee(::cv::Ptr< CvMemStorage > const &inst) { return *((CvMemStorage const *)inst); }

void register_MemStorage_class(){

    { //::cv::Ptr< CvMemStorage >
        typedef bp::class_< cv::Ptr< CvMemStorage > > MemStorage_exposer_t;
        MemStorage_exposer_t MemStorage_exposer = MemStorage_exposer_t( "MemStorage", bp::init< >() );
        bp::scope MemStorage_scope( MemStorage_exposer );
        MemStorage_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::Ptr< CvMemStorage > >() );
        { //::cv::Ptr< CvMemStorage >::addref
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef void ( exported_class_t::*addref_function_type )(  ) ;
            
            MemStorage_exposer.def( 
                "addref"
                , addref_function_type( &::cv::Ptr< CvMemStorage >::addref ) );
        
        }
        { //::cv::Ptr< CvMemStorage >::delete_obj
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef void ( exported_class_t::*delete_obj_function_type )(  ) ;
            
            MemStorage_exposer.def( 
                "delete_obj"
                , delete_obj_function_type( &::cv::Ptr< CvMemStorage >::delete_obj ) );
        
        }
        { //::cv::Ptr< CvMemStorage >::empty
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            MemStorage_exposer.def( 
                "empty"
                , empty_function_type( &::cv::Ptr< CvMemStorage >::empty ) );
        
        }
        { //::cv::Ptr< CvMemStorage >::release
        
            typedef cv::Ptr< CvMemStorage > exported_class_t;
            typedef void ( exported_class_t::*release_function_type )(  ) ;
            
            MemStorage_exposer.def( 
                "release"
                , release_function_type( &::cv::Ptr< CvMemStorage >::release ) );
        
        }
        MemStorage_exposer.def("fromCvMemStorage", &::from_CvMemStorage, (bp::arg("inst_CvMemStorage")));
        MemStorage_exposer.staticmethod("fromCvMemStorage");
        MemStorage_exposer.add_property("pointee", bp::make_function(&::pointee, bp::return_internal_reference<>()));
    }

}
