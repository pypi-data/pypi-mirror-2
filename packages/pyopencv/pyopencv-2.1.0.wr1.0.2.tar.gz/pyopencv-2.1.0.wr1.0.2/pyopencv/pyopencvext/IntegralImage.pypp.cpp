// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "IntegralImage.pypp.hpp"

namespace bp = boost::python;

void register_IntegralImage_class(){

    { //::sdopencv::IntegralImage
        typedef bp::class_< sdopencv::IntegralImage > IntegralImage_exposer_t;
        IntegralImage_exposer_t IntegralImage_exposer = IntegralImage_exposer_t( "IntegralImage", bp::init< bp::optional< int > >(( bp::arg("sdepth")=(int)(6) )) );
        bp::scope IntegralImage_scope( IntegralImage_exposer );
        IntegralImage_exposer.add_property( "this", pyplus_conv::make_addressof_inst_getter< sdopencv::IntegralImage >() );
        bp::implicitly_convertible< int, sdopencv::IntegralImage >();
        { //::sdopencv::IntegralImage::adjust_rect
        
            typedef bool ( ::sdopencv::IntegralImage::*adjust_rect_function_type )( ::cv::Rect & ) ;
            
            IntegralImage_exposer.def( 
                "adjust_rect"
                , adjust_rect_function_type( &::sdopencv::IntegralImage::adjust_rect )
                , ( bp::arg("rect") ) );
        
        }
        { //::sdopencv::IntegralImage::operator()
        
            typedef void ( ::sdopencv::IntegralImage::*__call___function_type )( ::cv::Mat const & ) ;
            
            IntegralImage_exposer.def( 
                "__call__"
                , __call___function_type( &::sdopencv::IntegralImage::operator() )
                , ( bp::arg("image") )
                , "\nWrapped function:"
    "\n    operator()" );
        
        }
        { //::sdopencv::IntegralImage::sum
        
            typedef ::cv::Scalar ( ::sdopencv::IntegralImage::*sum_function_type )( ::cv::Rect ) ;
            
            IntegralImage_exposer.def( 
                "sum"
                , sum_function_type( &::sdopencv::IntegralImage::sum )
                , ( bp::arg("rect") ) );
        
        }
        IntegralImage_exposer.def_readwrite( "image_size", &sdopencv::IntegralImage::image_size );
        IntegralImage_exposer.def_readwrite( "integral", &sdopencv::IntegralImage::integral );
        IntegralImage_exposer.def_readwrite( "sdepth", &sdopencv::IntegralImage::sdepth );
    }

}
