// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__ctypes_integration.pypp.hpp"
#include "opencv_headers.hpp"
#include "BaseFilter.pypp.hpp"

namespace bp = boost::python;

struct BaseFilter_wrapper : cv::BaseFilter, bp::wrapper< cv::BaseFilter > {

    BaseFilter_wrapper(cv::BaseFilter const & arg )
    : cv::BaseFilter( arg )
      , bp::wrapper< cv::BaseFilter >(){
        // copy constructor
        
    }

    BaseFilter_wrapper( )
    : cv::BaseFilter( )
      , bp::wrapper< cv::BaseFilter >(){
        // null constructor
    
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->cv::BaseFilter::reset(  );
        }
    }
    
    void default_reset(  ) {
        cv::BaseFilter::reset( );
    }

};

void register_BaseFilter_class(){

    bp::class_< BaseFilter_wrapper >( "BaseFilter", bp::init< >() )    
        .add_property( "this", pyplus_conv::make_addressof_inst_getter< cv::BaseFilter >() )    
        .def( 
            "reset"
            , (void ( ::cv::BaseFilter::* )(  ) )(&::cv::BaseFilter::reset)
            , (void ( BaseFilter_wrapper::* )(  ) )(&BaseFilter_wrapper::default_reset) )    
        .def_readwrite( "anchor", &cv::BaseFilter::anchor )    
        .def_readwrite( "ksize", &cv::BaseFilter::ksize );

}
