// This file has been generated by Py++.

#include "boost/python.hpp"
#include "opencv_headers.hpp"
#include "pyopencvext_free_functions_w.pypp.hpp"

namespace bp = boost::python;

void register_free_functions_w(){

    { //::cv::waitKey
    
        typedef int ( *waitKey_function_type )( int );
        
        bp::def( 
            "waitKey"
            , waitKey_function_type( &::cv::waitKey )
            , ( bp::arg("delay")=(int)(0) )
            , "\nWaits for a pressed key."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/user_interface.html#cv-waitkey" );
    
    }

    { //::cv::warpAffine
    
        typedef void ( *warpAffine_function_type )( ::cv::Mat const &,::cv::Mat &,::cv::Mat const &,::cv::Size,int,int,::cv::Scalar const & );
        
        bp::def( 
            "warpAffine"
            , warpAffine_function_type( &::cv::warpAffine )
            , ( bp::arg("src"), bp::arg("dst"), bp::arg("M"), bp::arg("dsize"), bp::arg("flags")=int(::cv::INTER_LINEAR), bp::arg("borderMode")=int(::cv::BORDER_CONSTANT), bp::arg("borderValue")=cv::Scalar_<double>() ) );
    
    }

    { //::cv::warpPerspective
    
        typedef void ( *warpPerspective_function_type )( ::cv::Mat const &,::cv::Mat &,::cv::Mat const &,::cv::Size,int,int,::cv::Scalar const & );
        
        bp::def( 
            "warpPerspective"
            , warpPerspective_function_type( &::cv::warpPerspective )
            , ( bp::arg("src"), bp::arg("dst"), bp::arg("M"), bp::arg("dsize"), bp::arg("flags")=int(::cv::INTER_LINEAR), bp::arg("borderMode")=int(::cv::BORDER_CONSTANT), bp::arg("borderValue")=cv::Scalar_<double>() ) );
    
    }

    { //::cv::watershed
    
        typedef void ( *watershed_function_type )( ::cv::Mat const &,::cv::Mat & );
        
        bp::def( 
            "watershed"
            , watershed_function_type( &::cv::watershed )
            , ( bp::arg("image"), bp::arg("markers") ) );
    
    }

    { //::cv::write
    
        typedef void ( *write_SparseMat_function_type )( ::cv::FileStorage &,::std::string const &,::cv::SparseMat const & );
        
        bp::def( 
            "write_SparseMat"
            , write_SparseMat_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("name"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_MatND_function_type )( ::cv::FileStorage &,::std::string const &,::cv::MatND const & );
        
        bp::def( 
            "write_MatND"
            , write_MatND_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("name"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_Mat_function_type )( ::cv::FileStorage &,::std::string const &,::cv::Mat const & );
        
        bp::def( 
            "write_Mat"
            , write_Mat_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("name"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_Range_function_type )( ::cv::FileStorage &,::std::string const &,::cv::Range const & );
        
        bp::def( 
            "write_Range"
            , write_Range_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("name"), bp::arg("r") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_Range_function_type )( ::cv::FileStorage &,::cv::Range const & );
        
        bp::def( 
            "write_Range"
            , write_Range_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("r") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_int_function_type )( ::cv::FileStorage &,int const & );
        
        bp::def( 
            "write_int"
            , write_int_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_str_function_type )( ::cv::FileStorage &,::std::string const & );
        
        bp::def( 
            "write_str"
            , write_str_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_float64_function_type )( ::cv::FileStorage &,double const & );
        
        bp::def( 
            "write_float64"
            , write_float64_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_float32_function_type )( ::cv::FileStorage &,float const & );
        
        bp::def( 
            "write_float32"
            , write_float32_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_str_function_type )( ::cv::FileStorage &,::std::string const &,::std::string const & );
        
        bp::def( 
            "write_str"
            , write_str_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("name"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_float64_function_type )( ::cv::FileStorage &,::std::string const &,double );
        
        bp::def( 
            "write_float64"
            , write_float64_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("name"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_float32_function_type )( ::cv::FileStorage &,::std::string const &,float );
        
        bp::def( 
            "write_float32"
            , write_float32_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("name"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

    { //::cv::write
    
        typedef void ( *write_int_function_type )( ::cv::FileStorage &,::std::string const &,int );
        
        bp::def( 
            "write_int"
            , write_int_function_type( &::cv::write )
            , ( bp::arg("fs"), bp::arg("name"), bp::arg("value") )
            , "\nWrapped function:"
    "\n    write" );
    
    }

}
