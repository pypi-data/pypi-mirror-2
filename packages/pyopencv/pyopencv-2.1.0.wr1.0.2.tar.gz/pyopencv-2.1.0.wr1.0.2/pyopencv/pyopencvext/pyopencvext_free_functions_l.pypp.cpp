// This file has been generated by Py++.

#include "boost/python.hpp"
#include "opencv_headers.hpp"
#include "pyopencvext_free_functions_l.pypp.hpp"

namespace bp = boost::python;

void register_free_functions_l(){

    { //::LSHSize
    
        typedef unsigned int ( *LSHSize_function_type )( ::CvLSH * );
        
        bp::def( 
            "LSHSize"
            , LSHSize_function_type( &::LSHSize )
            , ( bp::arg("lsh") ) );
    
    }

    { //::cv::LUT
    
        typedef void ( *LUT_function_type )( ::cv::Mat const &,::cv::Mat const &,::cv::Mat & );
        
        bp::def( 
            "LUT"
            , LUT_function_type( &::cv::LUT )
            , ( bp::arg("a"), bp::arg("lut"), bp::arg("b") )
            , "\nPerforms a look-up table transform of an array."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/operations_on_arrays.html#cv-lut" );
    
    }

    { //::cv::Laplacian
    
        typedef void ( *Laplacian_function_type )( ::cv::Mat const &,::cv::Mat &,int,int,double,double,int );
        
        bp::def( 
            "Laplacian"
            , Laplacian_function_type( &::cv::Laplacian )
            , ( bp::arg("src"), bp::arg("dst"), bp::arg("ddepth"), bp::arg("ksize")=(int)(1), bp::arg("scale")=1, bp::arg("delta")=0, bp::arg("borderType")=int(::cv::BORDER_REFLECT_101) ) );
    
    }

    { //::cv::line
    
        typedef void ( *line_function_type )( ::cv::Mat &,::cv::Point,::cv::Point,::cv::Scalar const &,int,int,int );
        
        bp::def( 
            "line"
            , line_function_type( &::cv::line )
            , ( bp::arg("img"), bp::arg("pt1"), bp::arg("pt2"), bp::arg("color"), bp::arg("thickness")=(int)(1), bp::arg("lineType")=(int)(8), bp::arg("shift")=(int)(0) )
            , "\nDraws a line segment connecting two points."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/drawing_functions.html#cv-line" );
    
    }

    { //::cv::log
    
        typedef void ( *log_function_type )( ::cv::MatND const &,::cv::MatND & );
        
        bp::def( 
            "log"
            , log_function_type( &::cv::log )
            , ( bp::arg("a"), bp::arg("b") )
            , "\nCalculates the natural logarithm of every array element."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/operations_on_arrays.html#cv-log" );
    
    }

    { //::cv::log
    
        typedef void ( *log_function_type )( ::cv::Mat const &,::cv::Mat & );
        
        bp::def( 
            "log"
            , log_function_type( &::cv::log )
            , ( bp::arg("a"), bp::arg("b") )
            , "\nCalculates the natural logarithm of every array element."
    "\nReference:"
    "\n    http://opencv.willowgarage.com/documentation/cpp/operations_on_arrays.html#cv-log" );
    
    }

}
