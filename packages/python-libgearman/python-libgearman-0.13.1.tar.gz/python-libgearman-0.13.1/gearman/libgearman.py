# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _libgearman.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libgearman', [dirname(__file__)])
        except ImportError:
            import _libgearman
            return _libgearman
        if fp is not None:
            try:
                _mod = imp.load_module('_libgearman', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libgearman = swig_import_helper()
    del swig_import_helper
else:
    import _libgearman
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


GEARMAN_DEFAULT_TCP_HOST = _libgearman.GEARMAN_DEFAULT_TCP_HOST
GEARMAN_DEFAULT_TCP_PORT = _libgearman.GEARMAN_DEFAULT_TCP_PORT
GEARMAN_DEFAULT_SOCKET_TIMEOUT = _libgearman.GEARMAN_DEFAULT_SOCKET_TIMEOUT
GEARMAN_DEFAULT_SOCKET_SEND_SIZE = _libgearman.GEARMAN_DEFAULT_SOCKET_SEND_SIZE
GEARMAN_DEFAULT_SOCKET_RECV_SIZE = _libgearman.GEARMAN_DEFAULT_SOCKET_RECV_SIZE
GEARMAN_MAX_ERROR_SIZE = _libgearman.GEARMAN_MAX_ERROR_SIZE
GEARMAN_PACKET_HEADER_SIZE = _libgearman.GEARMAN_PACKET_HEADER_SIZE
GEARMAN_JOB_HANDLE_SIZE = _libgearman.GEARMAN_JOB_HANDLE_SIZE
GEARMAN_OPTION_SIZE = _libgearman.GEARMAN_OPTION_SIZE
GEARMAN_UNIQUE_SIZE = _libgearman.GEARMAN_UNIQUE_SIZE
GEARMAN_MAX_COMMAND_ARGS = _libgearman.GEARMAN_MAX_COMMAND_ARGS
GEARMAN_ARGS_BUFFER_SIZE = _libgearman.GEARMAN_ARGS_BUFFER_SIZE
GEARMAN_SEND_BUFFER_SIZE = _libgearman.GEARMAN_SEND_BUFFER_SIZE
GEARMAN_RECV_BUFFER_SIZE = _libgearman.GEARMAN_RECV_BUFFER_SIZE
GEARMAN_WORKER_WAIT_TIMEOUT = _libgearman.GEARMAN_WORKER_WAIT_TIMEOUT
GEARMAN_SUCCESS = _libgearman.GEARMAN_SUCCESS
GEARMAN_IO_WAIT = _libgearman.GEARMAN_IO_WAIT
GEARMAN_SHUTDOWN = _libgearman.GEARMAN_SHUTDOWN
GEARMAN_SHUTDOWN_GRACEFUL = _libgearman.GEARMAN_SHUTDOWN_GRACEFUL
GEARMAN_ERRNO = _libgearman.GEARMAN_ERRNO
GEARMAN_EVENT = _libgearman.GEARMAN_EVENT
GEARMAN_TOO_MANY_ARGS = _libgearman.GEARMAN_TOO_MANY_ARGS
GEARMAN_NO_ACTIVE_FDS = _libgearman.GEARMAN_NO_ACTIVE_FDS
GEARMAN_INVALID_MAGIC = _libgearman.GEARMAN_INVALID_MAGIC
GEARMAN_INVALID_COMMAND = _libgearman.GEARMAN_INVALID_COMMAND
GEARMAN_INVALID_PACKET = _libgearman.GEARMAN_INVALID_PACKET
GEARMAN_UNEXPECTED_PACKET = _libgearman.GEARMAN_UNEXPECTED_PACKET
GEARMAN_GETADDRINFO = _libgearman.GEARMAN_GETADDRINFO
GEARMAN_NO_SERVERS = _libgearman.GEARMAN_NO_SERVERS
GEARMAN_LOST_CONNECTION = _libgearman.GEARMAN_LOST_CONNECTION
GEARMAN_MEMORY_ALLOCATION_FAILURE = _libgearman.GEARMAN_MEMORY_ALLOCATION_FAILURE
GEARMAN_JOB_EXISTS = _libgearman.GEARMAN_JOB_EXISTS
GEARMAN_JOB_QUEUE_FULL = _libgearman.GEARMAN_JOB_QUEUE_FULL
GEARMAN_SERVER_ERROR = _libgearman.GEARMAN_SERVER_ERROR
GEARMAN_WORK_ERROR = _libgearman.GEARMAN_WORK_ERROR
GEARMAN_WORK_DATA = _libgearman.GEARMAN_WORK_DATA
GEARMAN_WORK_WARNING = _libgearman.GEARMAN_WORK_WARNING
GEARMAN_WORK_STATUS = _libgearman.GEARMAN_WORK_STATUS
GEARMAN_WORK_EXCEPTION = _libgearman.GEARMAN_WORK_EXCEPTION
GEARMAN_WORK_FAIL = _libgearman.GEARMAN_WORK_FAIL
GEARMAN_NOT_CONNECTED = _libgearman.GEARMAN_NOT_CONNECTED
GEARMAN_COULD_NOT_CONNECT = _libgearman.GEARMAN_COULD_NOT_CONNECT
GEARMAN_SEND_IN_PROGRESS = _libgearman.GEARMAN_SEND_IN_PROGRESS
GEARMAN_RECV_IN_PROGRESS = _libgearman.GEARMAN_RECV_IN_PROGRESS
GEARMAN_NOT_FLUSHING = _libgearman.GEARMAN_NOT_FLUSHING
GEARMAN_DATA_TOO_LARGE = _libgearman.GEARMAN_DATA_TOO_LARGE
GEARMAN_INVALID_FUNCTION_NAME = _libgearman.GEARMAN_INVALID_FUNCTION_NAME
GEARMAN_INVALID_WORKER_FUNCTION = _libgearman.GEARMAN_INVALID_WORKER_FUNCTION
GEARMAN_NO_REGISTERED_FUNCTION = _libgearman.GEARMAN_NO_REGISTERED_FUNCTION
GEARMAN_NO_REGISTERED_FUNCTIONS = _libgearman.GEARMAN_NO_REGISTERED_FUNCTIONS
GEARMAN_NO_JOBS = _libgearman.GEARMAN_NO_JOBS
GEARMAN_ECHO_DATA_CORRUPTION = _libgearman.GEARMAN_ECHO_DATA_CORRUPTION
GEARMAN_NEED_WORKLOAD_FN = _libgearman.GEARMAN_NEED_WORKLOAD_FN
GEARMAN_PAUSE = _libgearman.GEARMAN_PAUSE
GEARMAN_UNKNOWN_STATE = _libgearman.GEARMAN_UNKNOWN_STATE
GEARMAN_PTHREAD = _libgearman.GEARMAN_PTHREAD
GEARMAN_PIPE_EOF = _libgearman.GEARMAN_PIPE_EOF
GEARMAN_QUEUE_ERROR = _libgearman.GEARMAN_QUEUE_ERROR
GEARMAN_FLUSH_DATA = _libgearman.GEARMAN_FLUSH_DATA
GEARMAN_SEND_BUFFER_TOO_SMALL = _libgearman.GEARMAN_SEND_BUFFER_TOO_SMALL
GEARMAN_IGNORE_PACKET = _libgearman.GEARMAN_IGNORE_PACKET
GEARMAN_UNKNOWN_OPTION = _libgearman.GEARMAN_UNKNOWN_OPTION
GEARMAN_TIMEOUT = _libgearman.GEARMAN_TIMEOUT
GEARMAN_ARGUMENT_TOO_LARGE = _libgearman.GEARMAN_ARGUMENT_TOO_LARGE
GEARMAN_MAX_RETURN = _libgearman.GEARMAN_MAX_RETURN
GEARMAN_VERBOSE_NEVER = _libgearman.GEARMAN_VERBOSE_NEVER
GEARMAN_VERBOSE_FATAL = _libgearman.GEARMAN_VERBOSE_FATAL
GEARMAN_VERBOSE_ERROR = _libgearman.GEARMAN_VERBOSE_ERROR
GEARMAN_VERBOSE_INFO = _libgearman.GEARMAN_VERBOSE_INFO
GEARMAN_VERBOSE_DEBUG = _libgearman.GEARMAN_VERBOSE_DEBUG
GEARMAN_VERBOSE_CRAZY = _libgearman.GEARMAN_VERBOSE_CRAZY
GEARMAN_VERBOSE_MAX = _libgearman.GEARMAN_VERBOSE_MAX
GEARMAN_NON_BLOCKING = _libgearman.GEARMAN_NON_BLOCKING
GEARMAN_DONT_TRACK_PACKETS = _libgearman.GEARMAN_DONT_TRACK_PACKETS
GEARMAN_MAX = _libgearman.GEARMAN_MAX
GEARMAN_CON_READY = _libgearman.GEARMAN_CON_READY
GEARMAN_CON_PACKET_IN_USE = _libgearman.GEARMAN_CON_PACKET_IN_USE
GEARMAN_CON_EXTERNAL_FD = _libgearman.GEARMAN_CON_EXTERNAL_FD
GEARMAN_CON_IGNORE_LOST_CONNECTION = _libgearman.GEARMAN_CON_IGNORE_LOST_CONNECTION
GEARMAN_CON_CLOSE_AFTER_FLUSH = _libgearman.GEARMAN_CON_CLOSE_AFTER_FLUSH
GEARMAN_CON_MAX = _libgearman.GEARMAN_CON_MAX
GEARMAN_COMMAND_TEXT = _libgearman.GEARMAN_COMMAND_TEXT
GEARMAN_COMMAND_CAN_DO = _libgearman.GEARMAN_COMMAND_CAN_DO
GEARMAN_COMMAND_CANT_DO = _libgearman.GEARMAN_COMMAND_CANT_DO
GEARMAN_COMMAND_RESET_ABILITIES = _libgearman.GEARMAN_COMMAND_RESET_ABILITIES
GEARMAN_COMMAND_PRE_SLEEP = _libgearman.GEARMAN_COMMAND_PRE_SLEEP
GEARMAN_COMMAND_UNUSED = _libgearman.GEARMAN_COMMAND_UNUSED
GEARMAN_COMMAND_NOOP = _libgearman.GEARMAN_COMMAND_NOOP
GEARMAN_COMMAND_SUBMIT_JOB = _libgearman.GEARMAN_COMMAND_SUBMIT_JOB
GEARMAN_COMMAND_JOB_CREATED = _libgearman.GEARMAN_COMMAND_JOB_CREATED
GEARMAN_COMMAND_GRAB_JOB = _libgearman.GEARMAN_COMMAND_GRAB_JOB
GEARMAN_COMMAND_NO_JOB = _libgearman.GEARMAN_COMMAND_NO_JOB
GEARMAN_COMMAND_JOB_ASSIGN = _libgearman.GEARMAN_COMMAND_JOB_ASSIGN
GEARMAN_COMMAND_WORK_STATUS = _libgearman.GEARMAN_COMMAND_WORK_STATUS
GEARMAN_COMMAND_WORK_COMPLETE = _libgearman.GEARMAN_COMMAND_WORK_COMPLETE
GEARMAN_COMMAND_WORK_FAIL = _libgearman.GEARMAN_COMMAND_WORK_FAIL
GEARMAN_COMMAND_GET_STATUS = _libgearman.GEARMAN_COMMAND_GET_STATUS
GEARMAN_COMMAND_ECHO_REQ = _libgearman.GEARMAN_COMMAND_ECHO_REQ
GEARMAN_COMMAND_ECHO_RES = _libgearman.GEARMAN_COMMAND_ECHO_RES
GEARMAN_COMMAND_SUBMIT_JOB_BG = _libgearman.GEARMAN_COMMAND_SUBMIT_JOB_BG
GEARMAN_COMMAND_ERROR = _libgearman.GEARMAN_COMMAND_ERROR
GEARMAN_COMMAND_STATUS_RES = _libgearman.GEARMAN_COMMAND_STATUS_RES
GEARMAN_COMMAND_SUBMIT_JOB_HIGH = _libgearman.GEARMAN_COMMAND_SUBMIT_JOB_HIGH
GEARMAN_COMMAND_SET_CLIENT_ID = _libgearman.GEARMAN_COMMAND_SET_CLIENT_ID
GEARMAN_COMMAND_CAN_DO_TIMEOUT = _libgearman.GEARMAN_COMMAND_CAN_DO_TIMEOUT
GEARMAN_COMMAND_ALL_YOURS = _libgearman.GEARMAN_COMMAND_ALL_YOURS
GEARMAN_COMMAND_WORK_EXCEPTION = _libgearman.GEARMAN_COMMAND_WORK_EXCEPTION
GEARMAN_COMMAND_OPTION_REQ = _libgearman.GEARMAN_COMMAND_OPTION_REQ
GEARMAN_COMMAND_OPTION_RES = _libgearman.GEARMAN_COMMAND_OPTION_RES
GEARMAN_COMMAND_WORK_DATA = _libgearman.GEARMAN_COMMAND_WORK_DATA
GEARMAN_COMMAND_WORK_WARNING = _libgearman.GEARMAN_COMMAND_WORK_WARNING
GEARMAN_COMMAND_GRAB_JOB_UNIQ = _libgearman.GEARMAN_COMMAND_GRAB_JOB_UNIQ
GEARMAN_COMMAND_JOB_ASSIGN_UNIQ = _libgearman.GEARMAN_COMMAND_JOB_ASSIGN_UNIQ
GEARMAN_COMMAND_SUBMIT_JOB_HIGH_BG = _libgearman.GEARMAN_COMMAND_SUBMIT_JOB_HIGH_BG
GEARMAN_COMMAND_SUBMIT_JOB_LOW = _libgearman.GEARMAN_COMMAND_SUBMIT_JOB_LOW
GEARMAN_COMMAND_SUBMIT_JOB_LOW_BG = _libgearman.GEARMAN_COMMAND_SUBMIT_JOB_LOW_BG
GEARMAN_COMMAND_SUBMIT_JOB_SCHED = _libgearman.GEARMAN_COMMAND_SUBMIT_JOB_SCHED
GEARMAN_COMMAND_SUBMIT_JOB_EPOCH = _libgearman.GEARMAN_COMMAND_SUBMIT_JOB_EPOCH
GEARMAN_COMMAND_MAX = _libgearman.GEARMAN_COMMAND_MAX
GEARMAN_JOB_PRIORITY_HIGH = _libgearman.GEARMAN_JOB_PRIORITY_HIGH
GEARMAN_JOB_PRIORITY_NORMAL = _libgearman.GEARMAN_JOB_PRIORITY_NORMAL
GEARMAN_JOB_PRIORITY_LOW = _libgearman.GEARMAN_JOB_PRIORITY_LOW
GEARMAN_JOB_PRIORITY_MAX = _libgearman.GEARMAN_JOB_PRIORITY_MAX
GEARMAN_CLIENT_ALLOCATED = _libgearman.GEARMAN_CLIENT_ALLOCATED
GEARMAN_CLIENT_NON_BLOCKING = _libgearman.GEARMAN_CLIENT_NON_BLOCKING
GEARMAN_CLIENT_TASK_IN_USE = _libgearman.GEARMAN_CLIENT_TASK_IN_USE
GEARMAN_CLIENT_UNBUFFERED_RESULT = _libgearman.GEARMAN_CLIENT_UNBUFFERED_RESULT
GEARMAN_CLIENT_NO_NEW = _libgearman.GEARMAN_CLIENT_NO_NEW
GEARMAN_CLIENT_FREE_TASKS = _libgearman.GEARMAN_CLIENT_FREE_TASKS
GEARMAN_CLIENT_MAX = _libgearman.GEARMAN_CLIENT_MAX
GEARMAN_WORKER_ALLOCATED = _libgearman.GEARMAN_WORKER_ALLOCATED
GEARMAN_WORKER_NON_BLOCKING = _libgearman.GEARMAN_WORKER_NON_BLOCKING
GEARMAN_WORKER_PACKET_INIT = _libgearman.GEARMAN_WORKER_PACKET_INIT
GEARMAN_WORKER_GRAB_JOB_IN_USE = _libgearman.GEARMAN_WORKER_GRAB_JOB_IN_USE
GEARMAN_WORKER_PRE_SLEEP_IN_USE = _libgearman.GEARMAN_WORKER_PRE_SLEEP_IN_USE
GEARMAN_WORKER_WORK_JOB_IN_USE = _libgearman.GEARMAN_WORKER_WORK_JOB_IN_USE
GEARMAN_WORKER_CHANGE = _libgearman.GEARMAN_WORKER_CHANGE
GEARMAN_WORKER_GRAB_UNIQ = _libgearman.GEARMAN_WORKER_GRAB_UNIQ
GEARMAN_WORKER_TIMEOUT_RETURN = _libgearman.GEARMAN_WORKER_TIMEOUT_RETURN
GEARMAN_WORKER_MAX = _libgearman.GEARMAN_WORKER_MAX

def version():
  """version() -> char"""
  return _libgearman.version()

def bugreport():
  """bugreport() -> char"""
  return _libgearman.bugreport()
class Gearman(object):
    """Proxy of C Gearman struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Gearman"""
        _libgearman.Gearman_swiginit(self,_libgearman.new_Gearman())
    __swig_destroy__ = _libgearman.delete_Gearman
    def copy(self):
        """copy(self)"""
        return _libgearman.Gearman_copy(self)

    def error(self):
        """error(self) -> char"""
        return _libgearman.Gearman_error(self)

    def errno(self):
        """errno(self) -> int"""
        return _libgearman.Gearman_errno(self)

    def options(self):
        """options(self) -> gearman_universal_options_t"""
        return _libgearman.Gearman_options(self)

    def set_options(self, *args):
        """set_options(self, gearman_universal_options_t options)"""
        return _libgearman.Gearman_set_options(self, *args)

    def add_options(self, *args):
        """add_options(self, gearman_universal_options_t options)"""
        return _libgearman.Gearman_add_options(self, *args)

    def remove_options(self, *args):
        """remove_options(self, gearman_universal_options_t options)"""
        return _libgearman.Gearman_remove_options(self, *args)

    def timeout(self):
        """timeout(self) -> int"""
        return _libgearman.Gearman_timeout(self)

    def set_timeout(self, *args):
        """set_timeout(self, int timeout)"""
        return _libgearman.Gearman_set_timeout(self, *args)

Gearman.copy = new_instancemethod(_libgearman.Gearman_copy,None,Gearman)
Gearman.error = new_instancemethod(_libgearman.Gearman_error,None,Gearman)
Gearman.errno = new_instancemethod(_libgearman.Gearman_errno,None,Gearman)
Gearman.options = new_instancemethod(_libgearman.Gearman_options,None,Gearman)
Gearman.set_options = new_instancemethod(_libgearman.Gearman_set_options,None,Gearman)
Gearman.add_options = new_instancemethod(_libgearman.Gearman_add_options,None,Gearman)
Gearman.remove_options = new_instancemethod(_libgearman.Gearman_remove_options,None,Gearman)
Gearman.timeout = new_instancemethod(_libgearman.Gearman_timeout,None,Gearman)
Gearman.set_timeout = new_instancemethod(_libgearman.Gearman_set_timeout,None,Gearman)
Gearman_swigregister = _libgearman.Gearman_swigregister
Gearman_swigregister(Gearman)

class Client(object):
    """Proxy of C Client struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Client"""
        _libgearman.Client_swiginit(self,_libgearman.new_Client())
    __swig_destroy__ = _libgearman.delete_Client
    def copy(self):
        """copy(self) -> Client"""
        return _libgearman.Client_copy(self)

    def error(self):
        """error(self) -> char"""
        return _libgearman.Client_error(self)

    def errno(self):
        """errno(self) -> int"""
        return _libgearman.Client_errno(self)

    def options(self):
        """options(self) -> gearman_client_options_t"""
        return _libgearman.Client_options(self)

    def set_options(self, *args):
        """set_options(self, gearman_client_options_t options)"""
        return _libgearman.Client_set_options(self, *args)

    def add_options(self, *args):
        """add_options(self, gearman_client_options_t options)"""
        return _libgearman.Client_add_options(self, *args)

    def remove_options(self, *args):
        """remove_options(self, gearman_client_options_t options)"""
        return _libgearman.Client_remove_options(self, *args)

    def add_server(self, *args):
        """
        add_server(self, char host, in_port_t port) -> gearman_return_t
        add_server(self, char host) -> gearman_return_t
        add_server(self) -> gearman_return_t
        """
        return _libgearman.Client_add_server(self, *args)

    def add_servers(self, *args):
        """add_servers(self, char servers) -> gearman_return_t"""
        return _libgearman.Client_add_servers(self, *args)

    def remove_servers(self):
        """remove_servers(self)"""
        return _libgearman.Client_remove_servers(self)

    def do(self, *args):
        """do(self, char function_name, void workload, char unique = None) -> gearman_return_t"""
        return _libgearman.Client_do(self, *args)

    def do_high(self, *args):
        """do_high(self, char function_name, void workload, char unique = None) -> gearman_return_t"""
        return _libgearman.Client_do_high(self, *args)

    def do_low(self, *args):
        """do_low(self, char function_name, void workload, char unique = None) -> gearman_return_t"""
        return _libgearman.Client_do_low(self, *args)

    def do_job_handle(self):
        """do_job_handle(self) -> char"""
        return _libgearman.Client_do_job_handle(self)

    def do_status(self, *args):
        """do_status(self, uint32_t numerator, uint32_t denominator)"""
        return _libgearman.Client_do_status(self, *args)

    def do_background(self, *args):
        """do_background(self, char function_name, void workload, char unique = None) -> gearman_return_t"""
        return _libgearman.Client_do_background(self, *args)

    def do_high_background(self, *args):
        """do_high_background(self, char function_name, void workload, char unique = None) -> gearman_return_t"""
        return _libgearman.Client_do_high_background(self, *args)

    def do_low_background(self, *args):
        """do_low_background(self, char function_name, void workload, char unique = None) -> gearman_return_t"""
        return _libgearman.Client_do_low_background(self, *args)

    def job_status(self, *args):
        """job_status(self, char job_handle) -> gearman_return_t"""
        return _libgearman.Client_job_status(self, *args)

Client.copy = new_instancemethod(_libgearman.Client_copy,None,Client)
Client.error = new_instancemethod(_libgearman.Client_error,None,Client)
Client.errno = new_instancemethod(_libgearman.Client_errno,None,Client)
Client.options = new_instancemethod(_libgearman.Client_options,None,Client)
Client.set_options = new_instancemethod(_libgearman.Client_set_options,None,Client)
Client.add_options = new_instancemethod(_libgearman.Client_add_options,None,Client)
Client.remove_options = new_instancemethod(_libgearman.Client_remove_options,None,Client)
Client.add_server = new_instancemethod(_libgearman.Client_add_server,None,Client)
Client.add_servers = new_instancemethod(_libgearman.Client_add_servers,None,Client)
Client.remove_servers = new_instancemethod(_libgearman.Client_remove_servers,None,Client)
Client.do = new_instancemethod(_libgearman.Client_do,None,Client)
Client.do_high = new_instancemethod(_libgearman.Client_do_high,None,Client)
Client.do_low = new_instancemethod(_libgearman.Client_do_low,None,Client)
Client.do_job_handle = new_instancemethod(_libgearman.Client_do_job_handle,None,Client)
Client.do_status = new_instancemethod(_libgearman.Client_do_status,None,Client)
Client.do_background = new_instancemethod(_libgearman.Client_do_background,None,Client)
Client.do_high_background = new_instancemethod(_libgearman.Client_do_high_background,None,Client)
Client.do_low_background = new_instancemethod(_libgearman.Client_do_low_background,None,Client)
Client.job_status = new_instancemethod(_libgearman.Client_job_status,None,Client)
Client_swigregister = _libgearman.Client_swigregister
Client_swigregister(Client)

class Worker(object):
    """Proxy of C Worker struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Worker"""
        _libgearman.Worker_swiginit(self,_libgearman.new_Worker())
    __swig_destroy__ = _libgearman.delete_Worker
    def copy(self):
        """copy(self) -> Worker"""
        return _libgearman.Worker_copy(self)

    def error(self):
        """error(self) -> char"""
        return _libgearman.Worker_error(self)

    def errno(self):
        """errno(self) -> int"""
        return _libgearman.Worker_errno(self)

    def options(self):
        """options(self) -> gearman_worker_options_t"""
        return _libgearman.Worker_options(self)

    def set_options(self, *args):
        """set_options(self, gearman_worker_options_t options)"""
        return _libgearman.Worker_set_options(self, *args)

    def add_options(self, *args):
        """add_options(self, gearman_worker_options_t options)"""
        return _libgearman.Worker_add_options(self, *args)

    def remove_options(self, *args):
        """remove_options(self, gearman_worker_options_t options)"""
        return _libgearman.Worker_remove_options(self, *args)

    def timeout(self):
        """timeout(self) -> int"""
        return _libgearman.Worker_timeout(self)

    def set_timeout(self, *args):
        """set_timeout(self, int timeout)"""
        return _libgearman.Worker_set_timeout(self, *args)

    def add_server(self, *args):
        """
        add_server(self, char host, in_port_t port) -> gearman_return_t
        add_server(self, char host) -> gearman_return_t
        add_server(self) -> gearman_return_t
        """
        return _libgearman.Worker_add_server(self, *args)

    def add_servers(self, *args):
        """add_servers(self, char servers) -> gearman_return_t"""
        return _libgearman.Worker_add_servers(self, *args)

    def register_function(self, *args):
        """register_function(self, char function_name, uint32_t timeout = 0) -> gearman_return_t"""
        return _libgearman.Worker_register_function(self, *args)

    def unregister_function(self, *args):
        """unregister_function(self, char function_name) -> gearman_return_t"""
        return _libgearman.Worker_unregister_function(self, *args)

    def unregister_all(self):
        """unregister_all(self) -> gearman_return_t"""
        return _libgearman.Worker_unregister_all(self)

    def grabJob(self):
        """grabJob(self)"""
        return _libgearman.Worker_grabJob(self)

    def add_function(self, *args):
        """add_function(self, char function_name, gearman_callback worker_fn, uint32_t timeout = 0) -> gearman_return_t"""
        return _libgearman.Worker_add_function(self, *args)

    def work(self):
        """work(self) -> gearman_return_t"""
        return _libgearman.Worker_work(self)

    def echo(self, *args):
        """echo(self, void workload) -> gearman_return_t"""
        return _libgearman.Worker_echo(self, *args)

Worker.copy = new_instancemethod(_libgearman.Worker_copy,None,Worker)
Worker.error = new_instancemethod(_libgearman.Worker_error,None,Worker)
Worker.errno = new_instancemethod(_libgearman.Worker_errno,None,Worker)
Worker.options = new_instancemethod(_libgearman.Worker_options,None,Worker)
Worker.set_options = new_instancemethod(_libgearman.Worker_set_options,None,Worker)
Worker.add_options = new_instancemethod(_libgearman.Worker_add_options,None,Worker)
Worker.remove_options = new_instancemethod(_libgearman.Worker_remove_options,None,Worker)
Worker.timeout = new_instancemethod(_libgearman.Worker_timeout,None,Worker)
Worker.set_timeout = new_instancemethod(_libgearman.Worker_set_timeout,None,Worker)
Worker.add_server = new_instancemethod(_libgearman.Worker_add_server,None,Worker)
Worker.add_servers = new_instancemethod(_libgearman.Worker_add_servers,None,Worker)
Worker.register_function = new_instancemethod(_libgearman.Worker_register_function,None,Worker)
Worker.unregister_function = new_instancemethod(_libgearman.Worker_unregister_function,None,Worker)
Worker.unregister_all = new_instancemethod(_libgearman.Worker_unregister_all,None,Worker)
Worker.grabJob = new_instancemethod(_libgearman.Worker_grabJob,None,Worker)
Worker.add_function = new_instancemethod(_libgearman.Worker_add_function,None,Worker)
Worker.work = new_instancemethod(_libgearman.Worker_work,None,Worker)
Worker.echo = new_instancemethod(_libgearman.Worker_echo,None,Worker)
Worker_swigregister = _libgearman.Worker_swigregister
Worker_swigregister(Worker)

class Job(object):
    """Proxy of C Job struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def send_status(self, *args):
        """send_status(self, uint32_t numerator, uint32_t denominator) -> gearman_return_t"""
        return _libgearman.Job_send_status(self, *args)

    def send_fail(self):
        """send_fail(self) -> gearman_return_t"""
        return _libgearman.Job_send_fail(self)

    def job_handle(self):
        """job_handle(self) -> char"""
        return _libgearman.Job_job_handle(self)

    def function_name(self):
        """function_name(self) -> char"""
        return _libgearman.Job_function_name(self)

    def unique(self):
        """unique(self) -> char"""
        return _libgearman.Job_unique(self)

    def get_workload(self):
        """get_workload(self) -> gearman_workload"""
        return _libgearman.Job_get_workload(self)

    def __init__(self): 
        """__init__(self) -> Job"""
        _libgearman.Job_swiginit(self,_libgearman.new_Job())
    __swig_destroy__ = _libgearman.delete_Job
Job.send_status = new_instancemethod(_libgearman.Job_send_status,None,Job)
Job.send_fail = new_instancemethod(_libgearman.Job_send_fail,None,Job)
Job.job_handle = new_instancemethod(_libgearman.Job_job_handle,None,Job)
Job.function_name = new_instancemethod(_libgearman.Job_function_name,None,Job)
Job.unique = new_instancemethod(_libgearman.Job_unique,None,Job)
Job.get_workload = new_instancemethod(_libgearman.Job_get_workload,None,Job)
Job_swigregister = _libgearman.Job_swigregister
Job_swigregister(Job)

Worker.register = new_instancemethod(_libgearman.Worker_register_function,None,Worker)




