# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_compcore', [dirname(__file__)])
        except ImportError:
            import _compcore
            return _compcore
        if fp is not None:
            try:
                _mod = imp.load_module('_compcore', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _compcore = swig_import_helper()
    del swig_import_helper
else:
    import _compcore
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class SwigPyIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _compcore.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _compcore.SwigPyIterator_value(self)
    def incr(self, n = 1): return _compcore.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _compcore.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _compcore.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _compcore.SwigPyIterator_equal(self, *args)
    def copy(self): return _compcore.SwigPyIterator_copy(self)
    def next(self): return _compcore.SwigPyIterator_next(self)
    def __next__(self): return _compcore.SwigPyIterator___next__(self)
    def previous(self): return _compcore.SwigPyIterator_previous(self)
    def advance(self, *args): return _compcore.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _compcore.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _compcore.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _compcore.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _compcore.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _compcore.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _compcore.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _compcore.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorDouble:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _compcore.VectorDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _compcore.VectorDouble___nonzero__(self)
    def __bool__(self): return _compcore.VectorDouble___bool__(self)
    def __len__(self): return _compcore.VectorDouble___len__(self)
    def pop(self): return _compcore.VectorDouble_pop(self)
    def __getslice__(self, *args): return _compcore.VectorDouble___getslice__(self, *args)
    def __setslice__(self, *args): return _compcore.VectorDouble___setslice__(self, *args)
    def __delslice__(self, *args): return _compcore.VectorDouble___delslice__(self, *args)
    def __delitem__(self, *args): return _compcore.VectorDouble___delitem__(self, *args)
    def __getitem__(self, *args): return _compcore.VectorDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _compcore.VectorDouble___setitem__(self, *args)
    def append(self, *args): return _compcore.VectorDouble_append(self, *args)
    def empty(self): return _compcore.VectorDouble_empty(self)
    def size(self): return _compcore.VectorDouble_size(self)
    def clear(self): return _compcore.VectorDouble_clear(self)
    def swap(self, *args): return _compcore.VectorDouble_swap(self, *args)
    def get_allocator(self): return _compcore.VectorDouble_get_allocator(self)
    def begin(self): return _compcore.VectorDouble_begin(self)
    def end(self): return _compcore.VectorDouble_end(self)
    def rbegin(self): return _compcore.VectorDouble_rbegin(self)
    def rend(self): return _compcore.VectorDouble_rend(self)
    def pop_back(self): return _compcore.VectorDouble_pop_back(self)
    def erase(self, *args): return _compcore.VectorDouble_erase(self, *args)
    def __init__(self, *args): 
        this = _compcore.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compcore.VectorDouble_push_back(self, *args)
    def front(self): return _compcore.VectorDouble_front(self)
    def back(self): return _compcore.VectorDouble_back(self)
    def assign(self, *args): return _compcore.VectorDouble_assign(self, *args)
    def resize(self, *args): return _compcore.VectorDouble_resize(self, *args)
    def insert(self, *args): return _compcore.VectorDouble_insert(self, *args)
    def reserve(self, *args): return _compcore.VectorDouble_reserve(self, *args)
    def capacity(self): return _compcore.VectorDouble_capacity(self)
    __swig_destroy__ = _compcore.delete_VectorDouble
    __del__ = lambda self : None;
VectorDouble_swigregister = _compcore.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorInt:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _compcore.VectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _compcore.VectorInt___nonzero__(self)
    def __bool__(self): return _compcore.VectorInt___bool__(self)
    def __len__(self): return _compcore.VectorInt___len__(self)
    def pop(self): return _compcore.VectorInt_pop(self)
    def __getslice__(self, *args): return _compcore.VectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _compcore.VectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _compcore.VectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _compcore.VectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _compcore.VectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _compcore.VectorInt___setitem__(self, *args)
    def append(self, *args): return _compcore.VectorInt_append(self, *args)
    def empty(self): return _compcore.VectorInt_empty(self)
    def size(self): return _compcore.VectorInt_size(self)
    def clear(self): return _compcore.VectorInt_clear(self)
    def swap(self, *args): return _compcore.VectorInt_swap(self, *args)
    def get_allocator(self): return _compcore.VectorInt_get_allocator(self)
    def begin(self): return _compcore.VectorInt_begin(self)
    def end(self): return _compcore.VectorInt_end(self)
    def rbegin(self): return _compcore.VectorInt_rbegin(self)
    def rend(self): return _compcore.VectorInt_rend(self)
    def pop_back(self): return _compcore.VectorInt_pop_back(self)
    def erase(self, *args): return _compcore.VectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _compcore.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compcore.VectorInt_push_back(self, *args)
    def front(self): return _compcore.VectorInt_front(self)
    def back(self): return _compcore.VectorInt_back(self)
    def assign(self, *args): return _compcore.VectorInt_assign(self, *args)
    def resize(self, *args): return _compcore.VectorInt_resize(self, *args)
    def insert(self, *args): return _compcore.VectorInt_insert(self, *args)
    def reserve(self, *args): return _compcore.VectorInt_reserve(self, *args)
    def capacity(self): return _compcore.VectorInt_capacity(self)
    __swig_destroy__ = _compcore.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _compcore.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class MatrixDouble:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _compcore.MatrixDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _compcore.MatrixDouble___nonzero__(self)
    def __bool__(self): return _compcore.MatrixDouble___bool__(self)
    def __len__(self): return _compcore.MatrixDouble___len__(self)
    def pop(self): return _compcore.MatrixDouble_pop(self)
    def __getslice__(self, *args): return _compcore.MatrixDouble___getslice__(self, *args)
    def __setslice__(self, *args): return _compcore.MatrixDouble___setslice__(self, *args)
    def __delslice__(self, *args): return _compcore.MatrixDouble___delslice__(self, *args)
    def __delitem__(self, *args): return _compcore.MatrixDouble___delitem__(self, *args)
    def __getitem__(self, *args): return _compcore.MatrixDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _compcore.MatrixDouble___setitem__(self, *args)
    def append(self, *args): return _compcore.MatrixDouble_append(self, *args)
    def empty(self): return _compcore.MatrixDouble_empty(self)
    def size(self): return _compcore.MatrixDouble_size(self)
    def clear(self): return _compcore.MatrixDouble_clear(self)
    def swap(self, *args): return _compcore.MatrixDouble_swap(self, *args)
    def get_allocator(self): return _compcore.MatrixDouble_get_allocator(self)
    def begin(self): return _compcore.MatrixDouble_begin(self)
    def end(self): return _compcore.MatrixDouble_end(self)
    def rbegin(self): return _compcore.MatrixDouble_rbegin(self)
    def rend(self): return _compcore.MatrixDouble_rend(self)
    def pop_back(self): return _compcore.MatrixDouble_pop_back(self)
    def erase(self, *args): return _compcore.MatrixDouble_erase(self, *args)
    def __init__(self, *args): 
        this = _compcore.new_MatrixDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compcore.MatrixDouble_push_back(self, *args)
    def front(self): return _compcore.MatrixDouble_front(self)
    def back(self): return _compcore.MatrixDouble_back(self)
    def assign(self, *args): return _compcore.MatrixDouble_assign(self, *args)
    def resize(self, *args): return _compcore.MatrixDouble_resize(self, *args)
    def insert(self, *args): return _compcore.MatrixDouble_insert(self, *args)
    def reserve(self, *args): return _compcore.MatrixDouble_reserve(self, *args)
    def capacity(self): return _compcore.MatrixDouble_capacity(self)
    __swig_destroy__ = _compcore.delete_MatrixDouble
    __del__ = lambda self : None;
MatrixDouble_swigregister = _compcore.MatrixDouble_swigregister
MatrixDouble_swigregister(MatrixDouble)

class MatrixInt:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _compcore.MatrixInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _compcore.MatrixInt___nonzero__(self)
    def __bool__(self): return _compcore.MatrixInt___bool__(self)
    def __len__(self): return _compcore.MatrixInt___len__(self)
    def pop(self): return _compcore.MatrixInt_pop(self)
    def __getslice__(self, *args): return _compcore.MatrixInt___getslice__(self, *args)
    def __setslice__(self, *args): return _compcore.MatrixInt___setslice__(self, *args)
    def __delslice__(self, *args): return _compcore.MatrixInt___delslice__(self, *args)
    def __delitem__(self, *args): return _compcore.MatrixInt___delitem__(self, *args)
    def __getitem__(self, *args): return _compcore.MatrixInt___getitem__(self, *args)
    def __setitem__(self, *args): return _compcore.MatrixInt___setitem__(self, *args)
    def append(self, *args): return _compcore.MatrixInt_append(self, *args)
    def empty(self): return _compcore.MatrixInt_empty(self)
    def size(self): return _compcore.MatrixInt_size(self)
    def clear(self): return _compcore.MatrixInt_clear(self)
    def swap(self, *args): return _compcore.MatrixInt_swap(self, *args)
    def get_allocator(self): return _compcore.MatrixInt_get_allocator(self)
    def begin(self): return _compcore.MatrixInt_begin(self)
    def end(self): return _compcore.MatrixInt_end(self)
    def rbegin(self): return _compcore.MatrixInt_rbegin(self)
    def rend(self): return _compcore.MatrixInt_rend(self)
    def pop_back(self): return _compcore.MatrixInt_pop_back(self)
    def erase(self, *args): return _compcore.MatrixInt_erase(self, *args)
    def __init__(self, *args): 
        this = _compcore.new_MatrixInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compcore.MatrixInt_push_back(self, *args)
    def front(self): return _compcore.MatrixInt_front(self)
    def back(self): return _compcore.MatrixInt_back(self)
    def assign(self, *args): return _compcore.MatrixInt_assign(self, *args)
    def resize(self, *args): return _compcore.MatrixInt_resize(self, *args)
    def insert(self, *args): return _compcore.MatrixInt_insert(self, *args)
    def reserve(self, *args): return _compcore.MatrixInt_reserve(self, *args)
    def capacity(self): return _compcore.MatrixInt_capacity(self)
    __swig_destroy__ = _compcore.delete_MatrixInt
    __del__ = lambda self : None;
MatrixInt_swigregister = _compcore.MatrixInt_swigregister
MatrixInt_swigregister(MatrixInt)

class LSA_Data:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LSA_Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LSA_Data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_shift"] = _compcore.LSA_Data_max_shift_set
    __swig_getmethods__["max_shift"] = _compcore.LSA_Data_max_shift_get
    __swig_setmethods__["X"] = _compcore.LSA_Data_X_set
    __swig_getmethods__["X"] = _compcore.LSA_Data_X_get
    __swig_setmethods__["Y"] = _compcore.LSA_Data_Y_set
    __swig_getmethods__["Y"] = _compcore.LSA_Data_Y_get
    def __init__(self, *args): 
        this = _compcore.new_LSA_Data(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _compcore.LSA_Data_assign(self, *args)
    __swig_destroy__ = _compcore.delete_LSA_Data
    __del__ = lambda self : None;
LSA_Data_swigregister = _compcore.LSA_Data_swigregister
LSA_Data_swigregister(LSA_Data)

class LSA_Result:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LSA_Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LSA_Result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["score"] = _compcore.LSA_Result_score_set
    __swig_getmethods__["score"] = _compcore.LSA_Result_score_get
    __swig_setmethods__["trace"] = _compcore.LSA_Result_trace_set
    __swig_getmethods__["trace"] = _compcore.LSA_Result_trace_get
    def __init__(self): 
        this = _compcore.new_LSA_Result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _compcore.delete_LSA_Result
    __del__ = lambda self : None;
LSA_Result_swigregister = _compcore.LSA_Result_swigregister
LSA_Result_swigregister(LSA_Result)


def DP_lsa(*args):
  return _compcore.DP_lsa(*args)
DP_lsa = _compcore.DP_lsa
# This file is compatible with both classic and new-style classes.


