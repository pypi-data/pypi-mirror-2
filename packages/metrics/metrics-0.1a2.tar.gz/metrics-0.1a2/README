The metrics software package was born out of my frustration about available Open Source metrics packages. There are plenty of them this would not be the problem. But each and every of them has a different focus. Most metrics packages have restrictions towards available metrics and supported languages. Some prominent samples are (CCCC, SLOCCount, PyMetrics, Eclipse-Metrics, Ohcount).

My problem with the metrics packages is that I am going to analyse huge source repositories like the Firefox code base or Apache code base. Those big guys usually are made out of different programming languages. C, C++, Java, JavaScript, Python to name a few. Because of the limited scope of the packages I tried to combine the output of multiple packages. But there are more problems. Each package has a different output format (no problem for me since I am capable of Monkey-Patching, Screen-Reading, XML-Mangling, and CSV-Magic). The real problem with the metrics output of different packages is that they are also incompatible! Who could imagine something like that, every metrics package has its own philosophy what a Line of Code might be. Honestly if you ask two language lawyers what a line of code might be you get at least five different answers. So lets create another one! Yeah!!

If you know me you are aware of the fact that I might be a package user, maybe a heavy user but never a package maintainer. You know I talk about using other peoples stuff, not writing my own stuff. For me on the other hand the only thing worse than maintaining a package is to use a commercial one. Having said this lets start coding.

Besides its little shortcomings I like PyMetrics a lot. PyMetrics was designed in a way easily extend it with lexers for other programming languages than Python and custom metrics. PyMetrics contains stuff that is already handled by Pylint and which does not apply to other programming languages which I will remove. At this stage I will focus only on SLOC and McCabe metrics and keep its extensibility. Target languages are C, C++, JavaScript, and Python. PyMetrics is missing a lot of testcases and I want to handle this problem as well.

One more thing on metrics. Compared to PyMetrics I changed the SLOC metric a lot. PyMetrics was criticised in the past for its SLOC metric. I simplified so something that I do understand as the common denominator for the metric packages mentioned above. This type of metric counts the lines but excludes empty lines and comments. This is sometimes referred to as the *source lines of code* (SLOC). In literature this is often also referred as physical lines of code.

Another thing I wanted to mention is that I borrowed the sample programming language files for the test cases from Ohcount.

For more information on Tools and the Hitchhikers Guide to Test Automation please visit:
http://www.testing-software.org/
