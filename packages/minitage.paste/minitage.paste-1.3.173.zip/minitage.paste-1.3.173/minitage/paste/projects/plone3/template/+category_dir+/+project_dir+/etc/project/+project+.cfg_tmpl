$hr
# Project specific settings
$hr

#if 'zeo' in $mode:
#set $zeocomment=''
#else
#set $zeocomment='#'
#end if
#if $with_ploneproduct_fss
#set $fsscomment=''
#else
#set $fsscomment='#'
#end if
#if $with_indexing_solr
#set $solrcomment=''
#else
#set $solrcomment='#'
#end if

#if $with_ploneproduct_ploneappblob
#set $blobcomment=''
#else
#set $blobcomment='#'
#end if

#if $with_no_zcml
#set $zcmlcomment='#'
#else
#set $zcmlcomment=''
#end if 
                                
[buildout]
sources-dir=\${buildout:directory}/src.mrdeveloper

# extra directories oto add to the python path
extra-paths=
# better to edit ./sources.cfg
auto-checkout +=

# auto tracked developement products
[sources]
# see http://pypi.python.org/pypi/mr.developer for documentation
# better to edit ./sources.cfg

# to integrate fancy stuff to your plone install, you can have a look to
# http://svn.plone.org/svn/plone/buildouts/plone-coredev/branches/4.0/experimental/
# where you can find sources section to grab back to your buildout (extend, or local download/edit)


[instance]
# attacking zopepy:eggs make instance be built after zopepy
# in any case thx to the buildout automatic parts sort.
extra-paths+=\${buildout:extra-paths}
eggs += \${buildout:eggs}
    Plone
#for $product in $additional_eggs:
#if product.startswith('#'):
$product
#else:
    ${product}
#end if
#end for

products =
    \${buildout:directory}/products
    \${productdistros:location}

zcml +=
#for $product in $plone_zcml:
#if product.startswith('#'):
${product}
#else:
${zcmlcomment}    ${product}
#end if
#end for

[kgs]
file=\${buildout:directory}/etc/${project}-kgs.cfg

[zopepy]
# Scripts generated filtering
scripts =
    zopepy
#zope2
    repozo
    zeoctl
    zeopack
    zeopasswd #slurp
#for $product in $plone_scripts:
#if product.startswith('#'):
${product}
#else:
    ${product}
#end if
#end for


extra-paths += \${instance:extra-paths}
#if $major < 4
    \${zope2:location}/lib/python
#end if
    \${buildout:directory}/parts/fakeproducts

# zope.testing testrunner support
[testenv]
INSTANCE_HOME=\${instance:location}
CONFIG_FILE=\${instance:location}/etc/zope.conf

# fake old zope2 products to let the testrunner work
[fakeproducts]
recipe=plone.recipe.command
update-command = \${fakeproducts:command}
command =
    rm -rf \${buildout:directory}/parts/fakeproducts/Products/;
    mkdir -pv \${buildout:directory}/parts/fakeproducts/Products/;
    touch  \${buildout:directory}/parts/fakeproducts/Products/__init__.py;
    for i in \$(echo "\${instance:products}");do for j in \$i/*;do if [ "\$j" != "\$i/" ] && [ -d \$j ];then ln -sfv \$j \${buildout:directory}/parts/fakeproducts/Products/\$(basename \$j);fi;done;done;

# This testrunner is a zc.recipe.testrunner like
# See http://pypi.python.org/pypi/zc.recipe.testrunner/
# It can do xml reports addon if you supply -x as a command line argument
# It is useful for generating reports for hudson or other contineous integration
[${sane_name}.test]
recipe = collective.xmltestreport
eggs = \${instance:eggs}
extra-paths = \${instance:extra-paths}
    \${zope2:location}/lib/python
    \${buildout:directory}/parts/fakeproducts
defaults = ['--exit-with-status', '--auto-color', '--auto-progress']
environment = testenv
extra-paths = \${zopepy:extra-paths}

# Plone site creation if no other plonesite preset
[plonesite]
# http://pypi.python.org/pypi/collective.recipe.plonesite/
recipe = collective.recipe.plonesite
site-id = \${plone:site}
site-replace=false
enabled=true
instance = instance
# products to autoinstall
products-initial=
# profils to autorun
profiles-initial=
#   ${sane_name}.policy:default
${zeocomment}zeoserver = zeoserver

# Plone site (re)creation
[newplonesite]
<= plonesite
site-replace=true

[get-datafs]
recipe = plone.recipe.command
update-command = \${get-datafs:command}
command =
     rsync -av --partial --progress               \${users:staging}@\${hosts:staging}:\${locations:staging}/backups/                \${buildout:directory}/var/backups/;
     rsync -av --partial --progress               \${users:staging}@\${hosts:staging}:\${locations:staging}/snapshotbackups/        \${buildout:directory}/var/snapshotbackups/;
${blobcomment}     rsync -av --partial --progress \${users:staging}@\${hosts:staging}:\${locations:staging}/blobstorage/            \${buildout:directory}/var/blobstorage/;
${fsscomment}     rsync -av --partial --progress  \${users:staging}@\${hosts:staging}:\${locations:staging}/fss_storage_global/     \${buildout:directory}/var/fss_storage_global/;
${fsscomment}     rsync -av --partial --progress  \${users:staging}@\${hosts:staging}:\${locations:staging}/fss_backup_global/      \${buildout:directory}/var/fss_backup_global/;
${fsscomment}     rsync -av --partial --progress  \${users:staging}@\${hosts:staging}:\${locations:staging}/fss_storage_${project}/ \${locations:fss-storage}/;
${fsscomment}     rsync -av --partial --progress  \${users:staging}@\${hosts:staging}:\${locations:staging}/fss_backup_${project}/  \${locations:fss-backup}/;
 


[cg.devmode]
recipe=minitage.recipe.scripts
eggs=\${instance:eggs}
    collective.generic.devmode
scripts=cg.devmode
mail = foo@localhost
extra-paths = \${instance:extra-paths}
    \${buildout:directory}/parts/fakeproducts

# vim:set ft=cfg:
