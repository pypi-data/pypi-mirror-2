$hr
# BASE  BUILDOUT
$hr

#if 'zeo' in $mode:
#set $zeocomment=''
#else
#set $zeocomment='#'
#end if
#if $with_ploneproduct_fss
#set $fsscomment=''
#else
#set $fsscomment='#'
#end if
#if $with_indexing_solr
#set $solrcomment=''
#else
#set $solrcomment='#'
#end if
#if $with_ploneproduct_sgdcg
#set $sgdgcomment=''
#else
#set $sgdgcomment='#'
#end if
#if $with_deliverance_support
#set $delicomment=''
#else
#set $delicomment='#'
#end if 

[buildout]
timeout=3
extensions = buildout.minitagificator mr.developer
extends-cache = \${buildout:directory}/etc/cache
# this allow you to run buildout on offline mode and to use only the downloaded plonev3.versions.cfg
extends -= $versions_url
           http://download.zope.org/Zope2/index/2.12.3/versions.cfg
extends = #slurp
#if $major > 3:
    plone/zope2.versions.cfg#slurp
#end if
    plone/plone${major}.versions.cfg#slurp
    plone/plone${major}.sources.cfg#slurp
    project/patches.cfg#slurp
    sys/settings.cfg#slurp
#if $with_indexing_solr:
    backends/solr.cfg#slurp
#end if
#if $with_ploneproduct_fss:
    backends/fss.cfg#slurp
#end if
#if $with_ploneproduct_ploneappblob:
    backends/blobstorage.cfg#slurp
#end if 
#if $with_experimental:
    plone/experimental.cfg#slurp
#end if
#if $with_ploneproduct_sgdcg:
    project/newsletter.cfg#slurp
#end if
    project/versions.cfg#slurp
    project/sources.cfg#slurp
    project/${project}-kgs.cfg #slurp
    project/${project}.cfg#slurp
    apache/apache.cfg#slurp
    hudson/${project}/hudson.cfg#slurp
    deliverance/deliverance.cfg#slurp

#if not $with_deliverance_support
# to enable deliverance support, before uncommenting things there & there, think to add to those extends:
#    deliverance/deliverance.cfg
#
#end if


parts =
#if $major < 4:
    zope2
#end if
    productdistros
    instance
    zopepy
    backup
${sgdgcomment}    instance-newsletter
${fsscomment}${sgdgcomment}    fss-newsletter
${fsscomment}    fss
${solrcomment}    solr
${solrcomment}    solrinstance
    mkdirs
    omelette
    fakeproducts
    ${sane_name}.test
${zeocomment}    zeoserver
${delicomment}    deliverance
${delicomment}    deliverance_ini
${delicomment}    deliverance_prod_ini
${delicomment}    deliverance_rules
${delicomment}    apache_deliverance_vhost
${delicomment}    deliverance.test
    apache_vhost
# hudson integration
    ${sane_name}_hudson_env
    ${sane_name}_hudson_job
    ${sane_name}_hudson_deploy
    ${sane_name}_hudson_chmod

find-links = \${groups:find-links}
eggs += zopelib
develop += \${buildout:directory}/src.mrdeveloper/zopelib
versions = versions
# see http://pypi.python.org/pypi/mr.developer for documentation
# auto tracked developement products, see project/sources.cfg
sources = sources
auto-checkout +=
# Add additional eggs here
eggs =

# Reference any eggs you are developing here, one per line
# e.g.: develop = src/my.package
develop =

# auto tracked developement products, see project/sources.cfg
[sources]

#if $major < 4
# Zope operating instances are created elsewhere.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2install
[zope2]
recipe = plone.recipe.zope2install
url = \${versions:zope2-url}
# fake eggs are required to satisfy Zope dependencies while
# zope is not yet eggified.
fake-zope-eggs = true
additional-fake-eggs +=
    ZConfig
    pytz
    zope.testing
skip-fake-eggs +=
    ZODB3
#end if

# eggs & scripts installation
[zopepy]
recipe = minitage.recipe.scripts
# Important for you to note the installation of the ZODB as an egg . We will not
# use the zodb code from the zope source distribution !!!!!!!
#if not $inside_minitage:
urls=http://download.zope.org/distribution/PILwoTk-1.1.6.4.tar.gz
#end if
eggs = \${instance:eggs}
interpreter = zopepy
env-file=\${buildout:directory}/etc/${project}.env

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls =
nested-packages =
version-suffix-packages =

# here is defined the Zope instance running your plone site
# beware that zopepy part must run before isntance in order to have the right version
# pinned for relstorage
[instance]
order=\${zopepy:recipe}
recipe = plone.recipe.zope2instance
#if $major < 4
zope2-location = \${zope2:location}
#end if
http-address=\${hosts:instance}:\${ports:instance}
user = \${zope:user}:\${zope:password}
session-timeout-minutes = \${cache:session-timeout-minutes}
verbose-security=\${zope:verbose-security}
debug-mode=\${zope:debug-mode}
event-log-level=\${zope:event-log-level}
z2-log-level=\${zope:z2-log-level}
environment-vars =
    zope_i18n_compile_mo_files = true


# KGS generation
[kgs]
recipe=minitage.recipe.printer
quiet=
eggs=\${instance:eggs}

#if not $inside_minitage:
#[openldap]
#recipe = minitage.recipe.cmmi
#url = ftp://gd.tuwien.ac.at/infosys/network/OpenLDAP/openldap-stable/openldap-stable-20090411.tgz
#
#[python-ldap]
#recipe = minitage.recipe.egg
#egg = python-ldap
#include-dirs  = \${openldap:location}/include
#library-dirs  = \${openldap:location}/lib
#end if

[backup]
recipe = collective.recipe.backup

# Traditionnal Plone products to install
[productdistros]
recipe = plone.recipe.distros
urls=\${groups:products-urls}
version-suffix-packages = \${groups:version-suffix-packages}
nested-packages = \${groups:nested-packages}

[omelette]
recipe = collective.recipe.omelette
eggs = \${instance:eggs}
products = \${instance:products}
packages = \${zope2:location}/lib/python ./

# Command below is important
# if not, fss tests or tests using fss in their configuration will fail
[mkdirs]
recipe = plone.recipe.command
update-command = \${mkdirs:command}
command +=


\# vim: set ft=cfg:
