# Plone development buildout
# It will install your plone in debug mode and a bunch of debug tools.
# Launch it:
# bin/buildout -c buildout-dev.cfg
# or minimerge -NuUvR ${project}-light
# Look at the base buildout: ./etc/base.cfg for other details of your plone installation

#if $with_tool_i18ndude:
#set $i18ncomment=''
#else
#set $i18ncomment='#'
#end if  
#if 'zeo' in $mode:
#set $zeocomment=''
#else
#set $zeocomment='#'
#end if
#if $with_ploneproduct_fss
#set $fsscomment=''
#else
#set $fsscomment='#'
#end if
#if $with_indexing_solr
#set $solrcomment=''
#else
#set $solrcomment='#'
#end if
#if $with_ploneproduct_sgdcg
#set $sgdgcomment=''
#else
#set $sgdgcomment='#'
#end if 

# We want the production buildout + the debug bits.
[buildout]
extends=etc/base.cfg etc/backends/${devmode}.cfg
parts+= omelette
        ipzope
        cg.devmode
${i18ncomment}    i18ndude

[hosts]
deliverance-backend=\${hosts:instance}

[ports]
deliverance-backend=\${ports:instance}

 
[versions]
ctypes=1.0.2
#if $major >3:
plone.reload = 1.3
#end if

[instance]
verbose-security = on
debug-mode=on
#if $linux:
#zcml+=collective.autorestart
#end if
#
eggs+= plone.reload
    collective.dist
    collective.releaser
    docutils
    gprof2dot
    Products.Clouseau
    Products.DocFinderTab
    Products.Gloworm
# Uncomment/Activate only if you want
#    Products.PDBDebugMode
    Products.ZopeProfiler
    Sphinx
    zest.releaser
    ZopeSkel
#if $linux:
# plone auto reloading facility relying on inotify.
# Desactivated by default because it can lead to bugs when you
# launch your instance in foreground, there are cases where
# you can't stop it with a  KeyboardInterrupt,
# you must kill -SIGKILL :)
# If you reactivate it, think to add also the zcml slug in the
# [instance] part
#    ctypes
#    collective.autorestart
#end if


[zopepy]
scripts += project_deploy
    project_diff
    project_eggs
    project_md5
    project_release
    package_svn_prepare
    release_eggs
#Sphinx
    sphinx-build
    sphinx-quickstart
    sphinx-autogen
#zest.releaser
    fullrelease
    postrelease
    lasttagdiff
    prerelease
    release
    longtest
#docutils
    st2html.py
    rst2latex.py
    rst2newlatex.py
    rst2pseudoxml.py
    rst2s5.py
    rst2xml.py
    rstpep2html.p


# Aggregate all python packages on one directory to have all in one directory
# its really great after to have it for  your tags generator or your IDE
# see parts/omelette after running this part to understand :)
[omelette]
recipe = collective.recipe.omelette
eggs = \${instance:eggs}
products = \${productdistros:location}
packages =\${instance:extra-paths}

# a IPython Shell for interactive use with zope running.
# you also need to put
# https://svn.plone.org/svn/collective/dotipython/trunk/ipy_profile_zope.py
# to your \$HOME/.ipython directory for the following to work.
[ipzope]
recipe = minitage.recipe.scripts
# make the completyion work
ipython-patches=\${zopepy:ipython-patches}
ipython-patch-options=\${zopepy:ipython-patch-options}
eggs = ipython
        \${instance:eggs}
initialization =
        import sys, os
#if $major < 4:
        os.environ["SOFTWARE_HOME"] = "\${zope2:location}/lib/python"
#end if
        os.environ["INSTANCE_HOME"] = "\${instance:location}"
        sys.argv[1:1] = "-p zope".split()
extra-paths = \${zopepy:extra-paths}
scripts = ipython=ipzope

# not compatible with latest sphinx !
# be aware not to have it on your site packages before enabling it !
# To generate sphinx documentation, just run:
# bin/buildout -vvvvvv -C dev.cfg sphinxbuilder
# Please have a look on http://pypi.python.org/pypi/collective.recipe.sphinxbuilder/
# To see how to use it.
#[sphinxbuilder]
#recipe = collective.recipe.sphinxbuilder
#project = $project
#suffix = .rst
#author = You
#dot = _

[devmode]
recipe=minitage.recipe.scripts
eggs=\${instance:eggs}
    collective.generic.devmode
scripts=cg.devmode=devmode
mail = foo@localhost
extra-paths = \${instance:extra-paths}
    \${buildout:directory}/parts/fakeproducts
initialization=
    import sys
    sys.argv[1:] = ['-m', '\${devmode:mail}', '-p', '--password', '\${zope:password}', '-l', '\${plone:site}', '-u', '\${zope:user}']

[goto-devmode]
recipe = plone.recipe.command
update-command = \${goto-datafs:command}
command =
${zeocomment}    \${buildout:directory}/bin/zeoserver stop;
    \${get-datafs:command}
    \${buildout:directory}/bin/snapshotrestore;
${zeocomment}    \${buildout:directory}/bin/zeoserver start;
    \${buildout:directory}/bin/devmode;


[i18ndude]
recipe=minitage.recipe.scripts
eggs=i18ndude
scripts=i18ndude

# vim:set ft=cfg:
