NOTE: This django-app was created to make it easier for myself to include
extra functionallety in some of my django projects. It contains a very small
set of widgets (currently only one), and what widgets are included in the
future are currently only determined by my own personal needs. Do not hesitate
to come with suggestions though.


Installation:
  Using pip:
  - pip -e git://github.com/smyrman/django-jquery-widgets.git#egg=django-jquery-widgets

  Usin pip and virtualenv:
  - pip -E path/to/env -e git://github.com/smyrman/django-jquery-widgets.git#egg=django-jquery-widgets

  The normal download and '$ python setup.py install' procedure will also work.

  Then, in your django project:
    - Add 'jquery_widgets' to your settings.INSTALLED_APPS

    - Add This line to your urlcinfig (you may replace 'jqw' with whatever you like):
      url(r'^jqw/', include('jquery_widgets.urls', namespace='jquery-widgets')),


    - Issue 'python manage.py syncdb':

      If you use a Unix flavoured OS, this will create a symlink to
      '<path>/jquery_widgets/media', in your MEDIA_ROOT.  The symlink will be
      named: 'jquery_widgets'.

    - Include jQuery:

      jQuery is included with Django's contrib.admin app since Django version
      1.2. If you use a version of Django older them 1.2 (or if you do not use
      the django admin), make sure a recent version of jQury is available in
      your MEDIA_ROOT as 'js/jquery.min.js' Alternativly, you can configure
      JQUERY_URL in your settings.


Included widgets:
  ForeignKeySearchInput - An ajax auto-complete widget that replaces
    the normal select input.

Included for the admin:
  ExtendedModelAdmin - An extension of django.admin.ModelAdin that make it easy
    to use the included widgets in the admin view.

    Example usage:
    from jquery_widgets.admin import ExtendedModelAdmin
    from myapp.models import MyModel

    class MyModelAdmin(ExtendedModelAdmin):
        ...
        # Use the ForeignKeySearchInput widget for the field 'user'. Let the
        # search_fields be 'username' and 'email':
        related_search_fields = {'user': ('username', 'email'),}

