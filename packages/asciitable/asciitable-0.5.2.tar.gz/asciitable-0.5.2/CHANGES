0.5.2
=====
Enhance CDS reader support for missing values and fix a bug in NumpyOutputter
related to masking.

CDS reader
----------
Cds tables can contain missing values, realized as empty stings or with special
values. These special values are then given in the first few characters of the
column description in the form ?=value.  For columns with float values (type E
and F) asciitable now implements an automated setting for fill_values, that masks
these spacial values in a masked array. Nothing has changed for ascii or
integer columns as these do not have a natural value which can be used to
replace the masked or missing values in a transparent way.

Bug fix
-------
Fix a bug in NumpyOutputter if a mask is defined by no value is masked.
 
0.5.1
=====
This release is primarily an update to the CDS format reader with code
contributed by Prasanth Haridas Nair.  It now can handle separate ReadMe and
data files.  The ReadMe file specifies the column information for one or more
associated data files.  For example:

  >>> readme = "t/vizier/ReadMe"
  >>> r = asciitable.Cds(readme)
  >>> table = r.read("t/vizier/table1.dat")
  >>> # table5.dat has the same ReadMe file
  >>> table = r.read("t/vizier/table5.dat")

In addition a minor bug was fixed where blank table lines were not
being properly ignored.

0.5.0
=====
This release features a new function to guess the table format from the
supported formats within asciitable.  This function is now called by default
within asciitable.read().  In addition:

- Added support for whitespace (tab or space) delimited tables by setting
  the delimiter parameter to "\s".
- Improved support for RDB tables by parsing the second line which specifies
  column type and (optionally) width.  These values are written out if
  available when writing an RDB table.
- More rigorous checking of format compatibility for several table formats.

0.4.0
=====
Add capability to handle bad or missing values in the input table.  This is
done with a new fill_values parameter that specifies replacement of
particular bad or missing values with new values.  When used with NumPy
the default output will be a NumPy masked array.

Contributed by Moritz Guenther

0.3.1
=====
This release features the new capability to write ASCII tables using the same
basic infrastructure and API as for reading.  Other updates include:

- Python 3 compatibility
- Significant documentation updates
- Improved test coverage
- New Reader class to read in-memory tables

0.2.5
======
Primarily a documentation update, including much more detail on the parameters
for the read() function plus a bit more for other advanced features.  There are
a couple of minor code fixes / updates:

- Gracefully read tables that have a header but no data lines.
- Update the Tab reader so all data value spaces are preserved
  (including leading/trailing)

0.2.2
=====
Add IPAC reader and reader comment_lines attribute plus doc updates.

- Add IPAC format reader

- Add 'comment_lines' attribute to BaseReader class to return all lines
  matching the header comment character.

- Made the table lines retrieved by the Inputter available as the 
  Reader object 'lines' attribute in the BaseReader.read() function.

- Updates and reorganization of doc-strings and documentation

- Removed the non-working code related to mask support (try again later)

- Added 'meta' and 'keywords' attributes to BaseReader and added a Keywords
  class.  This is a placeholder for future support of table metadata.

0.2.1
=====
Add support for reading CDS format files (header + data in one file)

0.2.0
=====
Updates to the way lines are processed and comments handled for support of new formats.

- Splitter process_line and process_val and Inputter process_line are now object methods.
  This allows for settable parameters that control processing (e.g. continuation_char).

- Add BaseHeader and BaseData process_line methods that do comment and blank-line 
  filtering as needed.  Splitter process_line should no longer be used for this purpose.

- Add support for formats:
  - CommentedHeader (column def line begins with comment char)
  - DAOphot
  - Files with continuation lines via ContinuationLinesInputter class

- Add 'Inputter' as an option to get_reader() and read()
