# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.5.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_KappaCUDA', [dirname(__file__)])
        except ImportError:
            import _KappaCUDA
            return _KappaCUDA
        if fp is not None:
            try:
                _mod = imp.load_module('_KappaCUDA', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _KappaCUDA = swig_import_helper()
    del swig_import_helper
else:
    import _KappaCUDA
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class IOCancel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOCancel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOCancel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _KappaCUDA.new_IOCancel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_IOCancel
    __del__ = lambda self : None;
    def assign(self, *args): return _KappaCUDA.IOCancel_assign(self, *args)
    def value(self): return _KappaCUDA.IOCancel_value(self)
    def cast(self): return _KappaCUDA.IOCancel_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _KappaCUDA.IOCancel_frompointer
    if _newclass:frompointer = staticmethod(_KappaCUDA.IOCancel_frompointer)
IOCancel_swigregister = _KappaCUDA.IOCancel_swigregister
IOCancel_swigregister(IOCancel)

def IOCancel_frompointer(*args):
  return _KappaCUDA.IOCancel_frompointer(*args)
IOCancel_frompointer = _KappaCUDA.IOCancel_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _KappaCUDA.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _KappaCUDA.intArray___setitem__(self, *args)
    def cast(self): return _KappaCUDA.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _KappaCUDA.intArray_frompointer
    if _newclass:frompointer = staticmethod(_KappaCUDA.intArray_frompointer)
intArray_swigregister = _KappaCUDA.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _KappaCUDA.intArray_frompointer(*args)
intArray_frompointer = _KappaCUDA.intArray_frompointer

class longArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, longArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, longArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_longArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_longArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _KappaCUDA.longArray___getitem__(self, *args)
    def __setitem__(self, *args): return _KappaCUDA.longArray___setitem__(self, *args)
    def cast(self): return _KappaCUDA.longArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _KappaCUDA.longArray_frompointer
    if _newclass:frompointer = staticmethod(_KappaCUDA.longArray_frompointer)
longArray_swigregister = _KappaCUDA.longArray_swigregister
longArray_swigregister(longArray)

def longArray_frompointer(*args):
  return _KappaCUDA.longArray_frompointer(*args)
longArray_frompointer = _KappaCUDA.longArray_frompointer

class unsignedArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unsignedArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unsignedArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_unsignedArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_unsignedArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _KappaCUDA.unsignedArray___getitem__(self, *args)
    def __setitem__(self, *args): return _KappaCUDA.unsignedArray___setitem__(self, *args)
    def cast(self): return _KappaCUDA.unsignedArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _KappaCUDA.unsignedArray_frompointer
    if _newclass:frompointer = staticmethod(_KappaCUDA.unsignedArray_frompointer)
unsignedArray_swigregister = _KappaCUDA.unsignedArray_swigregister
unsignedArray_swigregister(unsignedArray)

def unsignedArray_frompointer(*args):
  return _KappaCUDA.unsignedArray_frompointer(*args)
unsignedArray_frompointer = _KappaCUDA.unsignedArray_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _KappaCUDA.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _KappaCUDA.floatArray___setitem__(self, *args)
    def cast(self): return _KappaCUDA.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _KappaCUDA.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_KappaCUDA.floatArray_frompointer)
floatArray_swigregister = _KappaCUDA.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _KappaCUDA.floatArray_frompointer(*args)
floatArray_frompointer = _KappaCUDA.floatArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _KappaCUDA.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _KappaCUDA.doubleArray___setitem__(self, *args)
    def cast(self): return _KappaCUDA.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _KappaCUDA.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_KappaCUDA.doubleArray_frompointer)
doubleArray_swigregister = _KappaCUDA.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _KappaCUDA.doubleArray_frompointer(*args)
doubleArray_frompointer = _KappaCUDA.doubleArray_frompointer


def PVoidToPInt(*args):
  return _KappaCUDA.PVoidToPInt(*args)
PVoidToPInt = _KappaCUDA.PVoidToPInt

def PVoidToPUnsigned(*args):
  return _KappaCUDA.PVoidToPUnsigned(*args)
PVoidToPUnsigned = _KappaCUDA.PVoidToPUnsigned

def PVoidToPLong(*args):
  return _KappaCUDA.PVoidToPLong(*args)
PVoidToPLong = _KappaCUDA.PVoidToPLong

def PVoidToPFloat(*args):
  return _KappaCUDA.PVoidToPFloat(*args)
PVoidToPFloat = _KappaCUDA.PVoidToPFloat

def PVoidToPDouble(*args):
  return _KappaCUDA.PVoidToPDouble(*args)
PVoidToPDouble = _KappaCUDA.PVoidToPDouble
USE_OPENGL = _KappaCUDA.USE_OPENGL
KAPPA_DLL = _KappaCUDA.KAPPA_DLL
DEFAULT = _KappaCUDA.DEFAULT
NORMAL = _KappaCUDA.NORMAL
ERRORCHECK = _KappaCUDA.ERRORCHECK
RECURSIVE = _KappaCUDA.RECURSIVE
class Lock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_Lock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_Lock
    __del__ = lambda self : None;
    def IsLocked(self): return _KappaCUDA.Lock_IsLocked(self)
    def Access(self, milliseconds = 0): return _KappaCUDA.Lock_Access(self, milliseconds)
    def Wait(self, milliseconds = 0): return _KappaCUDA.Lock_Wait(self, milliseconds)
    def Signal(self): return _KappaCUDA.Lock_Signal(self)
    def Relinquish(self): return _KappaCUDA.Lock_Relinquish(self)
    def Try(self): return _KappaCUDA.Lock_Try(self)
Lock_swigregister = _KappaCUDA.Lock_swigregister
Lock_swigregister(Lock)

MAX_GPUS = _KappaCUDA.MAX_GPUS
PROCESSES_INC = _KappaCUDA.PROCESSES_INC
class Kappa(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kappa, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Kappa, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Kappa
    __del__ = lambda self : None;
    def Good(self): return _KappaCUDA.Kappa_Good(self)
    def SetCUDA64Bit(self): return _KappaCUDA.Kappa_SetCUDA64Bit(self)
    def GetProcess(self, *args): return _KappaCUDA.Kappa_GetProcess(self, *args)
    def HasProcess(self, device_number = 0): return _KappaCUDA.Kappa_HasProcess(self, device_number)
    def RemoveProcess(self, *args): return _KappaCUDA.Kappa_RemoveProcess(self, *args)
    def Count(self): return _KappaCUDA.Kappa_Count(self)
    def SetTrace(self, value = True): return _KappaCUDA.Kappa_SetTrace(self, value)
    def Trace(self): return _KappaCUDA.Kappa_Trace(self)
    def GetExceptionHandler(self, *args): return _KappaCUDA.Kappa_GetExceptionHandler(self, *args)
    def SetExceptionHandler(self, *args): return _KappaCUDA.Kappa_SetExceptionHandler(self, *args)
    def CudaInitFlags(self): return _KappaCUDA.Kappa_CudaInitFlags(self)
    def Start(self, *args): return _KappaCUDA.Kappa_Start(self, *args)
    def WaitForAll(self): return _KappaCUDA.Kappa_WaitForAll(self)
    def ThreadID(self, device_number = 0): return _KappaCUDA.Kappa_ThreadID(self, device_number)
    def GetCommandQueue(self, device_number = 0, q_number = 0): return _KappaCUDA.Kappa_GetCommandQueue(self, device_number, q_number)
    def Result(self): return _KappaCUDA.Kappa_Result(self)
    def BasePath(self): return _KappaCUDA.Kappa_BasePath(self)
    def GPU(self): return _KappaCUDA.Kappa_GPU(self)
    def Config(self): return _KappaCUDA.Kappa_Config(self)
    def CUDAConfig(self): return _KappaCUDA.Kappa_CUDAConfig(self)
    def GetEvaluator(self): return _KappaCUDA.Kappa_GetEvaluator(self)
    def Registered(self): return _KappaCUDA.Kappa_Registered(self)
    def NewDBDriver(self, dbd_id = "", dbd_module = "", dbd_function = ""): return _KappaCUDA.Kappa_NewDBDriver(self, dbd_id, dbd_module, dbd_function)
    __swig_getmethods__["StartThread"] = lambda x: _KappaCUDA.Kappa_StartThread
    if _newclass:StartThread = staticmethod(_KappaCUDA.Kappa_StartThread)
    __swig_getmethods__["WaitForThread"] = lambda x: _KappaCUDA.Kappa_WaitForThread
    if _newclass:WaitForThread = staticmethod(_KappaCUDA.Kappa_WaitForThread)
    __swig_getmethods__["CancelThread"] = lambda x: _KappaCUDA.Kappa_CancelThread
    if _newclass:CancelThread = staticmethod(_KappaCUDA.Kappa_CancelThread)
    __swig_getmethods__["Instance"] = lambda x: _KappaCUDA.Kappa_Instance
    if _newclass:Instance = staticmethod(_KappaCUDA.Kappa_Instance)
Kappa_swigregister = _KappaCUDA.Kappa_swigregister
Kappa_swigregister(Kappa)

def Kappa_StartThread(*args):
  return _KappaCUDA.Kappa_StartThread(*args)
Kappa_StartThread = _KappaCUDA.Kappa_StartThread

def Kappa_WaitForThread(*args):
  return _KappaCUDA.Kappa_WaitForThread(*args)
Kappa_WaitForThread = _KappaCUDA.Kappa_WaitForThread

def Kappa_CancelThread(*args):
  return _KappaCUDA.Kappa_CancelThread(*args)
Kappa_CancelThread = _KappaCUDA.Kappa_CancelThread

def Kappa_Instance(*args):
  return _KappaCUDA.Kappa_Instance(*args)
Kappa_Instance = _KappaCUDA.Kappa_Instance

class KappaConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KappaConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KappaConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_KappaConfig
    __del__ = lambda self : None;
    def SetAdditionalConfig(self, *args): return _KappaCUDA.KappaConfig_SetAdditionalConfig(self, *args)
    def AsString(self, *args): return _KappaCUDA.KappaConfig_AsString(self, *args)
    def AsBool(self, *args): return _KappaCUDA.KappaConfig_AsBool(self, *args)
KappaConfig_swigregister = _KappaCUDA.KappaConfig_swigregister
KappaConfig_swigregister(KappaConfig)

Direction_In = _KappaCUDA.Direction_In
Direction_Out = _KappaCUDA.Direction_Out
Direction_IO = _KappaCUDA.Direction_IO
Direction_TexRef = _KappaCUDA.Direction_TexRef
Direction_None = _KappaCUDA.Direction_None
Direction_Cancel = _KappaCUDA.Direction_Cancel
Direction_Fail = _KappaCUDA.Direction_Fail
class ExceptionHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExceptionHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExceptionHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _KappaCUDA.new_ExceptionHandler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_ExceptionHandler
    __del__ = lambda self : None;
    def Catch(self, *args): return _KappaCUDA.ExceptionHandler_Catch(self, *args)
ExceptionHandler_swigregister = _KappaCUDA.ExceptionHandler_swigregister
ExceptionHandler_swigregister(ExceptionHandler)

class cudaGPU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cudaGPU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cudaGPU, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _KappaCUDA.new_cudaGPU()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_cudaGPU
    __del__ = lambda self : None;
    def Init(self): return _KappaCUDA.cudaGPU_Init(self)
    def printall(self): return _KappaCUDA.cudaGPU_printall(self)
    def Count(self): return _KappaCUDA.cudaGPU_Count(self)
    def Name(self, device = 0): return _KappaCUDA.cudaGPU_Name(self, device)
    def Major(self, device = 0): return _KappaCUDA.cudaGPU_Major(self, device)
    def Minor(self, device = 0): return _KappaCUDA.cudaGPU_Minor(self, device)
    def GlobalMemory(self, device = 0): return _KappaCUDA.cudaGPU_GlobalMemory(self, device)
    def ConstantMemory(self, device = 0): return _KappaCUDA.cudaGPU_ConstantMemory(self, device)
    def SharedMemoryPerBlock(self, device = 0): return _KappaCUDA.cudaGPU_SharedMemoryPerBlock(self, device)
    def RegistersPerBlock(self, device = 0): return _KappaCUDA.cudaGPU_RegistersPerBlock(self, device)
    def WarpSize(self, device = 0): return _KappaCUDA.cudaGPU_WarpSize(self, device)
    def MaxThreadsPerBlock(self, device = 0): return _KappaCUDA.cudaGPU_MaxThreadsPerBlock(self, device)
    def MaxThreads(self, device = 0): return _KappaCUDA.cudaGPU_MaxThreads(self, device)
    def MaxGridSize(self, device = 0): return _KappaCUDA.cudaGPU_MaxGridSize(self, device)
    def MemoryPitch(self, device = 0): return _KappaCUDA.cudaGPU_MemoryPitch(self, device)
    def TextureAlignment(self, device = 0): return _KappaCUDA.cudaGPU_TextureAlignment(self, device)
    def ClockRate(self, device = 0): return _KappaCUDA.cudaGPU_ClockRate(self, device)
cudaGPU_swigregister = _KappaCUDA.cudaGPU_swigregister
cudaGPU_swigregister(cudaGPU)

ROUTINE_LOOP_NAMESPACE = _KappaCUDA.ROUTINE_LOOP_NAMESPACE
ROUTINE_LOOP_NAME = _KappaCUDA.ROUTINE_LOOP_NAME
class Process(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Process, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Process, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Process
    __del__ = lambda self : None;
    def ProcessKeywordConfig(self): return _KappaCUDA.Process_ProcessKeywordConfig(self)
    def InitCUDAConfig(self): return _KappaCUDA.Process_InitCUDAConfig(self)
    def SetExceptionHandler(self, *args): return _KappaCUDA.Process_SetExceptionHandler(self, *args)
    def RememberAnonymous(self): return _KappaCUDA.Process_RememberAnonymous(self)
    def DoNotExecute(self): return _KappaCUDA.Process_DoNotExecute(self)
    def SetTrace(self, value = True): return _KappaCUDA.Process_SetTrace(self, value)
    def Trace(self): return _KappaCUDA.Process_Trace(self)
    def SetCommandTrace(self, value = True): return _KappaCUDA.Process_SetCommandTrace(self, value)
    def CommandTrace(self): return _KappaCUDA.Process_CommandTrace(self)
    def SetQueueResults(self, value = True): return _KappaCUDA.Process_SetQueueResults(self, value)
    def ExecuteFile(self, *args): return _KappaCUDA.Process_ExecuteFile(self, *args)
    def ExecuteString(self, *args): return _KappaCUDA.Process_ExecuteString(self, *args)
    def GetNamespace(self): return _KappaCUDA.Process_GetNamespace(self)
    def GetIOUserData(self, *args): return _KappaCUDA.Process_GetIOUserData(self, *args)
    def AddKeywordKeyword(self): return _KappaCUDA.Process_AddKeywordKeyword(self)
    def RegisterKeywordCommand(self, *args): return _KappaCUDA.Process_RegisterKeywordCommand(self, *args)
    def RegisterKeywordCommandData(self, *args): return _KappaCUDA.Process_RegisterKeywordCommandData(self, *args)
    def NewKeywordCommand(self, *args): return _KappaCUDA.Process_NewKeywordCommand(self, *args)
    def OutputRoutines(self, *args): return _KappaCUDA.Process_OutputRoutines(self, *args)
    def OutputRoutine(self, *args): return _KappaCUDA.Process_OutputRoutine(self, *args)
    def LoadRoutine(self, *args): return _KappaCUDA.Process_LoadRoutine(self, *args)
    def AccessResource(self): return _KappaCUDA.Process_AccessResource(self)
    def RelinquishResource(self): return _KappaCUDA.Process_RelinquishResource(self)
    def SetCurrentContextPath(self, *args): return _KappaCUDA.Process_SetCurrentContextPath(self, *args)
    def GetCurrentContextPath(self): return _KappaCUDA.Process_GetCurrentContextPath(self)
    def ExecuteRoutine(self, *args): return _KappaCUDA.Process_ExecuteRoutine(self, *args)
    def ExecuteFunction(self, *args): return _KappaCUDA.Process_ExecuteFunction(self, *args)
    def ProperRoutineType(self, *args): return _KappaCUDA.Process_ProperRoutineType(self, *args)
    def GetResult(self): return _KappaCUDA.Process_GetResult(self)
    def ExpandRoutine(self, *args): return _KappaCUDA.Process_ExpandRoutine(self, *args)
    def DBDriver(self, *args): return _KappaCUDA.Process_DBDriver(self, *args)
    def FreeDBDriver(self, *args): return _KappaCUDA.Process_FreeDBDriver(self, *args)
    def SetLabelRanges(self, *args): return _KappaCUDA.Process_SetLabelRanges(self, *args)
    def ClearLabelRanges(self, *args): return _KappaCUDA.Process_ClearLabelRanges(self, *args)
    def RegisterIOCallback(self, *args): return _KappaCUDA.Process_RegisterIOCallback(self, *args)
Process_swigregister = _KappaCUDA.Process_swigregister
Process_swigregister(Process)

class Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Result, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_Result(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_Result
    __del__ = lambda self : None;
    def Status(self): return _KappaCUDA.Result_Status(self)
    def Type(self): return _KappaCUDA.Result_Type(self)
    def Name(self): return _KappaCUDA.Result_Name(self)
Result_swigregister = _KappaCUDA.Result_swigregister
Result_swigregister(Result)

class Namespace(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Namespace, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Namespace, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Namespace
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _KappaCUDA.new_Namespace(*args)
        try: self.this.append(this)
        except: self.this = this
    def Add(self, *args): return _KappaCUDA.Namespace_Add(self, *args)
    def Get(self, *args): return _KappaCUDA.Namespace_Get(self, *args)
    def GetKeys(self): return _KappaCUDA.Namespace_GetKeys(self)
    def Remove(self, *args): return _KappaCUDA.Namespace_Remove(self, *args)
Namespace_swigregister = _KappaCUDA.Namespace_swigregister
Namespace_swigregister(Namespace)

class Values(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Values, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Values, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Values
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _KappaCUDA.new_Values(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetKeys(self): return _KappaCUDA.Values_GetKeys(self)
    def GetValue(self, *args): return _KappaCUDA.Values_GetValue(self, *args)
    def Remove(self, *args): return _KappaCUDA.Values_Remove(self, *args)
    def Size(self): return _KappaCUDA.Values_Size(self)
    def AddUnidentified(self, *args): return _KappaCUDA.Values_AddUnidentified(self, *args)
    def AddVariable(self, *args): return _KappaCUDA.Values_AddVariable(self, *args)
    def AddIndices(self, *args): return _KappaCUDA.Values_AddIndices(self, *args)
    def Add(self, *args): return _KappaCUDA.Values_Add(self, *args)
    def GetUint8(self, *args): return _KappaCUDA.Values_GetUint8(self, *args)
    def GetUint16(self, *args): return _KappaCUDA.Values_GetUint16(self, *args)
    def GetUint32(self, *args): return _KappaCUDA.Values_GetUint32(self, *args)
    def GetFloat(self, *args): return _KappaCUDA.Values_GetFloat(self, *args)
    def GetBool(self, *args): return _KappaCUDA.Values_GetBool(self, *args)
    def GetUint64(self, *args): return _KappaCUDA.Values_GetUint64(self, *args)
    def GetDouble(self, *args): return _KappaCUDA.Values_GetDouble(self, *args)
    def GetPointer(self, *args): return _KappaCUDA.Values_GetPointer(self, *args)
    def GetString(self, *args): return _KappaCUDA.Values_GetString(self, *args)
    def GetVariable(self, *args): return _KappaCUDA.Values_GetVariable(self, *args)
    def GetNamespace_Value(self, *args): return _KappaCUDA.Values_GetNamespace_Value(self, *args)
    def GetIndices(self, *args): return _KappaCUDA.Values_GetIndices(self, *args)
Values_swigregister = _KappaCUDA.Values_swigregister
Values_swigregister(Values)

class Value(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Value
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _KappaCUDA.new_Value(*args)
        try: self.this.append(this)
        except: self.this = this
    def Type(self): return _KappaCUDA.Value_Type(self)
    def Union(self): return _KappaCUDA.Value_Union(self)
    def SetStringType(self, *args): return _KappaCUDA.Value_SetStringType(self, *args)
    def CopyValue(self, *args): return _KappaCUDA.Value_CopyValue(self, *args)
    def Free(self): return _KappaCUDA.Value_Free(self)
    def Set(self, *args): return _KappaCUDA.Value_Set(self, *args)
    def Prepare(self, *args): return _KappaCUDA.Value_Prepare(self, *args)
    def Resolve(self): return _KappaCUDA.Value_Resolve(self)
    def Get(self, *args): return _KappaCUDA.Value_Get(self, *args)
    def Size(self): return _KappaCUDA.Value_Size(self)
    def GetExpression(self): return _KappaCUDA.Value_GetExpression(self)
    def Good(self): return _KappaCUDA.Value_Good(self)
Value_swigregister = _KappaCUDA.Value_swigregister
Value_swigregister(Value)

class Resource(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Resource, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Resource, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Resource
    __del__ = lambda self : None;
    def SetCurrentByType(self, *args): return _KappaCUDA.Resource_SetCurrentByType(self, *args)
    def SetCurrentByTypeName(self, *args): return _KappaCUDA.Resource_SetCurrentByTypeName(self, *args)
    def SetDependencyByTypes(self, *args): return _KappaCUDA.Resource_SetDependencyByTypes(self, *args)
    def SetDependencyByType(self, *args): return _KappaCUDA.Resource_SetDependencyByType(self, *args)
    def SetDependencyByTypeName(self, *args): return _KappaCUDA.Resource_SetDependencyByTypeName(self, *args)
    def SetFinalByType(self, *args): return _KappaCUDA.Resource_SetFinalByType(self, *args)
    def SetFinalByTypeName(self, *args): return _KappaCUDA.Resource_SetFinalByTypeName(self, *args)
    def CommandResources(self, *args): return _KappaCUDA.Resource_CommandResources(self, *args)
Resource_swigregister = _KappaCUDA.Resource_swigregister
Resource_swigregister(Resource)

class Instruction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instruction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Instruction, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Instruction
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _KappaCUDA.new_Instruction(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddOriginalName(self, *args): return _KappaCUDA.Instruction_AddOriginalName(self, *args)
    def GetOriginalName(self): return _KappaCUDA.Instruction_GetOriginalName(self)
    def GetKeyword(self): return _KappaCUDA.Instruction_GetKeyword(self)
    def GetName(self): return _KappaCUDA.Instruction_GetName(self)
    def GetAttributes(self): return _KappaCUDA.Instruction_GetAttributes(self)
    def GetArguments(self): return _KappaCUDA.Instruction_GetArguments(self)
Instruction_swigregister = _KappaCUDA.Instruction_swigregister
Instruction_swigregister(Instruction)

class Attributes(Values):
    __swig_setmethods__ = {}
    for _s in [Values]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attributes, name, value)
    __swig_getmethods__ = {}
    for _s in [Values]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Attributes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_Attributes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_Attributes
    __del__ = lambda self : None;
    def Prepare(self, *args): return _KappaCUDA.Attributes_Prepare(self, *args)
    def Resolve(self, *args): return _KappaCUDA.Attributes_Resolve(self, *args)
    def Get(self, *args): return _KappaCUDA.Attributes_Get(self, *args)
Attributes_swigregister = _KappaCUDA.Attributes_swigregister
Attributes_swigregister(Attributes)

class Arguments(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arguments, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Arguments, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Arguments
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _KappaCUDA.new_Arguments(*args)
        try: self.this.append(this)
        except: self.this = this
    def Reset(self): return _KappaCUDA.Arguments_Reset(self)
    def Size(self): return _KappaCUDA.Arguments_Size(self)
    def Add(self, *args): return _KappaCUDA.Arguments_Add(self, *args)
    def TexRef(self, *args): return _KappaCUDA.Arguments_TexRef(self, *args)
    def Out(self, *args): return _KappaCUDA.Arguments_Out(self, *args)
    def IO(self, *args): return _KappaCUDA.Arguments_IO(self, *args)
    def In(self, *args): return _KappaCUDA.Arguments_In(self, *args)
    def Type(self, *args): return _KappaCUDA.Arguments_Type(self, *args)
    def Direction(self, *args): return _KappaCUDA.Arguments_Direction(self, *args)
    def Get(self, *args): return _KappaCUDA.Arguments_Get(self, *args)
    def GetIndices(self, *args): return _KappaCUDA.Arguments_GetIndices(self, *args)
    def GetValue(self, *args): return _KappaCUDA.Arguments_GetValue(self, *args)
    def Prepare(self, *args): return _KappaCUDA.Arguments_Prepare(self, *args)
    def Resolve(self, *args): return _KappaCUDA.Arguments_Resolve(self, *args)
    def ExtraIn(self, *args): return _KappaCUDA.Arguments_ExtraIn(self, *args)
    def ExtraOut(self, *args): return _KappaCUDA.Arguments_ExtraOut(self, *args)
    def GetExtraArguments(self, *args): return _KappaCUDA.Arguments_GetExtraArguments(self, *args)
Arguments_swigregister = _KappaCUDA.Arguments_swigregister
Arguments_swigregister(Arguments)

class ProcessControlBlock(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessControlBlock, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessControlBlock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_ProcessControlBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_ProcessControlBlock
    __del__ = lambda self : None;
    def SetCUDA64Bit(self): return _KappaCUDA.ProcessControlBlock_SetCUDA64Bit(self)
    def PitchWidth(self, *args): return _KappaCUDA.ProcessControlBlock_PitchWidth(self, *args)
    def Result(self): return _KappaCUDA.ProcessControlBlock_Result(self)
    def Running(self): return _KappaCUDA.ProcessControlBlock_Running(self)
    def Stop(self): return _KappaCUDA.ProcessControlBlock_Stop(self)
    def Done(self): return _KappaCUDA.ProcessControlBlock_Done(self)
    def GetKappa(self): return _KappaCUDA.ProcessControlBlock_GetKappa(self)
    def Data(self): return _KappaCUDA.ProcessControlBlock_Data(self)
    def LocalDevice(self): return _KappaCUDA.ProcessControlBlock_LocalDevice(self)
    def ThreadID(self): return _KappaCUDA.ProcessControlBlock_ThreadID(self)
    def GetCommandQueue(self, q_number = 0): return _KappaCUDA.ProcessControlBlock_GetCommandQueue(self, q_number)
    def CommandQueueSize(self): return _KappaCUDA.ProcessControlBlock_CommandQueueSize(self)
    def IsCurrentContext(self, *args): return _KappaCUDA.ProcessControlBlock_IsCurrentContext(self, *args)
    def PopContexts(self, *args): return _KappaCUDA.ProcessControlBlock_PopContexts(self, *args)
    def GetContext(self, *args): return _KappaCUDA.ProcessControlBlock_GetContext(self, *args)
    def NewContext(self, *args): return _KappaCUDA.ProcessControlBlock_NewContext(self, *args)
    def GPUDevice(self): return _KappaCUDA.ProcessControlBlock_GPUDevice(self)
    def GPUDeviceName(self): return _KappaCUDA.ProcessControlBlock_GPUDeviceName(self)
    def GPU(self): return _KappaCUDA.ProcessControlBlock_GPU(self)
ProcessControlBlock_swigregister = _KappaCUDA.ProcessControlBlock_swigregister
ProcessControlBlock_swigregister(ProcessControlBlock)

CUDA_CONTEXT = _KappaCUDA.CUDA_CONTEXT
OPENGL_CONTEXT = _KappaCUDA.OPENGL_CONTEXT
VDPAU_CONTEXT = _KappaCUDA.VDPAU_CONTEXT
class Context(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Context
    __del__ = lambda self : None;
    def PitchWidth(self, *args): return _KappaCUDA.Context_PitchWidth(self, *args)
    def SetCUDA64Bit(self): return _KappaCUDA.Context_SetCUDA64Bit(self)
    def SetCUcontext(self, *args): return _KappaCUDA.Context_SetCUcontext(self, *args)
    def GetCUcontext(self): return _KappaCUDA.Context_GetCUcontext(self)
    def ContextType(self): return _KappaCUDA.Context_ContextType(self)
    def GetProcessControlBlock(self): return _KappaCUDA.Context_GetProcessControlBlock(self)
    def GetStream(self, *args): return _KappaCUDA.Context_GetStream(self, *args)
    def Copy(self, *args): return _KappaCUDA.Context_Copy(self, *args)
    def FreeVariable(self, *args): return _KappaCUDA.Context_FreeVariable(self, *args)
    def New(self, *args): return _KappaCUDA.Context_New(self, *args)
    def NewLocalAndDevice(self, *args): return _KappaCUDA.Context_NewLocalAndDevice(self, *args)
    def NewLocalOnly(self, *args): return _KappaCUDA.Context_NewLocalOnly(self, *args)
    def NewDevice(self, *args): return _KappaCUDA.Context_NewDevice(self, *args)
    def NewDevicePitch(self, *args): return _KappaCUDA.Context_NewDevicePitch(self, *args)
    def NewDeviceOnly(self, *args): return _KappaCUDA.Context_NewDeviceOnly(self, *args)
    def ModuleTexture(self, *args): return _KappaCUDA.Context_ModuleTexture(self, *args)
    def GetVariable(self, *args): return _KappaCUDA.Context_GetVariable(self, *args)
    def CreateModule(self, *args): return _KappaCUDA.Context_CreateModule(self, *args)
    def CreateCModule(self, *args): return _KappaCUDA.Context_CreateCModule(self, *args)
    def CreateArray(self, *args): return _KappaCUDA.Context_CreateArray(self, *args)
    def GetModule(self, *args): return _KappaCUDA.Context_GetModule(self, *args)
    def GetCModule(self, *args): return _KappaCUDA.Context_GetCModule(self, *args)
    def GetArray(self, *args): return _KappaCUDA.Context_GetArray(self, *args)
    def UnloadModule(self, *args): return _KappaCUDA.Context_UnloadModule(self, *args)
    def Synchronize(self, throw_error = True): return _KappaCUDA.Context_Synchronize(self, throw_error)
    def Free(self): return _KappaCUDA.Context_Free(self)
    def UnloadModules(self): return _KappaCUDA.Context_UnloadModules(self)
    def Reset(self, force = False): return _KappaCUDA.Context_Reset(self, force)
    def Push(self): return _KappaCUDA.Context_Push(self)
    def Pop(self): return _KappaCUDA.Context_Pop(self)
    def Result(self): return _KappaCUDA.Context_Result(self)
    def MemoryFree(self): return _KappaCUDA.Context_MemoryFree(self)
    def MemoryTotal(self): return _KappaCUDA.Context_MemoryTotal(self)
    def MemoryUsed(self): return _KappaCUDA.Context_MemoryUsed(self)
    def SetPrintfFIFOSize(self, *args): return _KappaCUDA.Context_SetPrintfFIFOSize(self, *args)
    def ModuleSurface(self, *args): return _KappaCUDA.Context_ModuleSurface(self, *args)
    def CreateArray3D(self, *args): return _KappaCUDA.Context_CreateArray3D(self, *args)
    def SetCacheConfiguration(self, *args): return _KappaCUDA.Context_SetCacheConfiguration(self, *args)
    def GetApiVersion(self): return _KappaCUDA.Context_GetApiVersion(self)
    def GetDriverVersion(self): return _KappaCUDA.Context_GetDriverVersion(self)
    def GetCacheConfig(self): return _KappaCUDA.Context_GetCacheConfig(self)
    def GetDeviceID(self): return _KappaCUDA.Context_GetDeviceID(self)
    def GetLimit(self, *args): return _KappaCUDA.Context_GetLimit(self, *args)
    def SetStackSize(self, *args): return _KappaCUDA.Context_SetStackSize(self, *args)
    def SetHeapSize(self, *args): return _KappaCUDA.Context_SetHeapSize(self, *args)
Context_swigregister = _KappaCUDA.Context_swigregister
Context_swigregister(Context)

READY = _KappaCUDA.READY
RUNNING = _KappaCUDA.RUNNING
PAUSED = _KappaCUDA.PAUSED
CANCELED = _KappaCUDA.CANCELED
FINISHED = _KappaCUDA.FINISHED
FAILED = _KappaCUDA.FAILED
class Command(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Command, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Command, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _KappaCUDA.new_Command(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _KappaCUDA.delete_Command
    __del__ = lambda self : None;
    def SetType(self, *args): return _KappaCUDA.Command_SetType(self, *args)
    def GetType(self): return _KappaCUDA.Command_GetType(self)
    def GetName(self): return _KappaCUDA.Command_GetName(self)
    def SetTrace(self, value = True): return _KappaCUDA.Command_SetTrace(self, value)
    def AnyOrder(self): return _KappaCUDA.Command_AnyOrder(self)
    def IsStop(self): return _KappaCUDA.Command_IsStop(self)
    def IsAsync(self): return _KappaCUDA.Command_IsAsync(self)
    def SetRecipient(self, *args): return _KappaCUDA.Command_SetRecipient(self, *args)
    def Notification(self, *args): return _KappaCUDA.Command_Notification(self, *args)
    def SetAsync(self): return _KappaCUDA.Command_SetAsync(self)
    def ClearAsync(self): return _KappaCUDA.Command_ClearAsync(self)
    def SetReady(self): return _KappaCUDA.Command_SetReady(self)
    def SetRunning(self): return _KappaCUDA.Command_SetRunning(self)
    def SetPaused(self): return _KappaCUDA.Command_SetPaused(self)
    def SetCanceled(self): return _KappaCUDA.Command_SetCanceled(self)
    def SetFailed(self): return _KappaCUDA.Command_SetFailed(self)
    def SetFinished(self): return _KappaCUDA.Command_SetFinished(self)
    def UpdateStatus(self): return _KappaCUDA.Command_UpdateStatus(self)
    def IsReady(self): return _KappaCUDA.Command_IsReady(self)
    def IsRunning(self): return _KappaCUDA.Command_IsRunning(self)
    def IsPaused(self): return _KappaCUDA.Command_IsPaused(self)
    def IsCanceled(self): return _KappaCUDA.Command_IsCanceled(self)
    def IsFailed(self): return _KappaCUDA.Command_IsFailed(self)
    def IsFinished(self): return _KappaCUDA.Command_IsFinished(self)
    def SetName(self, *args): return _KappaCUDA.Command_SetName(self, *args)
    def Execute(self, *args): return _KappaCUDA.Command_Execute(self, *args)
    def SetStream(self, *args): return _KappaCUDA.Command_SetStream(self, *args)
    def GetStream(self): return _KappaCUDA.Command_GetStream(self)
    def NeedStream(self): return _KappaCUDA.Command_NeedStream(self)
    def StatusCode(self): return _KappaCUDA.Command_StatusCode(self)
    def Good(self): return _KappaCUDA.Command_Good(self)
    def SetIfFinish(self, action = True): return _KappaCUDA.Command_SetIfFinish(self, action)
    def SetIfCancel(self, action = True): return _KappaCUDA.Command_SetIfCancel(self, action)
    def SetIfFail(self, action = True): return _KappaCUDA.Command_SetIfFail(self, action)
    def IfFinish(self): return _KappaCUDA.Command_IfFinish(self)
    def IfCancel(self): return _KappaCUDA.Command_IfCancel(self)
    def IfFail(self): return _KappaCUDA.Command_IfFail(self)
    def SetPriorStatus(self, *args): return _KappaCUDA.Command_SetPriorStatus(self, *args)
    def PriorStatus(self): return _KappaCUDA.Command_PriorStatus(self)
Command_swigregister = _KappaCUDA.Command_swigregister
Command_swigregister(Command)

Host = _KappaCUDA.Host
Device = _KappaCUDA.Device
Texture = _KappaCUDA.Texture
Surface = _KappaCUDA.Surface
class Variable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Variable
    __del__ = lambda self : None;
    def Copy(self, *args): return _KappaCUDA.Variable_Copy(self, *args)
    def Free(self): return _KappaCUDA.Variable_Free(self)
    def SetAuthority(self, *args): return _KappaCUDA.Variable_SetAuthority(self, *args)
    def ForceAuthority(self, *args): return _KappaCUDA.Variable_ForceAuthority(self, *args)
    def Dimensions(self): return _KappaCUDA.Variable_Dimensions(self)
    def DimSize(self, *args): return _KappaCUDA.Variable_DimSize(self, *args)
    def Size(self): return _KappaCUDA.Variable_Size(self)
    def ElementSize(self): return _KappaCUDA.Variable_ElementSize(self)
    def GetName(self): return _KappaCUDA.Variable_GetName(self)
    def Result(self): return _KappaCUDA.Variable_Result(self)
    def IsLocked(self): return _KappaCUDA.Variable_IsLocked(self)
    def Access(self, read_only = False): return _KappaCUDA.Variable_Access(self, read_only)
    def DeviceAccess(self, read_only = False): return _KappaCUDA.Variable_DeviceAccess(self, read_only)
    def TextureAccess(self, read_only = False): return _KappaCUDA.Variable_TextureAccess(self, read_only)
    def HasTexture(self): return _KappaCUDA.Variable_HasTexture(self)
    def TexUnit(self): return _KappaCUDA.Variable_TexUnit(self)
    def Relinquish(self): return _KappaCUDA.Variable_Relinquish(self)
    def SetAddressMode(self, *args): return _KappaCUDA.Variable_SetAddressMode(self, *args)
    def SetFilterMode(self, *args): return _KappaCUDA.Variable_SetFilterMode(self, *args)
    def SetTextureFlags(self, *args): return _KappaCUDA.Variable_SetTextureFlags(self, *args)
    def SetStream(self, *args): return _KappaCUDA.Variable_SetStream(self, *args)
    def GetStream(self): return _KappaCUDA.Variable_GetStream(self)
    def VariableDimensions(self): return _KappaCUDA.Variable_VariableDimensions(self)
    def IsTextureWritable(self): return _KappaCUDA.Variable_IsTextureWritable(self)
    def FromVariable(self, *args): return _KappaCUDA.Variable_FromVariable(self, *args)
    def FromLocal(self, *args): return _KappaCUDA.Variable_FromLocal(self, *args)
    def FromDevice(self, *args): return _KappaCUDA.Variable_FromDevice(self, *args)
    def FromArray(self, *args): return _KappaCUDA.Variable_FromArray(self, *args)
    def DeviceMemSet(self, *args): return _KappaCUDA.Variable_DeviceMemSet(self, *args)
    def IsReady(self): return _KappaCUDA.Variable_IsReady(self)
    def SurfaceAccess(self, read_only = False): return _KappaCUDA.Variable_SurfaceAccess(self, read_only)
    def HasSurface(self): return _KappaCUDA.Variable_HasSurface(self)
    def SetSurfaceFlags(self, flags = 0): return _KappaCUDA.Variable_SetSurfaceFlags(self, flags)
    def ClearNullMask(self): return _KappaCUDA.Variable_ClearNullMask(self)
    def GetNullBlockWidth(self): return _KappaCUDA.Variable_GetNullBlockWidth(self)
    def SetNullBlockWidth(self, *args): return _KappaCUDA.Variable_SetNullBlockWidth(self, *args)
    def GetNullMask(self): return _KappaCUDA.Variable_GetNullMask(self)
    def SetNullMask(self, *args): return _KappaCUDA.Variable_SetNullMask(self, *args)
    def SetColumns(self, *args): return _KappaCUDA.Variable_SetColumns(self, *args)
    def GetColumns(self): return _KappaCUDA.Variable_GetColumns(self)
Variable_swigregister = _KappaCUDA.Variable_swigregister
Variable_swigregister(Variable)

class Array(Lock):
    __swig_setmethods__ = {}
    for _s in [Lock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Lock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _KappaCUDA.delete_Array
    __del__ = lambda self : None;
    def Result(self): return _KappaCUDA.Array_Result(self)
    def IsSet(self): return _KappaCUDA.Array_IsSet(self)
    def Is3D(self): return _KappaCUDA.Array_Is3D(self)
    def CUArray(self): return _KappaCUDA.Array_CUArray(self)
    def Width(self): return _KappaCUDA.Array_Width(self)
    def Height(self): return _KappaCUDA.Array_Height(self)
    def Depth(self): return _KappaCUDA.Array_Depth(self)
    def Format(self): return _KappaCUDA.Array_Format(self)
    def NumChannels(self): return _KappaCUDA.Array_NumChannels(self)
    def Malloc(self): return _KappaCUDA.Array_Malloc(self)
    def Free(self): return _KappaCUDA.Array_Free(self)
    def Memcpy2D(self, *args): return _KappaCUDA.Array_Memcpy2D(self, *args)
    def Memcpy3D(self, *args): return _KappaCUDA.Array_Memcpy3D(self, *args)
    def Memcpy2DAsync(self, *args): return _KappaCUDA.Array_Memcpy2DAsync(self, *args)
    def Memcpy3DAsync(self, *args): return _KappaCUDA.Array_Memcpy3DAsync(self, *args)
    def FromLocal(self, *args): return _KappaCUDA.Array_FromLocal(self, *args)
    def FromLocalAsync(self, *args): return _KappaCUDA.Array_FromLocalAsync(self, *args)
    def FromDevice(self, *args): return _KappaCUDA.Array_FromDevice(self, *args)
    def FromArray(self, *args): return _KappaCUDA.Array_FromArray(self, *args)
    def ArrayAccess(self): return _KappaCUDA.Array_ArrayAccess(self)
Array_swigregister = _KappaCUDA.Array_swigregister
Array_swigregister(Array)


def intptr_fromvoidptr(*args):
  return _KappaCUDA.intptr_fromvoidptr(*args)
intptr_fromvoidptr = _KappaCUDA.intptr_fromvoidptr

def unsignedptr_fromvoidptr(*args):
  return _KappaCUDA.unsignedptr_fromvoidptr(*args)
unsignedptr_fromvoidptr = _KappaCUDA.unsignedptr_fromvoidptr

def longptr_fromvoidptr(*args):
  return _KappaCUDA.longptr_fromvoidptr(*args)
longptr_fromvoidptr = _KappaCUDA.longptr_fromvoidptr

def floatptr_fromvoidptr(*args):
  return _KappaCUDA.floatptr_fromvoidptr(*args)
floatptr_fromvoidptr = _KappaCUDA.floatptr_fromvoidptr

def doubleptr_fromvoidptr(*args):
  return _KappaCUDA.doubleptr_fromvoidptr(*args)
doubleptr_fromvoidptr = _KappaCUDA.doubleptr_fromvoidptr

def kappaCommand_frompycobject(*args):
  return _KappaCUDA.kappaCommand_frompycobject(*args)
kappaCommand_frompycobject = _KappaCUDA.kappaCommand_frompycobject

def kappaKappa_frompycobject(*args):
  return _KappaCUDA.kappaKappa_frompycobject(*args)
kappaKappa_frompycobject = _KappaCUDA.kappaKappa_frompycobject

def kappaProcess_frompycobject(*args):
  return _KappaCUDA.kappaProcess_frompycobject(*args)
kappaProcess_frompycobject = _KappaCUDA.kappaProcess_frompycobject

def kappaAttributes_frompycobject(*args):
  return _KappaCUDA.kappaAttributes_frompycobject(*args)
kappaAttributes_frompycobject = _KappaCUDA.kappaAttributes_frompycobject

def kappaArguments_frompycobject(*args):
  return _KappaCUDA.kappaArguments_frompycobject(*args)
kappaArguments_frompycobject = _KappaCUDA.kappaArguments_frompycobject

def kappaResource_frompycobject(*args):
  return _KappaCUDA.kappaResource_frompycobject(*args)
kappaResource_frompycobject = _KappaCUDA.kappaResource_frompycobject

def kappaPCB_frompycobject(*args):
  return _KappaCUDA.kappaPCB_frompycobject(*args)
kappaPCB_frompycobject = _KappaCUDA.kappaPCB_frompycobject


