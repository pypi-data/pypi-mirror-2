Metadata-Version: 1.0
Name: bp.logging
Version: 0.2-dev
Summary: Reduce logging related repetition in your code
Home-page: https://github.com/disko/bp.logging
Author: Andreas Kaiser
Author-email: disko@binary-punks.com
License: BSD
Description: Introduction
        ============
        
        Do you find yourself repeating the same statements over and over again to get your logging configured? I did.
        
        bp.logging eases logging setup in that these kind of statements are reduced to a bare minimum. It does so by providing a getLogger function which returns the same as Python's standard library function with the same name: an instance of the Logger class (a.k.a. a logger object). The difference to the Python Library's getLogger are the arguments that can be passed and the default configuration of the returned logger object.
        
        bp.logging might not be useful for anyone besides myself, as default logging is configured for my very own habits and you won't gain much from using it instead of Python's standard logging facilities if your's are quite different. Maybe one day bp.logging will be extended and much more generic and/or configurable, but that day might be long after the universe has collapsed.
        
        
        Usage
        =====
        
        ``from bp.logging import *``
        
        ``logger = getLogger(name, console_threshold=None, logfile_threshold=None, logfile_path=None, console_format="%(levelname)s: %(name)s - %(message)s", logfile_format="%(asctime)s - %(levelname)s: %(name)s - %(message)s")``
        
        ``logger.critical("critical message")``
        
        ``logger.error("error message")``
        
        ``logger.warning("warning message")``
        
        ``logger.info("info message")``
        
        ``logger.debug("debug message")``
        
        
        Examples
        ********
        
        debugging to console
        --------------------
        
        ``logger = getLogger("my logger", console_threshold=debug)``
        
        or
        
        ``logger = getLogger("my logger", debug)``
        
        
        warnings to file
        ----------------
        
        ``logger = getLogger("my logger", logfile_path="/var/log/my.log", logfile_threshold=warning)``
        
        infos to console, errors to file
        --------------------------------
        
        ``logger = getLogger("my logger", console_threshold=info, logfile_path="/var/log/my.log", logfile_threshold=error)``
        
        or
        
        ``logger = getLogger("my logger", info, error, "/var/log/my.log")``
        
        
        
        Changelog
        =========
        
        0.1
        ***
        
        -   Initial release
        
        
        
        LICENSE
        =======
        
        Copyright (c) 2011, disko@binary-punks.com
        
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:
        
        -   Redistributions of source code must retain the above copyright notice,
        this list of conditions and the following disclaimer.
        
        -   Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.
        
        -   Neither the name of the binary punks nor the names of its contributors may
        be used to endorse or promote products derived from this software without
        specific prior written permission.
        
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Keywords: logging
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
