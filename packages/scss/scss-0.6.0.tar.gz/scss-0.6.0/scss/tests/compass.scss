/* // Based on [Eric Meyer's reset](http://meyerweb.com/eric/thoughts/2007/05/01/reset-reloaded/) */
/* // Global reset rules. */
/* // For more specific resets, use the reset mixins provided below */
/* // */
/* // *Please Note*: tables still need `cellspacing="0"` in the markup. */
/* @mixin global-reset { */
  /* html, body, div, span, applet, object, iframe, */
  /* h1, h2, h3, h4, h5, h6, p, blockquote, pre, */
  /* a, abbr, acronym, address, big, cite, code, */
  /* del, dfn, em, font, img, ins, kbd, q, s, samp, */
  /* small, strike, strong, sub, sup, tt, var, */
  /* dl, dt, dd, ol, ul, li, */
  /* fieldset, form, label, legend, */
  /* table, caption, tbody, tfoot, thead, tr, th, td { */
    /* @include reset-box-model; */
    /* @include reset-font; } */
  /* body { */
    /* @include reset-body; } */
  /* ol, ul { */
    /* @include reset-list-style; } */
  /* table { */
    /* @include reset-table; } */
  /* caption, th, td { */
    /* @include reset-table-cell; } */
  /* q, blockquote { */
    /* @include reset-quotation; } */
  /* a img { */
    /* @include reset-image-anchor-border; } } */

/* // Reset all elements within some selector scope. To reset the selector itself, */
/* // mixin the appropriate reset mixin for that element type as well. This could be */
/* // useful if you want to style a part of your page in a dramatically different way. */
/* // */
/* // *Please Note*: tables still need `cellspacing="0"` in the markup. */
/* @mixin nested-reset { */
  /* div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, */
  /* pre, a, abbr, acronym, address, code, del, dfn, em, img, */
  /* dl, dt, dd, ol, ul, li, fieldset, form, label, legend, caption, tbody, tfoot, thead, tr { */
    /* @include reset-box-model; */
    /* @include reset-font; } */
  /* table { */
    /* @include reset-table; } */
  /* caption, th, td { */
    /* @include reset-table-cell; } */
  /* q, blockquote { */
    /* @include reset-quotation; } */
  /* a img { */
    /* @include reset-image-anchor-border; } } */

/* // Reset the box model measurements. */
/* @mixin reset-box-model { */
  /* margin: 0; */
  /* padding: 0; */
  /* border: 0; */
  /* outline: 0; } */

/* // Reset the font and vertical alignment. */
/* @mixin reset-font { */
  /* font: { */
    /* weight: inherit; */
    /* style: inherit; */
    /* size: 100%; */
    /* family: inherit; }; */
  /* vertical-align: baseline; } */

/* // Resets the outline when focus. */
/* // For accessibility you need to apply some styling in its place. */
/* @mixin reset-focus { */
  /* outline: 0; } */

/* // Reset a body element. */
/* @mixin reset-body { */
  /* line-height: 1; */
  /* color: black; */
  /* background: white; } */

/* // Reset the list style of an element. */
/* @mixin reset-list-style { */
  /* list-style: none; } */

/* // Reset a table */
/* @mixin reset-table { */
  /* border-collapse: separate; */
  /* border-spacing: 0; */
  /* vertical-align: middle; } */

/* // Reset a table cell (`th`, `td`) */
/* @mixin reset-table-cell { */
  /* text-align: left; */
  /* font-weight: normal; */
  /* vertical-align: middle; } */

/* // Reset a quotation (`q`, `blockquote`) */
/* @mixin reset-quotation { */
  /* quotes: "" ""; */
  /* &:before, &:after { */
    /* content: ""; } } */

/* // Resets the border. */
/* @mixin reset-image-anchor-border { */
  /* border: none; } */

/* // Unrecognized elements are displayed inline. */
/* // This reset provides a basic reset for html5 elements */
/* // so they are rendered correctly in browsers that don't recognize them */
/* // and reset in browsers that have default styles for them. */
/* @mixin reset-html5 { */
  /* article, aside, canvas, details, figcaption, figure, footer, header, hgroup, menu, nav, section, summary { */
    /* @include reset-box-model; */
    /* display: block; } } */

/* // Resets the display of inline and block elements to their default display */
/* // according to their tag type. Elements that have a default display that varies across */
/* // versions of html or browser are not handled here, but this covers the 90% use case. */
/* // Usage Example: */
/* // */
/* //     // Turn off the display for both of these classes */
/* //     .unregistered-only, .registered-only */
/* //       display: none */
/* //     // Now turn only one of them back on depending on some other context. */
/* //     body.registered */
/* //       +reset-display(".registered-only") */
/* //     body.unregistered */
/* //       +reset-display(".unregistered-only") */
/* @mixin reset-display($selector: "", $important: false) { */
  /* #{append-selector(elements-of-type("inline"), $selector)} { */
    /* @if $important { */
      /* display: inline !important; } */
    /* @else { */
      /* display: inline; } } */
  /* #{append-selector(elements-of-type("block"), $selector)} { */
    /* @if $important { */
      /* display: block !important; } */
    /* @else { */
      /* display: block; } } } */

// Usually compass hacks apply to both ie6 & 7 -- set this to false to disable support for both.
$legacy-support-for-ie: true !default;

// Setting this to false will result in smaller output, but no support for ie6 hacks
$legacy-support-for-ie6: $legacy-support-for-ie !default;

// Setting this to false will result in smaller output, but no support for ie7 hacks
$legacy-support-for-ie7: $legacy-support-for-ie !default;

// Setting this to false will result in smaller output, but no support for legacy ie8 hacks
$legacy-support-for-ie8: $legacy-support-for-ie !default;

// @private
// The user can simply set $legacy-support-for-ie and 6, 7, and 8 will be set accordingly,
// But in case the user set each of those explicitly, we need to sync the value of
// this combined variable.
$legacy-support-for-ie: $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8;

// Support for mozilla in experimental css3 properties.
$experimental-support-for-mozilla   : true !default;
// Support for webkit in experimental css3 properties.
$experimental-support-for-webkit    : true !default;
// Support for opera in experimental css3 properties.
$experimental-support-for-opera     : true !default;
// Support for microsoft in experimental css3 properties.
$experimental-support-for-microsoft : true !default;
// Support for khtml in experimental css3 properties.
$experimental-support-for-khtml     : true !default;
// Support for svg in experimental css3 properties.
// Setting this to true might add significant size to your
// generated stylesheets.
$experimental-support-for-svg     : false !default;
// Support for CSS PIE in experimental css3 properties.
$experimental-support-for-pie     : false !default;

// The `zoom` approach generates less CSS but does not validate.
// Set this to `block` to use the display-property to hack the
// element to gain layout.
$default-has-layout-approach: zoom !default;

// This mixin causes an element matching the selector
// to gain the "hasLayout" property in internet explorer.
// More information on [hasLayout](http://reference.sitepoint.com/css/haslayout).
@mixin has-layout($approach: $default-has-layout-approach) {
  @if $legacy-support-for-ie {
    @if $approach == zoom {
      @include has-layout-zoom;
    } @else if $approach == block {
      @include has-layout-block;
    } @else {
      @warn "Unknown has-layout approach: #{$approach}";
      @include has-layout-zoom;
    }
  }
}

/* @mixin has-layout-zoom { */
  /* @if $legacy-support-for-ie { */
    /* *zoom: 1; */
  /* } */
/* } */

/* @mixin has-layout-block { */
  /* @if $legacy-support-for-ie { */
    /* // This makes ie6 get layout */
    /* display: inline-block; */
    /* // and this puts it back to block */
    /* & { display: block; } */
  /* } */
/* } */

/* // A hack to supply IE6 (and below) with a different property value. */
/* // [Read more](http://www.cssportal.com/css-hacks/#in_css-important). */
/* @mixin bang-hack($property, $value, $ie6-value) { */
  /* @if $legacy-support-for-ie6 { */
    /* #{$property}: #{$value} !important; */
    /* #{$property}: #{$ie6-value}; */
  /* } */
/* } */

/* // This basic method is preferred for the usual case, when positioned */
/* // content will not show outside the bounds of the container. */
/* // */
/* // Recommendations include using this in conjunction with a width. */
/* // Credit: [quirksmode.org](http://www.quirksmode.org/blog/archives/2005/03/clearing_floats.html) */
/* @mixin clearfix { */
  /* overflow: hidden; */
  /* @include has-layout; */
/* } */

/* // This older method from Position Is Everything called */
/* // [Easy Clearing](http://www.positioniseverything.net/easyclearing.html) */
/* // has the advantage of allowing positioned elements to hang */
/* // outside the bounds of the container at the expense of more tricky CSS. */
/* @mixin pie-clearfix { */
  /* &:after { */
    /* content    : "\0020"; */
    /* display    : block; */
    /* height     : 0; */
    /* clear      : both; */
    /* overflow   : hidden; */
    /* visibility : hidden; */
  /* } */
  /* @include has-layout; */
/* } */
/* // Implementation of float:left with fix for the */
/* // [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html) */
/* @mixin float-left { */
  /* @include float(left); } */

/* // Implementation of float:right with fix for the */
/* // [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html) */
/* @mixin float-right { */
  /* @include float(right); } */

/* // Direction independent float mixin that fixes the */
/* // [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html) */
/* @mixin float($side: left) { */
  /* display: inline; */
  /* float: unquote($side); } */

/* // Emits styles for a tag cloud */
/* @mixin tag-cloud($base-size: 1em) { */
  /* font-size: $base-size; */
  /* line-height: 1.2 * $base-size; */
  /* .xxs, .xs, .s, .l, .xl, .xxl { */
    /* line-height: 1.2 * $base-size; } */
  /* .xxs { */
    /* font-size: $base-size / 2; } */
  /* .xs { */
    /* font-size: 2 * $base-size / 3; } */
  /* .s { */
    /* font-size: 3 * $base-size / 4; } */
  /* .l { */
    /* font-size: 4 * $base-size / 3; } */
  /* .xl { */
    /* font-size: 3 * $base-size / 2; } */
  /* .xxl { */
    /* font-size: 2 * $base-size; } } */

/* //** */
/* // Cross browser min-height mixin. */
/* @mixin min-height($value) { */
  /* @include hacked-minimum(height, $value); } */

/* //** */
/* // Cross browser min-width mixin. */
/* @mixin min-width($value) { */
  /* @include hacked-minimum(width, $value); } */

/* // @private This mixin is not meant to be used directly. */
/* @mixin hacked-minimum($property, $value) { */
  /* min-#{$property}: $value; */
  /* @include bang-hack($property, auto, $value); } */
