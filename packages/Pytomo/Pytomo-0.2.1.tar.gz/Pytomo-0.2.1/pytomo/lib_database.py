#!/usr/bin/env python2.5
"""Module for sqllite interface to the pytomo database
"""



from __future__ import with_statement, absolute_import
import sqlite3
from pprint import pprint

# only for logging
import logging
import sys
from time import strftime
from os.path import sep, basename

# config file
from . import config_pytomo

class PytomoDatabase:
    """Pytomo database class
        The columns of the file pytomo_table are as follows:
        ID      -    A unique ID generated by for each record entered
        Service -    The website on which the analysis is performed
                    Example: Youtube, Megavideo
        Url     -    The url of the webpage
        CacheUrl-   The Url of the cache server hosting the video
        IP      -   The IP address of the cache server from which the video is
                    downloaded
        Resolver-   The DNS resolver used to get obtain the IP address of the
                    cache server
                    Example Google DNS, Local DNS
        PingMin - The minimum recorded ping time to the resolved IP address of
            the cache server
        PingAvg - The average recorded ping time to the resolved IP address of
            the cache server
        PingMax - The maximum recorded ping time to the resolved IP address of
            the cache server
        DownloadTime - The Time taken to download the video sample
                     (We do not download the entire video but only for a
                      limited download time.)
        VideoDuration - The actual duration of the complete video
        VideoLength - The length(in bytes) of the complete video
        EncodingRate - The encoding rate of the video: VideoLength/VideoDuration
        DownloadBytes - The length of the video sample(in bytes)
        DownloadInterruptions -  Nb of interruptions experienced during the
                                download
        BufferingDuration -  Accumulate time spend in buffering state
        PlaybackDuration - Accumulate time spend in playing state
        BufferDurationAtEnd - The buffer length at the end of download
        MaxInstantThp - The max instantaneous throughput of the download
    """

    _table_name = None
    created = None

    def __init__(self, database_file=config_pytomo.DATABASE_TIMESTAMP):
        "Initialize the database object"
        # Intialize the logger for standalone testing Logging
        if not config_pytomo.LOG:
            self.logger_db()
        try:
            # isolation_level in order to auto-commit
            self.py_conn = sqlite3.connect(database_file, isolation_level=None)
        except sqlite3.Error, mes:
            config_pytomo.LOG.exception(''.join((
                'Unable to connect to the database: ', database_file,
                '\nError message: ', mes)))
            self.created = False
            return
        config_pytomo.LOG.info(' '.join(("Created connection to data base",
                                         "Database:", basename(database_file))))
        self.created = True
        self.py_cursor = self.py_conn.cursor()

    def create_pytomo_table(self, table=config_pytomo.TABLE_TIMESTAMP):
        " Function to create a table"
        # why a tuple?
        # Using Python's string operations makes it insecure (vulnerable
        # to SQL injection attack). Use of tuples makes it secure.
        if not self.created:
            config_pytomo.LOG.warn('Database could not be created\n'
                                   'Table creation aborted')
            return
        table_name = (table,)
        self._table_name = table
        cmd = ''.join(( "CREATE TABLE ", table,
                       """(ID TIMESTAMP, Service text, Url text, CacheUrl text,
                       IP text, Resolver text, PingMin real, PingAvg real,
                       PingMax real, DownloadTime real, VideoDuration real,
                       VideoLength real, EncodingRate real, DownloadBytes int,
                       DownloadInterruptions int, BufferingDuration real,
                       PlaybackDuration real, BufferDurationAtEnd real,
                       MaxInstantThp real
                      )"""))
        try:
            self.py_cursor.execute(cmd)
        except sqlite3.Error, mes:
            config_pytomo.LOG.info("Table %s already exists: %s"
                                   % (table_name, mes))
        else:
            config_pytomo.LOG.info("Creating table : %s" % table_name)

    def insert_record(self, row):
        "Function to insert a record"
        if not self.created:
            config_pytomo.LOG.warn('Database could not be created\n'
                                   'Insertion aborted')
            return
        cmd = ''.join(("INSERT INTO ", self._table_name,
                       " VALUES(current_timestamp",
                       ',?' * config_pytomo.NB_FIELDS, ')'))
        try:
            self.py_cursor.execute(cmd, row)
        except sqlite3.Error, mes:
            config_pytomo.LOG.error('unable to add row: %s with error: %s'
                                    % (row, mes))
        else:
            config_pytomo.LOG.debug('row added to table')

    def fetch_all(self):
        "Function to print all the records of the table"
        if not self.created:
            config_pytomo.LOG.warn('Database could not be created\n'
                                   'Fetch aborted')
            return
        cmd = ' '.join(("SELECT * FROM", self._table_name))
        self.py_cursor.execute(cmd)
        for record in self.py_cursor:
            pprint(record)

    def close_handle(self):
        "Closes the connection to the database"
        if not self.created:
            config_pytomo.LOG.warn('Database could not be created\n'
                                   'Close aborted')
            return
        self.py_conn.close()

    @staticmethod
    def logger_db():
        " Initialze the logger"
        config_pytomo.LOG = logging.getLogger('pytomo_db')
        # to not have console output
        config_pytomo.LOG.propagate = False
        config_pytomo.LOG.setLevel(config_pytomo.LOG_LEVEL)
        timestamp = strftime("%Y-%m-%d.%H_%M_%S")
        if config_pytomo.LOG_FILE == '-':
            handler = logging.StreamHandler(sys.stdout)
        else:
            log_file = sep.join((config_pytomo. LOG_DIR,
                                '.'.join((timestamp, config_pytomo.LOG_FILE))))
            try:
                with open(log_file, 'a') as _:
                    pass
            except IOError:
                print >> sys.stderr, ("Problem opening file: %s"
                                      % log_file)
                return 1
            handler = logging.FileHandler(filename=log_file)
        log_formatter = logging.Formatter("%(asctime)s - %(name)s - "
                                  "%(levelname)s - %(message)s")
        handler.setFormatter(log_formatter)
        config_pytomo.LOG.addHandler(handler)

