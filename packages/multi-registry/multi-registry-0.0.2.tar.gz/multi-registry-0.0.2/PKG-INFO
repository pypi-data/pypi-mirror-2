Metadata-Version: 1.0
Name: multi-registry
Version: 0.0.2
Summary: A module that aggregates key-value attributes from multiple sources
Home-page: http://askbot.org
Author: Evgeny.Fadeev
Author-email: evgeny.fadeev@gmail.com
License: BSD
Description: Allows to aggregate key-value data from many sources.
        Can be used, for example, as a proxy to settings object in Django framework.
        
        The sources of key-value data are appended to :class:`MultiRegistry`
        vi ``append()`` method, then looked up via standard Python
        dotted notation, as explained in more detail below.
        
        Upon access, attributes will be looked up in the parent objects
        in the order the latter were appended.
        
        For example, if we have two settings like objects:
        ``A`` with attribute ``a``
        and ``B`` with attribute ``b``
        and a third one, found in module importable from ``'some.registry.C'``,
        we can construct the registry as:
        
        >>>r = MultiRegistry(A, B, 'some.registry.C')
        
        or alternatively:
        
        >>>r = MultiRegistry()
        >>>r.append(A)
        >>>r.append(B)
        >>>r.insert(2, 'some.registry.C')
        
        .. note::
        The registries can be provided as python objects or
        dotted python paths. In the latter case an import error will
        be raised if module at the path does not exist
        
        then access the registry as:
        
        r.b - attrubute b will be first looked
        up in the object A, then in the object B, where
        it will be found.
        
        If there is an attribute present in more than one appended object,
        the first one will be returned - in the same order the
        registries are stored internally, which takes into account:
        
        * order the registries were provided at the object initialization
        * order of ``append()`` calls.
        * taking into account indices provided with ``insert()`` call
        
        If the attribute is not found, attribute error will be
        raised.
        
Keywords: settings,registry
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2.5
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Topic :: Communications :: Usenet News
