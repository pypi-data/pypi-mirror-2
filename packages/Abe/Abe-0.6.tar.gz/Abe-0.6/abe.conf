# Config file for Abe.

# "NAME=VALUE" and "NAME VALUE" are equivalent.  Just "NAME" sets
# value to True.  Values of the form "..." or [...]  or {...} are
# parsed as JSON and may span lines.  "NAME += VALUE" appends VALUE to
# an array or updates an object defined by NAME.  Hyphen in NAME is
# read as underscore, so "connect_args" and "connect-args" are
# synonymous.  Later values override earlier ones (unless using "+=").

# All values may be passed as command-line arguments by preceding NAME
# with "--".  Example: "python -m Abe.abe --upgrade --dbtype=sqlite3
# --connect-args=abe.sqlite --port 2750".

# dbtype and connect-args are required.
# If not configured to run under FastCGI, host or port is required.

# dbtype is the name of a Python module.  connect-args are arguments
# to pass to the module's "connect" function.  Consult the module's
# documentation for values.  The user needs permission to create
# tables.  Consult your database documentation on how to configure a
# database.  See also README.txt.

# PostgreSQL example; see also README-POSTGRES.txt:
#dbtype = psycopg2
#connect-args = { "database": "abe" }

# MySQL example; see also README-MYSQL.txt:
#dbtype MySQLdb
#connect-args {"user":"root","db":"abe"}

# SQLite3 example:
#dbtype = sqlite3
#connect-args = abe.sqlite

# Oracle example:
#dbtype=cx_Oracle
#connect-args=user/pass@SID

# ODBC examples.  Don't use the same schema via ODBC and non-ODBC!
#dbtype = pyodbc
#connect-args = DSN=Abe;PWD=B!tc0iN;
#connect-args = DRIVER={ORACLE};DB=ORCL;UID=abe;PWD=Bitcoin;
#connect-args = DRIVER={PostgreSQL ANSI};Database=abe;

# Workaround for ODBC drivers that begin in autocommit mode:
#connect-args {"":"DRIVER={PostgreSQL ANSI};Database=abe;","autocommit":false}

# IBM DB2 example:
#dbtype = ibm_db_dbi
#connect-args {"dsn":"DATABASE=abe;UID=db2inst1;PWD=B!tCo1N","conn_options":{"102":0}}

# Specify port and/or host to serve HTTP instead of FastCGI:
#port 2750
#host localhost

# Specify no-serve to exit immediately after importing block files:
#no-serve

# "upgrade" tells Abe to upgrade database objects automatically after
# code updates:
#upgrade
#
# Sometimes upgrades fail and leave the database unusable.  Sometimes
# upgrades take several minutes or longer.  You may get an idea of the
# time required by looking at comments near the bottom of upgrade.py.
# For example, if your schema version is Abe18 and you are upgrading
# to schema version Abe19, the relevant lines are:
#
#    ('Abe18',   add_block_num_tx),       # Seconds
#    ('Abe18.1', add_block_ss_destroyed), # Seconds
#    ('Abe18.2', init_block_tx_sums),     # 5 minutes
#    ('Abe18.3', replace_chain_summary),  # Fast
#
# In this case, you could expect a 5-minute upgrade.  The following
# SQL shows the current schema version, provided that it is at least
# Abe13:
#
#    SELECT configvar_value FROM configvar
#     WHERE configvar_name = 'schema_version'
#
# "python -m Abe.abe -v" shows the schema version that the software
# requires.  Sometimes you can upgrade a live database by running
# "python -m Abe.abe --config YOUR_ABE_CONFIG --no-serve --upgrade"
# but this often results in server errors.

# Include another configuration file, relative to this one's directory.
#config ../secret/abe.conf

# Add or replace object fields.  This example assumes connect-args
# previously held an object such as { "user": "abe" }.
#connect-args += { "password": "B!tc0iN" }

# datadir lists directories to scan for block files.
#datadir = /home/bitcoin/.bitcoin
#datadir += /home/bitcoin/.bitcoin/testnet
#datadir += /home/bitcoin/.namecoin

# datadir can supply information about new currencies.
# Note that "address_version" is a byte string: the byte (or, perhaps
# someday, several bytes) preceding the public key hash before base-58
# conversion.  Example:
#
#datadir += [{
#        "dirname": "/home/weeds/testnet",
#        "chain":   "Weeds",
#        "code3":   "WDS",
#        "address_version": "\u00f3" }]
#datadir += [{
#        "dirname":"/home/namecoin/.namecoin/testnet",
#        "chain":"NCTestnet",
#        "code3":"NC0",
#        "address_version":"\u006f"}]

# Set binary-type=hex if you want to store binary data (hashes,
# scripts, keys, etc.) as hexadecimal strings regardless of the
# database's binary data support.  This affects only the first run,
# where Abe creates its tables.
#binary-type hex

# URL component for static content: logos, style sheets.
#static-path =

# Filesystem location of static content, if served by Abe.  Relative to
# the directory containing abe.py.
#document-root = htdocs

# Uncomment "auto-agpl" to add a "Source" link to each page pointing
# to a "/download" URL that streams the directory containing abe.py
# and all subdirectories as a compressed TAR archive.  This exposes
# files outside of the htdocs directory to the client, so use it with
# caution.
#auto-agpl

# Directory name and tarfile name prefix for auto-agpl source
# download.
#download-name = abe

# Primitive template system until I separate view from controller.
#template_vars += {
#    "APPNAME": "Abe",
#    "VERSION": "0.3",
#    "COPYRIGHT": "John Tobey",
#    "COPYRIGHT_YEARS": "2011",
#    "COPYRIGHT_URL": "mailto:John.Tobey@gmail.com",
#    "DONATIONS_BTC": "1PWC7PNHL1SgvZaN7xEtygenKjWobWsCuf",
#    "DONATIONS_NMC": "NJ3MSELK1cWnqUa6xhF2wUYAnz3RSrWXcK",
#}
#template_vars += { "DONATIONS_BTC": "1YourBitcoinAddressHere" }
#template = "
#<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
#  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
#<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">
#<head>
#    <link rel=\"stylesheet\" type=\"text/css\"
#     href=\"%(dotdot)s%(STATIC_PATH)sabe.css\" />
#    <link rel=\"shortcut icon\" href=\"%(dotdot)s%(STATIC_PATH)sfavicon.ico\" />
#    <title>%(title)s</title>
#</head>
#<body>
#    <h1><a href=\"%(dotdot)schains\"><img
#     src=\"%(dotdot)s%(STATIC_PATH)slogo32.png\" alt=\"Abe logo\" /></a> %(h1)s
#    </h1>
#    %(body)s
#    <p style=\"font-size: smaller\">
#        <span style=\"font-style: italic\">
#            <a href=\"%(ABE_URL)s\">%(APPNAME)s</a>
#            %(VERSION)s &#169; %(COPYRIGHT_YEARS)s
#            <a href=\"%(COPYRIGHT_URL)s\">%(COPYRIGHT)s</a>
#        </span>
#        Tips appreciated!
#        <a href=\"%(dotdot)saddress/%(DONATIONS_BTC)s\">BTC</a>
#        <a href=\"%(dotdot)saddress/%(DONATIONS_NMC)s\">NMC</a>
#    </p>
#</body>
#</html>
#"

# Save blocks to the database after reading this many bytes from a
# file.
#commit-bytes = 100000
