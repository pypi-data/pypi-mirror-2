
   typesafe - formal type asserting decorators, by Krister Hedfors

   Based on ActiveState recipe:
     http://code.activestate.com/recipes/454322-type-checking-decorator/


install:
  $ python setup.py install

examples:
  See example.py.


  Usage:
    from typesafe import types_hard, types_soft
    or
    from typesafe import *
    
    @types_hard( name=str, age=(int,float))
    def func_or_method(name, age):
        pass
    
    @types_hard(dict( name=str, age=(int,float) ))
    def func_or_method(name, age):
        pass
    
    The @types_hard() decorator raises HardTypesException unless
    calling arguments are of the specified type or types:
    @types_hard(argname=type, [...])
    @types_hard(argname=types, [...])
    
    The @types_soft() decorator raises SoftTypesException unless
    calling argument types match, or are subtypes, of the specified
    type or types. 
    @types_soft(argname=type, [...])
    @types_soft(argname=types, [...])

