# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _model_container_base
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


new_pdouble = _model_container_base.new_pdouble
copy_pdouble = _model_container_base.copy_pdouble
delete_pdouble = _model_container_base.delete_pdouble
pdouble_assign = _model_container_base.pdouble_assign
pdouble_value = _model_container_base.pdouble_value
SerialToString = _model_container_base.SerialToString
CoordinateTuple = _model_container_base.CoordinateTuple
ChildSymbolsToDictList = _model_container_base.ChildSymbolsToDictList
ChildSymbolsToList = _model_container_base.ChildSymbolsToList
ChildTypedSymbolsToList = _model_container_base.ChildTypedSymbolsToList
CoordinatesToList = _model_container_base.CoordinatesToList
AllChildSymbolsToList = _model_container_base.AllChildSymbolsToList
CoordinateDict = _model_container_base.CoordinateDict
AlgorithmInstanceGetName = _model_container_base.AlgorithmInstanceGetName
AlgorithmInstanceSetName = _model_container_base.AlgorithmInstanceSetName
TRUE = _model_container_base.TRUE
FALSE = _model_container_base.FALSE
class AlgorithmInstance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlgorithmInstance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlgorithmInstance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hsleLink"] = _model_container_base.AlgorithmInstance_hsleLink_set
    __swig_getmethods__["hsleLink"] = _model_container_base.AlgorithmInstance_hsleLink_get
    if _newclass:hsleLink = _swig_property(_model_container_base.AlgorithmInstance_hsleLink_get, _model_container_base.AlgorithmInstance_hsleLink_set)
    __swig_setmethods__["palgc"] = _model_container_base.AlgorithmInstance_palgc_set
    __swig_getmethods__["palgc"] = _model_container_base.AlgorithmInstance_palgc_get
    if _newclass:palgc = _swig_property(_model_container_base.AlgorithmInstance_palgc_get, _model_container_base.AlgorithmInstance_palgc_set)
    __swig_setmethods__["iFlags"] = _model_container_base.AlgorithmInstance_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.AlgorithmInstance_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.AlgorithmInstance_iFlags_get, _model_container_base.AlgorithmInstance_iFlags_set)
    __swig_setmethods__["pcIdentifier"] = _model_container_base.AlgorithmInstance_pcIdentifier_set
    __swig_getmethods__["pcIdentifier"] = _model_container_base.AlgorithmInstance_pcIdentifier_get
    if _newclass:pcIdentifier = _swig_property(_model_container_base.AlgorithmInstance_pcIdentifier_get, _model_container_base.AlgorithmInstance_pcIdentifier_set)
    def __init__(self, *args): 
        this = _model_container_base.new_AlgorithmInstance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_AlgorithmInstance
    __del__ = lambda self : None;
AlgorithmInstance_swigregister = _model_container_base.AlgorithmInstance_swigregister
AlgorithmInstance_swigregister(AlgorithmInstance)

AlgorithmInstanceCalloc = _model_container_base.AlgorithmInstanceCalloc
AlgorithmInstanceDisable = _model_container_base.AlgorithmInstanceDisable
AlgorithmInstanceInit = _model_container_base.AlgorithmInstanceInit
AlgorithmInstancePrintInfo = _model_container_base.AlgorithmInstancePrintInfo
AlgorithmInstanceSymbolHandler = _model_container_base.AlgorithmInstanceSymbolHandler
class AlgorithmSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlgorithmSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlgorithmSet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hslClasses"] = _model_container_base.AlgorithmSet_hslClasses_set
    __swig_getmethods__["hslClasses"] = _model_container_base.AlgorithmSet_hslClasses_get
    if _newclass:hslClasses = _swig_property(_model_container_base.AlgorithmSet_hslClasses_get, _model_container_base.AlgorithmSet_hslClasses_set)
    __swig_setmethods__["iClasses"] = _model_container_base.AlgorithmSet_iClasses_set
    __swig_getmethods__["iClasses"] = _model_container_base.AlgorithmSet_iClasses_get
    if _newclass:iClasses = _swig_property(_model_container_base.AlgorithmSet_iClasses_get, _model_container_base.AlgorithmSet_iClasses_set)
    __swig_setmethods__["hslInstances"] = _model_container_base.AlgorithmSet_hslInstances_set
    __swig_getmethods__["hslInstances"] = _model_container_base.AlgorithmSet_hslInstances_get
    if _newclass:hslInstances = _swig_property(_model_container_base.AlgorithmSet_hslInstances_get, _model_container_base.AlgorithmSet_hslInstances_set)
    __swig_setmethods__["iInstances"] = _model_container_base.AlgorithmSet_iInstances_set
    __swig_getmethods__["iInstances"] = _model_container_base.AlgorithmSet_iInstances_get
    if _newclass:iInstances = _swig_property(_model_container_base.AlgorithmSet_iInstances_get, _model_container_base.AlgorithmSet_iInstances_set)
    def __init__(self, *args): 
        this = _model_container_base.new_AlgorithmSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_AlgorithmSet
    __del__ = lambda self : None;
AlgorithmSet_swigregister = _model_container_base.AlgorithmSet_swigregister
AlgorithmSet_swigregister(AlgorithmSet)

AlgorithmSetCalloc = _model_container_base.AlgorithmSetCalloc
AlgorithmSetFree = _model_container_base.AlgorithmSetFree
AlgorithmSetInstantiateAlgorithm = _model_container_base.AlgorithmSetInstantiateAlgorithm
AlgorithmSetInit = _model_container_base.AlgorithmSetInit
AlgorithmSetLoadAlgorithmClass = _model_container_base.AlgorithmSetLoadAlgorithmClass
AlgorithmSetLookupAlgorithmClass = _model_container_base.AlgorithmSetLookupAlgorithmClass
AlgorithmSetPrint = _model_container_base.AlgorithmSetPrint
AlgorithmSetClassPrint = _model_container_base.AlgorithmSetClassPrint
AlgorithmSetInstancePrint = _model_container_base.AlgorithmSetInstancePrint
AlgorithmSymbolCalloc = _model_container_base.AlgorithmSymbolCalloc
AlgorithmSymbolCreateAlias = _model_container_base.AlgorithmSymbolCreateAlias
AlgorithmSymbolInit = _model_container_base.AlgorithmSymbolInit
AlgorithmSymbolSetAlgorithmInstance = _model_container_base.AlgorithmSymbolSetAlgorithmInstance
AlgorithmSymbolTraverse = _model_container_base.AlgorithmSymbolTraverse
AlgorithmSymbolAssignParameters = _model_container_base.AlgorithmSymbolAssignParameters
AlgorithmSymbolChangeParameter = _model_container_base.AlgorithmSymbolChangeParameter
AlgorithmSymbolGetName = _model_container_base.AlgorithmSymbolGetName
AlgorithmSymbolGetParameter = _model_container_base.AlgorithmSymbolGetParameter
AlgorithmSymbolGetPidin = _model_container_base.AlgorithmSymbolGetPidin
AlgorithmSymbolParameterResolveValue = _model_container_base.AlgorithmSymbolParameterResolveValue
class descr_AlgorithmSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_AlgorithmSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_AlgorithmSymbol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["palgi"] = _model_container_base.descr_AlgorithmSymbol_palgi_set
    __swig_getmethods__["palgi"] = _model_container_base.descr_AlgorithmSymbol_palgi_get
    if _newclass:palgi = _swig_property(_model_container_base.descr_AlgorithmSymbol_palgi_get, _model_container_base.descr_AlgorithmSymbol_palgi_set)
    __swig_setmethods__["pidin"] = _model_container_base.descr_AlgorithmSymbol_pidin_set
    __swig_getmethods__["pidin"] = _model_container_base.descr_AlgorithmSymbol_pidin_get
    if _newclass:pidin = _swig_property(_model_container_base.descr_AlgorithmSymbol_pidin_get, _model_container_base.descr_AlgorithmSymbol_pidin_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_AlgorithmSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_AlgorithmSymbol
    __del__ = lambda self : None;
descr_AlgorithmSymbol_swigregister = _model_container_base.descr_AlgorithmSymbol_swigregister
descr_AlgorithmSymbol_swigregister(descr_AlgorithmSymbol)

class symtab_AlgorithmSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_AlgorithmSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_AlgorithmSymbol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hsle"] = _model_container_base.symtab_AlgorithmSymbol_hsle_set
    __swig_getmethods__["hsle"] = _model_container_base.symtab_AlgorithmSymbol_hsle_get
    if _newclass:hsle = _swig_property(_model_container_base.symtab_AlgorithmSymbol_hsle_get, _model_container_base.symtab_AlgorithmSymbol_hsle_set)
    __swig_setmethods__["dealgs"] = _model_container_base.symtab_AlgorithmSymbol_dealgs_set
    __swig_getmethods__["dealgs"] = _model_container_base.symtab_AlgorithmSymbol_dealgs_get
    if _newclass:dealgs = _swig_property(_model_container_base.symtab_AlgorithmSymbol_dealgs_get, _model_container_base.symtab_AlgorithmSymbol_dealgs_set)
    __swig_setmethods__["pparc"] = _model_container_base.symtab_AlgorithmSymbol_pparc_set
    __swig_getmethods__["pparc"] = _model_container_base.symtab_AlgorithmSymbol_pparc_get
    if _newclass:pparc = _swig_property(_model_container_base.symtab_AlgorithmSymbol_pparc_get, _model_container_base.symtab_AlgorithmSymbol_pparc_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_AlgorithmSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_AlgorithmSymbol
    __del__ = lambda self : None;
symtab_AlgorithmSymbol_swigregister = _model_container_base.symtab_AlgorithmSymbol_swigregister
symtab_AlgorithmSymbol_swigregister(symtab_AlgorithmSymbol)

AttachmentCalloc = _model_container_base.AttachmentCalloc
AttachmentCollectMandatoryParameterValues = _model_container_base.AttachmentCollectMandatoryParameterValues
AttachmentCreateAlias = _model_container_base.AttachmentCreateAlias
AttachmentGetType = _model_container_base.AttachmentGetType
AttachmentInit = _model_container_base.AttachmentInit
AttachmentSetType = _model_container_base.AttachmentSetType
class descr_Attachment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Attachment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Attachment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pcDataType"] = _model_container_base.descr_Attachment_pcDataType_set
    __swig_getmethods__["pcDataType"] = _model_container_base.descr_Attachment_pcDataType_get
    if _newclass:pcDataType = _swig_property(_model_container_base.descr_Attachment_pcDataType_get, _model_container_base.descr_Attachment_pcDataType_set)
    __swig_setmethods__["iType"] = _model_container_base.descr_Attachment_iType_set
    __swig_getmethods__["iType"] = _model_container_base.descr_Attachment_iType_get
    if _newclass:iType = _swig_property(_model_container_base.descr_Attachment_iType_get, _model_container_base.descr_Attachment_iType_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Attachment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Attachment
    __del__ = lambda self : None;
descr_Attachment_swigregister = _model_container_base.descr_Attachment_swigregister
descr_Attachment_swigregister(descr_Attachment)

class symtab_Attachment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Attachment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Attachment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_Attachment_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_Attachment_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_Attachment_bio_get, _model_container_base.symtab_Attachment_bio_set)
    __swig_setmethods__["deatta"] = _model_container_base.symtab_Attachment_deatta_set
    __swig_getmethods__["deatta"] = _model_container_base.symtab_Attachment_deatta_get
    if _newclass:deatta = _swig_property(_model_container_base.symtab_Attachment_deatta_get, _model_container_base.symtab_Attachment_deatta_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Attachment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Attachment
    __del__ = lambda self : None;
symtab_Attachment_swigregister = _model_container_base.symtab_Attachment_swigregister
symtab_Attachment_swigregister(symtab_Attachment)

TYPE_ATTACHMENT_INCOMING = _model_container_base.TYPE_ATTACHMENT_INCOMING
TYPE_ATTACHMENT_OUTGOING = _model_container_base.TYPE_ATTACHMENT_OUTGOING
AttachmentPointIsIncoming = _model_container_base.AttachmentPointIsIncoming
AttachmentPointIsOutgoing = _model_container_base.AttachmentPointIsOutgoing
AttachmentSetDataType = _model_container_base.AttachmentSetDataType
AxonHillockCalloc = _model_container_base.AxonHillockCalloc
AxonHillockCreateAlias = _model_container_base.AxonHillockCreateAlias
AxonHillockInit = _model_container_base.AxonHillockInit
class descr_AxonHillock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_AxonHillock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_AxonHillock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_AxonHillock_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_AxonHillock_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_AxonHillock_iHappy_get, _model_container_base.descr_AxonHillock_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_AxonHillock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_AxonHillock
    __del__ = lambda self : None;
descr_AxonHillock_swigregister = _model_container_base.descr_AxonHillock_swigregister
descr_AxonHillock_swigregister(descr_AxonHillock)

class symtab_AxonHillock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_AxonHillock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_AxonHillock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segr"] = _model_container_base.symtab_AxonHillock_segr_set
    __swig_getmethods__["segr"] = _model_container_base.symtab_AxonHillock_segr_get
    if _newclass:segr = _swig_property(_model_container_base.symtab_AxonHillock_segr_get, _model_container_base.symtab_AxonHillock_segr_set)
    __swig_setmethods__["deaxhi"] = _model_container_base.symtab_AxonHillock_deaxhi_set
    __swig_getmethods__["deaxhi"] = _model_container_base.symtab_AxonHillock_deaxhi_get
    if _newclass:deaxhi = _swig_property(_model_container_base.symtab_AxonHillock_deaxhi_get, _model_container_base.symtab_AxonHillock_deaxhi_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_AxonHillock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_AxonHillock
    __del__ = lambda self : None;
symtab_AxonHillock_swigregister = _model_container_base.symtab_AxonHillock_swigregister
symtab_AxonHillock_swigregister(symtab_AxonHillock)

class symtab_BioComponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_BioComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_BioComponent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ioh"] = _model_container_base.symtab_BioComponent_ioh_set
    __swig_getmethods__["ioh"] = _model_container_base.symtab_BioComponent_ioh_get
    if _newclass:ioh = _swig_property(_model_container_base.symtab_BioComponent_ioh_get, _model_container_base.symtab_BioComponent_ioh_set)
    __swig_setmethods__["pidinName"] = _model_container_base.symtab_BioComponent_pidinName_set
    __swig_getmethods__["pidinName"] = _model_container_base.symtab_BioComponent_pidinName_get
    if _newclass:pidinName = _swig_property(_model_container_base.symtab_BioComponent_pidinName_get, _model_container_base.symtab_BioComponent_pidinName_set)
    __swig_setmethods__["phslePrototype"] = _model_container_base.symtab_BioComponent_phslePrototype_set
    __swig_getmethods__["phslePrototype"] = _model_container_base.symtab_BioComponent_phslePrototype_get
    if _newclass:phslePrototype = _swig_property(_model_container_base.symtab_BioComponent_phslePrototype_get, _model_container_base.symtab_BioComponent_phslePrototype_set)
    __swig_setmethods__["iPrototype"] = _model_container_base.symtab_BioComponent_iPrototype_set
    __swig_getmethods__["iPrototype"] = _model_container_base.symtab_BioComponent_iPrototype_get
    if _newclass:iPrototype = _swig_property(_model_container_base.symtab_BioComponent_iPrototype_get, _model_container_base.symtab_BioComponent_iPrototype_set)
    __swig_setmethods__["pparc"] = _model_container_base.symtab_BioComponent_pparc_set
    __swig_getmethods__["pparc"] = _model_container_base.symtab_BioComponent_pparc_get
    if _newclass:pparc = _swig_property(_model_container_base.symtab_BioComponent_pparc_get, _model_container_base.symtab_BioComponent_pparc_set)
    __swig_setmethods__["iOptions"] = _model_container_base.symtab_BioComponent_iOptions_set
    __swig_getmethods__["iOptions"] = _model_container_base.symtab_BioComponent_iOptions_get
    if _newclass:iOptions = _swig_property(_model_container_base.symtab_BioComponent_iOptions_get, _model_container_base.symtab_BioComponent_iOptions_set)
    __swig_setmethods__["pcNamespace"] = _model_container_base.symtab_BioComponent_pcNamespace_set
    __swig_getmethods__["pcNamespace"] = _model_container_base.symtab_BioComponent_pcNamespace_get
    if _newclass:pcNamespace = _swig_property(_model_container_base.symtab_BioComponent_pcNamespace_get, _model_container_base.symtab_BioComponent_pcNamespace_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_BioComponent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_BioComponent
    __del__ = lambda self : None;
symtab_BioComponent_swigregister = _model_container_base.symtab_BioComponent_swigregister
symtab_BioComponent_swigregister(symtab_BioComponent)

BIOCOMP_OPTION_TAG_SET = _model_container_base.BIOCOMP_OPTION_TAG_SET
BIOCOMP_OPTION_NO_PROTOTYPE_TRAVERSAL = _model_container_base.BIOCOMP_OPTION_NO_PROTOTYPE_TRAVERSAL
BioComponentAssignUniquePrototypeID = _model_container_base.BioComponentAssignUniquePrototypeID
SymbolSpikeGeneratorSelector = _model_container_base.SymbolSpikeGeneratorSelector
BioComponentCountSpikeGenerators = _model_container_base.BioComponentCountSpikeGenerators
SymbolSpikeReceiverSelector = _model_container_base.SymbolSpikeReceiverSelector
BioComponentCountSpikeReceivers = _model_container_base.BioComponentCountSpikeReceivers
BioComponentCreateAlias = _model_container_base.BioComponentCreateAlias
BioComponentCreateAliasses = _model_container_base.BioComponentCreateAliasses
BioComponentExportParametersYAML = _model_container_base.BioComponentExportParametersYAML
BioComponentGetChildFromInput = _model_container_base.BioComponentGetChildFromInput
BioComponentGetModifiableParameter = _model_container_base.BioComponentGetModifiableParameter
BioComponentGetParameter = _model_container_base.BioComponentGetParameter
BioComponentGetPrototypeList = _model_container_base.BioComponentGetPrototypeList
BioComponentInit = _model_container_base.BioComponentInit
BioComponentLookupBindableIO = _model_container_base.BioComponentLookupBindableIO
BioComponentLookupHierarchical = _model_container_base.BioComponentLookupHierarchical
BioComponentLookupSerialID = _model_container_base.BioComponentLookupSerialID
BioComponentPrint = _model_container_base.BioComponentPrint
BioComponentReduce = _model_container_base.BioComponentReduce
BioComponentResolveInput = _model_container_base.BioComponentResolveInput
BioComponentResolveTypedInput = _model_container_base.BioComponentResolveTypedInput
BioComponentResolveParameterFunctionalInput = _model_container_base.BioComponentResolveParameterFunctionalInput
BioComponentSetParameterContext = _model_container_base.BioComponentSetParameterContext
BioComponentSetParameterDouble = _model_container_base.BioComponentSetParameterDouble
BioComponentSetParameterMayBeCopyString = _model_container_base.BioComponentSetParameterMayBeCopyString
BioComponentSetParameterString = _model_container_base.BioComponentSetParameterString
BioComponentTraverse = _model_container_base.BioComponentTraverse
BioComponentTraverseSpikeGenerators = _model_container_base.BioComponentTraverseSpikeGenerators
BioComponentTraverseSpikeReceivers = _model_container_base.BioComponentTraverseSpikeReceivers
BioComponentAssignParameters = _model_container_base.BioComponentAssignParameters
BioComponentChangeParameter = _model_container_base.BioComponentChangeParameter
BioComponentGetName = _model_container_base.BioComponentGetName
BioComponentGetOptions = _model_container_base.BioComponentGetOptions
BioComponentGetPidin = _model_container_base.BioComponentGetPidin
BioComponentGetPrototype = _model_container_base.BioComponentGetPrototype
BioComponentParameterLinkAtEnd = _model_container_base.BioComponentParameterLinkAtEnd
BioComponentParameterResolveValue = _model_container_base.BioComponentParameterResolveValue
BioComponentSetAtXYZ = _model_container_base.BioComponentSetAtXYZ
BioComponentSetName = _model_container_base.BioComponentSetName
BioComponentSetNamespace = _model_container_base.BioComponentSetNamespace
BioComponentSetOptions = _model_container_base.BioComponentSetOptions
BioComponentSetPrototype = _model_container_base.BioComponentSetPrototype
CellCalloc = _model_container_base.CellCalloc
CellCreateAlias = _model_container_base.CellCreateAlias
CellInit = _model_container_base.CellInit
CellNewAtXYZ = _model_container_base.CellNewAtXYZ
class descr_Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Cell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iType"] = _model_container_base.descr_Cell_iType_set
    __swig_getmethods__["iType"] = _model_container_base.descr_Cell_iType_get
    if _newclass:iType = _swig_property(_model_container_base.descr_Cell_iType_get, _model_container_base.descr_Cell_iType_set)
    __swig_setmethods__["iFlags"] = _model_container_base.descr_Cell_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.descr_Cell_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.descr_Cell_iFlags_get, _model_container_base.descr_Cell_iFlags_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Cell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Cell
    __del__ = lambda self : None;
descr_Cell_swigregister = _model_container_base.descr_Cell_swigregister
descr_Cell_swigregister(descr_Cell)

class symtab_Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Cell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segr"] = _model_container_base.symtab_Cell_segr_set
    __swig_getmethods__["segr"] = _model_container_base.symtab_Cell_segr_get
    if _newclass:segr = _swig_property(_model_container_base.symtab_Cell_segr_get, _model_container_base.symtab_Cell_segr_set)
    __swig_setmethods__["decell"] = _model_container_base.symtab_Cell_decell_set
    __swig_getmethods__["decell"] = _model_container_base.symtab_Cell_decell_get
    if _newclass:decell = _swig_property(_model_container_base.symtab_Cell_decell_get, _model_container_base.symtab_Cell_decell_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Cell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Cell
    __del__ = lambda self : None;
symtab_Cell_swigregister = _model_container_base.symtab_Cell_swigregister
symtab_Cell_swigregister(symtab_Cell)

ChannelCalloc = _model_container_base.ChannelCalloc
ChannelCollectMandatoryParameterValues = _model_container_base.ChannelCollectMandatoryParameterValues
ChannelCreateAlias = _model_container_base.ChannelCreateAlias
ChannelGetEquation = _model_container_base.ChannelGetEquation
ChannelGetGenesisObject = _model_container_base.ChannelGetGenesisObject
ChannelGetIncomingVirtual = _model_container_base.ChannelGetIncomingVirtual
ChannelGetParameter = _model_container_base.ChannelGetParameter
ChannelHasEquation = _model_container_base.ChannelHasEquation
ChannelHasMGBlockGMAX = _model_container_base.ChannelHasMGBlockGMAX
ChannelHasNernstErev = _model_container_base.ChannelHasNernstErev
ChannelInit = _model_container_base.ChannelInit
ChannelParameterScaleValue = _model_container_base.ChannelParameterScaleValue
ChannelReceivesSpikes = _model_container_base.ChannelReceivesSpikes
ChannelReduce = _model_container_base.ChannelReduce
ChannelSetTableParameters = _model_container_base.ChannelSetTableParameters
ChannelSetup = _model_container_base.ChannelSetup
class descr_genesis_object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_genesis_object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_genesis_object, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iType"] = _model_container_base.descr_genesis_object_iType_set
    __swig_getmethods__["iType"] = _model_container_base.descr_genesis_object_iType_get
    if _newclass:iType = _swig_property(_model_container_base.descr_genesis_object_iType_get, _model_container_base.descr_genesis_object_iType_set)
    __swig_getmethods__["uElement"] = _model_container_base.descr_genesis_object_uElement_get
    if _newclass:uElement = _swig_property(_model_container_base.descr_genesis_object_uElement_get)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_genesis_object(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_genesis_object
    __del__ = lambda self : None;
descr_genesis_object_swigregister = _model_container_base.descr_genesis_object_swigregister
descr_genesis_object_swigregister(descr_genesis_object)

class descr_genesis_object_uElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_genesis_object_uElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_genesis_object_uElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tabchan"] = _model_container_base.descr_genesis_object_uElement_tabchan_set
    __swig_getmethods__["tabchan"] = _model_container_base.descr_genesis_object_uElement_tabchan_get
    if _newclass:tabchan = _swig_property(_model_container_base.descr_genesis_object_uElement_tabchan_get, _model_container_base.descr_genesis_object_uElement_tabchan_set)
    __swig_setmethods__["tab2chan"] = _model_container_base.descr_genesis_object_uElement_tab2chan_set
    __swig_getmethods__["tab2chan"] = _model_container_base.descr_genesis_object_uElement_tab2chan_get
    if _newclass:tab2chan = _swig_property(_model_container_base.descr_genesis_object_uElement_tab2chan_get, _model_container_base.descr_genesis_object_uElement_tab2chan_set)
    __swig_setmethods__["tabcurr"] = _model_container_base.descr_genesis_object_uElement_tabcurr_set
    __swig_getmethods__["tabcurr"] = _model_container_base.descr_genesis_object_uElement_tabcurr_get
    if _newclass:tabcurr = _swig_property(_model_container_base.descr_genesis_object_uElement_tabcurr_get, _model_container_base.descr_genesis_object_uElement_tabcurr_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_genesis_object_uElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_genesis_object_uElement
    __del__ = lambda self : None;
descr_genesis_object_uElement_swigregister = _model_container_base.descr_genesis_object_uElement_swigregister
descr_genesis_object_uElement_swigregister(descr_genesis_object_uElement)

class descr_Channel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Channel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iType"] = _model_container_base.descr_Channel_iType_set
    __swig_getmethods__["iType"] = _model_container_base.descr_Channel_iType_get
    if _newclass:iType = _swig_property(_model_container_base.descr_Channel_iType_get, _model_container_base.descr_Channel_iType_set)
    __swig_setmethods__["pcFilename"] = _model_container_base.descr_Channel_pcFilename_set
    __swig_getmethods__["pcFilename"] = _model_container_base.descr_Channel_pcFilename_get
    if _newclass:pcFilename = _swig_property(_model_container_base.descr_Channel_pcFilename_get, _model_container_base.descr_Channel_pcFilename_set)
    __swig_setmethods__["genObject"] = _model_container_base.descr_Channel_genObject_set
    __swig_getmethods__["genObject"] = _model_container_base.descr_Channel_genObject_get
    if _newclass:genObject = _swig_property(_model_container_base.descr_Channel_genObject_get, _model_container_base.descr_Channel_genObject_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Channel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Channel
    __del__ = lambda self : None;
descr_Channel_swigregister = _model_container_base.descr_Channel_swigregister
descr_Channel_swigregister(descr_Channel)

class symtab_Channel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Channel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_Channel_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_Channel_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_Channel_bio_get, _model_container_base.symtab_Channel_bio_set)
    __swig_setmethods__["dechan"] = _model_container_base.symtab_Channel_dechan_set
    __swig_getmethods__["dechan"] = _model_container_base.symtab_Channel_dechan_get
    if _newclass:dechan = _swig_property(_model_container_base.symtab_Channel_dechan_get, _model_container_base.symtab_Channel_dechan_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Channel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Channel
    __del__ = lambda self : None;
symtab_Channel_swigregister = _model_container_base.symtab_Channel_swigregister
symtab_Channel_swigregister(symtab_Channel)

TYPE_CHANNEL_EQUATION = _model_container_base.TYPE_CHANNEL_EQUATION
TYPE_CHANNEL_TABLEFILE = _model_container_base.TYPE_CHANNEL_TABLEFILE
TYPE_CHANNEL_VIRTUALCONNECTION = _model_container_base.TYPE_CHANNEL_VIRTUALCONNECTION
TYPE_CHANNEL_PARAMETERS = _model_container_base.TYPE_CHANNEL_PARAMETERS
ConnectionCalloc = _model_container_base.ConnectionCalloc
ConnectionGetParameter = _model_container_base.ConnectionGetParameter
ConnectionGetSpikeGenerator = _model_container_base.ConnectionGetSpikeGenerator
ConnectionGetSpikeReceiver = _model_container_base.ConnectionGetSpikeReceiver
ConnectionInit = _model_container_base.ConnectionInit
ConnectionNewForStandardConnection = _model_container_base.ConnectionNewForStandardConnection
ConnectionParameterResolveValue = _model_container_base.ConnectionParameterResolveValue
ConnectionPrint = _model_container_base.ConnectionPrint
ConnectionTraverse = _model_container_base.ConnectionTraverse
ConnectionAllSerialsToParentGet = _model_container_base.ConnectionAllSerialsToParentGet
ConnectionAllSerialsToParentSet = _model_container_base.ConnectionAllSerialsToParentSet
ConnectionAllSuccessorsGet = _model_container_base.ConnectionAllSuccessorsGet
ConnectionAllSuccessorsSet = _model_container_base.ConnectionAllSuccessorsSet
ConnectionGetPost = _model_container_base.ConnectionGetPost
ConnectionGetPre = _model_container_base.ConnectionGetPre
class descr_Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Connection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iPreSynaptic"] = _model_container_base.descr_Connection_iPreSynaptic_set
    __swig_getmethods__["iPreSynaptic"] = _model_container_base.descr_Connection_iPreSynaptic_get
    if _newclass:iPreSynaptic = _swig_property(_model_container_base.descr_Connection_iPreSynaptic_get, _model_container_base.descr_Connection_iPreSynaptic_set)
    __swig_setmethods__["iPostSynaptic"] = _model_container_base.descr_Connection_iPostSynaptic_set
    __swig_getmethods__["iPostSynaptic"] = _model_container_base.descr_Connection_iPostSynaptic_get
    if _newclass:iPostSynaptic = _swig_property(_model_container_base.descr_Connection_iPostSynaptic_get, _model_container_base.descr_Connection_iPostSynaptic_set)
    __swig_setmethods__["dWeight"] = _model_container_base.descr_Connection_dWeight_set
    __swig_getmethods__["dWeight"] = _model_container_base.descr_Connection_dWeight_get
    if _newclass:dWeight = _swig_property(_model_container_base.descr_Connection_dWeight_get, _model_container_base.descr_Connection_dWeight_set)
    __swig_setmethods__["dDelay"] = _model_container_base.descr_Connection_dDelay_set
    __swig_getmethods__["dDelay"] = _model_container_base.descr_Connection_dDelay_get
    if _newclass:dDelay = _swig_property(_model_container_base.descr_Connection_dDelay_get, _model_container_base.descr_Connection_dDelay_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Connection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Connection
    __del__ = lambda self : None;
descr_Connection_swigregister = _model_container_base.descr_Connection_swigregister
descr_Connection_swigregister(descr_Connection)

class symtab_Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Connection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deconn"] = _model_container_base.symtab_Connection_deconn_set
    __swig_getmethods__["deconn"] = _model_container_base.symtab_Connection_deconn_get
    if _newclass:deconn = _swig_property(_model_container_base.symtab_Connection_deconn_get, _model_container_base.symtab_Connection_deconn_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Connection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Connection
    __del__ = lambda self : None;
symtab_Connection_swigregister = _model_container_base.symtab_Connection_swigregister
symtab_Connection_swigregister(symtab_Connection)

ConnectionGetDelay = _model_container_base.ConnectionGetDelay
ConnectionGetWeight = _model_container_base.ConnectionGetWeight
ContourPointCalloc = _model_container_base.ContourPointCalloc
ContourPointCreateAlias = _model_container_base.ContourPointCreateAlias
ContourPointGetParameter = _model_container_base.ContourPointGetParameter
ContourPointInit = _model_container_base.ContourPointInit
class descr_ContourPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_ContourPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_ContourPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_ContourPoint_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_ContourPoint_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_ContourPoint_iHappy_get, _model_container_base.descr_ContourPoint_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_ContourPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_ContourPoint
    __del__ = lambda self : None;
descr_ContourPoint_swigregister = _model_container_base.descr_ContourPoint_swigregister
descr_ContourPoint_swigregister(descr_ContourPoint)

class symtab_ContourPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_ContourPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_ContourPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_ContourPoint_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_ContourPoint_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_ContourPoint_bio_get, _model_container_base.symtab_ContourPoint_bio_set)
    __swig_setmethods__["degatk"] = _model_container_base.symtab_ContourPoint_degatk_set
    __swig_getmethods__["degatk"] = _model_container_base.symtab_ContourPoint_degatk_get
    if _newclass:degatk = _swig_property(_model_container_base.symtab_ContourPoint_degatk_get, _model_container_base.symtab_ContourPoint_degatk_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_ContourPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_ContourPoint
    __del__ = lambda self : None;
symtab_ContourPoint_swigregister = _model_container_base.symtab_ContourPoint_swigregister
symtab_ContourPoint_swigregister(symtab_ContourPoint)

class DependencyFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DependencyFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DependencyFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hsleLink"] = _model_container_base.DependencyFile_hsleLink_set
    __swig_getmethods__["hsleLink"] = _model_container_base.DependencyFile_hsleLink_get
    if _newclass:hsleLink = _swig_property(_model_container_base.DependencyFile_hsleLink_get, _model_container_base.DependencyFile_hsleLink_set)
    __swig_setmethods__["pcNamespace"] = _model_container_base.DependencyFile_pcNamespace_set
    __swig_getmethods__["pcNamespace"] = _model_container_base.DependencyFile_pcNamespace_get
    if _newclass:pcNamespace = _swig_property(_model_container_base.DependencyFile_pcNamespace_get, _model_container_base.DependencyFile_pcNamespace_set)
    __swig_setmethods__["pifSymbols"] = _model_container_base.DependencyFile_pifSymbols_set
    __swig_getmethods__["pifSymbols"] = _model_container_base.DependencyFile_pifSymbols_get
    if _newclass:pifSymbols = _swig_property(_model_container_base.DependencyFile_pifSymbols_get, _model_container_base.DependencyFile_pifSymbols_set)
    def __init__(self, *args): 
        this = _model_container_base.new_DependencyFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_DependencyFile
    __del__ = lambda self : None;
DependencyFile_swigregister = _model_container_base.DependencyFile_swigregister
DependencyFile_swigregister(DependencyFile)

DependencyFileCallocNameSpaceImportedFile = _model_container_base.DependencyFileCallocNameSpaceImportedFile
DependencyFileGetImportedFile = _model_container_base.DependencyFileGetImportedFile
DependencyFileGetNameSpace = _model_container_base.DependencyFileGetNameSpace
DependencyFilePrint = _model_container_base.DependencyFilePrint
DependencyFileSetImportedFile = _model_container_base.DependencyFileSetImportedFile
DependencyFileSetNameSpace = _model_container_base.DependencyFileSetNameSpace
EMContourCalloc = _model_container_base.EMContourCalloc
EMContourCreateAlias = _model_container_base.EMContourCreateAlias
EMContourInit = _model_container_base.EMContourInit
class descr_EMContour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_EMContour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_EMContour, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_EMContour_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_EMContour_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_EMContour_iHappy_get, _model_container_base.descr_EMContour_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_EMContour(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_EMContour
    __del__ = lambda self : None;
descr_EMContour_swigregister = _model_container_base.descr_EMContour_swigregister
descr_EMContour_swigregister(descr_EMContour)

class symtab_EMContour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_EMContour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_EMContour, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_EMContour_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_EMContour_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_EMContour_bio_get, _model_container_base.symtab_EMContour_bio_set)
    __swig_setmethods__["degatk"] = _model_container_base.symtab_EMContour_degatk_set
    __swig_getmethods__["degatk"] = _model_container_base.symtab_EMContour_degatk_get
    if _newclass:degatk = _swig_property(_model_container_base.symtab_EMContour_degatk_get, _model_container_base.symtab_EMContour_degatk_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_EMContour(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_EMContour
    __del__ = lambda self : None;
symtab_EMContour_swigregister = _model_container_base.symtab_EMContour_swigregister
symtab_EMContour_swigregister(symtab_EMContour)

EquationExponentialCalloc = _model_container_base.EquationExponentialCalloc
EquationExponentialCollectMandatoryParameterValues = _model_container_base.EquationExponentialCollectMandatoryParameterValues
EquationExponentialCreateAlias = _model_container_base.EquationExponentialCreateAlias
EquationExponentialInit = _model_container_base.EquationExponentialInit
class symtab_EquationExponential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_EquationExponential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_EquationExponential, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_EquationExponential_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_EquationExponential_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_EquationExponential_bio_get, _model_container_base.symtab_EquationExponential_bio_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_EquationExponential(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_EquationExponential
    __del__ = lambda self : None;
symtab_EquationExponential_swigregister = _model_container_base.symtab_EquationExponential_swigregister
symtab_EquationExponential_swigregister(symtab_EquationExponential)

FiberCalloc = _model_container_base.FiberCalloc
FiberCountSpikeGenerators = _model_container_base.FiberCountSpikeGenerators
FiberCreateAlias = _model_container_base.FiberCreateAlias
FiberInit = _model_container_base.FiberInit
FiberNewAtXYZ = _model_container_base.FiberNewAtXYZ
class descr_Fiber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Fiber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Fiber, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_Fiber_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_Fiber_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_Fiber_iHappy_get, _model_container_base.descr_Fiber_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Fiber(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Fiber
    __del__ = lambda self : None;
descr_Fiber_swigregister = _model_container_base.descr_Fiber_swigregister
descr_Fiber_swigregister(descr_Fiber)

class symtab_Fiber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Fiber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Fiber, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segr"] = _model_container_base.symtab_Fiber_segr_set
    __swig_getmethods__["segr"] = _model_container_base.symtab_Fiber_segr_get
    if _newclass:segr = _swig_property(_model_container_base.symtab_Fiber_segr_get, _model_container_base.symtab_Fiber_segr_set)
    __swig_setmethods__["defibr"] = _model_container_base.symtab_Fiber_defibr_set
    __swig_getmethods__["defibr"] = _model_container_base.symtab_Fiber_defibr_get
    if _newclass:defibr = _swig_property(_model_container_base.symtab_Fiber_defibr_get, _model_container_base.symtab_Fiber_defibr_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Fiber(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Fiber
    __del__ = lambda self : None;
symtab_Fiber_swigregister = _model_container_base.symtab_Fiber_swigregister
symtab_Fiber_swigregister(symtab_Fiber)

class symtab_Function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Function, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pparc"] = _model_container_base.symtab_Function_pparc_set
    __swig_getmethods__["pparc"] = _model_container_base.symtab_Function_pparc_get
    if _newclass:pparc = _swig_property(_model_container_base.symtab_Function_pparc_get, _model_container_base.symtab_Function_pparc_set)
    __swig_setmethods__["pcName"] = _model_container_base.symtab_Function_pcName_set
    __swig_getmethods__["pcName"] = _model_container_base.symtab_Function_pcName_get
    if _newclass:pcName = _swig_property(_model_container_base.symtab_Function_pcName_get, _model_container_base.symtab_Function_pcName_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Function(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Function
    __del__ = lambda self : None;
symtab_Function_swigregister = _model_container_base.symtab_Function_swigregister
symtab_Function_swigregister(symtab_Function)

FunctionAssignParameters = _model_container_base.FunctionAssignParameters
FunctionAllowsScaling = _model_container_base.FunctionAllowsScaling
FunctionCalloc = _model_container_base.FunctionCalloc
FunctionGetName = _model_container_base.FunctionGetName
FunctionGetParameter = _model_container_base.FunctionGetParameter
FunctionInit = _model_container_base.FunctionInit
FunctionPrint = _model_container_base.FunctionPrint
FunctionResolveInput = _model_container_base.FunctionResolveInput
FunctionSetName = _model_container_base.FunctionSetName
FunctionValue = _model_container_base.FunctionValue
GateKineticCalloc = _model_container_base.GateKineticCalloc
GateKineticCreateAlias = _model_container_base.GateKineticCreateAlias
GateKineticGetParameter = _model_container_base.GateKineticGetParameter
GateKineticInit = _model_container_base.GateKineticInit
class descr_GateKinetic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_GateKinetic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_GateKinetic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_GateKinetic_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_GateKinetic_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_GateKinetic_iHappy_get, _model_container_base.descr_GateKinetic_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_GateKinetic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_GateKinetic
    __del__ = lambda self : None;
descr_GateKinetic_swigregister = _model_container_base.descr_GateKinetic_swigregister
descr_GateKinetic_swigregister(descr_GateKinetic)

class symtab_GateKinetic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_GateKinetic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_GateKinetic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_GateKinetic_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_GateKinetic_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_GateKinetic_bio_get, _model_container_base.symtab_GateKinetic_bio_set)
    __swig_setmethods__["degatk"] = _model_container_base.symtab_GateKinetic_degatk_set
    __swig_getmethods__["degatk"] = _model_container_base.symtab_GateKinetic_degatk_get
    if _newclass:degatk = _swig_property(_model_container_base.symtab_GateKinetic_degatk_get, _model_container_base.symtab_GateKinetic_degatk_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_GateKinetic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_GateKinetic
    __del__ = lambda self : None;
symtab_GateKinetic_swigregister = _model_container_base.symtab_GateKinetic_swigregister
symtab_GateKinetic_swigregister(symtab_GateKinetic)

GroupCalloc = _model_container_base.GroupCalloc
GroupCountSpikeGenerators = _model_container_base.GroupCountSpikeGenerators
GroupCreateAlias = _model_container_base.GroupCreateAlias
GroupInit = _model_container_base.GroupInit
GroupNewAtXYZ = _model_container_base.GroupNewAtXYZ
class descr_Group(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Group, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Group, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_Group_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_Group_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_Group_iHappy_get, _model_container_base.descr_Group_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Group
    __del__ = lambda self : None;
descr_Group_swigregister = _model_container_base.descr_Group_swigregister
descr_Group_swigregister(descr_Group)

class symtab_Group(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Group, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Group, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_Group_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_Group_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_Group_bio_get, _model_container_base.symtab_Group_bio_set)
    __swig_setmethods__["degrup"] = _model_container_base.symtab_Group_degrup_set
    __swig_getmethods__["degrup"] = _model_container_base.symtab_Group_degrup_get
    if _newclass:degrup = _swig_property(_model_container_base.symtab_Group_degrup_get, _model_container_base.symtab_Group_degrup_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Group
    __del__ = lambda self : None;
symtab_Group_swigregister = _model_container_base.symtab_Group_swigregister
symtab_Group_swigregister(symtab_Group)

GroupedParametersCalloc = _model_container_base.GroupedParametersCalloc
GroupedParametersInit = _model_container_base.GroupedParametersInit
class symtab_GroupedParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_GroupedParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_GroupedParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_GroupedParameters_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_GroupedParameters_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_GroupedParameters_bio_get, _model_container_base.symtab_GroupedParameters_bio_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_GroupedParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_GroupedParameters
    __del__ = lambda self : None;
symtab_GroupedParameters_swigregister = _model_container_base.symtab_GroupedParameters_swigregister
symtab_GroupedParameters_swigregister(symtab_GroupedParameters)

class table_parameter_collector_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_parameter_collector_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_parameter_collector_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pcParameter"] = _model_container_base.table_parameter_collector_data_pcParameter_set
    __swig_getmethods__["pcParameter"] = _model_container_base.table_parameter_collector_data_pcParameter_get
    if _newclass:pcParameter = _swig_property(_model_container_base.table_parameter_collector_data_pcParameter_get, _model_container_base.table_parameter_collector_data_pcParameter_set)
    __swig_setmethods__["iValue"] = _model_container_base.table_parameter_collector_data_iValue_set
    __swig_getmethods__["iValue"] = _model_container_base.table_parameter_collector_data_iValue_get
    if _newclass:iValue = _swig_property(_model_container_base.table_parameter_collector_data_iValue_get, _model_container_base.table_parameter_collector_data_iValue_set)
    def __init__(self, *args): 
        this = _model_container_base.new_table_parameter_collector_data(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_table_parameter_collector_data
    __del__ = lambda self : None;
table_parameter_collector_data_swigregister = _model_container_base.table_parameter_collector_data_swigregister
table_parameter_collector_data_swigregister(table_parameter_collector_data)

HHGateCalloc = _model_container_base.HHGateCalloc
HHGateCreateAlias = _model_container_base.HHGateCreateAlias
HHGateGetParameter = _model_container_base.HHGateGetParameter
HHGateInit = _model_container_base.HHGateInit
class descr_HHGate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_HHGate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_HHGate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_HHGate_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_HHGate_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_HHGate_iHappy_get, _model_container_base.descr_HHGate_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_HHGate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_HHGate
    __del__ = lambda self : None;
descr_HHGate_swigregister = _model_container_base.descr_HHGate_swigregister
descr_HHGate_swigregister(descr_HHGate)

class symtab_HHGate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_HHGate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_HHGate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_HHGate_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_HHGate_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_HHGate_bio_get, _model_container_base.symtab_HHGate_bio_set)
    __swig_setmethods__["degathh"] = _model_container_base.symtab_HHGate_degathh_set
    __swig_getmethods__["degathh"] = _model_container_base.symtab_HHGate_degathh_get
    if _newclass:degathh = _swig_property(_model_container_base.symtab_HHGate_degathh_get, _model_container_base.symtab_HHGate_degathh_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_HHGate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_HHGate
    __del__ = lambda self : None;
symtab_HHGate_swigregister = _model_container_base.symtab_HHGate_swigregister
symtab_HHGate_swigregister(symtab_HHGate)

class symtab_IdentifierIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_IdentifierIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_IdentifierIndex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pidinNext"] = _model_container_base.symtab_IdentifierIndex_pidinNext_set
    __swig_getmethods__["pidinNext"] = _model_container_base.symtab_IdentifierIndex_pidinNext_get
    if _newclass:pidinNext = _swig_property(_model_container_base.symtab_IdentifierIndex_pidinNext_get, _model_container_base.symtab_IdentifierIndex_pidinNext_set)
    __swig_setmethods__["pidinRoot"] = _model_container_base.symtab_IdentifierIndex_pidinRoot_set
    __swig_getmethods__["pidinRoot"] = _model_container_base.symtab_IdentifierIndex_pidinRoot_get
    if _newclass:pidinRoot = _swig_property(_model_container_base.symtab_IdentifierIndex_pidinRoot_get, _model_container_base.symtab_IdentifierIndex_pidinRoot_set)
    __swig_setmethods__["iFlags"] = _model_container_base.symtab_IdentifierIndex_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.symtab_IdentifierIndex_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.symtab_IdentifierIndex_iFlags_get, _model_container_base.symtab_IdentifierIndex_iFlags_set)
    __swig_setmethods__["pcIdentifier"] = _model_container_base.symtab_IdentifierIndex_pcIdentifier_set
    __swig_getmethods__["pcIdentifier"] = _model_container_base.symtab_IdentifierIndex_pcIdentifier_get
    if _newclass:pcIdentifier = _swig_property(_model_container_base.symtab_IdentifierIndex_pcIdentifier_get, _model_container_base.symtab_IdentifierIndex_pcIdentifier_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_IdentifierIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_IdentifierIndex
    __del__ = lambda self : None;
symtab_IdentifierIndex_swigregister = _model_container_base.symtab_IdentifierIndex_swigregister
symtab_IdentifierIndex_swigregister(symtab_IdentifierIndex)

class Test(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Test, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Test, name)
    __repr__ = _swig_repr
    __swig_setmethods__["field_id"] = _model_container_base.Test_field_id_set
    __swig_getmethods__["field_id"] = _model_container_base.Test_field_id_get
    if _newclass:field_id = _swig_property(_model_container_base.Test_field_id_get, _model_container_base.Test_field_id_set)
    __swig_setmethods__["name"] = _model_container_base.Test_name_set
    __swig_getmethods__["name"] = _model_container_base.Test_name_get
    if _newclass:name = _swig_property(_model_container_base.Test_name_get, _model_container_base.Test_name_set)
    __swig_setmethods__["op"] = _model_container_base.Test_op_set
    __swig_getmethods__["op"] = _model_container_base.Test_op_get
    if _newclass:op = _swig_property(_model_container_base.Test_op_get, _model_container_base.Test_op_set)
    __swig_setmethods__["value"] = _model_container_base.Test_value_set
    __swig_getmethods__["value"] = _model_container_base.Test_value_get
    if _newclass:value = _swig_property(_model_container_base.Test_value_get, _model_container_base.Test_value_set)
    __swig_setmethods__["next"] = _model_container_base.Test_next_set
    __swig_getmethods__["next"] = _model_container_base.Test_next_get
    if _newclass:next = _swig_property(_model_container_base.Test_next_get, _model_container_base.Test_next_set)
    def __init__(self, *args): 
        this = _model_container_base.new_Test(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_Test
    __del__ = lambda self : None;
Test_swigregister = _model_container_base.Test_swigregister
Test_swigregister(Test)

class PathInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _model_container_base.PathInfo_path_set
    __swig_getmethods__["path"] = _model_container_base.PathInfo_path_get
    if _newclass:path = _swig_property(_model_container_base.PathInfo_path_get, _model_container_base.PathInfo_path_set)
    __swig_setmethods__["test"] = _model_container_base.PathInfo_test_set
    __swig_getmethods__["test"] = _model_container_base.PathInfo_test_get
    if _newclass:test = _swig_property(_model_container_base.PathInfo_test_get, _model_container_base.PathInfo_test_set)
    def __init__(self, *args): 
        this = _model_container_base.new_PathInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_PathInfo
    __del__ = lambda self : None;
PathInfo_swigregister = _model_container_base.PathInfo_swigregister
PathInfo_swigregister(PathInfo)

class symtab_IdentifierIndexSelector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_IdentifierIndexSelector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_IdentifierIndexSelector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pidinNext"] = _model_container_base.symtab_IdentifierIndexSelector_pidinNext_set
    __swig_getmethods__["pidinNext"] = _model_container_base.symtab_IdentifierIndexSelector_pidinNext_get
    if _newclass:pidinNext = _swig_property(_model_container_base.symtab_IdentifierIndexSelector_pidinNext_get, _model_container_base.symtab_IdentifierIndexSelector_pidinNext_set)
    __swig_setmethods__["pidinRoot"] = _model_container_base.symtab_IdentifierIndexSelector_pidinRoot_set
    __swig_getmethods__["pidinRoot"] = _model_container_base.symtab_IdentifierIndexSelector_pidinRoot_get
    if _newclass:pidinRoot = _swig_property(_model_container_base.symtab_IdentifierIndexSelector_pidinRoot_get, _model_container_base.symtab_IdentifierIndexSelector_pidinRoot_set)
    __swig_setmethods__["iFlags"] = _model_container_base.symtab_IdentifierIndexSelector_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.symtab_IdentifierIndexSelector_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.symtab_IdentifierIndexSelector_iFlags_get, _model_container_base.symtab_IdentifierIndexSelector_iFlags_set)
    __swig_setmethods__["pcIdentifier"] = _model_container_base.symtab_IdentifierIndexSelector_pcIdentifier_set
    __swig_getmethods__["pcIdentifier"] = _model_container_base.symtab_IdentifierIndexSelector_pcIdentifier_get
    if _newclass:pcIdentifier = _swig_property(_model_container_base.symtab_IdentifierIndexSelector_pcIdentifier_get, _model_container_base.symtab_IdentifierIndexSelector_pcIdentifier_set)
    __swig_setmethods__["pinfo"] = _model_container_base.symtab_IdentifierIndexSelector_pinfo_set
    __swig_getmethods__["pinfo"] = _model_container_base.symtab_IdentifierIndexSelector_pinfo_get
    if _newclass:pinfo = _swig_property(_model_container_base.symtab_IdentifierIndexSelector_pinfo_get, _model_container_base.symtab_IdentifierIndexSelector_pinfo_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_IdentifierIndexSelector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_IdentifierIndexSelector
    __del__ = lambda self : None;
symtab_IdentifierIndexSelector_swigregister = _model_container_base.symtab_IdentifierIndexSelector_swigregister
symtab_IdentifierIndexSelector_swigregister(symtab_IdentifierIndexSelector)

FLAG_IDENTINDEX_NOINDEX = _model_container_base.FLAG_IDENTINDEX_NOINDEX
FLAG_IDENTINDEX_PARENT = _model_container_base.FLAG_IDENTINDEX_PARENT
FLAG_IDENTINDEX_FIELD = _model_container_base.FLAG_IDENTINDEX_FIELD
FLAG_IDENTINDEX_SELECTOR = _model_container_base.FLAG_IDENTINDEX_SELECTOR
FLAG_IDENTINDEX_NOIDENTIFIER = _model_container_base.FLAG_IDENTINDEX_NOIDENTIFIER
FLAG_IDENTINDEX_FUNCTION = _model_container_base.FLAG_IDENTINDEX_FUNCTION
FLAG_IDENTINDEX_NEXTPARAMETERS = _model_container_base.FLAG_IDENTINDEX_NEXTPARAMETERS
FLAG_IDENTINDEX_INPUTROOT = _model_container_base.FLAG_IDENTINDEX_INPUTROOT
FLAG_IDENTINDEX_IO = _model_container_base.FLAG_IDENTINDEX_IO
FLAG_IDENTINDEX_ROOTED = _model_container_base.FLAG_IDENTINDEX_ROOTED
FLAG_IDENTINDEX_NAMESPACED = _model_container_base.FLAG_IDENTINDEX_NAMESPACED
FLAG_IDENTINDEX_UNIQUE = _model_container_base.FLAG_IDENTINDEX_UNIQUE
FLAG_IDENTINDEX_CURRENT = _model_container_base.FLAG_IDENTINDEX_CURRENT
IdinCalloc = _model_container_base.IdinCalloc
IdinSelectorCalloc = _model_container_base.IdinSelectorCalloc
IdinCallocUnique = _model_container_base.IdinCallocUnique
IdinCreateAlias = _model_container_base.IdinCreateAlias
IdinFullName = _model_container_base.IdinFullName
IdinName = _model_container_base.IdinName
IdinNewFromChars = _model_container_base.IdinNewFromChars
IdinPrint = _model_container_base.IdinPrint
IdinEqual = _model_container_base.IdinEqual
IdinFree = _model_container_base.IdinFree
IdinGetFlag = _model_container_base.IdinGetFlag
IdinIsField = _model_container_base.IdinIsField
IdinIsNamespaced = _model_container_base.IdinIsNamespaced
IdinIsPrintable = _model_container_base.IdinIsPrintable
IdinIsRooted = _model_container_base.IdinIsRooted
IdinIsWildCard = _model_container_base.IdinIsWildCard
IdinMatch = _model_container_base.IdinMatch
IdinPointsToCurrent = _model_container_base.IdinPointsToCurrent
IdinPointsToParent = _model_container_base.IdinPointsToParent
IdinSetFlags = _model_container_base.IdinSetFlags
IdinSetName = _model_container_base.IdinSetName
IdinSetNamespaced = _model_container_base.IdinSetNamespaced
IdinSetRooted = _model_container_base.IdinSetRooted
IdinIsRecursive = _model_container_base.IdinIsRecursive
IdinIsSelector = _model_container_base.IdinIsSelector
class ImportedFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImportedFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImportedFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hsleLink"] = _model_container_base.ImportedFile_hsleLink_set
    __swig_getmethods__["hsleLink"] = _model_container_base.ImportedFile_hsleLink_get
    if _newclass:hsleLink = _swig_property(_model_container_base.ImportedFile_hsleLink_get, _model_container_base.ImportedFile_hsleLink_set)
    __swig_setmethods__["pcQualified"] = _model_container_base.ImportedFile_pcQualified_set
    __swig_getmethods__["pcQualified"] = _model_container_base.ImportedFile_pcQualified_get
    if _newclass:pcQualified = _swig_property(_model_container_base.ImportedFile_pcQualified_get, _model_container_base.ImportedFile_pcQualified_set)
    __swig_setmethods__["pcRelative"] = _model_container_base.ImportedFile_pcRelative_set
    __swig_getmethods__["pcRelative"] = _model_container_base.ImportedFile_pcRelative_get
    if _newclass:pcRelative = _swig_property(_model_container_base.ImportedFile_pcRelative_get, _model_container_base.ImportedFile_pcRelative_set)
    __swig_setmethods__["iFlags"] = _model_container_base.ImportedFile_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.ImportedFile_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.ImportedFile_iFlags_get, _model_container_base.ImportedFile_iFlags_set)
    __swig_setmethods__["pdefsym"] = _model_container_base.ImportedFile_pdefsym_set
    __swig_getmethods__["pdefsym"] = _model_container_base.ImportedFile_pdefsym_get
    if _newclass:pdefsym = _swig_property(_model_container_base.ImportedFile_pdefsym_get, _model_container_base.ImportedFile_pdefsym_set)
    def __init__(self, *args): 
        this = _model_container_base.new_ImportedFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_ImportedFile
    __del__ = lambda self : None;
ImportedFile_swigregister = _model_container_base.ImportedFile_swigregister
ImportedFile_swigregister(ImportedFile)

IMPORTEDFILE_FLAG_ROOT = _model_container_base.IMPORTEDFILE_FLAG_ROOT
ImportedFileCalloc = _model_container_base.ImportedFileCalloc
ImportedFileClearRootImport = _model_container_base.ImportedFileClearRootImport
ImportedFileFindDependencyFile = _model_container_base.ImportedFileFindDependencyFile
ImportedFileGetBaseRootSymbol = _model_container_base.ImportedFileGetBaseRootSymbol
ImportedFileGetDefinedSymbols = _model_container_base.ImportedFileGetDefinedSymbols
ImportedFileGetQualified = _model_container_base.ImportedFileGetQualified
ImportedFileGetRelative = _model_container_base.ImportedFileGetRelative
ImportedFileGetRootImport = _model_container_base.ImportedFileGetRootImport
ImportedFileGetRootSymbol = _model_container_base.ImportedFileGetRootSymbol
ImportedFileLookupHierarchical = _model_container_base.ImportedFileLookupHierarchical
ImportedFileLookupNameSpace = _model_container_base.ImportedFileLookupNameSpace
ImportedFilePrint = _model_container_base.ImportedFilePrint
ImportedFilePrintNameSpaces = _model_container_base.ImportedFilePrintNameSpaces
ImportedFilePrintRootImport = _model_container_base.ImportedFilePrintRootImport
ImportedFilePrintProperties = _model_container_base.ImportedFilePrintProperties
ImportedFileSetDefinedSymbols = _model_container_base.ImportedFileSetDefinedSymbols
ImportedFileSetFilenames = _model_container_base.ImportedFileSetFilenames
ImportedFileSetRootImport = _model_container_base.ImportedFileSetRootImport
class symtab_InputOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_InputOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_InputOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pioNext"] = _model_container_base.symtab_InputOutput_pioNext_set
    __swig_getmethods__["pioNext"] = _model_container_base.symtab_InputOutput_pioNext_get
    if _newclass:pioNext = _swig_property(_model_container_base.symtab_InputOutput_pioNext_get, _model_container_base.symtab_InputOutput_pioNext_set)
    __swig_setmethods__["pioFirst"] = _model_container_base.symtab_InputOutput_pioFirst_set
    __swig_getmethods__["pioFirst"] = _model_container_base.symtab_InputOutput_pioFirst_get
    if _newclass:pioFirst = _swig_property(_model_container_base.symtab_InputOutput_pioFirst_get, _model_container_base.symtab_InputOutput_pioFirst_set)
    __swig_setmethods__["pidinField"] = _model_container_base.symtab_InputOutput_pidinField_set
    __swig_getmethods__["pidinField"] = _model_container_base.symtab_InputOutput_pidinField_get
    if _newclass:pidinField = _swig_property(_model_container_base.symtab_InputOutput_pidinField_get, _model_container_base.symtab_InputOutput_pidinField_set)
    __swig_setmethods__["iType"] = _model_container_base.symtab_InputOutput_iType_set
    __swig_getmethods__["iType"] = _model_container_base.symtab_InputOutput_iType_get
    if _newclass:iType = _swig_property(_model_container_base.symtab_InputOutput_iType_get, _model_container_base.symtab_InputOutput_iType_set)
    __swig_setmethods__["pcType"] = _model_container_base.symtab_InputOutput_pcType_set
    __swig_getmethods__["pcType"] = _model_container_base.symtab_InputOutput_pcType_get
    if _newclass:pcType = _swig_property(_model_container_base.symtab_InputOutput_pcType_get, _model_container_base.symtab_InputOutput_pcType_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_InputOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_InputOutput
    __del__ = lambda self : None;
symtab_InputOutput_swigregister = _model_container_base.symtab_InputOutput_swigregister
symtab_InputOutput_swigregister(symtab_InputOutput)

INPUT_TYPE_INVALID = _model_container_base.INPUT_TYPE_INVALID
INPUT_TYPE_INPUT = _model_container_base.INPUT_TYPE_INPUT
INPUT_TYPE_OUTPUT = _model_container_base.INPUT_TYPE_OUTPUT
InputOutputExport = _model_container_base.InputOutputExport
InputOutputFieldName = _model_container_base.InputOutputFieldName
InputOutputInit = _model_container_base.InputOutputInit
InputOutputNewForType = _model_container_base.InputOutputNewForType
InputOutputResolve = _model_container_base.InputOutputResolve
InputOutputTypeName = _model_container_base.InputOutputTypeName
class symtab_IOContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_IOContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_IOContainer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pio"] = _model_container_base.symtab_IOContainer_pio_set
    __swig_getmethods__["pio"] = _model_container_base.symtab_IOContainer_pio_get
    if _newclass:pio = _swig_property(_model_container_base.symtab_IOContainer_pio_get, _model_container_base.symtab_IOContainer_pio_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_IOContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_IOContainer
    __del__ = lambda self : None;
symtab_IOContainer_swigregister = _model_container_base.symtab_IOContainer_swigregister
symtab_IOContainer_swigregister(symtab_IOContainer)

IOContainerCalloc = _model_container_base.IOContainerCalloc
IOContainerCountIOs = _model_container_base.IOContainerCountIOs
IOContainerInit = _model_container_base.IOContainerInit
IOContainerLookupRelation = _model_container_base.IOContainerLookupRelation
IOContainerNewFromList = _model_container_base.IOContainerNewFromList
IOContainerResolve = _model_container_base.IOContainerResolve
IOContainerTypedResolve = _model_container_base.IOContainerTypedResolve
IOContainerResolvePosition = _model_container_base.IOContainerResolvePosition
IOContainerAssignRelations = _model_container_base.IOContainerAssignRelations
IOContainerGetRelations = _model_container_base.IOContainerGetRelations
IOContainerHasRelation = _model_container_base.IOContainerHasRelation
IOContainerIterateRelations = _model_container_base.IOContainerIterateRelations
IOContainerNewFromIO = _model_container_base.IOContainerNewFromIO
IzhikevichCalloc = _model_container_base.IzhikevichCalloc
IzhikevichCountSpikeGenerators = _model_container_base.IzhikevichCountSpikeGenerators
IzhikevichCreateAlias = _model_container_base.IzhikevichCreateAlias
IzhikevichInit = _model_container_base.IzhikevichInit
IzhikevichNewAtXYZ = _model_container_base.IzhikevichNewAtXYZ
class descr_Izhikevich(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Izhikevich, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Izhikevich, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_Izhikevich_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_Izhikevich_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_Izhikevich_iHappy_get, _model_container_base.descr_Izhikevich_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Izhikevich(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Izhikevich
    __del__ = lambda self : None;
descr_Izhikevich_swigregister = _model_container_base.descr_Izhikevich_swigregister
descr_Izhikevich_swigregister(descr_Izhikevich)

class symtab_Izhikevich(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Izhikevich, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Izhikevich, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segr"] = _model_container_base.symtab_Izhikevich_segr_set
    __swig_getmethods__["segr"] = _model_container_base.symtab_Izhikevich_segr_get
    if _newclass:segr = _swig_property(_model_container_base.symtab_Izhikevich_segr_get, _model_container_base.symtab_Izhikevich_segr_set)
    __swig_setmethods__["deihzi"] = _model_container_base.symtab_Izhikevich_deihzi_set
    __swig_getmethods__["deihzi"] = _model_container_base.symtab_Izhikevich_deihzi_get
    if _newclass:deihzi = _swig_property(_model_container_base.symtab_Izhikevich_deihzi_get, _model_container_base.symtab_Izhikevich_deihzi_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Izhikevich(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Izhikevich
    __del__ = lambda self : None;
symtab_Izhikevich_swigregister = _model_container_base.symtab_Izhikevich_swigregister
symtab_Izhikevich_swigregister(symtab_Izhikevich)

class symtab_IOHierarchy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_IOHierarchy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_IOHierarchy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iol"] = _model_container_base.symtab_IOHierarchy_iol_set
    __swig_getmethods__["iol"] = _model_container_base.symtab_IOHierarchy_iol_get
    if _newclass:iol = _swig_property(_model_container_base.symtab_IOHierarchy_iol_get, _model_container_base.symtab_IOHierarchy_iol_set)
    __swig_setmethods__["iohc"] = _model_container_base.symtab_IOHierarchy_iohc_set
    __swig_getmethods__["iohc"] = _model_container_base.symtab_IOHierarchy_iohc_get
    if _newclass:iohc = _swig_property(_model_container_base.symtab_IOHierarchy_iohc_get, _model_container_base.symtab_IOHierarchy_iohc_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_IOHierarchy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_IOHierarchy
    __del__ = lambda self : None;
symtab_IOHierarchy_swigregister = _model_container_base.symtab_IOHierarchy_swigregister
symtab_IOHierarchy_swigregister(symtab_IOHierarchy)

IOHierarchyAddChild = _model_container_base.IOHierarchyAddChild
IOHierarchyDeleteChild = _model_container_base.IOHierarchyDeleteChild
IOHierarchyGetChildren = _model_container_base.IOHierarchyGetChildren
IOHierarchyInit = _model_container_base.IOHierarchyInit
IOHierarchyLookupHierarchical = _model_container_base.IOHierarchyLookupHierarchical
IOHierarchyPrint = _model_container_base.IOHierarchyPrint
IOHierarchyTraverse = _model_container_base.IOHierarchyTraverse
class symtab_IOList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_IOList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_IOList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hsle"] = _model_container_base.symtab_IOList_hsle_set
    __swig_getmethods__["hsle"] = _model_container_base.symtab_IOList_hsle_get
    if _newclass:hsle = _swig_property(_model_container_base.symtab_IOList_hsle_get, _model_container_base.symtab_IOList_hsle_set)
    __swig_setmethods__["piocBindable"] = _model_container_base.symtab_IOList_piocBindable_set
    __swig_getmethods__["piocBindable"] = _model_container_base.symtab_IOList_piocBindable_get
    if _newclass:piocBindable = _swig_property(_model_container_base.symtab_IOList_piocBindable_get, _model_container_base.symtab_IOList_piocBindable_set)
    __swig_setmethods__["piocInputs"] = _model_container_base.symtab_IOList_piocInputs_set
    __swig_getmethods__["piocInputs"] = _model_container_base.symtab_IOList_piocInputs_get
    if _newclass:piocInputs = _swig_property(_model_container_base.symtab_IOList_piocInputs_get, _model_container_base.symtab_IOList_piocInputs_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_IOList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_IOList
    __del__ = lambda self : None;
symtab_IOList_swigregister = _model_container_base.symtab_IOList_swigregister
symtab_IOList_swigregister(symtab_IOList)

IOListAssignBindableIO = _model_container_base.IOListAssignBindableIO
IOListAssignInputs = _model_container_base.IOListAssignInputs
IOListHasBindableIO = _model_container_base.IOListHasBindableIO
IOListResolveInput = _model_container_base.IOListResolveInput
IOListResolveTypedInput = _model_container_base.IOListResolveTypedInput
IOListGetBindables = _model_container_base.IOListGetBindables
IOListGetInputs = _model_container_base.IOListGetInputs
IOListInit = _model_container_base.IOListInit
IOListLookupBindableIO = _model_container_base.IOListLookupBindableIO
NetworkCalloc = _model_container_base.NetworkCalloc
NetworkCountCells = _model_container_base.NetworkCountCells
NetworkCountConnections = _model_container_base.NetworkCountConnections
NetworkCreateAlias = _model_container_base.NetworkCreateAlias
NetworkInit = _model_container_base.NetworkInit
NetworkTraverseCells = _model_container_base.NetworkTraverseCells
NetworkTraverseConnections = _model_container_base.NetworkTraverseConnections
class descr_Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Network, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iDummy"] = _model_container_base.descr_Network_iDummy_set
    __swig_getmethods__["iDummy"] = _model_container_base.descr_Network_iDummy_get
    if _newclass:iDummy = _swig_property(_model_container_base.descr_Network_iDummy_get, _model_container_base.descr_Network_iDummy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Network
    __del__ = lambda self : None;
descr_Network_swigregister = _model_container_base.descr_Network_swigregister
descr_Network_swigregister(descr_Network)

class symtab_Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Network, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segr"] = _model_container_base.symtab_Network_segr_set
    __swig_getmethods__["segr"] = _model_container_base.symtab_Network_segr_get
    if _newclass:segr = _swig_property(_model_container_base.symtab_Network_segr_get, _model_container_base.symtab_Network_segr_set)
    __swig_setmethods__["denetw"] = _model_container_base.symtab_Network_denetw_set
    __swig_getmethods__["denetw"] = _model_container_base.symtab_Network_denetw_get
    if _newclass:denetw = _swig_property(_model_container_base.symtab_Network_denetw_get, _model_container_base.symtab_Network_denetw_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Network
    __del__ = lambda self : None;
symtab_Network_swigregister = _model_container_base.symtab_Network_swigregister
symtab_Network_swigregister(symtab_Network)

class NeurospacesOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeurospacesOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeurospacesOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iFlags"] = _model_container_base.NeurospacesOptions_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.NeurospacesOptions_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.NeurospacesOptions_iFlags_get, _model_container_base.NeurospacesOptions_iFlags_set)
    __swig_setmethods__["iVerbosity"] = _model_container_base.NeurospacesOptions_iVerbosity_set
    __swig_getmethods__["iVerbosity"] = _model_container_base.NeurospacesOptions_iVerbosity_get
    if _newclass:iVerbosity = _swig_property(_model_container_base.NeurospacesOptions_iVerbosity_get, _model_container_base.NeurospacesOptions_iVerbosity_set)
    __swig_setmethods__["pfileDebug"] = _model_container_base.NeurospacesOptions_pfileDebug_set
    __swig_getmethods__["pfileDebug"] = _model_container_base.NeurospacesOptions_pfileDebug_get
    if _newclass:pfileDebug = _swig_property(_model_container_base.NeurospacesOptions_pfileDebug_get, _model_container_base.NeurospacesOptions_pfileDebug_set)
    __swig_setmethods__["iTiming"] = _model_container_base.NeurospacesOptions_iTiming_set
    __swig_getmethods__["iTiming"] = _model_container_base.NeurospacesOptions_iTiming_get
    if _newclass:iTiming = _swig_property(_model_container_base.NeurospacesOptions_iTiming_get, _model_container_base.NeurospacesOptions_iTiming_set)
    __swig_setmethods__["tvStart"] = _model_container_base.NeurospacesOptions_tvStart_set
    __swig_getmethods__["tvStart"] = _model_container_base.NeurospacesOptions_tvStart_get
    if _newclass:tvStart = _swig_property(_model_container_base.NeurospacesOptions_tvStart_get, _model_container_base.NeurospacesOptions_tvStart_set)
    __swig_setmethods__["pcModelLibrary"] = _model_container_base.NeurospacesOptions_pcModelLibrary_set
    __swig_getmethods__["pcModelLibrary"] = _model_container_base.NeurospacesOptions_pcModelLibrary_get
    if _newclass:pcModelLibrary = _swig_property(_model_container_base.NeurospacesOptions_pcModelLibrary_get, _model_container_base.NeurospacesOptions_pcModelLibrary_set)
    def __init__(self, *args): 
        this = _model_container_base.new_NeurospacesOptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_NeurospacesOptions
    __del__ = lambda self : None;
NeurospacesOptions_swigregister = _model_container_base.NeurospacesOptions_swigregister
NeurospacesOptions_swigregister(NeurospacesOptions)

NSOFLAG_DEBUGFILE = _model_container_base.NSOFLAG_DEBUGFILE
NSOFLAG_DISABLE_ALGORITHM_HANDLING = _model_container_base.NSOFLAG_DISABLE_ALGORITHM_HANDLING
NSOFLAG_DISABLE_DEPCY_LOOKUP = _model_container_base.NSOFLAG_DISABLE_DEPCY_LOOKUP
NSOFLAG_DISABLE_IMPORTING = _model_container_base.NSOFLAG_DISABLE_IMPORTING
NSOFLAG_DISABLE_PRIVATE_LOOKUP = _model_container_base.NSOFLAG_DISABLE_PRIVATE_LOOKUP
NSOFLAG_DISABLE_PUBLIC_LOOKUP = _model_container_base.NSOFLAG_DISABLE_PUBLIC_LOOKUP
NSOFLAG_DISABLE_READLINE = _model_container_base.NSOFLAG_DISABLE_READLINE
NSOFLAG_EXCLUSIVEVERBOSE = _model_container_base.NSOFLAG_EXCLUSIVEVERBOSE
NSOFLAG_HELP = _model_container_base.NSOFLAG_HELP
NSOFLAG_IMPORTPRINT = _model_container_base.NSOFLAG_IMPORTPRINT
NSOFLAG_PARSERDEBUG = _model_container_base.NSOFLAG_PARSERDEBUG
NSOFLAG_PRINTALGORITHMINFO = _model_container_base.NSOFLAG_PRINTALGORITHMINFO
NSOFLAG_PRINTSYMBOLTABLE = _model_container_base.NSOFLAG_PRINTSYMBOLTABLE
NSOFLAG_QUERYMACHINE = _model_container_base.NSOFLAG_QUERYMACHINE
NSOFLAG_TIMINGS = _model_container_base.NSOFLAG_TIMINGS
NSOFLAG_VERBOSE = _model_container_base.NSOFLAG_VERBOSE
class NeurospacesConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeurospacesConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeurospacesConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iArgc"] = _model_container_base.NeurospacesConfig_iArgc_set
    __swig_getmethods__["iArgc"] = _model_container_base.NeurospacesConfig_iArgc_get
    if _newclass:iArgc = _swig_property(_model_container_base.NeurospacesConfig_iArgc_get, _model_container_base.NeurospacesConfig_iArgc_set)
    __swig_setmethods__["ppcArgv"] = _model_container_base.NeurospacesConfig_ppcArgv_set
    __swig_getmethods__["ppcArgv"] = _model_container_base.NeurospacesConfig_ppcArgv_get
    if _newclass:ppcArgv = _swig_property(_model_container_base.NeurospacesConfig_ppcArgv_get, _model_container_base.NeurospacesConfig_ppcArgv_set)
    __swig_setmethods__["nso"] = _model_container_base.NeurospacesConfig_nso_set
    __swig_getmethods__["nso"] = _model_container_base.NeurospacesConfig_nso_get
    if _newclass:nso = _swig_property(_model_container_base.NeurospacesConfig_nso_get, _model_container_base.NeurospacesConfig_nso_set)
    __swig_setmethods__["pcFiles"] = _model_container_base.NeurospacesConfig_pcFiles_set
    __swig_getmethods__["pcFiles"] = _model_container_base.NeurospacesConfig_pcFiles_get
    if _newclass:pcFiles = _swig_property(_model_container_base.NeurospacesConfig_pcFiles_get, _model_container_base.NeurospacesConfig_pcFiles_set)
    __swig_setmethods__["pcQueries"] = _model_container_base.NeurospacesConfig_pcQueries_set
    __swig_getmethods__["pcQueries"] = _model_container_base.NeurospacesConfig_pcQueries_get
    if _newclass:pcQueries = _swig_property(_model_container_base.NeurospacesConfig_pcQueries_get, _model_container_base.NeurospacesConfig_pcQueries_set)
    def __init__(self, *args): 
        this = _model_container_base.new_NeurospacesConfig(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_NeurospacesConfig
    __del__ = lambda self : None;
NeurospacesConfig_swigregister = _model_container_base.NeurospacesConfig_swigregister
NeurospacesConfig_swigregister(NeurospacesConfig)

class Neurospaces(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Neurospaces, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Neurospaces, name)
    __repr__ = _swig_repr
    __swig_setmethods__["psym"] = _model_container_base.Neurospaces_psym_set
    __swig_getmethods__["psym"] = _model_container_base.Neurospaces_psym_get
    if _newclass:psym = _swig_property(_model_container_base.Neurospaces_psym_get, _model_container_base.Neurospaces_psym_set)
    __swig_setmethods__["ppq"] = _model_container_base.Neurospaces_ppq_set
    __swig_getmethods__["ppq"] = _model_container_base.Neurospaces_ppq_get
    if _newclass:ppq = _swig_property(_model_container_base.Neurospaces_ppq_get, _model_container_base.Neurospaces_ppq_set)
    __swig_setmethods__["psr"] = _model_container_base.Neurospaces_psr_set
    __swig_getmethods__["psr"] = _model_container_base.Neurospaces_psr_get
    if _newclass:psr = _swig_property(_model_container_base.Neurospaces_psr_get, _model_container_base.Neurospaces_psr_set)
    __swig_setmethods__["pnsc"] = _model_container_base.Neurospaces_pnsc_set
    __swig_getmethods__["pnsc"] = _model_container_base.Neurospaces_pnsc_get
    if _newclass:pnsc = _swig_property(_model_container_base.Neurospaces_pnsc_get, _model_container_base.Neurospaces_pnsc_set)
    __swig_setmethods__["pacRootContext"] = _model_container_base.Neurospaces_pacRootContext_set
    __swig_getmethods__["pacRootContext"] = _model_container_base.Neurospaces_pacRootContext_get
    if _newclass:pacRootContext = _swig_property(_model_container_base.Neurospaces_pacRootContext_get, _model_container_base.Neurospaces_pacRootContext_set)
    __swig_setmethods__["iErrorCount"] = _model_container_base.Neurospaces_iErrorCount_set
    __swig_getmethods__["iErrorCount"] = _model_container_base.Neurospaces_iErrorCount_get
    if _newclass:iErrorCount = _swig_property(_model_container_base.Neurospaces_iErrorCount_get, _model_container_base.Neurospaces_iErrorCount_set)
    __swig_setmethods__["iFileParseCount"] = _model_container_base.Neurospaces_iFileParseCount_set
    __swig_getmethods__["iFileParseCount"] = _model_container_base.Neurospaces_iFileParseCount_get
    if _newclass:iFileParseCount = _swig_property(_model_container_base.Neurospaces_iFileParseCount_get, _model_container_base.Neurospaces_iFileParseCount_set)
    __swig_setmethods__["pcr"] = _model_container_base.Neurospaces_pcr_set
    __swig_getmethods__["pcr"] = _model_container_base.Neurospaces_pcr_get
    if _newclass:pcr = _swig_property(_model_container_base.Neurospaces_pcr_get, _model_container_base.Neurospaces_pcr_set)
    __swig_setmethods__["pifRootImport"] = _model_container_base.Neurospaces_pifRootImport_set
    __swig_getmethods__["pifRootImport"] = _model_container_base.Neurospaces_pifRootImport_get
    if _newclass:pifRootImport = _swig_property(_model_container_base.Neurospaces_pifRootImport_get, _model_container_base.Neurospaces_pifRootImport_set)
    def __init__(self, *args): 
        this = _model_container_base.new_Neurospaces(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_Neurospaces
    __del__ = lambda self : None;
Neurospaces_swigregister = _model_container_base.Neurospaces_swigregister
Neurospaces_swigregister(Neurospaces)

NeurospacesError = _model_container_base.NeurospacesError
NeurospacesGetVersion = _model_container_base.NeurospacesGetVersion
NeurospacesHelp = _model_container_base.NeurospacesHelp
NeurospacesImport = _model_container_base.NeurospacesImport
NeurospacesLogFileTree = _model_container_base.NeurospacesLogFileTree
LEVEL_GLOBALMSG_IMPORTANT = _model_container_base.LEVEL_GLOBALMSG_IMPORTANT
LEVEL_GLOBALMSG_FILEIMPORT = _model_container_base.LEVEL_GLOBALMSG_FILEIMPORT
LEVEL_GLOBALMSG_ALGORITHMIMPORT = _model_container_base.LEVEL_GLOBALMSG_ALGORITHMIMPORT
LEVEL_GLOBALMSG_SYMBOLREPORT = _model_container_base.LEVEL_GLOBALMSG_SYMBOLREPORT
LEVEL_GLOBALMSG_SYMBOLADD = _model_container_base.LEVEL_GLOBALMSG_SYMBOLADD
LEVEL_GLOBALMSG_SYMBOLCREATE = _model_container_base.LEVEL_GLOBALMSG_SYMBOLCREATE
NeurospacesQualifyFilename = _model_container_base.NeurospacesQualifyFilename
NeurospacesQualifyToConfiguration = _model_container_base.NeurospacesQualifyToConfiguration
NeurospacesRead = _model_container_base.NeurospacesRead
NeurospacesReduce = _model_container_base.NeurospacesReduce
NeurospacesGetProjectionQuery = _model_container_base.NeurospacesGetProjectionQuery
NeurospacesRemoveProjectionQuery = _model_container_base.NeurospacesRemoveProjectionQuery
NeurospacesSetProjectionQuery = _model_container_base.NeurospacesSetProjectionQuery
NeurospacesNew = _model_container_base.NeurospacesNew
NeurospacesNewFromCmdLine = _model_container_base.NeurospacesNewFromCmdLine
class symtab_Parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Parameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pparNext"] = _model_container_base.symtab_Parameters_pparNext_set
    __swig_getmethods__["pparNext"] = _model_container_base.symtab_Parameters_pparNext_get
    if _newclass:pparNext = _swig_property(_model_container_base.symtab_Parameters_pparNext_get, _model_container_base.symtab_Parameters_pparNext_set)
    __swig_setmethods__["pparPrev"] = _model_container_base.symtab_Parameters_pparPrev_set
    __swig_getmethods__["pparPrev"] = _model_container_base.symtab_Parameters_pparPrev_get
    if _newclass:pparPrev = _swig_property(_model_container_base.symtab_Parameters_pparPrev_get, _model_container_base.symtab_Parameters_pparPrev_set)
    __swig_setmethods__["pparFirst"] = _model_container_base.symtab_Parameters_pparFirst_set
    __swig_getmethods__["pparFirst"] = _model_container_base.symtab_Parameters_pparFirst_get
    if _newclass:pparFirst = _swig_property(_model_container_base.symtab_Parameters_pparFirst_get, _model_container_base.symtab_Parameters_pparFirst_set)
    __swig_setmethods__["iType"] = _model_container_base.symtab_Parameters_iType_set
    __swig_getmethods__["iType"] = _model_container_base.symtab_Parameters_iType_get
    if _newclass:iType = _swig_property(_model_container_base.symtab_Parameters_iType_get, _model_container_base.symtab_Parameters_iType_set)
    __swig_setmethods__["iFlags"] = _model_container_base.symtab_Parameters_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.symtab_Parameters_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.symtab_Parameters_iFlags_get, _model_container_base.symtab_Parameters_iFlags_set)
    __swig_setmethods__["pcIdentifier"] = _model_container_base.symtab_Parameters_pcIdentifier_set
    __swig_getmethods__["pcIdentifier"] = _model_container_base.symtab_Parameters_pcIdentifier_get
    if _newclass:pcIdentifier = _swig_property(_model_container_base.symtab_Parameters_pcIdentifier_get, _model_container_base.symtab_Parameters_pcIdentifier_set)
    __swig_getmethods__["uValue"] = _model_container_base.symtab_Parameters_uValue_get
    if _newclass:uValue = _swig_property(_model_container_base.symtab_Parameters_uValue_get)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Parameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Parameters
    __del__ = lambda self : None;
symtab_Parameters_swigregister = _model_container_base.symtab_Parameters_swigregister
symtab_Parameters_swigregister(symtab_Parameters)
cvar = _model_container_base.cvar

class symtab_Parameters_uValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Parameters_uValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Parameters_uValue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dNumber"] = _model_container_base.symtab_Parameters_uValue_dNumber_set
    __swig_getmethods__["dNumber"] = _model_container_base.symtab_Parameters_uValue_dNumber_get
    if _newclass:dNumber = _swig_property(_model_container_base.symtab_Parameters_uValue_dNumber_get, _model_container_base.symtab_Parameters_uValue_dNumber_set)
    __swig_setmethods__["pidin"] = _model_container_base.symtab_Parameters_uValue_pidin_set
    __swig_getmethods__["pidin"] = _model_container_base.symtab_Parameters_uValue_pidin_get
    if _newclass:pidin = _swig_property(_model_container_base.symtab_Parameters_uValue_pidin_get, _model_container_base.symtab_Parameters_uValue_pidin_set)
    __swig_setmethods__["pcString"] = _model_container_base.symtab_Parameters_uValue_pcString_set
    __swig_getmethods__["pcString"] = _model_container_base.symtab_Parameters_uValue_pcString_get
    if _newclass:pcString = _swig_property(_model_container_base.symtab_Parameters_uValue_pcString_get, _model_container_base.symtab_Parameters_uValue_pcString_set)
    __swig_setmethods__["pfun"] = _model_container_base.symtab_Parameters_uValue_pfun_set
    __swig_getmethods__["pfun"] = _model_container_base.symtab_Parameters_uValue_pfun_get
    if _newclass:pfun = _swig_property(_model_container_base.symtab_Parameters_uValue_pfun_get, _model_container_base.symtab_Parameters_uValue_pfun_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Parameters_uValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Parameters_uValue
    __del__ = lambda self : None;
symtab_Parameters_uValue_swigregister = _model_container_base.symtab_Parameters_uValue_swigregister
symtab_Parameters_uValue_swigregister(symtab_Parameters_uValue)

TYPE_PARA_SYMBOLIC = _model_container_base.TYPE_PARA_SYMBOLIC
TYPE_PARA_NUMBER = _model_container_base.TYPE_PARA_NUMBER
TYPE_PARA_FUNCTION = _model_container_base.TYPE_PARA_FUNCTION
TYPE_PARA_FIELD = _model_container_base.TYPE_PARA_FIELD
TYPE_PARA_ATTRIBUTE = _model_container_base.TYPE_PARA_ATTRIBUTE
TYPE_PARA_STRING = _model_container_base.TYPE_PARA_STRING
FLAG_PARA_READONLY = _model_container_base.FLAG_PARA_READONLY
FLAG_PARA_DERIVED = _model_container_base.FLAG_PARA_DERIVED
ParameterFirstIdin = _model_container_base.ParameterFirstIdin
ParameterGetFieldName = _model_container_base.ParameterGetFieldName
ParameterGetFlags = _model_container_base.ParameterGetFlags
ParameterGetName = _model_container_base.ParameterGetName
ParameterGetType = _model_container_base.ParameterGetType
ParameterGetFunction = _model_container_base.ParameterGetFunction
ParameterIsField = _model_container_base.ParameterIsField
ParameterIsFunction = _model_container_base.ParameterIsFunction
ParameterIsNumber = _model_container_base.ParameterIsNumber
ParameterIsReadOnly = _model_container_base.ParameterIsReadOnly
ParameterIsString = _model_container_base.ParameterIsString
ParameterIsSymbolic = _model_container_base.ParameterIsSymbolic
ParameterSetAttribute = _model_container_base.ParameterSetAttribute
ParameterSetFieldName = _model_container_base.ParameterSetFieldName
ParameterSetName = _model_container_base.ParameterSetName
ParameterSetNumber = _model_container_base.ParameterSetNumber
ParameterSetString = _model_container_base.ParameterSetString
ParameterSetSymbolName = _model_container_base.ParameterSetSymbolName
ParameterSetType = _model_container_base.ParameterSetType
ParameterIsAttribute = _model_container_base.ParameterIsAttribute
ParameterSetFunction = _model_container_base.ParameterSetFunction
ParameterCalloc = _model_container_base.ParameterCalloc
ParameterContextGetFunctionContext = _model_container_base.ParameterContextGetFunctionContext
ParameterContextGetFunction = _model_container_base.ParameterContextGetFunction
ParameterExport = _model_container_base.ParameterExport
ParameterFree = _model_container_base.ParameterFree
ParameterGetFieldPidin = _model_container_base.ParameterGetFieldPidin
ParameterGetString = _model_container_base.ParameterGetString
ParameterLookup = _model_container_base.ParameterLookup
ParameterNewFromFunction = _model_container_base.ParameterNewFromFunction
ParameterNewFromNumber = _model_container_base.ParameterNewFromNumber
ParameterNewFromPidinQueue = _model_container_base.ParameterNewFromPidinQueue
ParameterNewFromString = _model_container_base.ParameterNewFromString
ParameterPrint = _model_container_base.ParameterPrint
ParameterPrintInfoRecursive = _model_container_base.ParameterPrintInfoRecursive
ParameterResolveFunctionalInput = _model_container_base.ParameterResolveFunctionalInput
ParameterResolveScaledValue = _model_container_base.ParameterResolveScaledValue
ParameterResolveSymbol = _model_container_base.ParameterResolveSymbol
ParameterResolveToPidinStack = _model_container_base.ParameterResolveToPidinStack
ParameterResolveValue = _model_container_base.ParameterResolveValue
ParameterTo_stdout = _model_container_base.ParameterTo_stdout
ParameterValue = _model_container_base.ParameterValue
class ParserContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParserContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParserContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pacNext"] = _model_container_base.ParserContext_pacNext_set
    __swig_getmethods__["pacNext"] = _model_container_base.ParserContext_pacNext_get
    if _newclass:pacNext = _swig_property(_model_container_base.ParserContext_pacNext_get, _model_container_base.ParserContext_pacNext_set)
    __swig_setmethods__["pacPrev"] = _model_container_base.ParserContext_pacPrev_set
    __swig_getmethods__["pacPrev"] = _model_container_base.ParserContext_pacPrev_get
    if _newclass:pacPrev = _swig_property(_model_container_base.ParserContext_pacPrev_get, _model_container_base.ParserContext_pacPrev_set)
    __swig_setmethods__["pcFilename"] = _model_container_base.ParserContext_pcFilename_set
    __swig_getmethods__["pcFilename"] = _model_container_base.ParserContext_pcFilename_get
    if _newclass:pcFilename = _swig_property(_model_container_base.ParserContext_pcFilename_get, _model_container_base.ParserContext_pcFilename_set)
    __swig_setmethods__["pcDirectory"] = _model_container_base.ParserContext_pcDirectory_set
    __swig_getmethods__["pcDirectory"] = _model_container_base.ParserContext_pcDirectory_get
    if _newclass:pcDirectory = _swig_property(_model_container_base.ParserContext_pcDirectory_get, _model_container_base.ParserContext_pcDirectory_set)
    __swig_setmethods__["iLineNumber"] = _model_container_base.ParserContext_iLineNumber_set
    __swig_getmethods__["iLineNumber"] = _model_container_base.ParserContext_iLineNumber_get
    if _newclass:iLineNumber = _swig_property(_model_container_base.ParserContext_iLineNumber_get, _model_container_base.ParserContext_iLineNumber_set)
    __swig_setmethods__["iNestingLevel"] = _model_container_base.ParserContext_iNestingLevel_set
    __swig_getmethods__["iNestingLevel"] = _model_container_base.ParserContext_iNestingLevel_get
    if _newclass:iNestingLevel = _swig_property(_model_container_base.ParserContext_iNestingLevel_get, _model_container_base.ParserContext_iNestingLevel_set)
    __swig_setmethods__["pFILE"] = _model_container_base.ParserContext_pFILE_set
    __swig_getmethods__["pFILE"] = _model_container_base.ParserContext_pFILE_get
    if _newclass:pFILE = _swig_property(_model_container_base.ParserContext_pFILE_get, _model_container_base.ParserContext_pFILE_set)
    __swig_setmethods__["pyyBuffer"] = _model_container_base.ParserContext_pyyBuffer_set
    __swig_getmethods__["pyyBuffer"] = _model_container_base.ParserContext_pyyBuffer_get
    if _newclass:pyyBuffer = _swig_property(_model_container_base.ParserContext_pyyBuffer_get, _model_container_base.ParserContext_pyyBuffer_set)
    __swig_setmethods__["pifInParse"] = _model_container_base.ParserContext_pifInParse_set
    __swig_getmethods__["pifInParse"] = _model_container_base.ParserContext_pifInParse_get
    if _newclass:pifInParse = _swig_property(_model_container_base.ParserContext_pifInParse_get, _model_container_base.ParserContext_pifInParse_set)
    __swig_setmethods__["pneuro"] = _model_container_base.ParserContext_pneuro_set
    __swig_getmethods__["pneuro"] = _model_container_base.ParserContext_pneuro_get
    if _newclass:pneuro = _swig_property(_model_container_base.ParserContext_pneuro_get, _model_container_base.ParserContext_pneuro_set)
    __swig_setmethods__["iState"] = _model_container_base.ParserContext_iState_set
    __swig_getmethods__["iState"] = _model_container_base.ParserContext_iState_get
    if _newclass:iState = _swig_property(_model_container_base.ParserContext_iState_get, _model_container_base.ParserContext_iState_set)
    __swig_setmethods__["pist"] = _model_container_base.ParserContext_pist_set
    __swig_getmethods__["pist"] = _model_container_base.ParserContext_pist_get
    if _newclass:pist = _swig_property(_model_container_base.ParserContext_pist_get, _model_container_base.ParserContext_pist_set)
    __swig_setmethods__["phsleActual"] = _model_container_base.ParserContext_phsleActual_set
    __swig_getmethods__["phsleActual"] = _model_container_base.ParserContext_phsleActual_get
    if _newclass:phsleActual = _swig_property(_model_container_base.ParserContext_phsleActual_get, _model_container_base.ParserContext_phsleActual_set)
    def __init__(self, *args): 
        this = _model_container_base.new_ParserContext(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_ParserContext
    __del__ = lambda self : None;
ParserContext_swigregister = _model_container_base.ParserContext_swigregister
ParserContext_swigregister(ParserContext)

PARSER_STATE_HEADER = _model_container_base.PARSER_STATE_HEADER
PARSER_STATE_DEPENDENCIES = _model_container_base.PARSER_STATE_DEPENDENCIES
PARSER_STATE_PRIVATEMODELS = _model_container_base.PARSER_STATE_PRIVATEMODELS
PARSER_STATE_PUBLICMODELS = _model_container_base.PARSER_STATE_PUBLICMODELS
PARSER_FLAG_ROOTCONTEXT = _model_container_base.PARSER_FLAG_ROOTCONTEXT
PARSER_MASK_STATES = _model_container_base.PARSER_MASK_STATES
ParserContextGetDirectory = _model_container_base.ParserContextGetDirectory
ParserContextGetFilename = _model_container_base.ParserContextGetFilename
ParserContextGetLineNumber = _model_container_base.ParserContextGetLineNumber
parserparse = _model_container_base.parserparse
ParserAddModel = _model_container_base.ParserAddModel
ParserAddPrivateModel = _model_container_base.ParserAddPrivateModel
ParserAddPublicModel = _model_container_base.ParserAddPublicModel
ParserContextCalloc = _model_container_base.ParserContextCalloc
ParserClearContext = _model_container_base.ParserClearContext
ParserClearRootContext = _model_container_base.ParserClearRootContext
ParserContextActualContainer = _model_container_base.ParserContextActualContainer
ParserContextActualState = _model_container_base.ParserContextActualState
ParserContextGetActual = _model_container_base.ParserContextGetActual
ParserContextInit = _model_container_base.ParserContextInit
ParserContextPopContainer = _model_container_base.ParserContextPopContainer
ParserContextPopAlgorithmState = _model_container_base.ParserContextPopAlgorithmState
ParserContextPopState = _model_container_base.ParserContextPopState
ParserContextPushContainer = _model_container_base.ParserContextPushContainer
ParserContextPushAlgorithmState = _model_container_base.ParserContextPushAlgorithmState
ParserContextPushState = _model_container_base.ParserContextPushState
ParserContextQualifyFilename = _model_container_base.ParserContextQualifyFilename
ParserContextQualifyToConfiguration = _model_container_base.ParserContextQualifyToConfiguration
ParserContextQualifyToParsingDirectory = _model_container_base.ParserContextQualifyToParsingDirectory
ParserContextQualifyToEnvironment = _model_container_base.ParserContextQualifyToEnvironment
ParserContextSetActual = _model_container_base.ParserContextSetActual
ParserContextSetImportedFile = _model_container_base.ParserContextSetImportedFile
ParserCurrentElementPop = _model_container_base.ParserCurrentElementPop
ParserCurrentElementPopAll = _model_container_base.ParserCurrentElementPopAll
ParserCurrentElementPush = _model_container_base.ParserCurrentElementPush
ParserFinish = _model_container_base.ParserFinish
ParserImport = _model_container_base.ParserImport
ParserLookupDependencyModel = _model_container_base.ParserLookupDependencyModel
ParserLookupPrivateModel = _model_container_base.ParserLookupPrivateModel
ParserLookupPublicModel = _model_container_base.ParserLookupPublicModel
ParserMessage = _model_container_base.ParserMessage
ParserAlgorithmDisable = _model_container_base.ParserAlgorithmDisable
ParserAlgorithmHandle = _model_container_base.ParserAlgorithmHandle
ParserAlgorithmImport = _model_container_base.ParserAlgorithmImport
ParserParse = _model_container_base.ParserParse
ParserSetContext = _model_container_base.ParserSetContext
ParserSetRootContext = _model_container_base.ParserSetRootContext
ParserStart = _model_container_base.ParserStart
class PidinStack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PidinStack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PidinStack, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iTop"] = _model_container_base.PidinStack_iTop_set
    __swig_getmethods__["iTop"] = _model_container_base.PidinStack_iTop_get
    if _newclass:iTop = _swig_property(_model_container_base.PidinStack_iTop_get, _model_container_base.PidinStack_iTop_set)
    __swig_setmethods__["iFlags"] = _model_container_base.PidinStack_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.PidinStack_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.PidinStack_iFlags_get, _model_container_base.PidinStack_iFlags_set)
    __swig_setmethods__["ppidin"] = _model_container_base.PidinStack_ppidin_set
    __swig_getmethods__["ppidin"] = _model_container_base.PidinStack_ppidin_get
    if _newclass:ppidin = _swig_property(_model_container_base.PidinStack_ppidin_get, _model_container_base.PidinStack_ppidin_set)
    __swig_setmethods__["symsst"] = _model_container_base.PidinStack_symsst_set
    __swig_getmethods__["symsst"] = _model_container_base.PidinStack_symsst_get
    if _newclass:symsst = _swig_property(_model_container_base.PidinStack_symsst_get, _model_container_base.PidinStack_symsst_set)
    def __init__(self, *args): 
        this = _model_container_base.new_PidinStack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_PidinStack
    __del__ = lambda self : None;
PidinStack_swigregister = _model_container_base.PidinStack_swigregister
PidinStack_swigregister(PidinStack)

FLAG_PIST_ROOTED = _model_container_base.FLAG_PIST_ROOTED
FLAG_PIST_NAMESPACED = _model_container_base.FLAG_PIST_NAMESPACED
PidinStackAppend = _model_container_base.PidinStackAppend
PidinStackAppendCompact = _model_container_base.PidinStackAppendCompact
PidinStackCalloc = _model_container_base.PidinStackCalloc
PidinStackEqual = _model_container_base.PidinStackEqual
PidinStackInit = _model_container_base.PidinStackInit
PidinStackIsWildcard = _model_container_base.PidinStackIsWildcard
PidinStackLookupBaseSymbol = _model_container_base.PidinStackLookupBaseSymbol
PidinStackLookupTopSymbol = _model_container_base.PidinStackLookupTopSymbol
PidinStackMatch = _model_container_base.PidinStackMatch
PidinStackNewFromParameterSymbols = _model_container_base.PidinStackNewFromParameterSymbols
PidinStackParse = _model_container_base.PidinStackParse
PidinStackPop = _model_container_base.PidinStackPop
PidinStackPrint = _model_container_base.PidinStackPrint
PidinStackPush = _model_container_base.PidinStackPush
PidinStackPushAll = _model_container_base.PidinStackPushAll
PidinStackPushCompact = _model_container_base.PidinStackPushCompact
PidinStackPushCompactAll = _model_container_base.PidinStackPushCompactAll
PidinStackPushString = _model_container_base.PidinStackPushString
PidinStackPushStringAndLookup = _model_container_base.PidinStackPushStringAndLookup
PidinStackPushSymbol = _model_container_base.PidinStackPushSymbol
PidinStackString = _model_container_base.PidinStackString
PidinStackSubtract = _model_container_base.PidinStackSubtract
PidinStackToPidinQueue = _model_container_base.PidinStackToPidinQueue
PidinStackTo_stdout = _model_container_base.PidinStackTo_stdout
PidinStackClearFlag = _model_container_base.PidinStackClearFlag
PidinStackClearRooted = _model_container_base.PidinStackClearRooted
PidinStackCompress = _model_container_base.PidinStackCompress
PidinStackDuplicate = _model_container_base.PidinStackDuplicate
PidinStackElementPidin = _model_container_base.PidinStackElementPidin
PidinStackFree = _model_container_base.PidinStackFree
PidinStackGetFlag = _model_container_base.PidinStackGetFlag
PidinStackIsNamespaced = _model_container_base.PidinStackIsNamespaced
PidinStackIsRooted = _model_container_base.PidinStackIsRooted
PidinStackNumberOfEntries = _model_container_base.PidinStackNumberOfEntries
PidinStackSetFlag = _model_container_base.PidinStackSetFlag
PidinStackSetNamespaced = _model_container_base.PidinStackSetNamespaced
PidinStackSetRooted = _model_container_base.PidinStackSetRooted
PidinStackTop = _model_container_base.PidinStackTop
PidinStackToSerial = _model_container_base.PidinStackToSerial
PidinStackUpdateCaches = _model_container_base.PidinStackUpdateCaches
PoolCalloc = _model_container_base.PoolCalloc
PoolCreateAlias = _model_container_base.PoolCreateAlias
PoolGetParameter = _model_container_base.PoolGetParameter
PoolInit = _model_container_base.PoolInit
PoolLookupHierarchical = _model_container_base.PoolLookupHierarchical
PoolParameterScaleValue = _model_container_base.PoolParameterScaleValue
PoolReduce = _model_container_base.PoolReduce
class descr_Pool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Pool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Pool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_Pool_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_Pool_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_Pool_iHappy_get, _model_container_base.descr_Pool_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Pool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Pool
    __del__ = lambda self : None;
descr_Pool_swigregister = _model_container_base.descr_Pool_swigregister
descr_Pool_swigregister(descr_Pool)

class symtab_Pool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Pool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Pool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_Pool_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_Pool_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_Pool_bio_get, _model_container_base.symtab_Pool_bio_set)
    __swig_setmethods__["depool"] = _model_container_base.symtab_Pool_depool_set
    __swig_getmethods__["depool"] = _model_container_base.symtab_Pool_depool_get
    if _newclass:depool = _swig_property(_model_container_base.symtab_Pool_depool_get, _model_container_base.symtab_Pool_depool_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Pool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Pool
    __del__ = lambda self : None;
symtab_Pool_swigregister = _model_container_base.symtab_Pool_swigregister
symtab_Pool_swigregister(symtab_Pool)

TYPE_POOL_EQUATION = _model_container_base.TYPE_POOL_EQUATION
TYPE_POOL_TABLEFILE = _model_container_base.TYPE_POOL_TABLEFILE
TYPE_POOL_VIRTUALCONNECTION = _model_container_base.TYPE_POOL_VIRTUALCONNECTION
TYPE_POOL_PARAMETERS = _model_container_base.TYPE_POOL_PARAMETERS
PopulationCalloc = _model_container_base.PopulationCalloc
PopulationCountCells = _model_container_base.PopulationCountCells
PopulationCreateAlias = _model_container_base.PopulationCreateAlias
PopulationGetParameter = _model_container_base.PopulationGetParameter
PopulationInit = _model_container_base.PopulationInit
PopulationLookupSpikeReceiverSerialID = _model_container_base.PopulationLookupSpikeReceiverSerialID
PopulationTraverseCells = _model_container_base.PopulationTraverseCells
class descr_Population(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Population, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Population, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iType"] = _model_container_base.descr_Population_iType_set
    __swig_getmethods__["iType"] = _model_container_base.descr_Population_iType_get
    if _newclass:iType = _swig_property(_model_container_base.descr_Population_iType_get, _model_container_base.descr_Population_iType_set)
    __swig_setmethods__["iFlags"] = _model_container_base.descr_Population_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.descr_Population_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.descr_Population_iFlags_get, _model_container_base.descr_Population_iFlags_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Population(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Population
    __del__ = lambda self : None;
descr_Population_swigregister = _model_container_base.descr_Population_swigregister
descr_Population_swigregister(descr_Population)

class symtab_Population(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Population, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Population, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segr"] = _model_container_base.symtab_Population_segr_set
    __swig_getmethods__["segr"] = _model_container_base.symtab_Population_segr_get
    if _newclass:segr = _swig_property(_model_container_base.symtab_Population_segr_get, _model_container_base.symtab_Population_segr_set)
    __swig_setmethods__["depopu"] = _model_container_base.symtab_Population_depopu_set
    __swig_getmethods__["depopu"] = _model_container_base.symtab_Population_depopu_get
    if _newclass:depopu = _swig_property(_model_container_base.symtab_Population_depopu_get, _model_container_base.symtab_Population_depopu_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Population(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Population
    __del__ = lambda self : None;
symtab_Population_swigregister = _model_container_base.symtab_Population_swigregister
symtab_Population_swigregister(symtab_Population)

class D3Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, D3Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, D3Position, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dx"] = _model_container_base.D3Position_dx_set
    __swig_getmethods__["dx"] = _model_container_base.D3Position_dx_get
    if _newclass:dx = _swig_property(_model_container_base.D3Position_dx_get, _model_container_base.D3Position_dx_set)
    __swig_setmethods__["dy"] = _model_container_base.D3Position_dy_set
    __swig_getmethods__["dy"] = _model_container_base.D3Position_dy_get
    if _newclass:dy = _swig_property(_model_container_base.D3Position_dy_get, _model_container_base.D3Position_dy_set)
    __swig_setmethods__["dz"] = _model_container_base.D3Position_dz_set
    __swig_getmethods__["dz"] = _model_container_base.D3Position_dz_get
    if _newclass:dz = _swig_property(_model_container_base.D3Position_dz_get, _model_container_base.D3Position_dz_set)
    def __init__(self, *args): 
        this = _model_container_base.new_D3Position(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_D3Position
    __del__ = lambda self : None;
D3Position_swigregister = _model_container_base.D3Position_swigregister
D3Position_swigregister(D3Position)

D3PositionInit = _model_container_base.D3PositionInit
ProjectionCalloc = _model_container_base.ProjectionCalloc
ProjectionCountConnections = _model_container_base.ProjectionCountConnections
ProjectionCreateAlias = _model_container_base.ProjectionCreateAlias
ProjectionGetNumberOfConnectionsForSpikeGenerator = _model_container_base.ProjectionGetNumberOfConnectionsForSpikeGenerator
ProjectionGetNumberOfConnectionsForSpikeReceiver = _model_container_base.ProjectionGetNumberOfConnectionsForSpikeReceiver
ProjectionGetSourceSerial = _model_container_base.ProjectionGetSourceSerial
ProjectionGetTargetSerial = _model_container_base.ProjectionGetTargetSerial
ProjectionInit = _model_container_base.ProjectionInit
ProjectionTraverseConnections = _model_container_base.ProjectionTraverseConnections
ProjectionTraverseConnectionsForPostSerial = _model_container_base.ProjectionTraverseConnectionsForPostSerial
ProjectionTraverseConnectionsForSpikeGenerator = _model_container_base.ProjectionTraverseConnectionsForSpikeGenerator
ProjectionTraverseConnectionsForSpikeReceiver = _model_container_base.ProjectionTraverseConnectionsForSpikeReceiver
class descr_Projection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Projection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Projection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iDummy"] = _model_container_base.descr_Projection_iDummy_set
    __swig_getmethods__["iDummy"] = _model_container_base.descr_Projection_iDummy_get
    if _newclass:iDummy = _swig_property(_model_container_base.descr_Projection_iDummy_get, _model_container_base.descr_Projection_iDummy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Projection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Projection
    __del__ = lambda self : None;
descr_Projection_swigregister = _model_container_base.descr_Projection_swigregister
descr_Projection_swigregister(descr_Projection)

class symtab_Projection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Projection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Projection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_Projection_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_Projection_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_Projection_bio_get, _model_container_base.symtab_Projection_bio_set)
    __swig_setmethods__["deproj"] = _model_container_base.symtab_Projection_deproj_set
    __swig_getmethods__["deproj"] = _model_container_base.symtab_Projection_deproj_get
    if _newclass:deproj = _swig_property(_model_container_base.symtab_Projection_deproj_get, _model_container_base.symtab_Projection_deproj_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Projection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Projection
    __del__ = lambda self : None;
symtab_Projection_swigregister = _model_container_base.symtab_Projection_swigregister
symtab_Projection_swigregister(symtab_Projection)

class PQ_ConnsForTarget_Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PQ_ConnsForTarget_Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PQ_ConnsForTarget_Result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iConnections"] = _model_container_base.PQ_ConnsForTarget_Result_iConnections_set
    __swig_getmethods__["iConnections"] = _model_container_base.PQ_ConnsForTarget_Result_iConnections_get
    if _newclass:iConnections = _swig_property(_model_container_base.PQ_ConnsForTarget_Result_iConnections_get, _model_container_base.PQ_ConnsForTarget_Result_iConnections_set)
    __swig_setmethods__["pproj"] = _model_container_base.PQ_ConnsForTarget_Result_pproj_set
    __swig_getmethods__["pproj"] = _model_container_base.PQ_ConnsForTarget_Result_pproj_get
    if _newclass:pproj = _swig_property(_model_container_base.PQ_ConnsForTarget_Result_pproj_get, _model_container_base.PQ_ConnsForTarget_Result_pproj_set)
    __swig_setmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForTarget_Result_ppistProjection_set
    __swig_getmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForTarget_Result_ppistProjection_get
    if _newclass:ppistProjection = _swig_property(_model_container_base.PQ_ConnsForTarget_Result_ppistProjection_get, _model_container_base.PQ_ConnsForTarget_Result_ppistProjection_set)
    __swig_setmethods__["ppistTarget"] = _model_container_base.PQ_ConnsForTarget_Result_ppistTarget_set
    __swig_getmethods__["ppistTarget"] = _model_container_base.PQ_ConnsForTarget_Result_ppistTarget_get
    if _newclass:ppistTarget = _swig_property(_model_container_base.PQ_ConnsForTarget_Result_ppistTarget_get, _model_container_base.PQ_ConnsForTarget_Result_ppistTarget_set)
    def __init__(self, *args): 
        this = _model_container_base.new_PQ_ConnsForTarget_Result(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_PQ_ConnsForTarget_Result
    __del__ = lambda self : None;
PQ_ConnsForTarget_Result_swigregister = _model_container_base.PQ_ConnsForTarget_Result_swigregister
PQ_ConnsForTarget_Result_swigregister(PQ_ConnsForTarget_Result)

class PQ_ConnsForSpikegen_Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PQ_ConnsForSpikegen_Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PQ_ConnsForSpikegen_Result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pproj"] = _model_container_base.PQ_ConnsForSpikegen_Result_pproj_set
    __swig_getmethods__["pproj"] = _model_container_base.PQ_ConnsForSpikegen_Result_pproj_get
    if _newclass:pproj = _swig_property(_model_container_base.PQ_ConnsForSpikegen_Result_pproj_get, _model_container_base.PQ_ConnsForSpikegen_Result_pproj_set)
    __swig_setmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForSpikegen_Result_ppistProjection_set
    __swig_getmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForSpikegen_Result_ppistProjection_get
    if _newclass:ppistProjection = _swig_property(_model_container_base.PQ_ConnsForSpikegen_Result_ppistProjection_get, _model_container_base.PQ_ConnsForSpikegen_Result_ppistProjection_set)
    __swig_setmethods__["ppistSpikegen"] = _model_container_base.PQ_ConnsForSpikegen_Result_ppistSpikegen_set
    __swig_getmethods__["ppistSpikegen"] = _model_container_base.PQ_ConnsForSpikegen_Result_ppistSpikegen_get
    if _newclass:ppistSpikegen = _swig_property(_model_container_base.PQ_ConnsForSpikegen_Result_ppistSpikegen_get, _model_container_base.PQ_ConnsForSpikegen_Result_ppistSpikegen_set)
    __swig_setmethods__["pfProcessor"] = _model_container_base.PQ_ConnsForSpikegen_Result_pfProcessor_set
    __swig_getmethods__["pfProcessor"] = _model_container_base.PQ_ConnsForSpikegen_Result_pfProcessor_get
    if _newclass:pfProcessor = _swig_property(_model_container_base.PQ_ConnsForSpikegen_Result_pfProcessor_get, _model_container_base.PQ_ConnsForSpikegen_Result_pfProcessor_set)
    __swig_setmethods__["pfFinalizer"] = _model_container_base.PQ_ConnsForSpikegen_Result_pfFinalizer_set
    __swig_getmethods__["pfFinalizer"] = _model_container_base.PQ_ConnsForSpikegen_Result_pfFinalizer_get
    if _newclass:pfFinalizer = _swig_property(_model_container_base.PQ_ConnsForSpikegen_Result_pfFinalizer_get, _model_container_base.PQ_ConnsForSpikegen_Result_pfFinalizer_set)
    __swig_setmethods__["pvUserdata"] = _model_container_base.PQ_ConnsForSpikegen_Result_pvUserdata_set
    __swig_getmethods__["pvUserdata"] = _model_container_base.PQ_ConnsForSpikegen_Result_pvUserdata_get
    if _newclass:pvUserdata = _swig_property(_model_container_base.PQ_ConnsForSpikegen_Result_pvUserdata_get, _model_container_base.PQ_ConnsForSpikegen_Result_pvUserdata_set)
    def __init__(self, *args): 
        this = _model_container_base.new_PQ_ConnsForSpikegen_Result(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_PQ_ConnsForSpikegen_Result
    __del__ = lambda self : None;
PQ_ConnsForSpikegen_Result_swigregister = _model_container_base.PQ_ConnsForSpikegen_Result_swigregister
PQ_ConnsForSpikegen_Result_swigregister(PQ_ConnsForSpikegen_Result)

class PQ_ConnsForPreSerial_Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PQ_ConnsForPreSerial_Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PQ_ConnsForPreSerial_Result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pproj"] = _model_container_base.PQ_ConnsForPreSerial_Result_pproj_set
    __swig_getmethods__["pproj"] = _model_container_base.PQ_ConnsForPreSerial_Result_pproj_get
    if _newclass:pproj = _swig_property(_model_container_base.PQ_ConnsForPreSerial_Result_pproj_get, _model_container_base.PQ_ConnsForPreSerial_Result_pproj_set)
    __swig_setmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForPreSerial_Result_ppistProjection_set
    __swig_getmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForPreSerial_Result_ppistProjection_get
    if _newclass:ppistProjection = _swig_property(_model_container_base.PQ_ConnsForPreSerial_Result_ppistProjection_get, _model_container_base.PQ_ConnsForPreSerial_Result_ppistProjection_set)
    __swig_setmethods__["ppistSpikeGenerator"] = _model_container_base.PQ_ConnsForPreSerial_Result_ppistSpikeGenerator_set
    __swig_getmethods__["ppistSpikeGenerator"] = _model_container_base.PQ_ConnsForPreSerial_Result_ppistSpikeGenerator_get
    if _newclass:ppistSpikeGenerator = _swig_property(_model_container_base.PQ_ConnsForPreSerial_Result_ppistSpikeGenerator_get, _model_container_base.PQ_ConnsForPreSerial_Result_ppistSpikeGenerator_set)
    __swig_setmethods__["iPre"] = _model_container_base.PQ_ConnsForPreSerial_Result_iPre_set
    __swig_getmethods__["iPre"] = _model_container_base.PQ_ConnsForPreSerial_Result_iPre_get
    if _newclass:iPre = _swig_property(_model_container_base.PQ_ConnsForPreSerial_Result_iPre_get, _model_container_base.PQ_ConnsForPreSerial_Result_iPre_set)
    __swig_setmethods__["pfProcessor"] = _model_container_base.PQ_ConnsForPreSerial_Result_pfProcessor_set
    __swig_getmethods__["pfProcessor"] = _model_container_base.PQ_ConnsForPreSerial_Result_pfProcessor_get
    if _newclass:pfProcessor = _swig_property(_model_container_base.PQ_ConnsForPreSerial_Result_pfProcessor_get, _model_container_base.PQ_ConnsForPreSerial_Result_pfProcessor_set)
    __swig_setmethods__["pfFinalizer"] = _model_container_base.PQ_ConnsForPreSerial_Result_pfFinalizer_set
    __swig_getmethods__["pfFinalizer"] = _model_container_base.PQ_ConnsForPreSerial_Result_pfFinalizer_get
    if _newclass:pfFinalizer = _swig_property(_model_container_base.PQ_ConnsForPreSerial_Result_pfFinalizer_get, _model_container_base.PQ_ConnsForPreSerial_Result_pfFinalizer_set)
    __swig_setmethods__["pvUserdata"] = _model_container_base.PQ_ConnsForPreSerial_Result_pvUserdata_set
    __swig_getmethods__["pvUserdata"] = _model_container_base.PQ_ConnsForPreSerial_Result_pvUserdata_get
    if _newclass:pvUserdata = _swig_property(_model_container_base.PQ_ConnsForPreSerial_Result_pvUserdata_get, _model_container_base.PQ_ConnsForPreSerial_Result_pvUserdata_set)
    def __init__(self, *args): 
        this = _model_container_base.new_PQ_ConnsForPreSerial_Result(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_PQ_ConnsForPreSerial_Result
    __del__ = lambda self : None;
PQ_ConnsForPreSerial_Result_swigregister = _model_container_base.PQ_ConnsForPreSerial_Result_swigregister
PQ_ConnsForPreSerial_Result_swigregister(PQ_ConnsForPreSerial_Result)

class PQ_ConnsForSpikerec_Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PQ_ConnsForSpikerec_Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PQ_ConnsForSpikerec_Result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pproj"] = _model_container_base.PQ_ConnsForSpikerec_Result_pproj_set
    __swig_getmethods__["pproj"] = _model_container_base.PQ_ConnsForSpikerec_Result_pproj_get
    if _newclass:pproj = _swig_property(_model_container_base.PQ_ConnsForSpikerec_Result_pproj_get, _model_container_base.PQ_ConnsForSpikerec_Result_pproj_set)
    __swig_setmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForSpikerec_Result_ppistProjection_set
    __swig_getmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForSpikerec_Result_ppistProjection_get
    if _newclass:ppistProjection = _swig_property(_model_container_base.PQ_ConnsForSpikerec_Result_ppistProjection_get, _model_container_base.PQ_ConnsForSpikerec_Result_ppistProjection_set)
    __swig_setmethods__["ppistSpikerec"] = _model_container_base.PQ_ConnsForSpikerec_Result_ppistSpikerec_set
    __swig_getmethods__["ppistSpikerec"] = _model_container_base.PQ_ConnsForSpikerec_Result_ppistSpikerec_get
    if _newclass:ppistSpikerec = _swig_property(_model_container_base.PQ_ConnsForSpikerec_Result_ppistSpikerec_get, _model_container_base.PQ_ConnsForSpikerec_Result_ppistSpikerec_set)
    __swig_setmethods__["pfProcessor"] = _model_container_base.PQ_ConnsForSpikerec_Result_pfProcessor_set
    __swig_getmethods__["pfProcessor"] = _model_container_base.PQ_ConnsForSpikerec_Result_pfProcessor_get
    if _newclass:pfProcessor = _swig_property(_model_container_base.PQ_ConnsForSpikerec_Result_pfProcessor_get, _model_container_base.PQ_ConnsForSpikerec_Result_pfProcessor_set)
    __swig_setmethods__["pfFinalizer"] = _model_container_base.PQ_ConnsForSpikerec_Result_pfFinalizer_set
    __swig_getmethods__["pfFinalizer"] = _model_container_base.PQ_ConnsForSpikerec_Result_pfFinalizer_get
    if _newclass:pfFinalizer = _swig_property(_model_container_base.PQ_ConnsForSpikerec_Result_pfFinalizer_get, _model_container_base.PQ_ConnsForSpikerec_Result_pfFinalizer_set)
    __swig_setmethods__["pvUserdata"] = _model_container_base.PQ_ConnsForSpikerec_Result_pvUserdata_set
    __swig_getmethods__["pvUserdata"] = _model_container_base.PQ_ConnsForSpikerec_Result_pvUserdata_get
    if _newclass:pvUserdata = _swig_property(_model_container_base.PQ_ConnsForSpikerec_Result_pvUserdata_get, _model_container_base.PQ_ConnsForSpikerec_Result_pvUserdata_set)
    def __init__(self, *args): 
        this = _model_container_base.new_PQ_ConnsForSpikerec_Result(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_PQ_ConnsForSpikerec_Result
    __del__ = lambda self : None;
PQ_ConnsForSpikerec_Result_swigregister = _model_container_base.PQ_ConnsForSpikerec_Result_swigregister
PQ_ConnsForSpikerec_Result_swigregister(PQ_ConnsForSpikerec_Result)

class PQ_ConnsForPostSerial_Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PQ_ConnsForPostSerial_Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PQ_ConnsForPostSerial_Result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pproj"] = _model_container_base.PQ_ConnsForPostSerial_Result_pproj_set
    __swig_getmethods__["pproj"] = _model_container_base.PQ_ConnsForPostSerial_Result_pproj_get
    if _newclass:pproj = _swig_property(_model_container_base.PQ_ConnsForPostSerial_Result_pproj_get, _model_container_base.PQ_ConnsForPostSerial_Result_pproj_set)
    __swig_setmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForPostSerial_Result_ppistProjection_set
    __swig_getmethods__["ppistProjection"] = _model_container_base.PQ_ConnsForPostSerial_Result_ppistProjection_get
    if _newclass:ppistProjection = _swig_property(_model_container_base.PQ_ConnsForPostSerial_Result_ppistProjection_get, _model_container_base.PQ_ConnsForPostSerial_Result_ppistProjection_set)
    __swig_setmethods__["ppistSpikeReceiver"] = _model_container_base.PQ_ConnsForPostSerial_Result_ppistSpikeReceiver_set
    __swig_getmethods__["ppistSpikeReceiver"] = _model_container_base.PQ_ConnsForPostSerial_Result_ppistSpikeReceiver_get
    if _newclass:ppistSpikeReceiver = _swig_property(_model_container_base.PQ_ConnsForPostSerial_Result_ppistSpikeReceiver_get, _model_container_base.PQ_ConnsForPostSerial_Result_ppistSpikeReceiver_set)
    __swig_setmethods__["iPost"] = _model_container_base.PQ_ConnsForPostSerial_Result_iPost_set
    __swig_getmethods__["iPost"] = _model_container_base.PQ_ConnsForPostSerial_Result_iPost_get
    if _newclass:iPost = _swig_property(_model_container_base.PQ_ConnsForPostSerial_Result_iPost_get, _model_container_base.PQ_ConnsForPostSerial_Result_iPost_set)
    __swig_setmethods__["pfProcessor"] = _model_container_base.PQ_ConnsForPostSerial_Result_pfProcessor_set
    __swig_getmethods__["pfProcessor"] = _model_container_base.PQ_ConnsForPostSerial_Result_pfProcessor_get
    if _newclass:pfProcessor = _swig_property(_model_container_base.PQ_ConnsForPostSerial_Result_pfProcessor_get, _model_container_base.PQ_ConnsForPostSerial_Result_pfProcessor_set)
    __swig_setmethods__["pfFinalizer"] = _model_container_base.PQ_ConnsForPostSerial_Result_pfFinalizer_set
    __swig_getmethods__["pfFinalizer"] = _model_container_base.PQ_ConnsForPostSerial_Result_pfFinalizer_get
    if _newclass:pfFinalizer = _swig_property(_model_container_base.PQ_ConnsForPostSerial_Result_pfFinalizer_get, _model_container_base.PQ_ConnsForPostSerial_Result_pfFinalizer_set)
    __swig_setmethods__["pvUserdata"] = _model_container_base.PQ_ConnsForPostSerial_Result_pvUserdata_set
    __swig_getmethods__["pvUserdata"] = _model_container_base.PQ_ConnsForPostSerial_Result_pvUserdata_get
    if _newclass:pvUserdata = _swig_property(_model_container_base.PQ_ConnsForPostSerial_Result_pvUserdata_get, _model_container_base.PQ_ConnsForPostSerial_Result_pvUserdata_set)
    def __init__(self, *args): 
        this = _model_container_base.new_PQ_ConnsForPostSerial_Result(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_PQ_ConnsForPostSerial_Result
    __del__ = lambda self : None;
PQ_ConnsForPostSerial_Result_swigregister = _model_container_base.PQ_ConnsForPostSerial_Result_swigregister
PQ_ConnsForPostSerial_Result_swigregister(PQ_ConnsForPostSerial_Result)

QueryMachineHandle = _model_container_base.QueryMachineHandle
QueryMachineInitialize = _model_container_base.QueryMachineInitialize
QueryMachineInput = _model_container_base.QueryMachineInput
QueryMachineStart = _model_container_base.QueryMachineStart
RandomvalueCalloc = _model_container_base.RandomvalueCalloc
RandomvalueCreateAlias = _model_container_base.RandomvalueCreateAlias
RandomvalueGetSpikeGenerator = _model_container_base.RandomvalueGetSpikeGenerator
RandomvalueInit = _model_container_base.RandomvalueInit
RandomvalueLookupHierarchical = _model_container_base.RandomvalueLookupHierarchical
class descr_Randomvalue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Randomvalue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Randomvalue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iType"] = _model_container_base.descr_Randomvalue_iType_set
    __swig_getmethods__["iType"] = _model_container_base.descr_Randomvalue_iType_get
    if _newclass:iType = _swig_property(_model_container_base.descr_Randomvalue_iType_get, _model_container_base.descr_Randomvalue_iType_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Randomvalue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Randomvalue
    __del__ = lambda self : None;
descr_Randomvalue_swigregister = _model_container_base.descr_Randomvalue_swigregister
descr_Randomvalue_swigregister(descr_Randomvalue)

class symtab_Randomvalue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Randomvalue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Randomvalue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_Randomvalue_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_Randomvalue_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_Randomvalue_bio_get, _model_container_base.symtab_Randomvalue_bio_set)
    __swig_setmethods__["deranv"] = _model_container_base.symtab_Randomvalue_deranv_set
    __swig_getmethods__["deranv"] = _model_container_base.symtab_Randomvalue_deranv_get
    if _newclass:deranv = _swig_property(_model_container_base.symtab_Randomvalue_deranv_get, _model_container_base.symtab_Randomvalue_deranv_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Randomvalue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Randomvalue
    __del__ = lambda self : None;
symtab_Randomvalue_swigregister = _model_container_base.symtab_Randomvalue_swigregister
symtab_Randomvalue_swigregister(symtab_Randomvalue)

SegmentCalloc = _model_container_base.SegmentCalloc
SegmentCreateAlias = _model_container_base.SegmentCreateAlias
SegmentGetParameter = _model_container_base.SegmentGetParameter
SegmentGetSurface = _model_container_base.SegmentGetSurface
SegmentInit = _model_container_base.SegmentInit
SegmentReduce = _model_container_base.SegmentReduce
class descr_Segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Segment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iType"] = _model_container_base.descr_Segment_iType_set
    __swig_getmethods__["iType"] = _model_container_base.descr_Segment_iType_get
    if _newclass:iType = _swig_property(_model_container_base.descr_Segment_iType_get, _model_container_base.descr_Segment_iType_set)
    __swig_setmethods__["iFlags"] = _model_container_base.descr_Segment_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.descr_Segment_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.descr_Segment_iFlags_get, _model_container_base.descr_Segment_iFlags_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Segment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Segment
    __del__ = lambda self : None;
descr_Segment_swigregister = _model_container_base.descr_Segment_swigregister
descr_Segment_swigregister(descr_Segment)

class symtab_Segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Segment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segr"] = _model_container_base.symtab_Segment_segr_set
    __swig_getmethods__["segr"] = _model_container_base.symtab_Segment_segr_get
    if _newclass:segr = _swig_property(_model_container_base.symtab_Segment_segr_get, _model_container_base.symtab_Segment_segr_set)
    __swig_setmethods__["desegment"] = _model_container_base.symtab_Segment_desegment_set
    __swig_getmethods__["desegment"] = _model_container_base.symtab_Segment_desegment_get
    if _newclass:desegment = _swig_property(_model_container_base.symtab_Segment_desegment_get, _model_container_base.symtab_Segment_desegment_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Segment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Segment
    __del__ = lambda self : None;
symtab_Segment_swigregister = _model_container_base.symtab_Segment_swigregister
symtab_Segment_swigregister(symtab_Segment)

SegmenterCalloc = _model_container_base.SegmenterCalloc
SegmenterCountSegments = _model_container_base.SegmenterCountSegments
SegmenterCountSpikeGenerators = _model_container_base.SegmenterCountSpikeGenerators
SegmenterGetParameter = _model_container_base.SegmenterGetParameter
SegmenterInit = _model_container_base.SegmenterInit
SegmenterIsSpherical = _model_container_base.SegmenterIsSpherical
SegmenterLinearize = _model_container_base.SegmenterLinearize
SegmenterMesherOnLength = _model_container_base.SegmenterMesherOnLength
SegmenterParameterScaleValue = _model_container_base.SegmenterParameterScaleValue
SegmenterParentCount = _model_container_base.SegmenterParentCount
SegmenterSetBase = _model_container_base.SegmenterSetBase
SegmenterTips = _model_container_base.SegmenterTips
SegmenterTraverseSegments = _model_container_base.SegmenterTraverseSegments
class cable_structure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cable_structure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cable_structure, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iSerial"] = _model_container_base.cable_structure_iSerial_set
    __swig_getmethods__["iSerial"] = _model_container_base.cable_structure_iSerial_get
    if _newclass:iSerial = _swig_property(_model_container_base.cable_structure_iSerial_get, _model_container_base.cable_structure_iSerial_set)
    __swig_setmethods__["iParentSerial"] = _model_container_base.cable_structure_iParentSerial_set
    __swig_getmethods__["iParentSerial"] = _model_container_base.cable_structure_iParentSerial_get
    if _newclass:iParentSerial = _swig_property(_model_container_base.cable_structure_iParentSerial_get, _model_container_base.cable_structure_iParentSerial_set)
    __swig_setmethods__["iParentIndex"] = _model_container_base.cable_structure_iParentIndex_set
    __swig_getmethods__["iParentIndex"] = _model_container_base.cable_structure_iParentIndex_get
    if _newclass:iParentIndex = _swig_property(_model_container_base.cable_structure_iParentIndex_get, _model_container_base.cable_structure_iParentIndex_set)
    def __init__(self, *args): 
        this = _model_container_base.new_cable_structure(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_cable_structure
    __del__ = lambda self : None;
cable_structure_swigregister = _model_container_base.cable_structure_swigregister
cable_structure_swigregister(cable_structure)

class descr_Segmenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Segmenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Segmenter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iSegments"] = _model_container_base.descr_Segmenter_iSegments_set
    __swig_getmethods__["iSegments"] = _model_container_base.descr_Segmenter_iSegments_get
    if _newclass:iSegments = _swig_property(_model_container_base.descr_Segmenter_iSegments_get, _model_container_base.descr_Segmenter_iSegments_set)
    __swig_setmethods__["iNoParents"] = _model_container_base.descr_Segmenter_iNoParents_set
    __swig_getmethods__["iNoParents"] = _model_container_base.descr_Segmenter_iNoParents_get
    if _newclass:iNoParents = _swig_property(_model_container_base.descr_Segmenter_iNoParents_get, _model_container_base.descr_Segmenter_iNoParents_set)
    __swig_setmethods__["iTips"] = _model_container_base.descr_Segmenter_iTips_set
    __swig_getmethods__["iTips"] = _model_container_base.descr_Segmenter_iTips_get
    if _newclass:iTips = _swig_property(_model_container_base.descr_Segmenter_iTips_get, _model_container_base.descr_Segmenter_iTips_set)
    __swig_setmethods__["pcs"] = _model_container_base.descr_Segmenter_pcs_set
    __swig_getmethods__["pcs"] = _model_container_base.descr_Segmenter_pcs_get
    if _newclass:pcs = _swig_property(_model_container_base.descr_Segmenter_pcs_get, _model_container_base.descr_Segmenter_pcs_set)
    __swig_setmethods__["piChildren"] = _model_container_base.descr_Segmenter_piChildren_set
    __swig_getmethods__["piChildren"] = _model_container_base.descr_Segmenter_piChildren_get
    if _newclass:piChildren = _swig_property(_model_container_base.descr_Segmenter_piChildren_get, _model_container_base.descr_Segmenter_piChildren_set)
    __swig_setmethods__["ppiChildren"] = _model_container_base.descr_Segmenter_ppiChildren_set
    __swig_getmethods__["ppiChildren"] = _model_container_base.descr_Segmenter_ppiChildren_get
    if _newclass:ppiChildren = _swig_property(_model_container_base.descr_Segmenter_ppiChildren_get, _model_container_base.descr_Segmenter_ppiChildren_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Segmenter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Segmenter
    __del__ = lambda self : None;
descr_Segmenter_swigregister = _model_container_base.descr_Segmenter_swigregister
descr_Segmenter_swigregister(descr_Segmenter)

class symtab_Segmenter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Segmenter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Segmenter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_Segmenter_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_Segmenter_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_Segmenter_bio_get, _model_container_base.symtab_Segmenter_bio_set)
    __swig_setmethods__["desegmenter"] = _model_container_base.symtab_Segmenter_desegmenter_set
    __swig_getmethods__["desegmenter"] = _model_container_base.symtab_Segmenter_desegmenter_get
    if _newclass:desegmenter = _swig_property(_model_container_base.symtab_Segmenter_desegmenter_get, _model_container_base.symtab_Segmenter_desegmenter_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Segmenter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Segmenter
    __del__ = lambda self : None;
symtab_Segmenter_swigregister = _model_container_base.symtab_Segmenter_swigregister
symtab_Segmenter_swigregister(symtab_Segmenter)

class SolverInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolverInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pcSolver"] = _model_container_base.SolverInfo_pcSolver_set
    __swig_getmethods__["pcSolver"] = _model_container_base.SolverInfo_pcSolver_get
    if _newclass:pcSolver = _swig_property(_model_container_base.SolverInfo_pcSolver_get, _model_container_base.SolverInfo_pcSolver_set)
    __swig_setmethods__["pvSolver"] = _model_container_base.SolverInfo_pvSolver_set
    __swig_getmethods__["pvSolver"] = _model_container_base.SolverInfo_pvSolver_get
    if _newclass:pvSolver = _swig_property(_model_container_base.SolverInfo_pvSolver_get, _model_container_base.SolverInfo_pvSolver_set)
    __swig_setmethods__["ppist"] = _model_container_base.SolverInfo_ppist_set
    __swig_getmethods__["ppist"] = _model_container_base.SolverInfo_ppist_get
    if _newclass:ppist = _swig_property(_model_container_base.SolverInfo_ppist_get, _model_container_base.SolverInfo_ppist_set)
    def __init__(self, *args): 
        this = _model_container_base.new_SolverInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_SolverInfo
    __del__ = lambda self : None;
SolverInfo_swigregister = _model_container_base.SolverInfo_swigregister
SolverInfo_swigregister(SolverInfo)

class SolverRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolverRegistry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ppsiRegistrations"] = _model_container_base.SolverRegistry_ppsiRegistrations_set
    __swig_getmethods__["ppsiRegistrations"] = _model_container_base.SolverRegistry_ppsiRegistrations_get
    if _newclass:ppsiRegistrations = _swig_property(_model_container_base.SolverRegistry_ppsiRegistrations_get, _model_container_base.SolverRegistry_ppsiRegistrations_set)
    __swig_setmethods__["iRegistrationMax"] = _model_container_base.SolverRegistry_iRegistrationMax_set
    __swig_getmethods__["iRegistrationMax"] = _model_container_base.SolverRegistry_iRegistrationMax_get
    if _newclass:iRegistrationMax = _swig_property(_model_container_base.SolverRegistry_iRegistrationMax_get, _model_container_base.SolverRegistry_iRegistrationMax_set)
    __swig_setmethods__["iRegistrations"] = _model_container_base.SolverRegistry_iRegistrations_set
    __swig_getmethods__["iRegistrations"] = _model_container_base.SolverRegistry_iRegistrations_get
    if _newclass:iRegistrations = _swig_property(_model_container_base.SolverRegistry_iRegistrations_get, _model_container_base.SolverRegistry_iRegistrations_set)
    def __init__(self, *args): 
        this = _model_container_base.new_SolverRegistry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_SolverRegistry
    __del__ = lambda self : None;
SolverRegistry_swigregister = _model_container_base.SolverRegistry_swigregister
SolverRegistry_swigregister(SolverRegistry)

SolverInfoCalloc = _model_container_base.SolverInfoCalloc
SolverInfoCountIncomingConnections = _model_container_base.SolverInfoCountIncomingConnections
SolverInfoFree = _model_container_base.SolverInfoFree
SolverInfoGetSolverString = _model_container_base.SolverInfoGetSolverString
SolverInfoLookupContextFromPrincipalSerial = _model_container_base.SolverInfoLookupContextFromPrincipalSerial
SolverInfoLookupPrincipalSerial = _model_container_base.SolverInfoLookupPrincipalSerial
SolverInfoLookupRelativeSerial = _model_container_base.SolverInfoLookupRelativeSerial
SolverInfoLookupTopSymbol = _model_container_base.SolverInfoLookupTopSymbol
SolverInfoPidinStack = _model_container_base.SolverInfoPidinStack
SolverInfoSerialInSolvedSet = _model_container_base.SolverInfoSerialInSolvedSet
SolverRegistryAdd = _model_container_base.SolverRegistryAdd
SolverRegistryAddFromContext = _model_container_base.SolverRegistryAddFromContext
SolverRegistryEnumerate = _model_container_base.SolverRegistryEnumerate
SolverRegistryGet = _model_container_base.SolverRegistryGet
SolverRegistryGetForAbsoluteSerial = _model_container_base.SolverRegistryGetForAbsoluteSerial
SolverRegistryCalloc = _model_container_base.SolverRegistryCalloc
class Symbols(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Symbols, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Symbols, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hslFiles"] = _model_container_base.Symbols_hslFiles_set
    __swig_getmethods__["hslFiles"] = _model_container_base.Symbols_hslFiles_get
    if _newclass:hslFiles = _swig_property(_model_container_base.Symbols_hslFiles_get, _model_container_base.Symbols_hslFiles_set)
    __swig_setmethods__["pas"] = _model_container_base.Symbols_pas_set
    __swig_getmethods__["pas"] = _model_container_base.Symbols_pas_get
    if _newclass:pas = _swig_property(_model_container_base.Symbols_pas_get, _model_container_base.Symbols_pas_set)
    def __init__(self, *args): 
        this = _model_container_base.new_Symbols(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_Symbols
    __del__ = lambda self : None;
Symbols_swigregister = _model_container_base.Symbols_swigregister
Symbols_swigregister(Symbols)

SymbolsAddImportedFile = _model_container_base.SymbolsAddImportedFile
SymbolsCalloc = _model_container_base.SymbolsCalloc
SymbolsLookupImportedFile = _model_container_base.SymbolsLookupImportedFile
SymbolsPrintImportedFiles = _model_container_base.SymbolsPrintImportedFiles
SymbolsInitialize = _model_container_base.SymbolsInitialize
SymbolsLookupHierarchical = _model_container_base.SymbolsLookupHierarchical
SymbolsLookupNameSpace = _model_container_base.SymbolsLookupNameSpace
SymbolsPrint = _model_container_base.SymbolsPrint
SymbolsPrintModel = _model_container_base.SymbolsPrintModel
class symtab_String(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_String, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pcString"] = _model_container_base.symtab_String_pcString_set
    __swig_getmethods__["pcString"] = _model_container_base.symtab_String_pcString_get
    if _newclass:pcString = _swig_property(_model_container_base.symtab_String_pcString_get, _model_container_base.symtab_String_pcString_set)
    __swig_setmethods__["iLength"] = _model_container_base.symtab_String_iLength_set
    __swig_getmethods__["iLength"] = _model_container_base.symtab_String_iLength_get
    if _newclass:iLength = _swig_property(_model_container_base.symtab_String_iLength_get, _model_container_base.symtab_String_iLength_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_String(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_String
    __del__ = lambda self : None;
symtab_String_swigregister = _model_container_base.symtab_String_swigregister
symtab_String_swigregister(symtab_String)

class SerialMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerialMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SerialMapper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iSuccessors"] = _model_container_base.SerialMapper_iSuccessors_set
    __swig_getmethods__["iSuccessors"] = _model_container_base.SerialMapper_iSuccessors_get
    if _newclass:iSuccessors = _swig_property(_model_container_base.SerialMapper_iSuccessors_get, _model_container_base.SerialMapper_iSuccessors_set)
    __swig_setmethods__["iParent"] = _model_container_base.SerialMapper_iParent_set
    __swig_getmethods__["iParent"] = _model_container_base.SerialMapper_iParent_get
    if _newclass:iParent = _swig_property(_model_container_base.SerialMapper_iParent_get, _model_container_base.SerialMapper_iParent_set)
    def __init__(self, *args): 
        this = _model_container_base.new_SerialMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_SerialMapper
    __del__ = lambda self : None;
SerialMapper_swigregister = _model_container_base.SerialMapper_swigregister
SerialMapper_swigregister(SerialMapper)

class symtab_HSolveListElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_HSolveListElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_HSolveListElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hsleLink"] = _model_container_base.symtab_HSolveListElement_hsleLink_set
    __swig_getmethods__["hsleLink"] = _model_container_base.symtab_HSolveListElement_hsleLink_get
    if _newclass:hsleLink = _swig_property(_model_container_base.symtab_HSolveListElement_hsleLink_get, _model_container_base.symtab_HSolveListElement_hsleLink_set)
    __swig_setmethods__["iAllocationIdentifier"] = _model_container_base.symtab_HSolveListElement_iAllocationIdentifier_set
    __swig_getmethods__["iAllocationIdentifier"] = _model_container_base.symtab_HSolveListElement_iAllocationIdentifier_get
    if _newclass:iAllocationIdentifier = _swig_property(_model_container_base.symtab_HSolveListElement_iAllocationIdentifier_get, _model_container_base.symtab_HSolveListElement_iAllocationIdentifier_set)
    __swig_setmethods__["palgi"] = _model_container_base.symtab_HSolveListElement_palgi_set
    __swig_getmethods__["palgi"] = _model_container_base.symtab_HSolveListElement_palgi_get
    if _newclass:palgi = _swig_property(_model_container_base.symtab_HSolveListElement_palgi_get, _model_container_base.symtab_HSolveListElement_palgi_set)
    __swig_setmethods__["pparcac"] = _model_container_base.symtab_HSolveListElement_pparcac_set
    __swig_getmethods__["pparcac"] = _model_container_base.symtab_HSolveListElement_pparcac_get
    if _newclass:pparcac = _swig_property(_model_container_base.symtab_HSolveListElement_pparcac_get, _model_container_base.symtab_HSolveListElement_pparcac_set)
    __swig_setmethods__["pparReferences"] = _model_container_base.symtab_HSolveListElement_pparReferences_set
    __swig_getmethods__["pparReferences"] = _model_container_base.symtab_HSolveListElement_pparReferences_get
    if _newclass:pparReferences = _swig_property(_model_container_base.symtab_HSolveListElement_pparReferences_get, _model_container_base.symtab_HSolveListElement_pparReferences_set)
    __swig_setmethods__["iType"] = _model_container_base.symtab_HSolveListElement_iType_set
    __swig_getmethods__["iType"] = _model_container_base.symtab_HSolveListElement_iType_get
    if _newclass:iType = _swig_property(_model_container_base.symtab_HSolveListElement_iType_get, _model_container_base.symtab_HSolveListElement_iType_set)
    __swig_setmethods__["smapInvisible"] = _model_container_base.symtab_HSolveListElement_smapInvisible_set
    __swig_getmethods__["smapInvisible"] = _model_container_base.symtab_HSolveListElement_smapInvisible_get
    if _newclass:smapInvisible = _swig_property(_model_container_base.symtab_HSolveListElement_smapInvisible_get, _model_container_base.symtab_HSolveListElement_smapInvisible_set)
    __swig_setmethods__["smapPrincipal"] = _model_container_base.symtab_HSolveListElement_smapPrincipal_set
    __swig_getmethods__["smapPrincipal"] = _model_container_base.symtab_HSolveListElement_smapPrincipal_get
    if _newclass:smapPrincipal = _swig_property(_model_container_base.symtab_HSolveListElement_smapPrincipal_get, _model_container_base.symtab_HSolveListElement_smapPrincipal_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_HSolveListElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_HSolveListElement
    __del__ = lambda self : None;
symtab_HSolveListElement_swigregister = _model_container_base.symtab_HSolveListElement_swigregister
symtab_HSolveListElement_swigregister(symtab_HSolveListElement)

FLAGS_HSLE_TRAVERSAL = _model_container_base.FLAGS_HSLE_TRAVERSAL
SymbolAllSerialsClear = _model_container_base.SymbolAllSerialsClear
SymbolAllSerialsEntailChild = _model_container_base.SymbolAllSerialsEntailChild
BaseSymbolAllSerialsToParentGet = _model_container_base.BaseSymbolAllSerialsToParentGet
BaseSymbolAllSerialsToParentSet = _model_container_base.BaseSymbolAllSerialsToParentSet
BaseSymbolAllSuccessorsGet = _model_container_base.BaseSymbolAllSuccessorsGet
BaseSymbolAllSuccessorsSet = _model_container_base.BaseSymbolAllSuccessorsSet
BaseSymbolGetSymbol = _model_container_base.BaseSymbolGetSymbol
SymbolGetArrayOfNumberOfAliases = _model_container_base.SymbolGetArrayOfNumberOfAliases
SymbolGetNumberOfAliases = _model_container_base.SymbolGetNumberOfAliases
SymbolIncrementAliases = _model_container_base.SymbolIncrementAliases
SymbolPrintParameterTraversal = _model_container_base.SymbolPrintParameterTraversal
TSTR_PROCESSOR_FAILURE = _model_container_base.TSTR_PROCESSOR_FAILURE
TSTR_PROCESSOR_SUCCESS = _model_container_base.TSTR_PROCESSOR_SUCCESS
TSTR_PROCESSOR_SUCCESS_NO_FINALIZE = _model_container_base.TSTR_PROCESSOR_SUCCESS_NO_FINALIZE
TSTR_PROCESSOR_ABORT = _model_container_base.TSTR_PROCESSOR_ABORT
TSTR_PROCESSOR_SIBLINGS = _model_container_base.TSTR_PROCESSOR_SIBLINGS
TSTR_SELECTOR_FAILURE = _model_container_base.TSTR_SELECTOR_FAILURE
TSTR_SELECTOR_PROCESS_SIBLING = _model_container_base.TSTR_SELECTOR_PROCESS_SIBLING
TSTR_SELECTOR_PROCESS_CHILDREN = _model_container_base.TSTR_SELECTOR_PROCESS_CHILDREN
TSTR_SELECTOR_PROCESS_ONLY_CHILDREN = _model_container_base.TSTR_SELECTOR_PROCESS_ONLY_CHILDREN
class TreespaceTraversal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreespaceTraversal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreespaceTraversal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iStatus"] = _model_container_base.TreespaceTraversal_iStatus_set
    __swig_getmethods__["iStatus"] = _model_container_base.TreespaceTraversal_iStatus_get
    if _newclass:iStatus = _swig_property(_model_container_base.TreespaceTraversal_iStatus_get, _model_container_base.TreespaceTraversal_iStatus_set)
    __swig_setmethods__["iFlags"] = _model_container_base.TreespaceTraversal_iFlags_set
    __swig_getmethods__["iFlags"] = _model_container_base.TreespaceTraversal_iFlags_get
    if _newclass:iFlags = _swig_property(_model_container_base.TreespaceTraversal_iFlags_get, _model_container_base.TreespaceTraversal_iFlags_set)
    __swig_setmethods__["iFirstEntry"] = _model_container_base.TreespaceTraversal_iFirstEntry_set
    __swig_getmethods__["iFirstEntry"] = _model_container_base.TreespaceTraversal_iFirstEntry_get
    if _newclass:iFirstEntry = _swig_property(_model_container_base.TreespaceTraversal_iFirstEntry_get, _model_container_base.TreespaceTraversal_iFirstEntry_set)
    __swig_setmethods__["pcrActual"] = _model_container_base.TreespaceTraversal_pcrActual_set
    __swig_getmethods__["pcrActual"] = _model_container_base.TreespaceTraversal_pcrActual_get
    if _newclass:pcrActual = _swig_property(_model_container_base.TreespaceTraversal_pcrActual_get, _model_container_base.TreespaceTraversal_pcrActual_set)
    __swig_setmethods__["iType"] = _model_container_base.TreespaceTraversal_iType_set
    __swig_getmethods__["iType"] = _model_container_base.TreespaceTraversal_iType_get
    if _newclass:iType = _swig_property(_model_container_base.TreespaceTraversal_iType_get, _model_container_base.TreespaceTraversal_iType_set)
    __swig_setmethods__["ppist"] = _model_container_base.TreespaceTraversal_ppist_set
    __swig_getmethods__["ppist"] = _model_container_base.TreespaceTraversal_ppist_get
    if _newclass:ppist = _swig_property(_model_container_base.TreespaceTraversal_ppist_get, _model_container_base.TreespaceTraversal_ppist_set)
    __swig_setmethods__["psymst"] = _model_container_base.TreespaceTraversal_psymst_set
    __swig_getmethods__["psymst"] = _model_container_base.TreespaceTraversal_psymst_get
    if _newclass:psymst = _swig_property(_model_container_base.TreespaceTraversal_psymst_get, _model_container_base.TreespaceTraversal_psymst_set)
    __swig_setmethods__["iSerialPrincipal"] = _model_container_base.TreespaceTraversal_iSerialPrincipal_set
    __swig_getmethods__["iSerialPrincipal"] = _model_container_base.TreespaceTraversal_iSerialPrincipal_get
    if _newclass:iSerialPrincipal = _swig_property(_model_container_base.TreespaceTraversal_iSerialPrincipal_get, _model_container_base.TreespaceTraversal_iSerialPrincipal_set)
    __swig_setmethods__["iSerialSegment"] = _model_container_base.TreespaceTraversal_iSerialSegment_set
    __swig_getmethods__["iSerialSegment"] = _model_container_base.TreespaceTraversal_iSerialSegment_get
    if _newclass:iSerialSegment = _swig_property(_model_container_base.TreespaceTraversal_iSerialSegment_get, _model_container_base.TreespaceTraversal_iSerialSegment_set)
    __swig_setmethods__["iSerialMechanism"] = _model_container_base.TreespaceTraversal_iSerialMechanism_set
    __swig_getmethods__["iSerialMechanism"] = _model_container_base.TreespaceTraversal_iSerialMechanism_get
    if _newclass:iSerialMechanism = _swig_property(_model_container_base.TreespaceTraversal_iSerialMechanism_get, _model_container_base.TreespaceTraversal_iSerialMechanism_set)
    __swig_setmethods__["pfPreSelector"] = _model_container_base.TreespaceTraversal_pfPreSelector_set
    __swig_getmethods__["pfPreSelector"] = _model_container_base.TreespaceTraversal_pfPreSelector_get
    if _newclass:pfPreSelector = _swig_property(_model_container_base.TreespaceTraversal_pfPreSelector_get, _model_container_base.TreespaceTraversal_pfPreSelector_set)
    __swig_setmethods__["pfProcessor"] = _model_container_base.TreespaceTraversal_pfProcessor_set
    __swig_getmethods__["pfProcessor"] = _model_container_base.TreespaceTraversal_pfProcessor_get
    if _newclass:pfProcessor = _swig_property(_model_container_base.TreespaceTraversal_pfProcessor_get, _model_container_base.TreespaceTraversal_pfProcessor_set)
    __swig_setmethods__["pfFinalizer"] = _model_container_base.TreespaceTraversal_pfFinalizer_set
    __swig_getmethods__["pfFinalizer"] = _model_container_base.TreespaceTraversal_pfFinalizer_get
    if _newclass:pfFinalizer = _swig_property(_model_container_base.TreespaceTraversal_pfFinalizer_get, _model_container_base.TreespaceTraversal_pfFinalizer_set)
    __swig_setmethods__["pvPreSelector"] = _model_container_base.TreespaceTraversal_pvPreSelector_set
    __swig_getmethods__["pvPreSelector"] = _model_container_base.TreespaceTraversal_pvPreSelector_get
    if _newclass:pvPreSelector = _swig_property(_model_container_base.TreespaceTraversal_pvPreSelector_get, _model_container_base.TreespaceTraversal_pvPreSelector_set)
    __swig_setmethods__["pvProcessor"] = _model_container_base.TreespaceTraversal_pvProcessor_set
    __swig_getmethods__["pvProcessor"] = _model_container_base.TreespaceTraversal_pvProcessor_get
    if _newclass:pvProcessor = _swig_property(_model_container_base.TreespaceTraversal_pvProcessor_get, _model_container_base.TreespaceTraversal_pvProcessor_set)
    __swig_setmethods__["pvFinalizer"] = _model_container_base.TreespaceTraversal_pvFinalizer_set
    __swig_getmethods__["pvFinalizer"] = _model_container_base.TreespaceTraversal_pvFinalizer_get
    if _newclass:pvFinalizer = _swig_property(_model_container_base.TreespaceTraversal_pvFinalizer_get, _model_container_base.TreespaceTraversal_pvFinalizer_set)
    def __init__(self, *args): 
        this = _model_container_base.new_TreespaceTraversal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_TreespaceTraversal
    __del__ = lambda self : None;
TreespaceTraversal_swigregister = _model_container_base.TreespaceTraversal_swigregister
TreespaceTraversal_swigregister(TreespaceTraversal)

TSTR_STATUS_NEW = _model_container_base.TSTR_STATUS_NEW
TSTR_STATUS_INITIALIZED = _model_container_base.TSTR_STATUS_INITIALIZED
TSTR_STATUS_DONE = _model_container_base.TSTR_STATUS_DONE
TSTR_FLAG_NO_PROTOTYPE_TRAVERSAL = _model_container_base.TSTR_FLAG_NO_PROTOTYPE_TRAVERSAL
SymbolCellCounter = _model_container_base.SymbolCellCounter
SymbolCellSelector = _model_container_base.SymbolCellSelector
SymbolConnectionCounter = _model_container_base.SymbolConnectionCounter
SymbolConnectionSelector = _model_container_base.SymbolConnectionSelector
SymbolProjectionSelector = _model_container_base.SymbolProjectionSelector
SymbolGateKineticSelector = _model_container_base.SymbolGateKineticSelector
SymbolTableValueCollector = _model_container_base.SymbolTableValueCollector
TstrCalloc = _model_container_base.TstrCalloc
TstrDelete = _model_container_base.TstrDelete
TstrGetActual = _model_container_base.TstrGetActual
TstrGetActualType = _model_container_base.TstrGetActualType
TstrGetActualParent = _model_container_base.TstrGetActualParent
TstrGo = _model_container_base.TstrGo
TstrNew = _model_container_base.TstrNew
TstrPrepare = _model_container_base.TstrPrepare
TstrPrepareForSerial = _model_container_base.TstrPrepareForSerial
TstrRepair = _model_container_base.TstrRepair
TstrRepairForSerial = _model_container_base.TstrRepairForSerial
TstrSetActual = _model_container_base.TstrSetActual
TstrSetActualType = _model_container_base.TstrSetActualType
TstrGetPrincipalSerial = _model_container_base.TstrGetPrincipalSerial
VectorInit = _model_container_base.VectorInit
class descr_Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_Vector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_Vector_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_Vector_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_Vector_iHappy_get, _model_container_base.descr_Vector_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_Vector
    __del__ = lambda self : None;
descr_Vector_swigregister = _model_container_base.descr_Vector_swigregister
descr_Vector_swigregister(descr_Vector)

class symtab_Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_Vector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bio"] = _model_container_base.symtab_Vector_bio_set
    __swig_getmethods__["bio"] = _model_container_base.symtab_Vector_bio_get
    if _newclass:bio = _swig_property(_model_container_base.symtab_Vector_bio_get, _model_container_base.symtab_Vector_bio_set)
    __swig_setmethods__["devect"] = _model_container_base.symtab_Vector_devect_set
    __swig_getmethods__["devect"] = _model_container_base.symtab_Vector_devect_get
    if _newclass:devect = _swig_property(_model_container_base.symtab_Vector_devect_get, _model_container_base.symtab_Vector_devect_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_Vector
    __del__ = lambda self : None;
symtab_Vector_swigregister = _model_container_base.symtab_Vector_swigregister
symtab_Vector_swigregister(symtab_Vector)

VConnectionSymbolCalloc = _model_container_base.VConnectionSymbolCalloc
VConnectionSymbolCreateAlias = _model_container_base.VConnectionSymbolCreateAlias
VConnectionSymbolInit = _model_container_base.VConnectionSymbolInit
class descr_VConnectionSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_VConnectionSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_VConnectionSymbol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_VConnectionSymbol_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_VConnectionSymbol_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_VConnectionSymbol_iHappy_get, _model_container_base.descr_VConnectionSymbol_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_VConnectionSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_VConnectionSymbol
    __del__ = lambda self : None;
descr_VConnectionSymbol_swigregister = _model_container_base.descr_VConnectionSymbol_swigregister
descr_VConnectionSymbol_swigregister(descr_VConnectionSymbol)

class symtab_VConnectionSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_VConnectionSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_VConnectionSymbol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vect"] = _model_container_base.symtab_VConnectionSymbol_vect_set
    __swig_getmethods__["vect"] = _model_container_base.symtab_VConnectionSymbol_vect_get
    if _newclass:vect = _swig_property(_model_container_base.symtab_VConnectionSymbol_vect_get, _model_container_base.symtab_VConnectionSymbol_vect_set)
    __swig_setmethods__["devconsy"] = _model_container_base.symtab_VConnectionSymbol_devconsy_set
    __swig_getmethods__["devconsy"] = _model_container_base.symtab_VConnectionSymbol_devconsy_get
    if _newclass:devconsy = _swig_property(_model_container_base.symtab_VConnectionSymbol_devconsy_get, _model_container_base.symtab_VConnectionSymbol_devconsy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_VConnectionSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_VConnectionSymbol
    __del__ = lambda self : None;
symtab_VConnectionSymbol_swigregister = _model_container_base.symtab_VConnectionSymbol_swigregister
symtab_VConnectionSymbol_swigregister(symtab_VConnectionSymbol)

VContourCalloc = _model_container_base.VContourCalloc
VContourCreateAlias = _model_container_base.VContourCreateAlias
VContourInit = _model_container_base.VContourInit
class descr_VContour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_VContour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_VContour, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_VContour_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_VContour_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_VContour_iHappy_get, _model_container_base.descr_VContour_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_VContour(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_VContour
    __del__ = lambda self : None;
descr_VContour_swigregister = _model_container_base.descr_VContour_swigregister
descr_VContour_swigregister(descr_VContour)

class symtab_VContour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_VContour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_VContour, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vect"] = _model_container_base.symtab_VContour_vect_set
    __swig_getmethods__["vect"] = _model_container_base.symtab_VContour_vect_get
    if _newclass:vect = _swig_property(_model_container_base.symtab_VContour_vect_get, _model_container_base.symtab_VContour_vect_set)
    __swig_setmethods__["devcont"] = _model_container_base.symtab_VContour_devcont_set
    __swig_getmethods__["devcont"] = _model_container_base.symtab_VContour_devcont_get
    if _newclass:devcont = _swig_property(_model_container_base.symtab_VContour_devcont_get, _model_container_base.symtab_VContour_devcont_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_VContour(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_VContour
    __del__ = lambda self : None;
symtab_VContour_swigregister = _model_container_base.symtab_VContour_swigregister
symtab_VContour_swigregister(symtab_VContour)

VSegmentRelative2Absolute = _model_container_base.VSegmentRelative2Absolute
VSegmentCalloc = _model_container_base.VSegmentCalloc
VSegmentCountSegments = _model_container_base.VSegmentCountSegments
VSegmentCreateAlias = _model_container_base.VSegmentCreateAlias
VSegmentInit = _model_container_base.VSegmentInit
VSegmentTraverseSegments = _model_container_base.VSegmentTraverseSegments
class descr_VSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, descr_VSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, descr_VSegment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iHappy"] = _model_container_base.descr_VSegment_iHappy_set
    __swig_getmethods__["iHappy"] = _model_container_base.descr_VSegment_iHappy_get
    if _newclass:iHappy = _swig_property(_model_container_base.descr_VSegment_iHappy_get, _model_container_base.descr_VSegment_iHappy_set)
    def __init__(self, *args): 
        this = _model_container_base.new_descr_VSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_descr_VSegment
    __del__ = lambda self : None;
descr_VSegment_swigregister = _model_container_base.descr_VSegment_swigregister
descr_VSegment_swigregister(descr_VSegment)

class symtab_VSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symtab_VSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symtab_VSegment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vect"] = _model_container_base.symtab_VSegment_vect_set
    __swig_getmethods__["vect"] = _model_container_base.symtab_VSegment_vect_get
    if _newclass:vect = _swig_property(_model_container_base.symtab_VSegment_vect_get, _model_container_base.symtab_VSegment_vect_set)
    __swig_setmethods__["devsegm"] = _model_container_base.symtab_VSegment_devsegm_set
    __swig_getmethods__["devsegm"] = _model_container_base.symtab_VSegment_devsegm_get
    if _newclass:devsegm = _swig_property(_model_container_base.symtab_VSegment_devsegm_get, _model_container_base.symtab_VSegment_devsegm_set)
    def __init__(self, *args): 
        this = _model_container_base.new_symtab_VSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model_container_base.delete_symtab_VSegment
    __del__ = lambda self : None;
symtab_VSegment_swigregister = _model_container_base.symtab_VSegment_swigregister
symtab_VSegment_swigregister(symtab_VSegment)

SymbolDeleter = _model_container_base.SymbolDeleter
BaseSymbolGetID = _model_container_base.BaseSymbolGetID
SymbolForwardReferencesResolve = _model_container_base.SymbolForwardReferencesResolve
SymbolReplaceForwardReferences = _model_container_base.SymbolReplaceForwardReferences
SymbolAddToForwardReferencers = _model_container_base.SymbolAddToForwardReferencers
SymbolCacheParameter = _model_container_base.SymbolCacheParameter
SymbolCacheParameterDouble = _model_container_base.SymbolCacheParameterDouble
SymbolCacheParameterString = _model_container_base.SymbolCacheParameterString
SymbolCalloc = _model_container_base.SymbolCalloc
SymbolFindCachedParameter = _model_container_base.SymbolFindCachedParameter
SymbolFindParameter = _model_container_base.SymbolFindParameter
SymbolFindParentSegment = _model_container_base.SymbolFindParentSegment
SymbolFree = _model_container_base.SymbolFree
SymbolGetAlgorithmInstanceInfo = _model_container_base.SymbolGetAlgorithmInstanceInfo
SymbolGetWorkloadIndividual = _model_container_base.SymbolGetWorkloadIndividual
SymbolInit = _model_container_base.SymbolInit
SymbolParameterResolveCoordinateValue = _model_container_base.SymbolParameterResolveCoordinateValue
SymbolParameterResolveScaledValue = _model_container_base.SymbolParameterResolveScaledValue
SymbolParameterTransformValue = _model_container_base.SymbolParameterTransformValue
SymbolParameterResolveTransformedValue = _model_container_base.SymbolParameterResolveTransformedValue
SymbolPrincipalSerial2Context = _model_container_base.SymbolPrincipalSerial2Context
SymbolPrincipalSerial2RelativeContext = _model_container_base.SymbolPrincipalSerial2RelativeContext
SymbolRecalcAllSerials = _model_container_base.SymbolRecalcAllSerials
SymbolSetAlgorithmInstanceInfo = _model_container_base.SymbolSetAlgorithmInstanceInfo
SymbolSetParameterFixedDouble = _model_container_base.SymbolSetParameterFixedDouble
SymbolSetParameterFixedString = _model_container_base.SymbolSetParameterFixedString
SymbolTraverseBioLevels = _model_container_base.SymbolTraverseBioLevels
SymbolTraverseDescendants = _model_container_base.SymbolTraverseDescendants
WildcardSelector = _model_container_base.WildcardSelector
SymbolTraverseWildcard = _model_container_base.SymbolTraverseWildcard
SymbolAddChild = _model_container_base.SymbolAddChild
SymbolAddChild_alien = _model_container_base.SymbolAddChild_alien
SymbolAllSerialsToParentGet = _model_container_base.SymbolAllSerialsToParentGet
SymbolAllSerialsToParentGet_alien = _model_container_base.SymbolAllSerialsToParentGet_alien
SymbolAllSerialsToParentSet = _model_container_base.SymbolAllSerialsToParentSet
SymbolAllSerialsToParentSet_alien = _model_container_base.SymbolAllSerialsToParentSet_alien
SymbolAllSuccessorsGet = _model_container_base.SymbolAllSuccessorsGet
SymbolAllSuccessorsGet_alien = _model_container_base.SymbolAllSuccessorsGet_alien
SymbolAllSuccessorsSet = _model_container_base.SymbolAllSuccessorsSet
SymbolAllSuccessorsSet_alien = _model_container_base.SymbolAllSuccessorsSet_alien
SymbolAssignBindableIO = _model_container_base.SymbolAssignBindableIO
SymbolAssignBindableIO_alien = _model_container_base.SymbolAssignBindableIO_alien
SymbolAssignInputs = _model_container_base.SymbolAssignInputs
SymbolAssignInputs_alien = _model_container_base.SymbolAssignInputs_alien
SymbolAssignParameters = _model_container_base.SymbolAssignParameters
SymbolAssignParameters_alien = _model_container_base.SymbolAssignParameters_alien
SymbolCollectMandatoryParameterValues = _model_container_base.SymbolCollectMandatoryParameterValues
SymbolCollectMandatoryParameterValues_alien = _model_container_base.SymbolCollectMandatoryParameterValues_alien
SymbolCountCells = _model_container_base.SymbolCountCells
SymbolCountCells_alien = _model_container_base.SymbolCountCells_alien
SymbolCountConnections = _model_container_base.SymbolCountConnections
SymbolCountConnections_alien = _model_container_base.SymbolCountConnections_alien
SymbolCountSegments = _model_container_base.SymbolCountSegments
SymbolCountSegments_alien = _model_container_base.SymbolCountSegments_alien
SymbolCountSpikeGenerators = _model_container_base.SymbolCountSpikeGenerators
SymbolCountSpikeGenerators_alien = _model_container_base.SymbolCountSpikeGenerators_alien
SymbolCountSpikeReceivers = _model_container_base.SymbolCountSpikeReceivers
SymbolCountSpikeReceivers_alien = _model_container_base.SymbolCountSpikeReceivers_alien
SymbolCreateAlias = _model_container_base.SymbolCreateAlias
SymbolCreateAlias_alien = _model_container_base.SymbolCreateAlias_alien
SymbolDeleteChild = _model_container_base.SymbolDeleteChild
SymbolDeleteChild_alien = _model_container_base.SymbolDeleteChild_alien
SymbolGetCachedDelay = _model_container_base.SymbolGetCachedDelay
SymbolGetCachedDelay_alien = _model_container_base.SymbolGetCachedDelay_alien
SymbolGetCachedPost = _model_container_base.SymbolGetCachedPost
SymbolGetCachedPost_alien = _model_container_base.SymbolGetCachedPost_alien
SymbolGetCachedPre = _model_container_base.SymbolGetCachedPre
SymbolGetCachedPre_alien = _model_container_base.SymbolGetCachedPre_alien
SymbolGetCachedWeight = _model_container_base.SymbolGetCachedWeight
SymbolGetCachedWeight_alien = _model_container_base.SymbolGetCachedWeight_alien
SymbolGetChildFromInput = _model_container_base.SymbolGetChildFromInput
SymbolGetChildFromInput_alien = _model_container_base.SymbolGetChildFromInput_alien
SymbolGetChildren = _model_container_base.SymbolGetChildren
SymbolGetChildren_alien = _model_container_base.SymbolGetChildren_alien
SymbolGetDelay = _model_container_base.SymbolGetDelay
SymbolGetDelay_alien = _model_container_base.SymbolGetDelay_alien
SymbolGetInputs = _model_container_base.SymbolGetInputs
SymbolGetInputs_alien = _model_container_base.SymbolGetInputs_alien
SymbolGetModifiableParameter = _model_container_base.SymbolGetModifiableParameter
SymbolGetModifiableParameter_alien = _model_container_base.SymbolGetModifiableParameter_alien
SymbolGetName = _model_container_base.SymbolGetName
SymbolGetName_alien = _model_container_base.SymbolGetName_alien
SymbolGetOptions = _model_container_base.SymbolGetOptions
SymbolGetOptions_alien = _model_container_base.SymbolGetOptions_alien
SymbolGetParameter = _model_container_base.SymbolGetParameter
SymbolGetParameter_alien = _model_container_base.SymbolGetParameter_alien
SymbolGetPidin = _model_container_base.SymbolGetPidin
SymbolGetPidin_alien = _model_container_base.SymbolGetPidin_alien
SymbolGetPost = _model_container_base.SymbolGetPost
SymbolGetPost_alien = _model_container_base.SymbolGetPost_alien
SymbolGetPre = _model_container_base.SymbolGetPre
SymbolGetPre_alien = _model_container_base.SymbolGetPre_alien
SymbolGetPrototype = _model_container_base.SymbolGetPrototype
SymbolGetPrototype_alien = _model_container_base.SymbolGetPrototype_alien
SymbolGetSymbol = _model_container_base.SymbolGetSymbol
SymbolGetSymbol_alien = _model_container_base.SymbolGetSymbol_alien
SymbolGetType = _model_container_base.SymbolGetType
SymbolGetType_alien = _model_container_base.SymbolGetType_alien
SymbolGetWeight = _model_container_base.SymbolGetWeight
SymbolGetWeight_alien = _model_container_base.SymbolGetWeight_alien
SymbolHasBindableIO = _model_container_base.SymbolHasBindableIO
SymbolHasBindableIO_alien = _model_container_base.SymbolHasBindableIO_alien
SymbolHasEquation = _model_container_base.SymbolHasEquation
SymbolHasEquation_alien = _model_container_base.SymbolHasEquation_alien
SymbolHasMGBlockGMAX = _model_container_base.SymbolHasMGBlockGMAX
SymbolHasMGBlockGMAX_alien = _model_container_base.SymbolHasMGBlockGMAX_alien
SymbolHasNernstErev = _model_container_base.SymbolHasNernstErev
SymbolHasNernstErev_alien = _model_container_base.SymbolHasNernstErev_alien
SymbolLinearize = _model_container_base.SymbolLinearize
SymbolLinearize_alien = _model_container_base.SymbolLinearize_alien
SymbolLookupHierarchical = _model_container_base.SymbolLookupHierarchical
SymbolLookupHierarchical_alien = _model_container_base.SymbolLookupHierarchical_alien
SymbolLookupSerialID = _model_container_base.SymbolLookupSerialID
SymbolLookupSerialID_alien = _model_container_base.SymbolLookupSerialID_alien
SymbolMesherOnLength = _model_container_base.SymbolMesherOnLength
SymbolMesherOnLength_alien = _model_container_base.SymbolMesherOnLength_alien
SymbolParameterLinkAtEnd = _model_container_base.SymbolParameterLinkAtEnd
SymbolParameterLinkAtEnd_alien = _model_container_base.SymbolParameterLinkAtEnd_alien
SymbolParameterResolveValue = _model_container_base.SymbolParameterResolveValue
SymbolParameterResolveValue_alien = _model_container_base.SymbolParameterResolveValue_alien
SymbolParameterScaleValue = _model_container_base.SymbolParameterScaleValue
SymbolParameterScaleValue_alien = _model_container_base.SymbolParameterScaleValue_alien
SymbolPrint = _model_container_base.SymbolPrint
SymbolPrint_alien = _model_container_base.SymbolPrint_alien
SymbolReduce = _model_container_base.SymbolReduce
SymbolReduce_alien = _model_container_base.SymbolReduce_alien
SymbolResolveInput = _model_container_base.SymbolResolveInput
SymbolResolveInput_alien = _model_container_base.SymbolResolveInput_alien
SymbolResolveParameterFunctionalInput = _model_container_base.SymbolResolveParameterFunctionalInput
SymbolResolveParameterFunctionalInput_alien = _model_container_base.SymbolResolveParameterFunctionalInput_alien
SymbolResolveTypedInput = _model_container_base.SymbolResolveTypedInput
SymbolResolveTypedInput_alien = _model_container_base.SymbolResolveTypedInput_alien
SymbolSetAtXYZ = _model_container_base.SymbolSetAtXYZ
SymbolSetAtXYZ_alien = _model_container_base.SymbolSetAtXYZ_alien
SymbolSetName = _model_container_base.SymbolSetName
SymbolSetName_alien = _model_container_base.SymbolSetName_alien
SymbolSetNamespace = _model_container_base.SymbolSetNamespace
SymbolSetNamespace_alien = _model_container_base.SymbolSetNamespace_alien
SymbolSetOptions = _model_container_base.SymbolSetOptions
SymbolSetOptions_alien = _model_container_base.SymbolSetOptions_alien
SymbolSetParameterContext = _model_container_base.SymbolSetParameterContext
SymbolSetParameterContext_alien = _model_container_base.SymbolSetParameterContext_alien
SymbolSetParameterDouble = _model_container_base.SymbolSetParameterDouble
SymbolSetParameterDouble_alien = _model_container_base.SymbolSetParameterDouble_alien
SymbolSetParameterMayBeCopyString = _model_container_base.SymbolSetParameterMayBeCopyString
SymbolSetParameterMayBeCopyString_alien = _model_container_base.SymbolSetParameterMayBeCopyString_alien
SymbolSetParameterString = _model_container_base.SymbolSetParameterString
SymbolSetParameterString_alien = _model_container_base.SymbolSetParameterString_alien
SymbolSetPrototype = _model_container_base.SymbolSetPrototype
SymbolSetPrototype_alien = _model_container_base.SymbolSetPrototype_alien
SymbolSetType = _model_container_base.SymbolSetType
SymbolSetType_alien = _model_container_base.SymbolSetType_alien
SymbolTraverse = _model_container_base.SymbolTraverse
SymbolTraverse_alien = _model_container_base.SymbolTraverse_alien
SymbolTraverseSegments = _model_container_base.SymbolTraverseSegments
SymbolTraverseSegments_alien = _model_container_base.SymbolTraverseSegments_alien
SymbolTraverseSpikeGenerators = _model_container_base.SymbolTraverseSpikeGenerators
SymbolTraverseSpikeGenerators_alien = _model_container_base.SymbolTraverseSpikeGenerators_alien
SymbolTraverseSpikeReceivers = _model_container_base.SymbolTraverseSpikeReceivers
SymbolTraverseSpikeReceivers_alien = _model_container_base.SymbolTraverseSpikeReceivers_alien


