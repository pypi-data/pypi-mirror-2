# This is GitMon configuration example. Copy it to ~/.gitmon.conf and edit to suit your needs

#################
# Notifier type #
#################

#Notifier implementation. Possible choices: 'command.line', 'growl', 'libnotify'
notifier.type = growl

##########################
# Growl Notifier options #
##########################

#These options are relevant to notifier.type = growl

#Keep notifications on screen untill you close them
growl.sticky.notifications = 0

#################################
# Command Line Notifier options #
#################################

#When you are using notifier.type = command.line, you have to define notification.command

#In linux where libnotify-bin is available:
#command.line.cmd = notification-send "${title}" "${message}"

#Windows users may try to configure their command by using http://www.growlforwindows.com/gfw/

########################
# Notification details #
########################

#Maximum number of new commits to show
max.new.commits = 5

#Maximum number of files to show in commit info. 0 is unlimited.
max.files.info = 3

#Notify when new branch appears?
notify.new.branch = 1

#Notify when new tag appears?
notify.new.tag = 1

###############
# Git options #
###############

#Pull when checking for updates?
auto.pull = 1

#Remove stale branches (and notify about them)
auto.delete.stale = 1

#####################
# Scheduler options #
#####################

#Use built-in scheduler? Not recommended yet
scheduler.builtin = 0

#How much time to sleep between checks
check.delay.minutes = 5

#############
# Variables #
#############

#A variable which will be substituted. You can have many of these
#In following example ${repos.root} will be replaced with ~/Development/repos
repos.root = ~/Dvelopment/repos

#Example variable
#example.var = Something

#######################
# Repository scanning #
#######################

#Will scan for repositories in ~/Development/projects 4 levels deep
scan.myrepos.name = My Projects
scan.myrepos.path = ~/Development/projects
scan.myrepos.depth = 4

#Another scanned directory with minimal input
#scan.misc.path = /misc/repos

##########################
# Repository definitions #
##########################

#repo.name.name = Repo Name (optional)
#name.path = /path/to/repo

#GitMon repository
repo.gitmon.name = GitMon Repo
repo.gitmon.path = ~/Development/python/gitmon

#Example repo definition (using ${repos.root} variable defined above)
#repo.x.name = Repo X
#repo.x.path = ${repos.root}/repo-x

#Nameless definition example. Name is generated from path
#repo.y.path = ${repos.root}/repo-y
