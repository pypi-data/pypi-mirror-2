from fabric.api import *
from fabric.contrib.files import exists

# globals

env.project_name = '$(project)'

# environments

def local():
    "Use the local virtual server"
    env.hosts = ['localhost']
    env.path = '/srv/$(project)'
    env.user = '$(project)'
    env.virtualhost_path = "/configs/common/"

# tasks

def test():
    "Run the test suite and bail out if it fails"
    local("cd \$(project_name)/configs/common; python manage.py test")

def setup():
    """
    Setup a fresh virtualenv as well as a few useful directories, then run
    a full deployment
    """
    require('hosts', provided_by=[local])
    require('path')
    
    sudo('apt-get update')
    sudo('aptitude install -y python-setuptools')
    sudo('easy_install pip')
    sudo('pip install virtualenv')
    sudo('aptitude install -y apache2')
    sudo('aptitude install -y libapache2-mod-wsgi')
    # we want rid of the defult apache config
    sudo('cd /etc/apache2/sites-available/; a2dissite default;')
    sudo('mkdir -p %s' % env.path) 
    run('cd %s; virtualenv .;' % env.path)
    run('cd %s; bin/easy_install pip' % env.path)
    if not exists('%s/releases' % env.path):
        run('cd %s; mkdir releases;' % env.path)
    if not exists('%s/shared' % env.path):
        run('cd %s; mkdir shared;' % env.path)
    if not exists('%s/packages' % env.path):
        run('cd %s; mkdir packages;' % env.path)

def deploy():
    """
    Deploy the latest version of the site to the servers, install any
    required third party modules, install the virtual host and 
    then restart the webserver
    """
    require('hosts', provided_by=[local])
    require('path')

    import time
    env.release = time.strftime('%Y%m%d%H%M%S')

    upload_tar_from_git()
    install_requirements()
    install_site()
    symlink_current_release()
    migrate()
    restart_webserver()

def deploy_version(version):
    "Specify a specific version to be made live"
    require('hosts', provided_by=[local])
    require('path')

    env.version = version
    run('cd %s; rm releases/previous; mv releases/current releases/previous;' % env.path)
    run('cd %s; ln -s %s releases/current' % (env.path, env.version))
    restart_webserver()

def rollback():
    """
    Limited rollback capability. Simple loads the previously current
    version of the code. Rolling back again will swap between the two,
    NOT keep going back in time.
    """
    require('hosts', provided_by=[local])
    require('path')

    run('cd %s; mv releases/current releases/_previous;' % env.path)
    run('cd %s; mv releases/previous releases/current;' % env.path)
    run('cd %s; mv releases/_previous releases/previous;' % env.path)
    restart_apache()
    
# Helpers. These are called by other functions rather than directly

def upload_tar_from_git():
    require('release', provided_by=[deploy])
    "Create an archive from the current Git master branch and upload it"
    local('git archive --format=tar master | gzip > %s.tar.gz' % env.release)
    run('mkdir -p %s/releases/%s' % (env.path, env.release))
    put('%s.tar.gz' % env.release, '%s/packages/' % env.path)
    run('cd %s/releases/%s && tar zxf ../../packages/%s.tar.gz' % (env.path, env.release, env.release))
    local('rm %s.tar.gz' % env.release)

def upload_tar_from_svn():
    require('release', provided_by=[deploy])
    "Create an archive from the current SVN repo"
    local('svn export %s%s/trunk %s --username autouser --password autouser' % (env.repo_address, env.project_name, env.release))
    local('tar -pczf %s.tar.gz %s' % (env.release, env.release))
    put('%s.tar.gz' % env.release, '%s/packages/' % env.path)
    run('cd %s/releases && tar zxf ../packages/%s.tar.gz' % (env.path, env.release))
    local('rm -fr %s' % env.release)
    local('rm %s.tar.gz' % env.release)

def install_site():    
    "Add the virtualhost file to apache"
    require('release', provided_by=[deploy])
    sudo('cd %s/releases/%s; cp %s/%s%s%s /etc/apache2/sites-available/' % (env.path, env.release, env.project_name, env.project_name, env.virtualhost_path, env.project_name))
    sudo('cd /etc/apache2/sites-available/; a2ensite %s' % env.project_name) 
    if not exists('/var/log/apache2/%s' % env.project_name):
        sudo('mkdir /var/log/apache2/%s' % env.project_name)

def install_requirements():
    "Install the required packages from the requirements file using pip"
    require('release', provided_by=[deploy])
    sudo('cd %s; pip install -E . -r ./releases/%s/requirements.txt' % (env.path, env.release))

def symlink_current_release():
    "Symlink our current release"
    require('release', provided_by=[deploy])
    if exists('%s/releases/previous' % env.path):
        run('rm %s/releases/previous' % env.path)
    if exists('%s/releases/current' % env.path):
        run('mv %s/releases/current %s/releases/previous' % (env.path, env.path))
    run('cd %s; ln -s %s releases/current' % (env.path, env.release))

def migrate():
    "Update the database"
    require('project_name')
    run('cd %s/releases/current/%s/configs/common; %s/bin/python manage.py syncdb --noinput' % (env.path, env.project_name, env.path))

def restart_webserver():
    "Restart the web server"
    sudo('/etc/init.d/apache2 restart')