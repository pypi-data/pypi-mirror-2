# -*- coding: utf-8 -*-
"""
Contains classes and utilities for serving a site
generated from hyde.
"""
import os
import urlparse
import urllib
from SimpleHTTPServer import SimpleHTTPRequestHandler
from BaseHTTPServer import HTTPServer
from hyde.fs import File, Folder
from hyde.site import Site
from hyde.generator import Generator
from hyde.exceptions import HydeException

from hyde.util import getLoggerWithNullHandler
logger = getLoggerWithNullHandler('hyde.server')

from datetime import datetime

class HydeRequestHandler(SimpleHTTPRequestHandler):
    """
    Serves files by regenerating the resource (or)
    everything when a request is issued.
    """

    def do_GET(self):
        """
        Identify the requested path. If the query string
        contains `refresh`, regenerat the entire site.
        Otherwise, regenerate only the requested resource
        and serve.
        """
        self.server.request_time = datetime.now()
        logger.info("Processing request:[%s]" % self.path)
        result = urlparse.urlparse(self.path)
        query = urlparse.parse_qs(result.query)
        if 'refresh' in query:
            self.server.regenerate()
            del query['refresh']
            parts = tuple(result)
            parts[4] = urllib.urlencode(query)
            new_url = urlparse.urlunparse(parts)
            logger.info('Redirecting...[%s]' % new_url)
            self.redirect(new_url)
        else:
            SimpleHTTPRequestHandler.do_GET(self)


    def translate_path(self, path):
        """
        Finds the absolute path of the requested file by
        referring to the `site` variable in the server.
        """
        path = SimpleHTTPRequestHandler.translate_path(self, path)
        site = self.server.site
        result = urlparse.urlparse(self.path)
        logger.debug("Trying to load file based on request:[%s]" % result.path)
        path = result.path.lstrip('/')
        if path.strip() == "" or File(path).kind.strip() == "":
            return site.config.deploy_root_path.child(path)

        res = site.content.resource_from_relative_deploy_path(path)

        if not res:

            # Check if its a new request
            if self.server.request_time > self.server.regeneration_time:
                # Cannot find the source file using the given path.
                # Check if the target file exists in the deploy folder.

                # this file is probably new or being generated by a plugin.
                # lets not try too hard, just regenerate
                logger.info("Attempting regeneration for:[%s]" % path)
                self.server.regenerate()
                res = site.content.resource_from_relative_deploy_path(path)
                if not res:
                    # Nothing much we can do.
                    logger.error("Cannot load file:[%s]" % path)

            return site.config.deploy_root_path.child(path)
        else:
            self.server.generate_resource(res)
        new_path = site.config.deploy_root_path.child(
                    res.relative_deploy_path)
        return new_path

    def do_404(self):
        """
        Sends a 'not found' response.
        """
        site = self.server.site
        if self.path != site.config.not_found:
            self.redirect(site.config.not_found)
        else:
            res = site.content.resource_from_relative_deploy_path(
                    site.config.not_found)

            message = "Requested resource not found"
            if not res:
                logger.error(
                    "Cannot find the 404 template[%s]."
                        % site.config.not_found)
            else:
                f404 = File(self.translate_path(site.config.not_found))
                if f404.exists:
                    message = f404.read_all()
            self.send_response(200, message)

    def redirect(self, path, temporary=True):
        """
        Sends a redirect header with the new location.
        """
        self.send_response(302 if temporary else 301)
        self.send_header('Location', path)
        self.end_headers()


class HydeWebServer(HTTPServer):
    """
    The hyde web server that regenerates the resource, node or site when
    a request is issued.
    """

    def __init__(self, site, address, port):
        self.site = site
        self.site.load()
        self.generator = Generator(self.site)
        self.request_time = datetime.strptime('1-1-1999', '%m-%d-%Y')
        self.regeneration_time = datetime.strptime('1-1-1998', '%m-%d-%Y')
        HTTPServer.__init__(self, (address, port),
                                            HydeRequestHandler)

    def regenerate(self):
        """
        Regenerates the entire site.
        """
        try:
            logger.info('Regenerating the entire site')
            self.regeneration_time = datetime.now()
            self.site.load()
            self.generator.generate_all()
        except Exception, exception:
            logger.error('Error occured when regenerating the site [%s]'
                            % exception.message)


    def generate_resource(self, resource):
        """
        Regenerates the given resource.
        """
        target = self.site.config.deploy_root_path.child(
                                resource.relative_deploy_path)
        if self.generator.has_resource_changed(resource):
            try:
                logger.info('Generating resource [%s]' % resource)
                self.generator.generate_resource(resource)
            except Exception, exception:
                logger.error(
                    'Error [%s] occured when generating the resource [%s]'
                            % (repr(exception), resource))
