# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _pulsegen_base
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


new_pdouble = _pulsegen_base.new_pdouble
copy_pdouble = _pulsegen_base.copy_pdouble
delete_pdouble = _pulsegen_base.delete_pdouble
pdouble_assign = _pulsegen_base.pdouble_assign
pdouble_value = _pulsegen_base.pdouble_value
PulseGenNew = _pulsegen_base.PulseGenNew
PulseGenSetFields = _pulsegen_base.PulseGenSetFields
PulseGenSingleStep = _pulsegen_base.PulseGenSingleStep
PulseGenReset = _pulsegen_base.PulseGenReset
PulseGenFinish = _pulsegen_base.PulseGenFinish
PulseGenAddInput = _pulsegen_base.PulseGenAddInput
PulseGenAddVariable = _pulsegen_base.PulseGenAddVariable
fact = _pulsegen_base.fact
GetOutput = _pulsegen_base.GetOutput
FREE_RUN = _pulsegen_base.FREE_RUN
EXT_TRIG = _pulsegen_base.EXT_TRIG
EXT_GATE = _pulsegen_base.EXT_GATE
class simobj_PulseGen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simobj_PulseGen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simobj_PulseGen, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pcName"] = _pulsegen_base.simobj_PulseGen_pcName_set
    __swig_getmethods__["pcName"] = _pulsegen_base.simobj_PulseGen_pcName_get
    if _newclass:pcName = _swig_property(_pulsegen_base.simobj_PulseGen_pcName_get, _pulsegen_base.simobj_PulseGen_pcName_set)
    __swig_setmethods__["dLevel1"] = _pulsegen_base.simobj_PulseGen_dLevel1_set
    __swig_getmethods__["dLevel1"] = _pulsegen_base.simobj_PulseGen_dLevel1_get
    if _newclass:dLevel1 = _swig_property(_pulsegen_base.simobj_PulseGen_dLevel1_get, _pulsegen_base.simobj_PulseGen_dLevel1_set)
    __swig_setmethods__["dWidth1"] = _pulsegen_base.simobj_PulseGen_dWidth1_set
    __swig_getmethods__["dWidth1"] = _pulsegen_base.simobj_PulseGen_dWidth1_get
    if _newclass:dWidth1 = _swig_property(_pulsegen_base.simobj_PulseGen_dWidth1_get, _pulsegen_base.simobj_PulseGen_dWidth1_set)
    __swig_setmethods__["dDelay1"] = _pulsegen_base.simobj_PulseGen_dDelay1_set
    __swig_getmethods__["dDelay1"] = _pulsegen_base.simobj_PulseGen_dDelay1_get
    if _newclass:dDelay1 = _swig_property(_pulsegen_base.simobj_PulseGen_dDelay1_get, _pulsegen_base.simobj_PulseGen_dDelay1_set)
    __swig_setmethods__["dLevel2"] = _pulsegen_base.simobj_PulseGen_dLevel2_set
    __swig_getmethods__["dLevel2"] = _pulsegen_base.simobj_PulseGen_dLevel2_get
    if _newclass:dLevel2 = _swig_property(_pulsegen_base.simobj_PulseGen_dLevel2_get, _pulsegen_base.simobj_PulseGen_dLevel2_set)
    __swig_setmethods__["dWidth2"] = _pulsegen_base.simobj_PulseGen_dWidth2_set
    __swig_getmethods__["dWidth2"] = _pulsegen_base.simobj_PulseGen_dWidth2_get
    if _newclass:dWidth2 = _swig_property(_pulsegen_base.simobj_PulseGen_dWidth2_get, _pulsegen_base.simobj_PulseGen_dWidth2_set)
    __swig_setmethods__["dDelay2"] = _pulsegen_base.simobj_PulseGen_dDelay2_set
    __swig_getmethods__["dDelay2"] = _pulsegen_base.simobj_PulseGen_dDelay2_get
    if _newclass:dDelay2 = _swig_property(_pulsegen_base.simobj_PulseGen_dDelay2_get, _pulsegen_base.simobj_PulseGen_dDelay2_set)
    __swig_setmethods__["dBaseLevel"] = _pulsegen_base.simobj_PulseGen_dBaseLevel_set
    __swig_getmethods__["dBaseLevel"] = _pulsegen_base.simobj_PulseGen_dBaseLevel_get
    if _newclass:dBaseLevel = _swig_property(_pulsegen_base.simobj_PulseGen_dBaseLevel_get, _pulsegen_base.simobj_PulseGen_dBaseLevel_set)
    __swig_setmethods__["dTriggerTime"] = _pulsegen_base.simobj_PulseGen_dTriggerTime_set
    __swig_getmethods__["dTriggerTime"] = _pulsegen_base.simobj_PulseGen_dTriggerTime_get
    if _newclass:dTriggerTime = _swig_property(_pulsegen_base.simobj_PulseGen_dTriggerTime_get, _pulsegen_base.simobj_PulseGen_dTriggerTime_set)
    __swig_setmethods__["iTriggerMode"] = _pulsegen_base.simobj_PulseGen_iTriggerMode_set
    __swig_getmethods__["iTriggerMode"] = _pulsegen_base.simobj_PulseGen_iTriggerMode_get
    if _newclass:iTriggerMode = _swig_property(_pulsegen_base.simobj_PulseGen_iTriggerMode_get, _pulsegen_base.simobj_PulseGen_iTriggerMode_set)
    __swig_setmethods__["iPreviousInput"] = _pulsegen_base.simobj_PulseGen_iPreviousInput_set
    __swig_getmethods__["iPreviousInput"] = _pulsegen_base.simobj_PulseGen_iPreviousInput_get
    if _newclass:iPreviousInput = _swig_property(_pulsegen_base.simobj_PulseGen_iPreviousInput_get, _pulsegen_base.simobj_PulseGen_iPreviousInput_set)
    __swig_setmethods__["pdPulseIn"] = _pulsegen_base.simobj_PulseGen_pdPulseIn_set
    __swig_getmethods__["pdPulseIn"] = _pulsegen_base.simobj_PulseGen_pdPulseIn_get
    if _newclass:pdPulseIn = _swig_property(_pulsegen_base.simobj_PulseGen_pdPulseIn_get, _pulsegen_base.simobj_PulseGen_pdPulseIn_set)
    __swig_setmethods__["pdPulseOut"] = _pulsegen_base.simobj_PulseGen_pdPulseOut_set
    __swig_getmethods__["pdPulseOut"] = _pulsegen_base.simobj_PulseGen_pdPulseOut_get
    if _newclass:pdPulseOut = _swig_property(_pulsegen_base.simobj_PulseGen_pdPulseOut_get, _pulsegen_base.simobj_PulseGen_pdPulseOut_set)
    def __init__(self, *args): 
        this = _pulsegen_base.new_simobj_PulseGen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pulsegen_base.delete_simobj_PulseGen
    __del__ = lambda self : None;
simobj_PulseGen_swigregister = _pulsegen_base.simobj_PulseGen_swigregister
simobj_PulseGen_swigregister(simobj_PulseGen)



