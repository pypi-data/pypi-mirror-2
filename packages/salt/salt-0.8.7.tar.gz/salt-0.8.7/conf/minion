##### Primary configuration settings #####
##########################################
# Set the location of the salt master server, if the master server cannot be
# resolved, then the minion will fail to start
#master: mcp

# Set the post used by the master reply and autnentication server
#master_port: 4506

# The directory to store the pki information in
#pki_dir: /etc/salt/pki

# Explicitly declare the id for this minion to use, if left commented the id
# will be the hostname as returned by the python call: socket.getfqdn()
# Since salt uses detatched ids it is possible to run multiple minions on the
# same machine but with different ids, this can be usefull for salt compute
# clusters.
#id:

# Where cache data goes
#cachedir: /var/cache/salt


#####   Minion module management     #####
##########################################
# Disable specific modules, this will allow the admin to limit the level os 
# access the master has to the minion
#disable_modules: [cmd,test]
#disable_returners: []
# Modules can be loaded from arbitrairy paths, this enables the easy deployment
# of third party modules, modules for returners and minions can be loaded.
# Specify a list of extra directories to search for minion modules and
# returners. These paths must be fully qualified!
#module_dirs: []
#returner_dirs: []
#states_dirs: []
#render_dirs: []

######        Security settings       #####
###########################################
# Enable "open mode", this mode still maintains encryption, but turns off
# authentication, this is only intended for highly secure environments or for
# the situation where your keys end up in a bad state. If you run in open mode
# you do so at your own risk!
#open_mode: False


######         Thread settings        #####
###########################################
# Enable multiprocessing support, by default when a minion recieves a
# publication a new thread is spawned and the command is executed therein. This
# is the optimal behavior for the use case where salt is used for data querires
# and distributed system managment, but not the optimal use case when salt is
# used for distributed computation. Since python threads are bad at cpu bound
# tasks salt allows for a multiprocessing process to be used for the execution
# instead. This addis more initial overhead to publications, but cpu bound
# executions will be faster. This feature requires python 2.6 or higher on the
# minion, if set to True and python 2.6 or higher is not present then it will
# fall back to python threads
#multiprocessing: False

######         Logging settings       #####
###########################################
#log_file: /var/log/salt/minion
#log_level: WARNING
# The log level for posting to the terminal
#out_level: ERROR


######      Module configuration      #####
###########################################
# Salt allows for modules to be passed arbitrairy configuration data, any data
# passed here in valid yaml format will be passed on to the salt minion modules
# for use. It is STRONGLY recomended that a naming convention be used in which
# the module name is followed by a . and then the value. Also, all top level
# data must be allied via the yaml dict construct, some examples:
#
# A simple value for the test module:
#test.foo: foo
#
# A list for the test module:
#test.bar: [baz,quo]
#
# A dict for the test moule:
#test.baz: {spam: sausage, cheese: bread}
