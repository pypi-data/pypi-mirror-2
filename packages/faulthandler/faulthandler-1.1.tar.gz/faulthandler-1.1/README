+++++++++++++
Fault handler
+++++++++++++

Fault handler for SIGSEGV, SIGFPE, SIGBUS and SIGILL signals: display the
Python backtrace and restore the previous handler. Allocate an alternate stack
for this handler, if sigaltstack() is available, to be able to allocate memory
on the stack, even on stack overflow.

Import the module and call faulthandler.enable() to enable the fault handler.

The Python backtrace is written to the file descriptor 2 which is supposed to
be the standard error stream. Start your graphical applications in a terminal
and run your server in foreground to see the backtrace.

Website: https://github.com/haypo/faulthandler/wiki/


Example
=======

Example of a segmentation fault on Linux: ::

    $ python
    >>> import faulthandler
    >>> faulthandler.enable()
    >>> faulthandler.sigsegv()
    Fatal Python error: Segmentation fault

    Traceback (most recent call first):
      File "<stdin>", line 1 in <module>
    Segmentation fault


Installation
============

To install faulthandler module, type the following command: ::

    python setup.py install

Then you can test your setup using the following command: ::

    python tests.py

You need a C compiler (eg. gcc) and Python headers to build the faulthandler
module. Eg. on Fedora, you have to install python-devel package (sudo yum
install python-devel).


faulthandler module API
=======================

Fault handler state (disabled by default):

 * enable(): enable the fault handler
 * disable(): disable the fault handler
 * isenabled(): get the status of the fault handler

Functions to test the fault handler:

 * sigbus(): raise a SIGBUS signal (Bus error)
 * sigfpe(): raise a SIGFPE signal (Floating point exception), do a division by
   zero
 * sigill(): raise a SIGILL signal (Illegal instruction)
 * sigsegv(): raise a SIGSEGV signal (Segmentation fault), read memory from
   NULL (address 0)

sigbus() and sigill() are not available on all operation systems.

The version can be read in the "version" attribute: use "version >> 8" to get
the major version, and "version & 255" to get the minor version.


Changelog
=========

Version 1.1 (2011-01-03)
------------------------

 * Disable the handler by default, because pkgutil may load the module and so
   enable the handler which is unexpected
 * Add dumpbacktrace() and dumpbacktrace_threads() functions
 * sigill() is available on Windows thanks to Martin's patch
 * Fix dump_ascii() for signed char type (eg. on FreeBSD)
 * Fix tests.py for Python 2.5

Version 1.0 (2010-12-24)
------------------------

 * First public release


Status
======

 * 2010-12-24: Tested with Python 2.6, 3.1 and 3.2 on Debian Sid
 * 2010-12-24: Tested with Python 2.6 and 3.1 on Windows XP


Similar projects
================

Application fault handlers:

 * The GNU libc has a fault handler in debug/segfault.c
 * XEmacs has a fault handler displaying the Lisp backtrace
 * RPy has a fault handler
 * Python WAD (Wrapped Application Debugger), released in 2001:
   http://www.dabeaz.com/papers/Python2001/python.html

System-wide fault handlers:

 * Ubuntu uses Apport: https://wiki.ubuntu.com/Apport
 * The Linux kernel logs also segfaults into /var/log/kern.log (and
   /var/log/syslog). /proc/sys/kernel/core_pattern contols how coredumps are
   created.
 * Windows opens a popup on a fatal error asking if the error should be
   reported to Microsoft


See also
========

 * http://bugs.python.org/issue8863 (may 2010):
   Display Python backtrace on SIGSEGV, SIGFPE and fatal error
 * http://bugs.python.org/issue3999 (sept. 2009):
   Real segmentation fault handler

