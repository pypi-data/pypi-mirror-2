>>> from fluentxml import Parser

Test parsing

>>> x = '''<roster>
...   <person age="42" sex="M" like="Jane">John Doe</person>
...   <person age="21" sex="F" like="dango">Jane Doe</person>
...   <person age="24" sex="U" like="rice">Rose Well</person>
... </roster>'''
>>> p = Parser()
>>> p.feed(x)
>>> foo = p.root

Test serialization

>>> str(foo)
'<roster>\n  <person age="42" like="Jane" sex="M">John Doe</person>\n  <person age="21" like="dango" sex="F">Jane Doe</person>\n  <person age="24" like="rice" sex="U">Rose Well</person>\n</roster>'
>>> foo
Node('roster', children=['\n  ', Node('person', {'age': '42', 'like': 'Jane', 'sex': 'M'}, ['John Doe']), '\n  ', Node('person', {'age': '21', 'like': 'dango', 'sex': 'F'}, ['Jane Doe']), '\n  ', Node('person', {'age': '24', 'like': 'rice', 'sex': 'U'}, ['Rose Well']), '\n'])

Test Python attributes

>>> foo.__class__
<class 'fluentxml.Node'>
>>> foo._name
'roster'
>>> foo._children
['\n  ', Node('person', {'age': '42', 'like': 'Jane', 'sex': 'M'}, ['John Doe']), '\n  ', Node('person', {'age': '21', 'like': 'dango', 'sex': 'F'}, ['Jane Doe']), '\n  ', Node('person', {'age': '24', 'like': 'rice', 'sex': 'U'}, ['Rose Well']), '\n']
>>> foo._texts
['\n  ', '\n  ', '\n  ', '\n']

Test querying children

>>> foo.person
[Node('person', {'age': '42', 'like': 'Jane', 'sex': 'M'}, ['John Doe']), Node('person', {'age': '21', 'like': 'dango', 'sex': 'F'}, ['Jane Doe']), Node('person', {'age': '24', 'like': 'rice', 'sex': 'U'}, ['Rose Well'])]
>>> foo.person[0]
Node('person', {'age': '42', 'like': 'Jane', 'sex': 'M'}, ['John Doe'])
>>> foo.person[0]['age']
'42'
>>> foo.person[0]['like']
'Jane'
>>> foo.person[0]._texts
['John Doe']
>>> foo.person[0]._texts[0]
'John Doe'
