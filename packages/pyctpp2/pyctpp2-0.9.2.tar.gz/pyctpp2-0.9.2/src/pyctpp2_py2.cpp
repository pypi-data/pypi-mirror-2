/* Generated by Cython 0.14.1 on Mon Mar 28 16:01:01 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__pyctpp2
#include "string"
#include "pyctpp2/error_type.h"
#include "stdint.h"
#include "CDT.hpp"
#include "pyctpp2/cdt_funcs.h"
#include "pyctpp2/ctemplate.h"
#include <vector>
#include "pyctpp2/cengine.h"
#include "stdio.h"
#include "pythread.h"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pyctpp2.pyx",
  "bool.pxd",
  "complex.pxd",
  "version.py",
};

/* Type declarations */

typedef PyObject *__pyx_t_7pyctpp2_StringType;

/* "pyctpp2.pyx":204
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 * 
 *     cdef Template create_template(self, CTemplate *template, str encoding="UTF-8"):             # <<<<<<<<<<<<<<
 *         cdef Template tmpl
 *         tmpl = Template.__new__(Template)
 */

struct __pyx_opt_args_7pyctpp2_6Engine_create_template {
  int __pyx_n;
  PyObject *encoding;
};

/* "pyctpp2.pyx":256
 * 
 * 
 * cdef traverse(obj, CDT *cdt, CDT *root_cdt=NULL, StringType prev_key=empty_string):             # <<<<<<<<<<<<<<
 *     cdef int idx
 *     cdef CDT tmp
 */

struct __pyx_opt_args_7pyctpp2_traverse {
  int __pyx_n;
  CTPP::CDT *root_cdt;
  __pyx_t_7pyctpp2_StringType prev_key;
};

/* "pyctpp2.pyx":78
 *         raise IOError(message)
 * 
 * cdef class Template             # <<<<<<<<<<<<<<
 * 
 * cdef class Engine:
 */

struct __pyx_obj_7pyctpp2_Template {
  PyObject_HEAD
  pyctpp2::CTemplate *thisptr;
  struct __pyx_obj_7pyctpp2_Engine *engine;
  PyObject *encoding;
};

/* "pyctpp2.pyx":80
 * cdef class Template
 * 
 * cdef class Engine:             # <<<<<<<<<<<<<<
 *     """CTPP2 Engine class."""
 *     cdef CEngine *thisptr
 */

struct __pyx_obj_7pyctpp2_Engine {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyctpp2_Engine *__pyx_vtab;
  pyctpp2::CEngine *thisptr;
  PyObject *include_dirs;
};


struct __pyx_vtabstruct_7pyctpp2_Engine {
  struct __pyx_obj_7pyctpp2_Template *(*create_template)(struct __pyx_obj_7pyctpp2_Engine *, pyctpp2::CTemplate *, struct __pyx_opt_args_7pyctpp2_6Engine_create_template *__pyx_optional_args);
};
static struct __pyx_vtabstruct_7pyctpp2_Engine *__pyx_vtabptr_7pyctpp2_Engine;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_tp_new(PyObject* type_obj) {
    return (PyObject*) (((PyTypeObject*)(type_obj))->tp_new(
        (PyTypeObject*)(type_obj), __pyx_empty_tuple, NULL));
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static PyObject *__Pyx_UnpackItem(PyObject *, Py_ssize_t index); /*proto*/
static int __Pyx_EndUnpack(PyObject *, Py_ssize_t expected); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact

#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)

#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)

#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)

#define PySet_Size(anyset) \
    PyObject_Size((anyset))

#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))

#define PySet_Pop(set) \
    PyObject_CallMethod(set, (char *)"pop", NULL)

static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"discard", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"add", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

#endif /* PyAnySet_CheckExact (<= Py2.4) */

#if PY_VERSION_HEX < 0x02040000
#ifndef Py_SETOBJECT_H
#define Py_SETOBJECT_H

static PyTypeObject *__Pyx_PySet_Type = NULL;
static PyTypeObject *__Pyx_PyFrozenSet_Type = NULL;

#define PySet_Type (*__Pyx_PySet_Type)
#define PyFrozenSet_Type (*__Pyx_PyFrozenSet_Type)

#define PyAnySet_Check(ob) \
    (PyAnySet_CheckExact(ob) || \
     PyType_IsSubtype((ob)->ob_type, &PySet_Type) || \
     PyType_IsSubtype((ob)->ob_type, &PyFrozenSet_Type))

#define PyFrozenSet_CheckExact(ob) ((ob)->ob_type == &PyFrozenSet_Type)

static int __Pyx_Py23SetsImport(void) {
    PyObject *sets=0, *Set=0, *ImmutableSet=0;

    sets = PyImport_ImportModule((char *)"sets");
    if (!sets) goto bad;
    Set = PyObject_GetAttrString(sets, (char *)"Set");
    if (!Set) goto bad;
    ImmutableSet = PyObject_GetAttrString(sets, (char *)"ImmutableSet");
    if (!ImmutableSet) goto bad;
    Py_DECREF(sets);

    __Pyx_PySet_Type       = (PyTypeObject*) Set;
    __Pyx_PyFrozenSet_Type = (PyTypeObject*) ImmutableSet;

    return 0;

 bad:
    Py_XDECREF(sets);
    Py_XDECREF(Set);
    Py_XDECREF(ImmutableSet);
    return -1;
}

#else
static int __Pyx_Py23SetsImport(void) { return 0; }
#endif /* !Py_SETOBJECT_H */
#endif /* < Py2.4  */
#endif /* < Py2.5  */

static CYTHON_INLINE int64_t __Pyx_PyInt_from_py_int64_t(PyObject *);

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static CYTHON_INLINE uint32_t __Pyx_PyInt_from_py_uint32_t(PyObject *);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, long size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from string */

/* Module declarations from error_type */

/* Module declarations from libc.stdint */

/* Module declarations from cdt */

/* Module declarations from ctemplate */

/* Module declarations from libcpp.vector */

/* Module declarations from cengine */

/* Module declarations from cpython.version */

/* Module declarations from cpython.ref */

/* Module declarations from cpython.exc */

/* Module declarations from cpython.module */

/* Module declarations from cpython.mem */

/* Module declarations from cpython.tuple */

/* Module declarations from cpython.list */

/* Module declarations from libc.stdio */

/* Module declarations from cpython.object */

/* Module declarations from cpython.sequence */

/* Module declarations from cpython.mapping */

/* Module declarations from cpython.iterator */

/* Module declarations from cpython.type */

/* Module declarations from cpython.number */

/* Module declarations from cpython.int */

/* Module declarations from __builtin__ */

/* Module declarations from cpython.bool */

static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;
/* Module declarations from cpython.long */

/* Module declarations from cpython.float */

/* Module declarations from __builtin__ */

/* Module declarations from cpython.complex */

static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;
/* Module declarations from cpython.string */

/* Module declarations from cpython.unicode */

/* Module declarations from cpython.dict */

/* Module declarations from cpython.instance */

/* Module declarations from cpython.function */

/* Module declarations from cpython.method */

/* Module declarations from cpython.weakref */

/* Module declarations from cpython.getargs */

/* Module declarations from cpython.pythread */

/* Module declarations from cpython.cobject */

/* Module declarations from cpython.oldbuffer */

/* Module declarations from cpython.set */

/* Module declarations from cpython.buffer */

/* Module declarations from cpython.bytes */

/* Module declarations from cpython.pycapsule */

/* Module declarations from cpython */

/* Module declarations from pyctpp2 */

static PyTypeObject *__pyx_ptype_7pyctpp2_Template = 0;
static PyTypeObject *__pyx_ptype_7pyctpp2_Engine = 0;
static PyObject *__pyx_v_7pyctpp2_empty_string = 0;
static PyObject *__pyx_f_7pyctpp2_string_type_to_str(void); /*proto*/
static PyObject *__pyx_f_7pyctpp2_str_to_bytes(__pyx_t_7pyctpp2_StringType); /*proto*/
static __pyx_t_7pyctpp2_StringType __pyx_f_7pyctpp2_c_str_to_str(const char*); /*proto*/
static int __pyx_f_7pyctpp2_isunicode(PyObject *); /*proto*/
static PyObject *__pyx_f_7pyctpp2_raise_error(enum pyctpp2::ErrorType, std::string); /*proto*/
static PyObject *__pyx_f_7pyctpp2_traverse(PyObject *, CTPP::CDT *, struct __pyx_opt_args_7pyctpp2_traverse *__pyx_optional_args); /*proto*/
#define __Pyx_MODULE_NAME "pyctpp2"
static int __pyx_module_is_main_pyctpp2 = 0;

/* Implementation of pyctpp2 */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_SyntaxError;
static PyObject *__pyx_builtin_SystemError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static char __pyx_k_1[] = "It has invalid value type";
static char __pyx_k_3[] = "UTF-8";
static char __pyx_k_4[] = "This class cannot be instantiated from Python";
static char __pyx_k_8[] = ".";
static char __pyx_k_9[] = "Template path.";
static char __pyx_k__os[] = "os";
static char __pyx_k__Init[] = "Init";
static char __pyx_k__Parse[] = "Parse";
static char __pyx_k__c_str[] = "c_str";
static char __pyx_k__clear[] = "clear";
static char __pyx_k__items[] = "items";
static char __pyx_k__Render[] = "Render";
static char __pyx_k__append[] = "append";
static char __pyx_k__decode[] = "decode";
static char __pyx_k__encode[] = "encode";
static char __pyx_k__engine[] = "engine";
static char __pyx_k__strict[] = "strict";
static char __pyx_k__IOError[] = "IOError";
static char __pyx_k__VERSION[] = "VERSION";
static char __pyx_k__libname[] = "libname";
static char __pyx_k__thisptr[] = "thisptr";
static char __pyx_k__PushBack[] = "PushBack";
static char __pyx_k____dict__[] = "__dict__";
static char __pyx_k____iter__[] = "__iter__";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__encoding[] = "encoding";
static char __pyx_k__filename[] = "filename";
static char __pyx_k__instance[] = "instance";
static char __pyx_k__max_func[] = "max_func";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k__ParseText[] = "ParseText";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__push_back[] = "push_back";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__SyntaxError[] = "SyntaxError";
static char __pyx_k__SystemError[] = "SystemError";
static char __pyx_k__steps_limit[] = "steps_limit";
static char __pyx_k__LoadBytecode[] = "LoadBytecode";
static char __pyx_k__SaveBytecode[] = "SaveBytecode";
static char __pyx_k__include_dirs[] = "include_dirs";
static char __pyx_k__CTPP2_VERSION[] = "CTPP2_VERSION";
static char __pyx_k__arg_stack_size[] = "arg_stack_size";
static char __pyx_k__AddUserFunction[] = "AddUserFunction";
static char __pyx_k__code_stack_size[] = "code_stack_size";
static char __pyx_k__create_template[] = "create_template";
static char __pyx_k__last_error_type[] = "last_error_type";
static char __pyx_k__set_include_dirs[] = "set_include_dirs";
static char __pyx_k__last_error_message[] = "last_error_message";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_n_s__AddUserFunction;
static PyObject *__pyx_n_s__CTPP2_VERSION;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__IOError;
static PyObject *__pyx_n_s__Init;
static PyObject *__pyx_n_s__LoadBytecode;
static PyObject *__pyx_n_s__Parse;
static PyObject *__pyx_n_s__ParseText;
static PyObject *__pyx_n_s__PushBack;
static PyObject *__pyx_n_s__Render;
static PyObject *__pyx_n_s__SaveBytecode;
static PyObject *__pyx_n_s__SyntaxError;
static PyObject *__pyx_n_s__SystemError;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s__VERSION;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____dict__;
static PyObject *__pyx_n_s____iter__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__append;
static PyObject *__pyx_n_s__arg_stack_size;
static PyObject *__pyx_n_s__c_str;
static PyObject *__pyx_n_s__clear;
static PyObject *__pyx_n_s__code_stack_size;
static PyObject *__pyx_n_s__create_template;
static PyObject *__pyx_n_s__decode;
static PyObject *__pyx_n_s__encode;
static PyObject *__pyx_n_s__encoding;
static PyObject *__pyx_n_s__engine;
static PyObject *__pyx_n_s__filename;
static PyObject *__pyx_n_s__include_dirs;
static PyObject *__pyx_n_s__instance;
static PyObject *__pyx_n_s__items;
static PyObject *__pyx_n_s__last_error_message;
static PyObject *__pyx_n_s__last_error_type;
static PyObject *__pyx_n_s__libname;
static PyObject *__pyx_n_s__max_func;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__push_back;
static PyObject *__pyx_n_s__set_include_dirs;
static PyObject *__pyx_n_s__steps_limit;
static PyObject *__pyx_n_s__strict;
static PyObject *__pyx_n_s__thisptr;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_9;
static __pyx_t_7pyctpp2_StringType __pyx_k_6;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_7;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_11;

/* "pyctpp2.pyx":55
 *     ctypedef bytes StringType
 *     cdef bytes empty_string = bytes()
 *     cdef bytes string_type_to_str():             # <<<<<<<<<<<<<<
 *         return str(unicode)
 *     cdef bytes str_to_bytes(StringType s):
 */

static  PyObject *__pyx_f_7pyctpp2_string_type_to_str(void) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("string_type_to_str");

  /* "pyctpp2.pyx":56
 *     cdef bytes empty_string = bytes()
 *     cdef bytes string_type_to_str():
 *         return str(unicode)             # <<<<<<<<<<<<<<
 *     cdef bytes str_to_bytes(StringType s):
 *         return s
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)((PyObject*)(&PyUnicode_Type))));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)(&PyUnicode_Type))));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyUnicode_Type))));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyctpp2.string_type_to_str");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":57
 *     cdef bytes string_type_to_str():
 *         return str(unicode)
 *     cdef bytes str_to_bytes(StringType s):             # <<<<<<<<<<<<<<
 *         return s
 *     cdef StringType c_str_to_str(const_char_ptr c):
 */

static  PyObject *__pyx_f_7pyctpp2_str_to_bytes(__pyx_t_7pyctpp2_StringType __pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("str_to_bytes");

  /* "pyctpp2.pyx":58
 *         return str(unicode)
 *     cdef bytes str_to_bytes(StringType s):
 *         return s             # <<<<<<<<<<<<<<
 *     cdef StringType c_str_to_str(const_char_ptr c):
 *         return c
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject*)__pyx_v_s);
  goto __pyx_L0;

  __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":59
 *     cdef bytes str_to_bytes(StringType s):
 *         return s
 *     cdef StringType c_str_to_str(const_char_ptr c):             # <<<<<<<<<<<<<<
 *         return c
 *     cdef bint isunicode(s):
 */

static  __pyx_t_7pyctpp2_StringType __pyx_f_7pyctpp2_c_str_to_str(const char* __pyx_v_c) {
  __pyx_t_7pyctpp2_StringType __pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c_str_to_str");

  /* "pyctpp2.pyx":60
 *         return s
 *     cdef StringType c_str_to_str(const_char_ptr c):
 *         return c             # <<<<<<<<<<<<<<
 *     cdef bint isunicode(s):
 *         return isinstance(s, unicode)
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = PyBytes_FromString(__pyx_v_c); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((__pyx_t_7pyctpp2_StringType)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = ((__pyx_t_7pyctpp2_StringType)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyctpp2.c_str_to_str");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":61
 *     cdef StringType c_str_to_str(const_char_ptr c):
 *         return c
 *     cdef bint isunicode(s):             # <<<<<<<<<<<<<<
 *         return isinstance(s, unicode)
 * 
 */

static  int __pyx_f_7pyctpp2_isunicode(PyObject *__pyx_v_s) {
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("isunicode");

  /* "pyctpp2.pyx":62
 *         return c
 *     cdef bint isunicode(s):
 *         return isinstance(s, unicode)             # <<<<<<<<<<<<<<
 * 
 * cdef raise_error(err.ErrorType etype, string message_):
 */
  __pyx_t_1 = __pyx_v_s;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((PyObject*)(&PyUnicode_Type)));
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_1, __pyx_t_2); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":64
 *         return isinstance(s, unicode)
 * 
 * cdef raise_error(err.ErrorType etype, string message_):             # <<<<<<<<<<<<<<
 *     cdef const_char_ptr c_str = message_.c_str()
 *     cdef StringType message = c_str_to_str(c_str)
 */

static  PyObject *__pyx_f_7pyctpp2_raise_error(enum pyctpp2::ErrorType __pyx_v_etype, std::string __pyx_v_message_) {
  const char* __pyx_v_c_str;
  __pyx_t_7pyctpp2_StringType __pyx_v_message = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4;
  __Pyx_RefNannySetupContext("raise_error");

  /* "pyctpp2.pyx":65
 * 
 * cdef raise_error(err.ErrorType etype, string message_):
 *     cdef const_char_ptr c_str = message_.c_str()             # <<<<<<<<<<<<<<
 *     cdef StringType message = c_str_to_str(c_str)
 *     if etype == err.kNoErrorType:
 */
  __pyx_v_c_str = __pyx_v_message_.c_str();

  /* "pyctpp2.pyx":66
 * cdef raise_error(err.ErrorType etype, string message_):
 *     cdef const_char_ptr c_str = message_.c_str()
 *     cdef StringType message = c_str_to_str(c_str)             # <<<<<<<<<<<<<<
 *     if etype == err.kNoErrorType:
 *         raise Exception(message)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7pyctpp2_c_str_to_str(__pyx_v_c_str)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_message = ((__pyx_t_7pyctpp2_StringType)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyctpp2.pyx":67
 *     cdef const_char_ptr c_str = message_.c_str()
 *     cdef StringType message = c_str_to_str(c_str)
 *     if etype == err.kNoErrorType:             # <<<<<<<<<<<<<<
 *         raise Exception(message)
 *     elif etype == err.kSyntaxErrorType:
 */
  __pyx_t_2 = (__pyx_v_etype == pyctpp2::kNoErrorType);
  if (__pyx_t_2) {

    /* "pyctpp2.pyx":68
 *     cdef StringType message = c_str_to_str(c_str)
 *     if etype == err.kNoErrorType:
 *         raise Exception(message)             # <<<<<<<<<<<<<<
 *     elif etype == err.kSyntaxErrorType:
 *         raise SyntaxError(message)
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(((PyObject *)__pyx_v_message));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_message));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_message));
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "pyctpp2.pyx":69
 *     if etype == err.kNoErrorType:
 *         raise Exception(message)
 *     elif etype == err.kSyntaxErrorType:             # <<<<<<<<<<<<<<
 *         raise SyntaxError(message)
 *     elif etype == err.kNoMemoryErrorType:
 */
  __pyx_t_2 = (__pyx_v_etype == pyctpp2::kSyntaxErrorType);
  if (__pyx_t_2) {

    /* "pyctpp2.pyx":70
 *         raise Exception(message)
 *     elif etype == err.kSyntaxErrorType:
 *         raise SyntaxError(message)             # <<<<<<<<<<<<<<
 *     elif etype == err.kNoMemoryErrorType:
 *         exc.PyErr_NoMemory()
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_v_message));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_message));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_message));
    __pyx_t_1 = PyObject_Call(__pyx_builtin_SyntaxError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "pyctpp2.pyx":71
 *     elif etype == err.kSyntaxErrorType:
 *         raise SyntaxError(message)
 *     elif etype == err.kNoMemoryErrorType:             # <<<<<<<<<<<<<<
 *         exc.PyErr_NoMemory()
 *     elif etype == err.kSystemErrorType:
 */
  __pyx_t_2 = (__pyx_v_etype == pyctpp2::kNoMemoryErrorType);
  if (__pyx_t_2) {

    /* "pyctpp2.pyx":72
 *         raise SyntaxError(message)
 *     elif etype == err.kNoMemoryErrorType:
 *         exc.PyErr_NoMemory()             # <<<<<<<<<<<<<<
 *     elif etype == err.kSystemErrorType:
 *         raise SystemError(message)
 */
    __pyx_t_4 = PyErr_NoMemory(); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "pyctpp2.pyx":73
 *     elif etype == err.kNoMemoryErrorType:
 *         exc.PyErr_NoMemory()
 *     elif etype == err.kSystemErrorType:             # <<<<<<<<<<<<<<
 *         raise SystemError(message)
 *     elif etype == err.kIOErrorType:
 */
  __pyx_t_2 = (__pyx_v_etype == pyctpp2::kSystemErrorType);
  if (__pyx_t_2) {

    /* "pyctpp2.pyx":74
 *         exc.PyErr_NoMemory()
 *     elif etype == err.kSystemErrorType:
 *         raise SystemError(message)             # <<<<<<<<<<<<<<
 *     elif etype == err.kIOErrorType:
 *         raise IOError(message)
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(((PyObject *)__pyx_v_message));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_message));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_message));
    __pyx_t_3 = PyObject_Call(__pyx_builtin_SystemError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }

  /* "pyctpp2.pyx":75
 *     elif etype == err.kSystemErrorType:
 *         raise SystemError(message)
 *     elif etype == err.kIOErrorType:             # <<<<<<<<<<<<<<
 *         raise IOError(message)
 * 
 */
  __pyx_t_2 = (__pyx_v_etype == pyctpp2::kIOErrorType);
  if (__pyx_t_2) {

    /* "pyctpp2.pyx":76
 *         raise SystemError(message)
 *     elif etype == err.kIOErrorType:
 *         raise IOError(message)             # <<<<<<<<<<<<<<
 * 
 * cdef class Template
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_v_message));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_message));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_message));
    __pyx_t_1 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyctpp2.raise_error");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_message);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":88
 *         """Template path."""
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.include_dirs
 * 
 */

static PyObject *__pyx_pf_7pyctpp2_6Engine_4path___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7pyctpp2_6Engine_4path___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__get__");

  /* "pyctpp2.pyx":89
 * 
 *         def __get__(self):
 *             return self.include_dirs             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->include_dirs));
  __pyx_r = ((PyObject *)((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->include_dirs);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":91
 *             return self.include_dirs
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             cdef vector[string] dirs
 *             cdef char *c_str
 */

static int __pyx_pf_7pyctpp2_6Engine_4path_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_7pyctpp2_6Engine_4path_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  std::vector<std::string> __pyx_v_dirs;
  char *__pyx_v_c_str;
  std::string __pyx_v_s_str;
  PyObject *__pyx_v_bt_str;
  PyObject *__pyx_v_v;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("__set__");
  __pyx_v_bt_str = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_v = Py_None; __Pyx_INCREF(Py_None);

  /* "pyctpp2.pyx":97
 *             cdef bytes bt_str
 * 
 *             self.include_dirs = frozenset(value)             # <<<<<<<<<<<<<<
 *             for v in self.include_dirs:
 *                 if isunicode(v):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyFrozenSet_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->include_dirs);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->include_dirs));
  ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->include_dirs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyctpp2.pyx":98
 * 
 *             self.include_dirs = frozenset(value)
 *             for v in self.include_dirs:             # <<<<<<<<<<<<<<
 *                 if isunicode(v):
 *                     bt_str = str_to_bytes(v)
 */
  __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->include_dirs)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  for (;;) {
    {
      __pyx_t_1 = PyIter_Next(__pyx_t_2);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_v);
    __pyx_v_v = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyctpp2.pyx":99
 *             self.include_dirs = frozenset(value)
 *             for v in self.include_dirs:
 *                 if isunicode(v):             # <<<<<<<<<<<<<<
 *                     bt_str = str_to_bytes(v)
 *                 elif isinstance(v, bytes):
 */
    __pyx_t_4 = __pyx_f_7pyctpp2_isunicode(__pyx_v_v);
    if (__pyx_t_4) {

      /* "pyctpp2.pyx":100
 *             for v in self.include_dirs:
 *                 if isunicode(v):
 *                     bt_str = str_to_bytes(v)             # <<<<<<<<<<<<<<
 *                 elif isinstance(v, bytes):
 *                     bt_str = v
 */
      if (!(likely(PyBytes_CheckExact(__pyx_v_v))||((__pyx_v_v) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_v_v)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = __pyx_v_v;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = ((PyObject *)__pyx_f_7pyctpp2_str_to_bytes(((__pyx_t_7pyctpp2_StringType)__pyx_t_1))); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_v_bt_str));
      __pyx_v_bt_str = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;
      goto __pyx_L7;
    }

    /* "pyctpp2.pyx":101
 *                 if isunicode(v):
 *                     bt_str = str_to_bytes(v)
 *                 elif isinstance(v, bytes):             # <<<<<<<<<<<<<<
 *                     bt_str = v
 *                 else:
 */
    __pyx_t_5 = ((PyObject *)((PyObject*)(&PyBytes_Type)));
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_v, __pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {

      /* "pyctpp2.pyx":102
 *                     bt_str = str_to_bytes(v)
 *                 elif isinstance(v, bytes):
 *                     bt_str = v             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError("It has invalid value type")
 */
      if (!(likely(PyBytes_CheckExact(__pyx_v_v))||((__pyx_v_v) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_v_v)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_INCREF(__pyx_v_v);
      __Pyx_DECREF(((PyObject *)__pyx_v_bt_str));
      __pyx_v_bt_str = ((PyObject*)__pyx_v_v);
      goto __pyx_L7;
    }
    /*else*/ {

      /* "pyctpp2.pyx":104
 *                     bt_str = v
 *                 else:
 *                     raise ValueError("It has invalid value type")             # <<<<<<<<<<<<<<
 *                 c_str = bt_str
 *                 s_str.clear()
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L7:;

    /* "pyctpp2.pyx":105
 *                 else:
 *                     raise ValueError("It has invalid value type")
 *                 c_str = bt_str             # <<<<<<<<<<<<<<
 *                 s_str.clear()
 *                 s_str.append(c_str)
 */
    __pyx_t_6 = PyBytes_AsString(((PyObject *)__pyx_v_bt_str)); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_str = __pyx_t_6;

    /* "pyctpp2.pyx":106
 *                     raise ValueError("It has invalid value type")
 *                 c_str = bt_str
 *                 s_str.clear()             # <<<<<<<<<<<<<<
 *                 s_str.append(c_str)
 *                 dirs.push_back(s_str)
 */
    __pyx_v_s_str.clear();

    /* "pyctpp2.pyx":107
 *                 c_str = bt_str
 *                 s_str.clear()
 *                 s_str.append(c_str)             # <<<<<<<<<<<<<<
 *                 dirs.push_back(s_str)
 *             self.thisptr.set_include_dirs(dirs)
 */
    __pyx_v_s_str.append(__pyx_v_c_str);

    /* "pyctpp2.pyx":108
 *                 s_str.clear()
 *                 s_str.append(c_str)
 *                 dirs.push_back(s_str)             # <<<<<<<<<<<<<<
 *             self.thisptr.set_include_dirs(dirs)
 * 
 */
    __pyx_v_dirs.push_back(__pyx_v_s_str);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyctpp2.pyx":109
 *                 s_str.append(c_str)
 *                 dirs.push_back(s_str)
 *             self.thisptr.set_include_dirs(dirs)             # <<<<<<<<<<<<<<
 * 
 *         def __del__(self):
 */
  ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->set_include_dirs(__pyx_v_dirs);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyctpp2.Engine.path.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_bt_str);
  __Pyx_DECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":111
 *             self.thisptr.set_include_dirs(dirs)
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[string] dirs
 *             self.include_dirs = frozenset()
 */

static int __pyx_pf_7pyctpp2_6Engine_4path_2__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pf_7pyctpp2_6Engine_4path_2__del__(PyObject *__pyx_v_self) {
  std::vector<std::string> __pyx_v_dirs;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__del__");

  /* "pyctpp2.pyx":113
 *         def __del__(self):
 *             cdef vector[string] dirs
 *             self.include_dirs = frozenset()             # <<<<<<<<<<<<<<
 *             self.thisptr.set_include_dirs(dirs)
 * 
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyFrozenSet_Type))), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->include_dirs);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->include_dirs));
  ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->include_dirs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyctpp2.pyx":114
 *             cdef vector[string] dirs
 *             self.include_dirs = frozenset()
 *             self.thisptr.set_include_dirs(dirs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->set_include_dirs(__pyx_v_dirs);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyctpp2.Engine.path.__del__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":117
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CEngine()
 * 
 */

static int __pyx_pf_7pyctpp2_6Engine___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_7pyctpp2_6Engine___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "pyctpp2.pyx":118
 * 
 *     def __cinit__(self):
 *         self.thisptr = new CEngine()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr = new pyctpp2::CEngine();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":120
 *         self.thisptr = new CEngine()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

static void __pyx_pf_7pyctpp2_6Engine_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_7pyctpp2_6Engine_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "pyctpp2.pyx":121
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
  delete ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* "pyctpp2.pyx":123
 *         del self.thisptr
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *             uint32_t arg_stack_size=10240,
 *             uint32_t code_stack_size=10240,
 */

static int __pyx_pf_7pyctpp2_6Engine_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pyctpp2_6Engine_2__init__[] = "x.__init__(arg_stack_size=10240,\n                      code_stack_size=10240,\n                      steps_limit=1048576,\n                      max_func=1024) --\n\n        'arg_stack_size'  - Max. size of stack of arguments\n        'code_stack_size' - Max. stack size\n        'max_func'        - Max. number of functions in CTPP standard library\n\n        Normally you should now change these parameters, to explanation please\n        refer to CTPP library documentation.\n\n        'steps_limit' - template execution limit (in steps). Default value\n        is 1 048 576 (1024*1024). You can limit template execution time by\n        specifying this parameter [default: 1048576].\n\n        Note, if execution limit is reached, template engine generates error\n        and you should use try/except to catch it.\n        ";
struct wrapperbase __pyx_wrapperbase_7pyctpp2_6Engine_2__init__;
static int __pyx_pf_7pyctpp2_6Engine_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_arg_stack_size;
  uint32_t __pyx_v_code_stack_size;
  uint32_t __pyx_v_steps_limit;
  uint32_t __pyx_v_max_func;
  std::string __pyx_v_err_msg;
  int __pyx_r;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg_stack_size,&__pyx_n_s__code_stack_size,&__pyx_n_s__steps_limit,&__pyx_n_s__max_func,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg_stack_size);
        if (value) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__code_stack_size);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__steps_limit);
        if (value) { values[2] = value; kw_args--; }
      }
      case  3:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_func);
        if (value) { values[3] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_arg_stack_size = __Pyx_PyInt_from_py_uint32_t(values[0]); if (unlikely((__pyx_v_arg_stack_size == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_arg_stack_size = ((uint32_t)10240);
    }
    if (values[1]) {
      __pyx_v_code_stack_size = __Pyx_PyInt_from_py_uint32_t(values[1]); if (unlikely((__pyx_v_code_stack_size == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_code_stack_size = ((uint32_t)10240);
    }
    if (values[2]) {
      __pyx_v_steps_limit = __Pyx_PyInt_from_py_uint32_t(values[2]); if (unlikely((__pyx_v_steps_limit == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_steps_limit = ((uint32_t)1048576);
    }
    if (values[3]) {
      __pyx_v_max_func = __Pyx_PyInt_from_py_uint32_t(values[3]); if (unlikely((__pyx_v_max_func == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_max_func = ((uint32_t)1024);
    }
  } else {
    __pyx_v_arg_stack_size = ((uint32_t)10240);
    __pyx_v_code_stack_size = ((uint32_t)10240);
    __pyx_v_steps_limit = ((uint32_t)1048576);
    __pyx_v_max_func = ((uint32_t)1024);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: __pyx_v_max_func = __Pyx_PyInt_from_py_uint32_t(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_max_func == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  3: __pyx_v_steps_limit = __Pyx_PyInt_from_py_uint32_t(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_steps_limit == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_code_stack_size = __Pyx_PyInt_from_py_uint32_t(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_code_stack_size == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_arg_stack_size = __Pyx_PyInt_from_py_uint32_t(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_arg_stack_size == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyctpp2.Engine.__init__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "pyctpp2.pyx":150
 *         cdef string err_msg
 *         if not self.thisptr.Init(arg_stack_size, code_stack_size,
 *                 steps_limit, max_func):             # <<<<<<<<<<<<<<
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 */
  __pyx_t_1 = (!((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->Init(__pyx_v_arg_stack_size, __pyx_v_code_stack_size, __pyx_v_steps_limit, __pyx_v_max_func));
  if (__pyx_t_1) {

    /* "pyctpp2.pyx":151
 *         if not self.thisptr.Init(arg_stack_size, code_stack_size,
 *                 steps_limit, max_func):
 *             err_msg = self.thisptr.last_error_message()             # <<<<<<<<<<<<<<
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 * 
 */
    __pyx_v_err_msg = ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_message();

    /* "pyctpp2.pyx":152
 *                 steps_limit, max_func):
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);             # <<<<<<<<<<<<<<
 * 
 *     def load_bytecode(self, const_char_ptr filename):
 */
    __pyx_t_2 = __pyx_f_7pyctpp2_raise_error(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_type(), __pyx_v_err_msg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyctpp2.Engine.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":154
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 * 
 *     def load_bytecode(self, const_char_ptr filename):             # <<<<<<<<<<<<<<
 *         """x.load_bytecode(filename) -- load precompiled template from
 *         specified file.
 */

static PyObject *__pyx_pf_7pyctpp2_6Engine_3load_bytecode(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static char __pyx_doc_7pyctpp2_6Engine_3load_bytecode[] = "x.load_bytecode(filename) -- load precompiled template from\n        specified file.\n\n        ATTENTION: you should specify FULL path to precompiled file,\n        CTPP DOES NOT uses include_dirs to search bytecode!\n        ";
static PyObject *__pyx_pf_7pyctpp2_6Engine_3load_bytecode(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  const char* __pyx_v_filename;
  pyctpp2::CTemplate *__pyx_v_tmpl;
  std::string __pyx_v_err_msg;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("load_bytecode");
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((__pyx_v_filename == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyctpp2.Engine.load_bytecode");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "pyctpp2.pyx":163
 *         cdef CTemplate *tmpl
 *         cdef string err_msg
 *         if not self.thisptr.LoadBytecode(filename, &tmpl):             # <<<<<<<<<<<<<<
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 */
  __pyx_t_1 = (!((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->LoadBytecode(__pyx_v_filename, (&__pyx_v_tmpl)));
  if (__pyx_t_1) {

    /* "pyctpp2.pyx":164
 *         cdef string err_msg
 *         if not self.thisptr.LoadBytecode(filename, &tmpl):
 *             err_msg = self.thisptr.last_error_message()             # <<<<<<<<<<<<<<
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 *         return self.create_template(tmpl)
 */
    __pyx_v_err_msg = ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_message();

    /* "pyctpp2.pyx":165
 *         if not self.thisptr.LoadBytecode(filename, &tmpl):
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);             # <<<<<<<<<<<<<<
 *         return self.create_template(tmpl)
 * 
 */
    __pyx_t_2 = __pyx_f_7pyctpp2_raise_error(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_type(), __pyx_v_err_msg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "pyctpp2.pyx":166
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 *         return self.create_template(tmpl)             # <<<<<<<<<<<<<<
 * 
 *     def parse(self, const_char_ptr filename, str encoding="UTF-8"):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_7pyctpp2_Engine *)((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->__pyx_vtab)->create_template(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self), __pyx_v_tmpl, NULL)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyctpp2.Engine.load_bytecode");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":168
 *         return self.create_template(tmpl)
 * 
 *     def parse(self, const_char_ptr filename, str encoding="UTF-8"):             # <<<<<<<<<<<<<<
 *         """x.parse(filename, encoding="UTF-8") -- compile source code of
 *         template to CTPP bytecode.
 */

static PyObject *__pyx_pf_7pyctpp2_6Engine_4parse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pyctpp2_6Engine_4parse[] = "x.parse(filename, encoding=\"UTF-8\") -- compile source code of\n        template to CTPP bytecode.\n        ";
static PyObject *__pyx_pf_7pyctpp2_6Engine_4parse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  const char* __pyx_v_filename;
  PyObject *__pyx_v_encoding = 0;
  pyctpp2::CTemplate *__pyx_v_tmpl;
  std::string __pyx_v_err_msg;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_opt_args_7pyctpp2_6Engine_create_template __pyx_t_4;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__encoding,0};
  __Pyx_RefNannySetupContext("parse");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_kp_s_3);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__encoding);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "parse") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((__pyx_v_filename == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_encoding = ((PyObject*)values[1]);
  } else {
    __pyx_v_encoding = ((PyObject*)__pyx_kp_s_3);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_encoding = ((PyObject*)PyTuple_GET_ITEM(__pyx_args, 1));
      case  1: __pyx_v_filename = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_filename == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parse", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyctpp2.Engine.parse");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_encoding), (&PyString_Type), 1, "encoding", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pyctpp2.pyx":175
 *         cdef CTemplate *tmpl
 *         cdef string err_msg
 *         if not self.thisptr.Parse(filename, &tmpl):             # <<<<<<<<<<<<<<
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 */
  __pyx_t_1 = (!((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->Parse(__pyx_v_filename, (&__pyx_v_tmpl)));
  if (__pyx_t_1) {

    /* "pyctpp2.pyx":176
 *         cdef string err_msg
 *         if not self.thisptr.Parse(filename, &tmpl):
 *             err_msg = self.thisptr.last_error_message()             # <<<<<<<<<<<<<<
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 *         return self.create_template(tmpl, encoding)
 */
    __pyx_v_err_msg = ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_message();

    /* "pyctpp2.pyx":177
 *         if not self.thisptr.Parse(filename, &tmpl):
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);             # <<<<<<<<<<<<<<
 *         return self.create_template(tmpl, encoding)
 * 
 */
    __pyx_t_2 = __pyx_f_7pyctpp2_raise_error(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_type(), __pyx_v_err_msg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "pyctpp2.pyx":178
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 *         return self.create_template(tmpl, encoding)             # <<<<<<<<<<<<<<
 * 
 *     def parse_text(self, const_char_ptr text):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_encoding);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.encoding = ((PyObject*)__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_7pyctpp2_Engine *)((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->__pyx_vtab)->create_template(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self), __pyx_v_tmpl, &__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyctpp2.Engine.parse");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":180
 *         return self.create_template(tmpl, encoding)
 * 
 *     def parse_text(self, const_char_ptr text):             # <<<<<<<<<<<<<<
 *         """x.parse_text(text) -- compile text of template to CTPP bytecode."""
 *         cdef CTemplate *tmpl
 */

static PyObject *__pyx_pf_7pyctpp2_6Engine_5parse_text(PyObject *__pyx_v_self, PyObject *__pyx_arg_text); /*proto*/
static char __pyx_doc_7pyctpp2_6Engine_5parse_text[] = "x.parse_text(text) -- compile text of template to CTPP bytecode.";
static PyObject *__pyx_pf_7pyctpp2_6Engine_5parse_text(PyObject *__pyx_v_self, PyObject *__pyx_arg_text) {
  const char* __pyx_v_text;
  pyctpp2::CTemplate *__pyx_v_tmpl;
  std::string __pyx_v_err_msg;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("parse_text");
  assert(__pyx_arg_text); {
    __pyx_v_text = PyBytes_AsString(__pyx_arg_text); if (unlikely((__pyx_v_text == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyctpp2.Engine.parse_text");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "pyctpp2.pyx":184
 *         cdef CTemplate *tmpl
 *         cdef string err_msg
 *         if not self.thisptr.ParseText(text, &tmpl):             # <<<<<<<<<<<<<<
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 */
  __pyx_t_1 = (!((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->ParseText(__pyx_v_text, (&__pyx_v_tmpl)));
  if (__pyx_t_1) {

    /* "pyctpp2.pyx":185
 *         cdef string err_msg
 *         if not self.thisptr.ParseText(text, &tmpl):
 *             err_msg = self.thisptr.last_error_message()             # <<<<<<<<<<<<<<
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 *         return self.create_template(tmpl)
 */
    __pyx_v_err_msg = ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_message();

    /* "pyctpp2.pyx":186
 *         if not self.thisptr.ParseText(text, &tmpl):
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);             # <<<<<<<<<<<<<<
 *         return self.create_template(tmpl)
 * 
 */
    __pyx_t_2 = __pyx_f_7pyctpp2_raise_error(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_type(), __pyx_v_err_msg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "pyctpp2.pyx":187
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 *         return self.create_template(tmpl)             # <<<<<<<<<<<<<<
 * 
 *     def add_user_function(self, const_char_ptr libname, const_char_ptr instance):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_7pyctpp2_Engine *)((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->__pyx_vtab)->create_template(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self), __pyx_v_tmpl, NULL)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyctpp2.Engine.parse_text");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":189
 *         return self.create_template(tmpl)
 * 
 *     def add_user_function(self, const_char_ptr libname, const_char_ptr instance):             # <<<<<<<<<<<<<<
 *         """x.add_user_function(libname, instance) -- add user-defined function
 *         from external storage.
 */

static PyObject *__pyx_pf_7pyctpp2_6Engine_6add_user_function(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pyctpp2_6Engine_6add_user_function[] = "x.add_user_function(libname, instance) -- add user-defined function\n        from external storage.\n\n        If you have a shared library wich contains compiled user-defined\n        functions, you may load it by calling method add_user_function().\n        Please refer to documentation to explain, how you can write\n        user-defined CTPP functions in C++.\n        ";
static PyObject *__pyx_pf_7pyctpp2_6Engine_6add_user_function(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  const char* __pyx_v_libname;
  const char* __pyx_v_instance;
  std::string __pyx_v_err_msg;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__libname,&__pyx_n_s__instance,0};
  __Pyx_RefNannySetupContext("add_user_function");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__libname);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__instance);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("add_user_function", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "add_user_function") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_libname = PyBytes_AsString(values[0]); if (unlikely((__pyx_v_libname == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_instance = PyBytes_AsString(values[1]); if (unlikely((__pyx_v_instance == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_libname = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_libname == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_instance = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_instance == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_user_function", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyctpp2.Engine.add_user_function");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "pyctpp2.pyx":200
 * 
 *         cdef string err_msg
 *         if not self.thisptr.AddUserFunction(libname, instance):             # <<<<<<<<<<<<<<
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 */
  __pyx_t_1 = (!((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->AddUserFunction(__pyx_v_libname, __pyx_v_instance));
  if (__pyx_t_1) {

    /* "pyctpp2.pyx":201
 *         cdef string err_msg
 *         if not self.thisptr.AddUserFunction(libname, instance):
 *             err_msg = self.thisptr.last_error_message()             # <<<<<<<<<<<<<<
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 * 
 */
    __pyx_v_err_msg = ((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_message();

    /* "pyctpp2.pyx":202
 *         if not self.thisptr.AddUserFunction(libname, instance):
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);             # <<<<<<<<<<<<<<
 * 
 *     cdef Template create_template(self, CTemplate *template, str encoding="UTF-8"):
 */
    __pyx_t_2 = __pyx_f_7pyctpp2_raise_error(((struct __pyx_obj_7pyctpp2_Engine *)__pyx_v_self)->thisptr->last_error_type(), __pyx_v_err_msg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyctpp2.Engine.add_user_function");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":204
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 * 
 *     cdef Template create_template(self, CTemplate *template, str encoding="UTF-8"):             # <<<<<<<<<<<<<<
 *         cdef Template tmpl
 *         tmpl = Template.__new__(Template)
 */

static  struct __pyx_obj_7pyctpp2_Template *__pyx_f_7pyctpp2_6Engine_create_template(struct __pyx_obj_7pyctpp2_Engine *__pyx_v_self, pyctpp2::CTemplate *__pyx_v_template, struct __pyx_opt_args_7pyctpp2_6Engine_create_template *__pyx_optional_args) {
  PyObject *__pyx_v_encoding = ((PyObject*)__pyx_kp_s_3);
  struct __pyx_obj_7pyctpp2_Template *__pyx_v_tmpl;
  struct __pyx_obj_7pyctpp2_Template *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("create_template");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_encoding = __pyx_optional_args->encoding;
    }
  }
  __pyx_v_tmpl = ((struct __pyx_obj_7pyctpp2_Template *)Py_None); __Pyx_INCREF(Py_None);

  /* "pyctpp2.pyx":206
 *     cdef Template create_template(self, CTemplate *template, str encoding="UTF-8"):
 *         cdef Template tmpl
 *         tmpl = Template.__new__(Template)             # <<<<<<<<<<<<<<
 *         tmpl.thisptr = template
 *         tmpl.engine = self
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject*)__pyx_ptype_7pyctpp2_Template)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7pyctpp2_Template)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_v_tmpl));
  __pyx_v_tmpl = ((struct __pyx_obj_7pyctpp2_Template *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyctpp2.pyx":207
 *         cdef Template tmpl
 *         tmpl = Template.__new__(Template)
 *         tmpl.thisptr = template             # <<<<<<<<<<<<<<
 *         tmpl.engine = self
 *         tmpl.encoding = encoding
 */
  __pyx_v_tmpl->thisptr = __pyx_v_template;

  /* "pyctpp2.pyx":208
 *         tmpl = Template.__new__(Template)
 *         tmpl.thisptr = template
 *         tmpl.engine = self             # <<<<<<<<<<<<<<
 *         tmpl.encoding = encoding
 *         return tmpl
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_tmpl->engine);
  __Pyx_DECREF(((PyObject *)__pyx_v_tmpl->engine));
  __pyx_v_tmpl->engine = __pyx_v_self;

  /* "pyctpp2.pyx":209
 *         tmpl.thisptr = template
 *         tmpl.engine = self
 *         tmpl.encoding = encoding             # <<<<<<<<<<<<<<
 *         return tmpl
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_encoding));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_encoding));
  __Pyx_GOTREF(__pyx_v_tmpl->encoding);
  __Pyx_DECREF(((PyObject *)__pyx_v_tmpl->encoding));
  __pyx_v_tmpl->encoding = __pyx_v_encoding;

  /* "pyctpp2.pyx":210
 *         tmpl.engine = self
 *         tmpl.encoding = encoding
 *         return tmpl             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_tmpl));
  __pyx_r = __pyx_v_tmpl;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_7pyctpp2_Template *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyctpp2.Engine.create_template");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_tmpl);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":219
 *     cdef str encoding
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self.engine = None
 */

static int __pyx_pf_7pyctpp2_8Template___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_7pyctpp2_8Template___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;

  /* "pyctpp2.pyx":220
 * 
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *         self.engine = None
 * 
 */
  ((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->thisptr = NULL;

  /* "pyctpp2.pyx":221
 *     def __cinit__(self):
 *         self.thisptr = NULL
 *         self.engine = None             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->engine);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->engine));
  ((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->engine = ((struct __pyx_obj_7pyctpp2_Engine *)Py_None);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":223
 *         self.engine = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

static void __pyx_pf_7pyctpp2_8Template_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_7pyctpp2_8Template_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "pyctpp2.pyx":224
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  delete ((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* "pyctpp2.pyx":226
 *         del self.thisptr
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated from Python")
 * 
 */

static int __pyx_pf_7pyctpp2_8Template_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_7pyctpp2_8Template_2__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "pyctpp2.pyx":227
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated from Python")             # <<<<<<<<<<<<<<
 * 
 *     def save_bytecode(self, const_char_ptr filename):
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyctpp2.Template.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":229
 *         raise TypeError("This class cannot be instantiated from Python")
 * 
 *     def save_bytecode(self, const_char_ptr filename):             # <<<<<<<<<<<<<<
 *         """x.save_bytecode(filename) -- save precompiled template to
 *         specified file.
 */

static PyObject *__pyx_pf_7pyctpp2_8Template_3save_bytecode(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static char __pyx_doc_7pyctpp2_8Template_3save_bytecode[] = "x.save_bytecode(filename) -- save precompiled template to\n        specified file.\n        ";
static PyObject *__pyx_pf_7pyctpp2_8Template_3save_bytecode(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  const char* __pyx_v_filename;
  std::string __pyx_v_err_msg;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("save_bytecode");
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((__pyx_v_filename == (const char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyctpp2.Template.save_bytecode");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "pyctpp2.pyx":235
 * 
 *         cdef string err_msg
 *         if not self.thisptr.SaveBytecode(filename):             # <<<<<<<<<<<<<<
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 */
  __pyx_t_1 = (!((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->thisptr->SaveBytecode(__pyx_v_filename));
  if (__pyx_t_1) {

    /* "pyctpp2.pyx":236
 *         cdef string err_msg
 *         if not self.thisptr.SaveBytecode(filename):
 *             err_msg = self.thisptr.last_error_message()             # <<<<<<<<<<<<<<
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 * 
 */
    __pyx_v_err_msg = ((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->thisptr->last_error_message();

    /* "pyctpp2.pyx":237
 *         if not self.thisptr.SaveBytecode(filename):
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);             # <<<<<<<<<<<<<<
 * 
 *     def render(self, **kwargs):
 */
    __pyx_t_2 = __pyx_f_7pyctpp2_raise_error(((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->thisptr->last_error_type(), __pyx_v_err_msg); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyctpp2.Template.save_bytecode");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":239
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 * 
 *     def render(self, **kwargs):             # <<<<<<<<<<<<<<
 *         """x.render(**kwargs) -- render with variables."""
 *         cdef CDT cdt
 */

static PyObject *__pyx_pf_7pyctpp2_8Template_4render(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pyctpp2_8Template_4render[] = "x.render(**kwargs) -- render with variables.";
static PyObject *__pyx_pf_7pyctpp2_8Template_4render(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  CTPP::CDT __pyx_v_cdt;
  std::string __pyx_v_err_msg;
  std::string __pyx_v_result;
  const char* __pyx_v_c_str;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("render");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("render", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "render", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New();
  if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);

  /* "pyctpp2.pyx":243
 *         cdef CDT cdt
 *         cdef int idx
 *         CreateDictCDT(&cdt)             # <<<<<<<<<<<<<<
 *         traverse(kwargs, &cdt)
 * 
 */
  pyctpp2::CreateDictCDT((&__pyx_v_cdt));

  /* "pyctpp2.pyx":244
 *         cdef int idx
 *         CreateDictCDT(&cdt)
 *         traverse(kwargs, &cdt)             # <<<<<<<<<<<<<<
 * 
 *         cdef string err_msg
 */
  __pyx_t_1 = __pyx_f_7pyctpp2_traverse(((PyObject *)__pyx_v_kwargs), (&__pyx_v_cdt), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyctpp2.pyx":248
 *         cdef string err_msg
 *         cdef string result
 *         if not self.thisptr.Render(&cdt, &result):             # <<<<<<<<<<<<<<
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 */
  __pyx_t_2 = (!((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->thisptr->Render((&__pyx_v_cdt), (&__pyx_v_result)));
  if (__pyx_t_2) {

    /* "pyctpp2.pyx":249
 *         cdef string result
 *         if not self.thisptr.Render(&cdt, &result):
 *             err_msg = self.thisptr.last_error_message()             # <<<<<<<<<<<<<<
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 * 
 */
    __pyx_v_err_msg = ((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->thisptr->last_error_message();

    /* "pyctpp2.pyx":250
 *         if not self.thisptr.Render(&cdt, &result):
 *             err_msg = self.thisptr.last_error_message()
 *             raise_error(self.thisptr.last_error_type(), err_msg);             # <<<<<<<<<<<<<<
 * 
 *         cdef const_char_ptr c_str = result.c_str()
 */
    __pyx_t_1 = __pyx_f_7pyctpp2_raise_error(((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->thisptr->last_error_type(), __pyx_v_err_msg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "pyctpp2.pyx":252
 *             raise_error(self.thisptr.last_error_type(), err_msg);
 * 
 *         cdef const_char_ptr c_str = result.c_str()             # <<<<<<<<<<<<<<
 *         return c_str.decode(self.encoding, 'strict')
 * 
 */
  __pyx_v_c_str = __pyx_v_result.c_str();

  /* "pyctpp2.pyx":253
 * 
 *         cdef const_char_ptr c_str = result.c_str()
 *         return c_str.decode(self.encoding, 'strict')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_c_str); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__decode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->encoding));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->encoding));
  __Pyx_GIVEREF(((PyObject *)((struct __pyx_obj_7pyctpp2_Template *)__pyx_v_self)->encoding));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__strict));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_n_s__strict));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__strict));
  __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyctpp2.Template.render");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyctpp2.pyx":256
 * 
 * 
 * cdef traverse(obj, CDT *cdt, CDT *root_cdt=NULL, StringType prev_key=empty_string):             # <<<<<<<<<<<<<<
 *     cdef int idx
 *     cdef CDT tmp
 */

static  PyObject *__pyx_f_7pyctpp2_traverse(PyObject *__pyx_v_obj, CTPP::CDT *__pyx_v_cdt, struct __pyx_opt_args_7pyctpp2_traverse *__pyx_optional_args) {
  CTPP::CDT *__pyx_v_root_cdt = ((CTPP::CDT *)NULL);
  __pyx_t_7pyctpp2_StringType __pyx_v_prev_key = __pyx_k_6;
  CTPP::CDT __pyx_v_tmp;
  char *__pyx_v_c_str;
  PyObject *__pyx_v_bt_str;
  __pyx_t_7pyctpp2_StringType __pyx_v_key;
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_elem;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int64_t __pyx_t_4;
  double __pyx_t_5;
  char *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  struct __pyx_opt_args_7pyctpp2_traverse __pyx_t_13;
  __Pyx_RefNannySetupContext("traverse");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_root_cdt = __pyx_optional_args->root_cdt;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_prev_key = __pyx_optional_args->prev_key;
      }
    }
  }
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_v_bt_str = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_key = ((__pyx_t_7pyctpp2_StringType)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_value = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_elem = Py_None; __Pyx_INCREF(Py_None);

  /* "pyctpp2.pyx":263
 *     cdef StringType key
 * 
 *     if isinstance(obj, (int, bool)):             # <<<<<<<<<<<<<<
 *         CDTAssign(cdt, <int64_t>obj)
 *     elif isinstance(obj, float):
 */
  __pyx_t_1 = __pyx_v_obj;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)((PyObject*)(&PyInt_Type))));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)(&PyInt_Type))));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyInt_Type))));
  __Pyx_INCREF(((PyObject*)&PyBool_Type));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject*)&PyBool_Type));
  __Pyx_GIVEREF(((PyObject*)&PyBool_Type));
  __pyx_t_3 = PyObject_IsInstance(__pyx_t_1, ((PyObject *)__pyx_t_2)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "pyctpp2.pyx":264
 * 
 *     if isinstance(obj, (int, bool)):
 *         CDTAssign(cdt, <int64_t>obj)             # <<<<<<<<<<<<<<
 *     elif isinstance(obj, float):
 *         CDTAssign(cdt, <double>obj)
 */
    __pyx_t_4 = __Pyx_PyInt_from_py_int64_t(__pyx_v_obj); if (unlikely((__pyx_t_4 == (int64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    pyctpp2::CDTAssign(__pyx_v_cdt, __pyx_t_4);
    goto __pyx_L3;
  }

  /* "pyctpp2.pyx":265
 *     if isinstance(obj, (int, bool)):
 *         CDTAssign(cdt, <int64_t>obj)
 *     elif isinstance(obj, float):             # <<<<<<<<<<<<<<
 *         CDTAssign(cdt, <double>obj)
 *     elif isunicode(obj):
 */
  __pyx_t_2 = __pyx_v_obj;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyFloat_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_2, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "pyctpp2.pyx":266
 *         CDTAssign(cdt, <int64_t>obj)
 *     elif isinstance(obj, float):
 *         CDTAssign(cdt, <double>obj)             # <<<<<<<<<<<<<<
 *     elif isunicode(obj):
 *         bt_str = obj.encode('UTF-8')
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_obj); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    pyctpp2::CDTAssign(__pyx_v_cdt, __pyx_t_5);
    goto __pyx_L3;
  }

  /* "pyctpp2.pyx":267
 *     elif isinstance(obj, float):
 *         CDTAssign(cdt, <double>obj)
 *     elif isunicode(obj):             # <<<<<<<<<<<<<<
 *         bt_str = obj.encode('UTF-8')
 *         c_str = bt_str
 */
  __pyx_t_1 = __pyx_v_obj;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = __pyx_f_7pyctpp2_isunicode(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "pyctpp2.pyx":268
 *         CDTAssign(cdt, <double>obj)
 *     elif isunicode(obj):
 *         bt_str = obj.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         c_str = bt_str
 *         CDTAssign(cdt, c_str)
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_obj, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_7), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_bt_str));
    __pyx_v_bt_str = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyctpp2.pyx":269
 *     elif isunicode(obj):
 *         bt_str = obj.encode('UTF-8')
 *         c_str = bt_str             # <<<<<<<<<<<<<<
 *         CDTAssign(cdt, c_str)
 *     elif isinstance(obj, bytes):
 */
    __pyx_t_6 = PyBytes_AsString(((PyObject *)__pyx_v_bt_str)); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_str = __pyx_t_6;

    /* "pyctpp2.pyx":270
 *         bt_str = obj.encode('UTF-8')
 *         c_str = bt_str
 *         CDTAssign(cdt, c_str)             # <<<<<<<<<<<<<<
 *     elif isinstance(obj, bytes):
 *         bt_str = obj
 */
    pyctpp2::CDTAssign(__pyx_v_cdt, __pyx_v_c_str);
    goto __pyx_L3;
  }

  /* "pyctpp2.pyx":271
 *         c_str = bt_str
 *         CDTAssign(cdt, c_str)
 *     elif isinstance(obj, bytes):             # <<<<<<<<<<<<<<
 *         bt_str = obj
 *         c_str = bt_str
 */
  __pyx_t_2 = __pyx_v_obj;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyBytes_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_2, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "pyctpp2.pyx":272
 *         CDTAssign(cdt, c_str)
 *     elif isinstance(obj, bytes):
 *         bt_str = obj             # <<<<<<<<<<<<<<
 *         c_str = bt_str
 *         CDTAssign(cdt, c_str)
 */
    if (!(likely(PyBytes_CheckExact(__pyx_v_obj))||((__pyx_v_obj) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_v_obj)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_obj);
    __Pyx_DECREF(((PyObject *)__pyx_v_bt_str));
    __pyx_v_bt_str = ((PyObject*)__pyx_v_obj);

    /* "pyctpp2.pyx":273
 *     elif isinstance(obj, bytes):
 *         bt_str = obj
 *         c_str = bt_str             # <<<<<<<<<<<<<<
 *         CDTAssign(cdt, c_str)
 *     elif isinstance(obj, dict) or hasattr(obj, '__dict__'):
 */
    __pyx_t_6 = PyBytes_AsString(((PyObject *)__pyx_v_bt_str)); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_str = __pyx_t_6;

    /* "pyctpp2.pyx":274
 *         bt_str = obj
 *         c_str = bt_str
 *         CDTAssign(cdt, c_str)             # <<<<<<<<<<<<<<
 *     elif isinstance(obj, dict) or hasattr(obj, '__dict__'):
 *         if hasattr(obj, '__dict__'):
 */
    pyctpp2::CDTAssign(__pyx_v_cdt, __pyx_v_c_str);
    goto __pyx_L3;
  }

  /* "pyctpp2.pyx":275
 *         c_str = bt_str
 *         CDTAssign(cdt, c_str)
 *     elif isinstance(obj, dict) or hasattr(obj, '__dict__'):             # <<<<<<<<<<<<<<
 *         if hasattr(obj, '__dict__'):
 *             obj = obj.__dict__
 */
  __pyx_t_1 = __pyx_v_obj;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((PyObject*)(&PyDict_Type)));
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_t_1, __pyx_t_2); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
    __pyx_t_2 = __pyx_v_obj;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = ((PyObject *)__pyx_n_s____dict__);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = PyObject_HasAttr(__pyx_t_2, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_3;
  }
  if (__pyx_t_8) {

    /* "pyctpp2.pyx":276
 *         CDTAssign(cdt, c_str)
 *     elif isinstance(obj, dict) or hasattr(obj, '__dict__'):
 *         if hasattr(obj, '__dict__'):             # <<<<<<<<<<<<<<
 *             obj = obj.__dict__
 * 
 */
    __pyx_t_1 = __pyx_v_obj;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = ((PyObject *)__pyx_n_s____dict__);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_8 = PyObject_HasAttr(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {

      /* "pyctpp2.pyx":277
 *     elif isinstance(obj, dict) or hasattr(obj, '__dict__'):
 *         if hasattr(obj, '__dict__'):
 *             obj = obj.__dict__             # <<<<<<<<<<<<<<
 * 
 *         CreateDictCDT(cdt)
 */
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_obj, __pyx_n_s____dict__); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_v_obj);
      __pyx_v_obj = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "pyctpp2.pyx":279
 *             obj = obj.__dict__
 * 
 *         CreateDictCDT(cdt)             # <<<<<<<<<<<<<<
 *         for key, value in obj.items():
 *             if prev_key:
 */
    pyctpp2::CreateDictCDT(__pyx_v_cdt);

    /* "pyctpp2.pyx":280
 * 
 *         CreateDictCDT(cdt)
 *         for key, value in obj.items():             # <<<<<<<<<<<<<<
 *             if prev_key:
 *                 key = prev_key + '.' + key
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_obj, __pyx_n_s__items); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_9 = 0; __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    } else {
      __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++;
      } else if (likely(PyTuple_CheckExact(__pyx_t_2))) {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++;
      } else {
        __pyx_t_1 = PyIter_Next(__pyx_t_2);
        if (!__pyx_t_1) {
          if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if (PyTuple_CheckExact(__pyx_t_1) && likely(PyTuple_GET_SIZE(__pyx_t_1) == 2)) {
        PyObject* tuple = __pyx_t_1;
        __pyx_t_10 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_10);
        if (!(likely(PyBytes_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_10)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_11 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_v_key));
        __pyx_v_key = ((__pyx_t_7pyctpp2_StringType)__pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_v_value);
        __pyx_v_value = __pyx_t_11;
        __pyx_t_11 = 0;
      } else {
        __pyx_t_12 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = __Pyx_UnpackItem(__pyx_t_12, 0); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        if (!(likely(PyBytes_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_10)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_11 = __Pyx_UnpackItem(__pyx_t_12, 1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_EndUnpack(__pyx_t_12, 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_v_key));
        __pyx_v_key = ((__pyx_t_7pyctpp2_StringType)__pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_v_value);
        __pyx_v_value = __pyx_t_11;
        __pyx_t_11 = 0;
      }

      /* "pyctpp2.pyx":281
 *         CreateDictCDT(cdt)
 *         for key, value in obj.items():
 *             if prev_key:             # <<<<<<<<<<<<<<
 *                 key = prev_key + '.' + key
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_prev_key)); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_8) {

        /* "pyctpp2.pyx":282
 *         for key, value in obj.items():
 *             if prev_key:
 *                 key = prev_key + '.' + key             # <<<<<<<<<<<<<<
 * 
 *             IF PYTHON_VERSION >= 3:
 */
        __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_v_prev_key), ((PyObject *)__pyx_kp_s_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = PyNumber_Add(__pyx_t_1, ((PyObject *)__pyx_v_key)); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (!(likely(PyBytes_CheckExact(__pyx_t_11))||((__pyx_t_11) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_11)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(((PyObject *)__pyx_v_key));
        __pyx_v_key = ((__pyx_t_7pyctpp2_StringType)__pyx_t_11);
        __pyx_t_11 = 0;
        goto __pyx_L7;
      }
      __pyx_L7:;

      /* "pyctpp2.pyx":287
 *                 c_str = key.encode('UTF-8')
 *             ELSE:
 *                 c_str = key             # <<<<<<<<<<<<<<
 * 
 *             tmp = CDT()
 */
      __pyx_t_6 = PyBytes_AsString(((PyObject *)__pyx_v_key)); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_c_str = __pyx_t_6;

      /* "pyctpp2.pyx":289
 *                 c_str = key
 * 
 *             tmp = CDT()             # <<<<<<<<<<<<<<
 *             if root_cdt:
 *                 traverse(value, &tmp, root_cdt, key)
 */
      __pyx_v_tmp = CTPP::CDT();

      /* "pyctpp2.pyx":290
 * 
 *             tmp = CDT()
 *             if root_cdt:             # <<<<<<<<<<<<<<
 *                 traverse(value, &tmp, root_cdt, key)
 *                 if not IsDictCDT(tmp):
 */
      __pyx_t_8 = (__pyx_v_root_cdt != 0);
      if (__pyx_t_8) {

        /* "pyctpp2.pyx":291
 *             tmp = CDT()
 *             if root_cdt:
 *                 traverse(value, &tmp, root_cdt, key)             # <<<<<<<<<<<<<<
 *                 if not IsDictCDT(tmp):
 *                     (deref(root_cdt))[c_str] = tmp
 */
        __pyx_t_13.__pyx_n = 2;
        __pyx_t_13.root_cdt = __pyx_v_root_cdt;
        __pyx_t_13.prev_key = __pyx_v_key;
        __pyx_t_11 = __pyx_f_7pyctpp2_traverse(__pyx_v_value, (&__pyx_v_tmp), &__pyx_t_13); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "pyctpp2.pyx":292
 *             if root_cdt:
 *                 traverse(value, &tmp, root_cdt, key)
 *                 if not IsDictCDT(tmp):             # <<<<<<<<<<<<<<
 *                     (deref(root_cdt))[c_str] = tmp
 *             else:
 */
        __pyx_t_8 = (!pyctpp2::IsDictCDT(__pyx_v_tmp));
        if (__pyx_t_8) {

          /* "pyctpp2.pyx":293
 *                 traverse(value, &tmp, root_cdt, key)
 *                 if not IsDictCDT(tmp):
 *                     (deref(root_cdt))[c_str] = tmp             # <<<<<<<<<<<<<<
 *             else:
 *                 traverse(value, &tmp, cdt, key)
 */
          ((*__pyx_v_root_cdt)[__pyx_v_c_str]) = __pyx_v_tmp;
          goto __pyx_L9;
        }
        __pyx_L9:;
        goto __pyx_L8;
      }
      /*else*/ {

        /* "pyctpp2.pyx":295
 *                     (deref(root_cdt))[c_str] = tmp
 *             else:
 *                 traverse(value, &tmp, cdt, key)             # <<<<<<<<<<<<<<
 *                 if not IsDictCDT(tmp):
 *                     (deref(cdt))[c_str] = tmp
 */
        __pyx_t_13.__pyx_n = 2;
        __pyx_t_13.root_cdt = __pyx_v_cdt;
        __pyx_t_13.prev_key = __pyx_v_key;
        __pyx_t_11 = __pyx_f_7pyctpp2_traverse(__pyx_v_value, (&__pyx_v_tmp), &__pyx_t_13); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "pyctpp2.pyx":296
 *             else:
 *                 traverse(value, &tmp, cdt, key)
 *                 if not IsDictCDT(tmp):             # <<<<<<<<<<<<<<
 *                     (deref(cdt))[c_str] = tmp
 * 
 */
        __pyx_t_8 = (!pyctpp2::IsDictCDT(__pyx_v_tmp));
        if (__pyx_t_8) {

          /* "pyctpp2.pyx":297
 *                 traverse(value, &tmp, cdt, key)
 *                 if not IsDictCDT(tmp):
 *                     (deref(cdt))[c_str] = tmp             # <<<<<<<<<<<<<<
 * 
 *     elif hasattr(obj, '__iter__'):
 */
          ((*__pyx_v_cdt)[__pyx_v_c_str]) = __pyx_v_tmp;
          goto __pyx_L10;
        }
        __pyx_L10:;
      }
      __pyx_L8:;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "pyctpp2.pyx":299
 *                     (deref(cdt))[c_str] = tmp
 * 
 *     elif hasattr(obj, '__iter__'):             # <<<<<<<<<<<<<<
 *         CreateListCDT(cdt)
 *         for elem in obj:
 */
  __pyx_t_2 = __pyx_v_obj;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_11 = ((PyObject *)__pyx_n_s____iter__);
  __Pyx_INCREF(__pyx_t_11);
  __pyx_t_8 = PyObject_HasAttr(__pyx_t_2, __pyx_t_11); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (__pyx_t_8) {

    /* "pyctpp2.pyx":300
 * 
 *     elif hasattr(obj, '__iter__'):
 *         CreateListCDT(cdt)             # <<<<<<<<<<<<<<
 *         for elem in obj:
 *             tmp = CDT()
 */
    pyctpp2::CreateListCDT(__pyx_v_cdt);

    /* "pyctpp2.pyx":301
 *     elif hasattr(obj, '__iter__'):
 *         CreateListCDT(cdt)
 *         for elem in obj:             # <<<<<<<<<<<<<<
 *             tmp = CDT()
 *             traverse(elem, &tmp)
 */
    if (PyList_CheckExact(__pyx_v_obj) || PyTuple_CheckExact(__pyx_v_obj)) {
      __pyx_t_9 = 0; __pyx_t_11 = __pyx_v_obj; __Pyx_INCREF(__pyx_t_11);
    } else {
      __pyx_t_9 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_obj); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
    }
    for (;;) {
      if (likely(PyList_CheckExact(__pyx_t_11))) {
        if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_11)) break;
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++;
      } else if (likely(PyTuple_CheckExact(__pyx_t_11))) {
        if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++;
      } else {
        __pyx_t_2 = PyIter_Next(__pyx_t_11);
        if (!__pyx_t_2) {
          if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_DECREF(__pyx_v_elem);
      __pyx_v_elem = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "pyctpp2.pyx":302
 *         CreateListCDT(cdt)
 *         for elem in obj:
 *             tmp = CDT()             # <<<<<<<<<<<<<<
 *             traverse(elem, &tmp)
 *             cdt.PushBack(tmp)
 */
      __pyx_v_tmp = CTPP::CDT();

      /* "pyctpp2.pyx":303
 *         for elem in obj:
 *             tmp = CDT()
 *             traverse(elem, &tmp)             # <<<<<<<<<<<<<<
 *             cdt.PushBack(tmp)
 * 
 */
      __pyx_t_2 = __pyx_f_7pyctpp2_traverse(__pyx_v_elem, (&__pyx_v_tmp), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyctpp2.pyx":304
 *             tmp = CDT()
 *             traverse(elem, &tmp)
 *             cdt.PushBack(tmp)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_cdt->PushBack(__pyx_v_tmp);
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyctpp2.traverse");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_bt_str);
  __Pyx_DECREF(__pyx_v_key);
  __Pyx_DECREF(__pyx_v_value);
  __Pyx_DECREF(__pyx_v_elem);
  __Pyx_DECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7pyctpp2_Template(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7pyctpp2_Template *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_7pyctpp2_Template *)o);
  p->engine = ((struct __pyx_obj_7pyctpp2_Engine *)Py_None); Py_INCREF(Py_None);
  p->encoding = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_7pyctpp2_8Template___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pyctpp2_Template(PyObject *o) {
  struct __pyx_obj_7pyctpp2_Template *p = (struct __pyx_obj_7pyctpp2_Template *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_7pyctpp2_8Template_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->engine));
  Py_XDECREF(((PyObject *)p->encoding));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7pyctpp2_Template(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7pyctpp2_Template *p = (struct __pyx_obj_7pyctpp2_Template *)o;
  if (p->engine) {
    e = (*v)(((PyObject*)p->engine), a); if (e) return e;
  }
  if (p->encoding) {
    e = (*v)(p->encoding, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7pyctpp2_Template(PyObject *o) {
  struct __pyx_obj_7pyctpp2_Template *p = (struct __pyx_obj_7pyctpp2_Template *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->engine);
  p->engine = ((struct __pyx_obj_7pyctpp2_Engine *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->encoding);
  p->encoding = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7pyctpp2_Template[] = {
  {__Pyx_NAMESTR("save_bytecode"), (PyCFunction)__pyx_pf_7pyctpp2_8Template_3save_bytecode, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyctpp2_8Template_3save_bytecode)},
  {__Pyx_NAMESTR("render"), (PyCFunction)__pyx_pf_7pyctpp2_8Template_4render, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7pyctpp2_8Template_4render)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Template = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Template = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Template = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Template = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_7pyctpp2_Template = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pyctpp2.Template"), /*tp_name*/
  sizeof(struct __pyx_obj_7pyctpp2_Template), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pyctpp2_Template, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Template, /*tp_as_number*/
  &__pyx_tp_as_sequence_Template, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Template, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Template, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("CTPP2 Template class."), /*tp_doc*/
  __pyx_tp_traverse_7pyctpp2_Template, /*tp_traverse*/
  __pyx_tp_clear_7pyctpp2_Template, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pyctpp2_Template, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_7pyctpp2_8Template_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pyctpp2_Template, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_7pyctpp2_Engine __pyx_vtable_7pyctpp2_Engine;

static PyObject *__pyx_tp_new_7pyctpp2_Engine(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7pyctpp2_Engine *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_7pyctpp2_Engine *)o);
  p->__pyx_vtab = __pyx_vtabptr_7pyctpp2_Engine;
  p->include_dirs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_7pyctpp2_6Engine___cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pyctpp2_Engine(PyObject *o) {
  struct __pyx_obj_7pyctpp2_Engine *p = (struct __pyx_obj_7pyctpp2_Engine *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_7pyctpp2_6Engine_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->include_dirs));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7pyctpp2_Engine(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7pyctpp2_Engine *p = (struct __pyx_obj_7pyctpp2_Engine *)o;
  if (p->include_dirs) {
    e = (*v)(p->include_dirs, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7pyctpp2_Engine(PyObject *o) {
  struct __pyx_obj_7pyctpp2_Engine *p = (struct __pyx_obj_7pyctpp2_Engine *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->include_dirs);
  p->include_dirs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7pyctpp2_6Engine_path(PyObject *o, void *x) {
  return __pyx_pf_7pyctpp2_6Engine_4path___get__(o);
}

static int __pyx_setprop_7pyctpp2_6Engine_path(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_7pyctpp2_6Engine_4path_1__set__(o, v);
  }
  else {
    return __pyx_pf_7pyctpp2_6Engine_4path_2__del__(o);
  }
}

static PyMethodDef __pyx_methods_7pyctpp2_Engine[] = {
  {__Pyx_NAMESTR("load_bytecode"), (PyCFunction)__pyx_pf_7pyctpp2_6Engine_3load_bytecode, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyctpp2_6Engine_3load_bytecode)},
  {__Pyx_NAMESTR("parse"), (PyCFunction)__pyx_pf_7pyctpp2_6Engine_4parse, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7pyctpp2_6Engine_4parse)},
  {__Pyx_NAMESTR("parse_text"), (PyCFunction)__pyx_pf_7pyctpp2_6Engine_5parse_text, METH_O, __Pyx_DOCSTR(__pyx_doc_7pyctpp2_6Engine_5parse_text)},
  {__Pyx_NAMESTR("add_user_function"), (PyCFunction)__pyx_pf_7pyctpp2_6Engine_6add_user_function, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7pyctpp2_6Engine_6add_user_function)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pyctpp2_Engine[] = {
  {(char *)"path", __pyx_getprop_7pyctpp2_6Engine_path, __pyx_setprop_7pyctpp2_6Engine_path, __Pyx_DOCSTR(__pyx_k_9), 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Engine = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Engine = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Engine = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Engine = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_7pyctpp2_Engine = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pyctpp2.Engine"), /*tp_name*/
  sizeof(struct __pyx_obj_7pyctpp2_Engine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pyctpp2_Engine, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Engine, /*tp_as_number*/
  &__pyx_tp_as_sequence_Engine, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Engine, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Engine, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("CTPP2 Engine class."), /*tp_doc*/
  __pyx_tp_traverse_7pyctpp2_Engine, /*tp_traverse*/
  __pyx_tp_clear_7pyctpp2_Engine, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pyctpp2_Engine, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pyctpp2_Engine, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_7pyctpp2_6Engine_2__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pyctpp2_Engine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("pyctpp2"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_n_s__AddUserFunction, __pyx_k__AddUserFunction, sizeof(__pyx_k__AddUserFunction), 0, 0, 1, 1},
  {&__pyx_n_s__CTPP2_VERSION, __pyx_k__CTPP2_VERSION, sizeof(__pyx_k__CTPP2_VERSION), 0, 0, 1, 1},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__IOError, __pyx_k__IOError, sizeof(__pyx_k__IOError), 0, 0, 1, 1},
  {&__pyx_n_s__Init, __pyx_k__Init, sizeof(__pyx_k__Init), 0, 0, 1, 1},
  {&__pyx_n_s__LoadBytecode, __pyx_k__LoadBytecode, sizeof(__pyx_k__LoadBytecode), 0, 0, 1, 1},
  {&__pyx_n_s__Parse, __pyx_k__Parse, sizeof(__pyx_k__Parse), 0, 0, 1, 1},
  {&__pyx_n_s__ParseText, __pyx_k__ParseText, sizeof(__pyx_k__ParseText), 0, 0, 1, 1},
  {&__pyx_n_s__PushBack, __pyx_k__PushBack, sizeof(__pyx_k__PushBack), 0, 0, 1, 1},
  {&__pyx_n_s__Render, __pyx_k__Render, sizeof(__pyx_k__Render), 0, 0, 1, 1},
  {&__pyx_n_s__SaveBytecode, __pyx_k__SaveBytecode, sizeof(__pyx_k__SaveBytecode), 0, 0, 1, 1},
  {&__pyx_n_s__SyntaxError, __pyx_k__SyntaxError, sizeof(__pyx_k__SyntaxError), 0, 0, 1, 1},
  {&__pyx_n_s__SystemError, __pyx_k__SystemError, sizeof(__pyx_k__SystemError), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__VERSION, __pyx_k__VERSION, sizeof(__pyx_k__VERSION), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____dict__, __pyx_k____dict__, sizeof(__pyx_k____dict__), 0, 0, 1, 1},
  {&__pyx_n_s____iter__, __pyx_k____iter__, sizeof(__pyx_k____iter__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__append, __pyx_k__append, sizeof(__pyx_k__append), 0, 0, 1, 1},
  {&__pyx_n_s__arg_stack_size, __pyx_k__arg_stack_size, sizeof(__pyx_k__arg_stack_size), 0, 0, 1, 1},
  {&__pyx_n_s__c_str, __pyx_k__c_str, sizeof(__pyx_k__c_str), 0, 0, 1, 1},
  {&__pyx_n_s__clear, __pyx_k__clear, sizeof(__pyx_k__clear), 0, 0, 1, 1},
  {&__pyx_n_s__code_stack_size, __pyx_k__code_stack_size, sizeof(__pyx_k__code_stack_size), 0, 0, 1, 1},
  {&__pyx_n_s__create_template, __pyx_k__create_template, sizeof(__pyx_k__create_template), 0, 0, 1, 1},
  {&__pyx_n_s__decode, __pyx_k__decode, sizeof(__pyx_k__decode), 0, 0, 1, 1},
  {&__pyx_n_s__encode, __pyx_k__encode, sizeof(__pyx_k__encode), 0, 0, 1, 1},
  {&__pyx_n_s__encoding, __pyx_k__encoding, sizeof(__pyx_k__encoding), 0, 0, 1, 1},
  {&__pyx_n_s__engine, __pyx_k__engine, sizeof(__pyx_k__engine), 0, 0, 1, 1},
  {&__pyx_n_s__filename, __pyx_k__filename, sizeof(__pyx_k__filename), 0, 0, 1, 1},
  {&__pyx_n_s__include_dirs, __pyx_k__include_dirs, sizeof(__pyx_k__include_dirs), 0, 0, 1, 1},
  {&__pyx_n_s__instance, __pyx_k__instance, sizeof(__pyx_k__instance), 0, 0, 1, 1},
  {&__pyx_n_s__items, __pyx_k__items, sizeof(__pyx_k__items), 0, 0, 1, 1},
  {&__pyx_n_s__last_error_message, __pyx_k__last_error_message, sizeof(__pyx_k__last_error_message), 0, 0, 1, 1},
  {&__pyx_n_s__last_error_type, __pyx_k__last_error_type, sizeof(__pyx_k__last_error_type), 0, 0, 1, 1},
  {&__pyx_n_s__libname, __pyx_k__libname, sizeof(__pyx_k__libname), 0, 0, 1, 1},
  {&__pyx_n_s__max_func, __pyx_k__max_func, sizeof(__pyx_k__max_func), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__push_back, __pyx_k__push_back, sizeof(__pyx_k__push_back), 0, 0, 1, 1},
  {&__pyx_n_s__set_include_dirs, __pyx_k__set_include_dirs, sizeof(__pyx_k__set_include_dirs), 0, 0, 1, 1},
  {&__pyx_n_s__steps_limit, __pyx_k__steps_limit, sizeof(__pyx_k__steps_limit), 0, 0, 1, 1},
  {&__pyx_n_s__strict, __pyx_k__strict, sizeof(__pyx_k__strict), 0, 0, 1, 1},
  {&__pyx_n_s__thisptr, __pyx_k__thisptr, sizeof(__pyx_k__thisptr), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_SyntaxError = __Pyx_GetName(__pyx_b, __pyx_n_s__SyntaxError); if (!__pyx_builtin_SyntaxError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_SystemError = __Pyx_GetName(__pyx_b, __pyx_n_s__SystemError); if (!__pyx_builtin_SystemError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IOError = __Pyx_GetName(__pyx_b, __pyx_n_s__IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "pyctpp2.pyx":104
 *                     bt_str = v
 *                 else:
 *                     raise ValueError("It has invalid value type")             # <<<<<<<<<<<<<<
 *                 c_str = bt_str
 *                 s_str.clear()
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_2));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "pyctpp2.pyx":227
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated from Python")             # <<<<<<<<<<<<<<
 * 
 *     def save_bytecode(self, const_char_ptr filename):
 */
  __pyx_k_tuple_5 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_5));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "pyctpp2.pyx":268
 *         CDTAssign(cdt, <double>obj)
 *     elif isunicode(obj):
 *         bt_str = obj.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         c_str = bt_str
 *         CDTAssign(cdt, c_str)
 */
  __pyx_k_tuple_7 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, ((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));

  /* "/home/k.lepa/work/pyctpp2.b/src/version.py":24
 * # Author: Konstantin Lepa <konstantin.lepa@gmail.com>
 * 
 * VERSION = (0, 9, 1)             # <<<<<<<<<<<<<<
 * CTPP2_VERSION = (2, 6)
 */
  __pyx_k_tuple_10 = PyTuple_New(3); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_10));
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_k_tuple_10, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_9);
  PyTuple_SET_ITEM(__pyx_k_tuple_10, 1, __pyx_int_9);
  __Pyx_GIVEREF(__pyx_int_9);
  __Pyx_INCREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_10, 2, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));

  /* "/home/k.lepa/work/pyctpp2.b/src/version.py":25
 * 
 * VERSION = (0, 9, 1)
 * CTPP2_VERSION = (2, 6)             # <<<<<<<<<<<<<<
 */
  __pyx_k_tuple_11 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_11));
  __Pyx_INCREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_k_tuple_11, 0, __pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  __Pyx_INCREF(__pyx_int_6);
  PyTuple_SET_ITEM(__pyx_k_tuple_11, 1, __pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_11));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  #if PY_VERSION_HEX < 0x02040000
  if (unlikely(__Pyx_Py23SetsImport() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpyctpp2(void); /*proto*/
PyMODINIT_FUNC initpyctpp2(void)
#else
PyMODINIT_FUNC PyInit_pyctpp2(void); /*proto*/
PyMODINIT_FUNC PyInit_pyctpp2(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_pyctpp2(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("pyctpp2"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_pyctpp2) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_7pyctpp2_empty_string = ((PyObject*)Py_None); Py_INCREF(Py_None);
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7pyctpp2_Template) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Template", (PyObject *)&__pyx_type_7pyctpp2_Template) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7pyctpp2_Template = &__pyx_type_7pyctpp2_Template;
  __pyx_vtabptr_7pyctpp2_Engine = &__pyx_vtable_7pyctpp2_Engine;
  __pyx_vtable_7pyctpp2_Engine.create_template = (struct __pyx_obj_7pyctpp2_Template *(*)(struct __pyx_obj_7pyctpp2_Engine *, pyctpp2::CTemplate *, struct __pyx_opt_args_7pyctpp2_6Engine_create_template *__pyx_optional_args))__pyx_f_7pyctpp2_6Engine_create_template;
  if (PyType_Ready(&__pyx_type_7pyctpp2_Engine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_7pyctpp2_Engine, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pyctpp2_6Engine_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pyctpp2_6Engine_2__init__.doc = __pyx_doc_7pyctpp2_6Engine_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pyctpp2_6Engine_2__init__;
    }
  }
  if (__Pyx_SetVtable(__pyx_type_7pyctpp2_Engine.tp_dict, __pyx_vtabptr_7pyctpp2_Engine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Engine", (PyObject *)&__pyx_type_7pyctpp2_Engine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7pyctpp2_Engine = &__pyx_type_7pyctpp2_Engine;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pyctpp2.pyx":34
 * from libcpp.vector cimport vector
 * 
 * import os             # <<<<<<<<<<<<<<
 * 
 * include "pyversion.pxi"
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/k.lepa/work/pyctpp2.b/src/version.py":24
 * # Author: Konstantin Lepa <konstantin.lepa@gmail.com>
 * 
 * VERSION = (0, 9, 1)             # <<<<<<<<<<<<<<
 * CTPP2_VERSION = (2, 6)
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__VERSION, ((PyObject *)__pyx_k_tuple_10)) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/k.lepa/work/pyctpp2.b/src/version.py":25
 * 
 * VERSION = (0, 9, 1)
 * CTPP2_VERSION = (2, 6)             # <<<<<<<<<<<<<<
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CTPP2_VERSION, ((PyObject *)__pyx_k_tuple_11)) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pyctpp2.pyx":54
 * 
 *     ctypedef bytes StringType
 *     cdef bytes empty_string = bytes()             # <<<<<<<<<<<<<<
 *     cdef bytes string_type_to_str():
 *         return str(unicode)
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyBytes_Type))), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GOTREF(((PyObject *)__pyx_v_7pyctpp2_empty_string));
  __Pyx_DECREF(((PyObject *)__pyx_v_7pyctpp2_empty_string));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_v_7pyctpp2_empty_string = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyctpp2.pyx":256
 * 
 * 
 * cdef traverse(obj, CDT *cdt, CDT *root_cdt=NULL, StringType prev_key=empty_string):             # <<<<<<<<<<<<<<
 *     cdef int idx
 *     cdef CDT tmp
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_7pyctpp2_empty_string));
  __pyx_k_6 = ((__pyx_t_7pyctpp2_StringType)__pyx_v_7pyctpp2_empty_string);
  __Pyx_GIVEREF(__pyx_v_7pyctpp2_empty_string);

  /* "pyctpp2.pyx":1
 * # encoding: utf-8             # <<<<<<<<<<<<<<
 * # Copyright (c) 2011 Volvox Development Team
 * #
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "cpython/type.pxd":2
 * 
 * cdef extern from "Python.h":             # <<<<<<<<<<<<<<
 *     # The C structure of the objects used to describe built-in types.
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pyctpp2");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyctpp2");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
                 "need more than %d value%s to unpack", (int)index,
        #else
                 "need more than %zd value%s to unpack", index,
        #endif
                 (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
            "too many values to unpack (expected %d)", (int)expected);
        #else
            "too many values to unpack (expected %zd)", expected);
        #endif
}

static PyObject *__Pyx_UnpackItem(PyObject *iter, Py_ssize_t index) {
    PyObject *item;
    if (!(item = PyIter_Next(iter))) {
        if (!PyErr_Occurred()) {
            __Pyx_RaiseNeedMoreValuesError(index);
        }
    }
    return item;
}

static int __Pyx_EndUnpack(PyObject *iter, Py_ssize_t expected) {
    PyObject *item;
    if ((item = PyIter_Next(iter))) {
        Py_DECREF(item);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    else if (!PyErr_Occurred())
        return 0;
    else
        return -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE int64_t __Pyx_PyInt_from_py_int64_t(PyObject* x) {
    const int64_t neg_one = (int64_t)-1, const_zero = (int64_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(int64_t) == sizeof(char)) {
        if (is_unsigned)
            return (int64_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (int64_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(int64_t) == sizeof(short)) {
        if (is_unsigned)
            return (int64_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (int64_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(int64_t) == sizeof(int)) {
        if (is_unsigned)
            return (int64_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (int64_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(int64_t) == sizeof(long)) {
        if (is_unsigned)
            return (int64_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (int64_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(int64_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (int64_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (int64_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        int64_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (int64_t)-1;
    }
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE uint32_t __Pyx_PyInt_from_py_uint32_t(PyObject* x) {
    const uint32_t neg_one = (uint32_t)-1, const_zero = (uint32_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(uint32_t) == sizeof(char)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(uint32_t) == sizeof(short)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(uint32_t) == sizeof(int)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(uint32_t) == sizeof(long)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(uint32_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (uint32_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (uint32_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        uint32_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (uint32_t)-1;
    }
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    long size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && ((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        PyErr_Warn(NULL, warning);
        #else
        PyErr_WarnEx(NULL, warning, 0);
        #endif
    }
    else if (((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
