Metadata-Version: 1.0
Name: Products.ColorField
Version: 0.3.1
Summary: ColorField is a color picker and converter for Plone Archetypes.
Home-page: http://pypi.python.org/pypi/Products.ColorField/
Author: Roland Fasching
Author-email: rof@sterngasse.at
License: GPL
Description: Changelog
        =========
        
        0.3.1 (2010-06-01)
        ------------------
        
        * Eliminated tabindex.
        * Tested with Plone-4.0b3.
        
        0.3.0 (2009-06-17)
        -------------------
        
        * Initial release of eggified version. [taito.horiuchi]
        
        
        Installation
        =============
        
        If you are using zc.buildout and the plone.recipe.zope2instance
        recipe to manage your project, just do this:
        
        * Add ``Products.ColorField`` to the list of eggs to install, e.g.:
        
            |    [buildout]
            |    ...
            |    eggs =
            |        ...
            |        Products.ColorField
        
        * Tell the plone.recipe.zope2instance recipe to install a ZCML slug:
        
            |    [instance]
            |    recipe = plone.recipe.zope2instance
            |    ...
            |    zcml =
            |        Products.ColorField
        
        * Re-run buildout, e.g. with:
        
            |    $ ./bin/buildout
        
        You can skip the ZCML slug if you are going to explicitly include the package
        from another package's configure.zcml file.
        
        
        Because its top level Python namespace package is called ``Products``, this
        package can also be installed in Zope 2 as an old style **Zope 2 Product**.
        
        For that, move (or symlink) the ``ColorField`` folder of this project
        (``Products.ColorField/Products/ColorField``) into the ``Products`` directory of
        the Zope instance it has to be installed for, and restart the server.
        
        You can also skip the ZCML slug if you install this package the **Zope 2
        Product** way.
        
        Set OUTPUT_FORMAT in config.py of the field itself to have the color codes in HTMLColor, RGB,
        HexColor or PILColor. Default is HTMLColor.
        
        Usage
        ============
        
        1. In your custom Archetype, add:
        
            |    from Products.ColorField import ColorWidget, ColorField
        
        2. Use it like a regular field/widget in your Type's Schema.
        
            |    ColorField('my_color',
            |        default='#00FFFF',
            |        output_format='HexColor',
            |        widget=ColorWidget(
            |            label='My color',
            |            allow_brightness=True)
            |    ),
        
        
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development :: Libraries :: Python Modules
