<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML
><HEAD
><TITLE
>Filter ParameterObjects</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.79"><LINK
REL="HOME"
TITLE="athenaCL Tutorial Manual"
HREF="index.htm"><LINK
REL="UP"
TITLE="ParameterObject Reference and Examples"
HREF="ax03.htm"><LINK
REL="PREVIOUS"
TITLE="Rhythm ParameterObjects"
HREF="pmtrrefrthmpmtrobjs.htm"><LINK
REL="NEXT"
TITLE="TextureStatic ParameterObjects"
HREF="pmtrreftextpmtrobjs.htm"><LINK
REL="STYLESHEET"
TYPE="text/css"
HREF="manual.css"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>athenaCL Tutorial Manual: Third Edition, Version 2.0.0a15</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="pmtrrefrthmpmtrobjs.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Appendix C. ParameterObject Reference and Examples</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="pmtrreftextpmtrobjs.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="PMTRREFFILTERPMTROBJS"
>C.3. Filter ParameterObjects</A
></H1
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSB"
>C.3.1. bypass (b)</A
></H2
><P
>bypass</P
><P
>Description: Each input value is returned unaltered.</P
><P
>Arguments: (1) name</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> b</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-B-0"
></A
><P
><B
>Example C-191. bypass Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-b-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
bypass</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSFA"
>C.3.2. filterAdd (fa)</A
></H2
><P
>filterAdd, parameterObject</P
><P
>Description: Each input value is added to a value produced by a user-supplied ParameterObject.</P
><P
>Arguments: (1) name, (2) parameterObject {operator value generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fa, (ws,e,30,0,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FA-0"
></A
><P
><B
>Example C-192. filterAdd Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fa-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterAdd, (waveSine, event, (constant, 30), 0, (constant, 0), (constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSFD"
>C.3.3. filterDivide (fd)</A
></H2
><P
>filterDivide, parameterObject</P
><P
>Description: Each input value is divided by a value produced by a user-supplied ParameterObject. Division by zero, if encountered, returns the value of the input value unaltered.</P
><P
>Arguments: (1) name, (2) parameterObject {operator value generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fd, (ws,e,30,0,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FD-0"
></A
><P
><B
>Example C-193. filterDivide Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fd-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterDivide, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSFDA"
>C.3.4. filterDivideAnchor (fda)</A
></H2
><P
>filterDivideAnchor, anchorString, parameterObject</P
><P
>Description: All input values are first shifted so that the position specified by anchor is zero; then each value is divided by the value produced by the parameterObject. All values are then re-shifted so that zero returns to its former position. Division by zero, if encountered, returns the value of the input value unaltered.</P
><P
>Arguments: (1) name, (2) anchorString {'lower', 'upper', 'average', 'median'}, (3) parameterObject {operator value generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fda, lower, (wc,e,30,0,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FDA-0"
></A
><P
><B
>Example C-194. filterDivideAnchor Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fda-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterDivideAnchor, lower, (waveCosine, event, (constant, 30), 0, (constant,
0), (constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSFFB"
>C.3.5. filterFunnelBinary (ffb)</A
></H2
><P
>filterFunnelBinary, thresholdMatchString, parameterObject, parameterObject, parameterObject</P
><P
>Description: A dynamic, two-part variable funnel filter. Given values produced by two boundary parameterObjects and a threshold ParameterObject, the output of a Generator ParameterObject value is shifted to one of the boundaries (or the threshold) depending on the relationship of the generated value to the threshold. If the generated value is equal to the threshold, the value may be shifted to the upper or lower value, or retain the threshold value.</P
><P
>Arguments: (1) name, (2) thresholdMatchString {'upper', 'lower', 'match'}, (3) parameterObject {threshold}, (4) parameterObject {first boundary}, (5) parameterObject {second boundary}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ffb, u, (bpl,e,s,((0,0),(120,1))), (ws,e,60,0,0.5,0), (wc,e,90,0,0.5,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FFB-0"
></A
><P
><B
>Example C-195. filterFunnelBinary Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ffb-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterFunnelBinary, upper, (breakPointLinear, event, single, ((0,0),(120,1))),
(waveSine, event, (constant, 60), 0, (constant, 0.5), (constant, 0)),
(waveCosine, event, (constant, 90), 0, (constant, 0.5), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FFB-1"
></A
><P
><B
>Example C-196. filterFunnelBinary Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-ffb-1.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterFunnelBinary, match, (constant, 0.2), (breakPointLinear, event, loop,
((0,0),(60,0.5))), (breakPointLinear, event, loop, ((0,1),(60,0.5)))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSFM"
>C.3.6. filterMultiply (fm)</A
></H2
><P
>filterMultiply, parameterObject</P
><P
>Description: Each input value is multiplied by a value produced by a user-supplied ParameterObject.</P
><P
>Arguments: (1) name, (2) parameterObject {operator value generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fm, (ws,e,30,0,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FM-0"
></A
><P
><B
>Example C-197. filterMultiply Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fm-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterMultiply, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSFMA"
>C.3.7. filterMultiplyAnchor (fma)</A
></H2
><P
>filterMultiplyAnchor, anchorString, parameterObject</P
><P
>Description: All input values are first shifted so that the position specified by anchor is zero; then each value is multiplied by the value produced by the parameterObject. All values are then re-shifted so that zero returns to its former position.</P
><P
>Arguments: (1) name, (2) anchorString {'lower', 'upper', 'average', 'median'}, (3) parameterObject {operator value generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fma, lower, (wc,e,30,0,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FMA-0"
></A
><P
><B
>Example C-198. filterMultiplyAnchor Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fma-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterMultiplyAnchor, lower, (waveCosine, event, (constant, 30), 0, (constant,
0), (constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSFP"
>C.3.8. filterPower (fp)</A
></H2
><P
>filterPower, parameterObject</P
><P
>Description: Each input value is taken to the power of the value produced by a user-supplied ParameterObject.</P
><P
>Arguments: (1) name, (2) parameterObject {operator value generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fp, (ws,e,30,0,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FP-0"
></A
><P
><B
>Example C-199. filterPower Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fp-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterPower, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSFQ"
>C.3.9. filterQuantize (fq)</A
></H2
><P
>filterQuantize, parameterObject, parameterObject, stepCount, parameterObject</P
><P
>Description: Dynamic grid size and grid position quantization filter. For each value provided by the source ParameterObject, a grid is created. This grid is made by taking the number of steps specified by the stepCount integer from the step width Generator ParameterObject. The absolute value of these widths are used to create a grid above and below the reference value, with grid steps taken in order. The value provided by the source ParameterObject is found within this grid, and pulled to the nearest grid line. The degree of pull can be a dynamically allocated with a unit-interval quantize pull ParameterObject. A value of 1 forces all values to snap to the grid; a value of .5 will cause a weighted attraction.</P
><P
>Arguments: (1) name, (2) parameterObject {grid reference value Generator}, (3) parameterObject {step width Generator}, (4) stepCount, (5) parameterObject {unit interval measure of quantize pull}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fq, (c,0), (c,0.25), 1, (c,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FQ-0"
></A
><P
><B
>Example C-200. filterQuantize Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fq-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterQuantize, (constant, 0), (constant, 0.25), 1, (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FQ-1"
></A
><P
><B
>Example C-201. filterQuantize Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-fq-1.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
filterQuantize, (cyclicGen, up, 0, 1, 0.003), (basketGen, orderedCyclic,
(0.4,0.6)), 2, (breakPointPower, event, loop, ((0,1),(59,0),(119,1)), -3)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSMF"
>C.3.10. maskFilter (mf)</A
></H2
><P
>maskFilter, boundaryString, parameterObject, parameterObject</P
><P
>Description: Each input value is fit between values provided by two boundary Generator ParameterObjects. The fit is determined by the boundaryString: limit will fix the value at the nearest boundary; wrap will wrap the value through the range defined by the boundaries; reflect will bounce values in the opposite direction through the range defined by the boundaries.</P
><P
>Arguments: (1) name, (2) boundaryString {'limit', 'wrap', 'reflect'}, (3) parameterObject {first boundary}, (4) parameterObject {second boundary}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> mf, l, (ws,e,60,0,0.5,0), (wc,e,90,0,0.5,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MF-0"
></A
><P
><B
>Example C-202. maskFilter Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-mf-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
maskFilter, limit, (waveSine, event, (constant, 60), 0, (constant, 0.5),
(constant, 0)), (waveCosine, event, (constant, 90), 0, (constant, 0.5),
(constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSMSF"
>C.3.11. maskScaleFilter (msf)</A
></H2
><P
>maskScaleFilter, min, max, selectionString</P
><P
>Description: Each input value is collected into a list. The resulting list of values is normalized within the unit interval. Values are chosen from this list using the selector specified by the selectionString argument. After selection, this value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) min, (3) max, (4) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> msf, (ws,e,60,0,0.5,0), (wc,e,90,0,0.5,1), rc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MSF-0"
></A
><P
><B
>Example C-203. maskScaleFilter Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-msf-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
maskScaleFilter, (waveSine, event, (constant, 60), 0, (constant, 0.5),
(constant, 0)), (waveCosine, event, (constant, 90), 0, (constant, 0.5),
(constant, 1)), randomChoice</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSOB"
>C.3.12. orderBackward (ob)</A
></H2
><P
>orderBackward</P
><P
>Description: All values input are returned in reversed order.</P
><P
>Arguments: (1) name</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ob</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-OB-0"
></A
><P
><B
>Example C-204. orderBackward Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ob-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
orderBackward</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSOR"
>C.3.13. orderRotate (or)</A
></H2
><P
>orderRotate, rotationSize</P
><P
>Description: Rotates all input values as many steps as specified; if the number of steps is greater than the number of input values, the modulus of the input length is used.</P
><P
>Arguments: (1) name, (2) rotationSize</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> or, 40</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-OR-0"
></A
><P
><B
>Example C-205. orderRotate Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-or-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
orderRotate, 40</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSPL"
>C.3.14. pipeLine (pl)</A
></H2
><P
>pipeLine, filterParameterObjectList</P
><P
>Description: Provide a list of Filter ParameterObjects; input values are passed through each filter in the user-supplied order from left to right.</P
><P
>Arguments: (1) name, (2) filterParameterObjectList {a list of sequential Filter ParameterObjects}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> pl, ((or,40),(ob))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-PL-0"
></A
><P
><B
>Example C-206. pipeLine Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-pl-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
pipeLine, ((orderRotate, 40), (orderBackward))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFFILTERPMTROBJSR"
>C.3.15. replace (r)</A
></H2
><P
>replace, parameterObject</P
><P
>Description: Replace input values with values produced by a Generator ParameterObject.</P
><P
>Arguments: (1) name, (2) parameterObject {generator to replace original values}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> r, (ru,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-R-0"
></A
><P
><B
>Example C-207. replace Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-r-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (breakPointLinear, event, loop, ((0,0.5),(120,0))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))
replace, (randomUniform, (constant, 0), (constant, 1))</PRE
></DIV
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="pmtrrefrthmpmtrobjs.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="index.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="pmtrreftextpmtrobjs.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Rhythm ParameterObjects</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="ax03.htm"
ACCESSKEY="U"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>TextureStatic ParameterObjects</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>