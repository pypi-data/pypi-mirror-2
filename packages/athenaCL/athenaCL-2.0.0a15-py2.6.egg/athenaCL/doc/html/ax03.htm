<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML
><HEAD
><TITLE
>ParameterObject Reference and Examples</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.79"><LINK
REL="HOME"
TITLE="athenaCL Tutorial Manual"
HREF="index.htm"><LINK
REL="PREVIOUS"
TITLE="Other Commands"
HREF="othergroup.htm"><LINK
REL="NEXT"
TITLE="Rhythm ParameterObjects"
HREF="pmtrrefrthmpmtrobjs.htm"><LINK
REL="STYLESHEET"
TYPE="text/css"
HREF="manual.css"></HEAD
><BODY
CLASS="APPENDIX"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>athenaCL Tutorial Manual: Third Edition, Version 2.0.0a15</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="othergroup.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="pmtrrefrthmpmtrobjs.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="APPENDIX"
><H1
><A
NAME="AX03"
></A
>Appendix C. ParameterObject Reference and Examples</H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>Table of Contents</B
></DT
><DT
>C.1. <A
HREF="ax03.htm#PMTRREFGENPMTROBJS"
>Generator ParameterObjects</A
></DT
><DD
><DL
><DT
>C.1.1. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSA"
>accumulator (a)</A
></DT
><DT
>C.1.2. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBF"
>basketFill (bf)</A
></DT
><DT
>C.1.3. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBFS"
>basketFillSelect (bfs)</A
></DT
><DT
>C.1.4. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBG"
>basketGen (bg)</A
></DT
><DT
>C.1.5. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBGF"
>breakGraphFlat (bgf)</A
></DT
><DT
>C.1.6. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBGHC"
>breakGraphHalfCosine (bghc)</A
></DT
><DT
>C.1.7. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBGL"
>breakGraphLinear (bgl)</A
></DT
><DT
>C.1.8. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBGP"
>breakGraphPower (bgp)</A
></DT
><DT
>C.1.9. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBPF"
>breakPointFlat (bpf)</A
></DT
><DT
>C.1.10. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBPHC"
>breakPointHalfCosine (bphc)</A
></DT
><DT
>C.1.11. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBPL"
>breakPointLinear (bpl)</A
></DT
><DT
>C.1.12. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBPP"
>breakPointPower (bpp)</A
></DT
><DT
>C.1.13. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSBS"
>basketSelect (bs)</A
></DT
><DT
>C.1.14. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSC"
>constant (c)</A
></DT
><DT
>C.1.15. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSCF"
>constantFile (cf)</A
></DT
><DT
>C.1.16. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSCG"
>cyclicGen (cg)</A
></DT
><DT
>C.1.17. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSCL"
>caList (cl)</A
></DT
><DT
>C.1.18. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSCV"
>caValue (cv)</A
></DT
><DT
>C.1.19. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSDS"
>directorySelect (ds)</A
></DT
><DT
>C.1.20. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSEGA"
>envelopeGeneratorAdsr (ega)</A
></DT
><DT
>C.1.21. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSEGT"
>envelopeGeneratorTrapezoid (egt)</A
></DT
><DT
>C.1.22. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSEGU"
>envelopeGeneratorUnit (egu)</A
></DT
><DT
>C.1.23. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSFB"
>funnelBinary (fb)</A
></DT
><DT
>C.1.24. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSFML"
>feedbackModelLibrary (fml)</A
></DT
><DT
>C.1.25. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSFS"
>fibonacciSeries (fs)</A
></DT
><DT
>C.1.26. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSGT"
>grammarTerminus (gt)</A
></DT
><DT
>C.1.27. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSHB"
>henonBasket (hb)</A
></DT
><DT
>C.1.28. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSIC"
>iterateCross (ic)</A
></DT
><DT
>C.1.29. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSIG"
>iterateGroup (ig)</A
></DT
><DT
>C.1.30. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSIH"
>iterateHold (ih)</A
></DT
><DT
>C.1.31. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSIS"
>iterateSelect (is)</A
></DT
><DT
>C.1.32. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSIW"
>iterateWindow (iw)</A
></DT
><DT
>C.1.33. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSLB"
>lorenzBasket (lb)</A
></DT
><DT
>C.1.34. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSLM"
>logisticMap (lm)</A
></DT
><DT
>C.1.35. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSLP"
>listPrime (lp)</A
></DT
><DT
>C.1.36. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSLS"
>lineSegment (ls)</A
></DT
><DT
>C.1.37. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSM"
>mask (m)</A
></DT
><DT
>C.1.38. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSMGA"
>markovGeneratorAnalysis (mga)</A
></DT
><DT
>C.1.39. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSMR"
>maskReject (mr)</A
></DT
><DT
>C.1.40. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSMS"
>maskScale (ms)</A
></DT
><DT
>C.1.41. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSMV"
>markovValue (mv)</A
></DT
><DT
>C.1.42. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSN"
>noise (n)</A
></DT
><DT
>C.1.43. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSOA"
>operatorAdd (oa)</A
></DT
><DT
>C.1.44. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSOC"
>operatorCongruence (oc)</A
></DT
><DT
>C.1.45. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSOD"
>operatorDivide (od)</A
></DT
><DT
>C.1.46. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSOM"
>operatorMultiply (om)</A
></DT
><DT
>C.1.47. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSOO"
>oneOver (oo)</A
></DT
><DT
>C.1.48. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSOP"
>operatorPower (op)</A
></DT
><DT
>C.1.49. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSOS"
>operatorSubtract (os)</A
></DT
><DT
>C.1.50. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSPR"
>pathRead (pr)</A
></DT
><DT
>C.1.51. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSQ"
>quantize (q)</A
></DT
><DT
>C.1.52. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRB"
>randomBeta (rb)</A
></DT
><DT
>C.1.53. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRBE"
>randomBilateralExponential (rbe)</A
></DT
><DT
>C.1.54. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRC"
>randomCauchy (rc)</A
></DT
><DT
>C.1.55. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRE"
>randomExponential (re)</A
></DT
><DT
>C.1.56. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRG"
>randomGauss (rg)</A
></DT
><DT
>C.1.57. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRIE"
>randomInverseExponential (rie)</A
></DT
><DT
>C.1.58. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRIL"
>randomInverseLinear (ril)</A
></DT
><DT
>C.1.59. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRIT"
>randomInverseTriangular (rit)</A
></DT
><DT
>C.1.60. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRL"
>randomLinear (rl)</A
></DT
><DT
>C.1.61. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRT"
>randomTriangular (rt)</A
></DT
><DT
>C.1.62. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRU"
>randomUniform (ru)</A
></DT
><DT
>C.1.63. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSRW"
>randomWeibull (rw)</A
></DT
><DT
>C.1.64. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSSAH"
>sampleAndHold (sah)</A
></DT
><DT
>C.1.65. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSSF"
>sieveFunnel (sf)</A
></DT
><DT
>C.1.66. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSSL"
>sieveList (sl)</A
></DT
><DT
>C.1.67. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSSS"
>sampleSelect (ss)</A
></DT
><DT
>C.1.68. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSTF"
>typeFormat (tf)</A
></DT
><DT
>C.1.69. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSVP"
>valuePrime (vp)</A
></DT
><DT
>C.1.70. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSVS"
>valueSieve (vs)</A
></DT
><DT
>C.1.71. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWC"
>waveCosine (wc)</A
></DT
><DT
>C.1.72. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWHPC"
>waveHalfPeriodCosine (whpc)</A
></DT
><DT
>C.1.73. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWHPP"
>waveHalfPeriodPulse (whpp)</A
></DT
><DT
>C.1.74. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWHPS"
>waveHalfPeriodSine (whps)</A
></DT
><DT
>C.1.75. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWHPT"
>waveHalfPeriodTriangle (whpt)</A
></DT
><DT
>C.1.76. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWP"
>wavePulse (wp)</A
></DT
><DT
>C.1.77. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWPD"
>wavePowerDown (wpd)</A
></DT
><DT
>C.1.78. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWPU"
>wavePowerUp (wpu)</A
></DT
><DT
>C.1.79. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWS"
>waveSine (ws)</A
></DT
><DT
>C.1.80. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWSD"
>waveSawDown (wsd)</A
></DT
><DT
>C.1.81. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWSU"
>waveSawUp (wsu)</A
></DT
><DT
>C.1.82. <A
HREF="ax03.htm#PMTRREFGENPMTROBJSWT"
>waveTriangle (wt)</A
></DT
></DL
></DD
><DT
>C.2. <A
HREF="pmtrrefrthmpmtrobjs.htm"
>Rhythm ParameterObjects</A
></DT
><DD
><DL
><DT
>C.2.1. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSBA"
>binaryAccent (ba)</A
></DT
><DT
>C.2.2. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSCS"
>convertSecond (cs)</A
></DT
><DT
>C.2.3. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSCST"
>convertSecondTriple (cst)</A
></DT
><DT
>C.2.4. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSGR"
>gaRhythm (gr)</A
></DT
><DT
>C.2.5. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSIRG"
>iterateRhythmGroup (irg)</A
></DT
><DT
>C.2.6. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSIRH"
>iterateRhythmHold (irh)</A
></DT
><DT
>C.2.7. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSIRW"
>iterateRhythmWindow (irw)</A
></DT
><DT
>C.2.8. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSL"
>loop (l)</A
></DT
><DT
>C.2.9. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSMP"
>markovPulse (mp)</A
></DT
><DT
>C.2.10. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSMRA"
>markovRhythmAnalysis (mra)</A
></DT
><DT
>C.2.11. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSPS"
>pulseSieve (ps)</A
></DT
><DT
>C.2.12. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSPT"
>pulseTriple (pt)</A
></DT
><DT
>C.2.13. <A
HREF="pmtrrefrthmpmtrobjs.htm#PMTRREFRTHMPMTROBJSRS"
>rhythmSieve (rs)</A
></DT
></DL
></DD
><DT
>C.3. <A
HREF="pmtrreffilterpmtrobjs.htm"
>Filter ParameterObjects</A
></DT
><DD
><DL
><DT
>C.3.1. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSB"
>bypass (b)</A
></DT
><DT
>C.3.2. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSFA"
>filterAdd (fa)</A
></DT
><DT
>C.3.3. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSFD"
>filterDivide (fd)</A
></DT
><DT
>C.3.4. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSFDA"
>filterDivideAnchor (fda)</A
></DT
><DT
>C.3.5. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSFFB"
>filterFunnelBinary (ffb)</A
></DT
><DT
>C.3.6. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSFM"
>filterMultiply (fm)</A
></DT
><DT
>C.3.7. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSFMA"
>filterMultiplyAnchor (fma)</A
></DT
><DT
>C.3.8. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSFP"
>filterPower (fp)</A
></DT
><DT
>C.3.9. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSFQ"
>filterQuantize (fq)</A
></DT
><DT
>C.3.10. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSMF"
>maskFilter (mf)</A
></DT
><DT
>C.3.11. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSMSF"
>maskScaleFilter (msf)</A
></DT
><DT
>C.3.12. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSOB"
>orderBackward (ob)</A
></DT
><DT
>C.3.13. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSOR"
>orderRotate (or)</A
></DT
><DT
>C.3.14. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSPL"
>pipeLine (pl)</A
></DT
><DT
>C.3.15. <A
HREF="pmtrreffilterpmtrobjs.htm#PMTRREFFILTERPMTROBJSR"
>replace (r)</A
></DT
></DL
></DD
><DT
>C.4. <A
HREF="pmtrreftextpmtrobjs.htm"
>TextureStatic ParameterObjects</A
></DT
><DD
><DL
><DT
>C.4.1. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSEDP"
>eventDensityPartition (edp)</A
></DT
><DT
>C.4.2. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSIMC"
>interpolationMethodControl (imc)</A
></DT
><DT
>C.4.3. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSLEC"
>levelEventCount (lec)</A
></DT
><DT
>C.4.4. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSLEP"
>levelEventPartition (lep)</A
></DT
><DT
>C.4.5. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSLFD"
>levelFrameDuration (lfd)</A
></DT
><DT
>C.4.6. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSLFM"
>levelFieldMonophonic (lfm)</A
></DT
><DT
>C.4.7. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSLFP"
>levelFieldPolyphonic (lfp)</A
></DT
><DT
>C.4.8. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSLOM"
>levelOctaveMonophonic (lom)</A
></DT
><DT
>C.4.9. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSLOP"
>levelOctavePolyphonic (lop)</A
></DT
><DT
>C.4.10. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSLWS"
>loopWithinSet (lws)</A
></DT
><DT
>C.4.11. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSMSC"
>multisetSelectorControl (msc)</A
></DT
><DT
>C.4.12. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSMTO"
>maxTimeOffset (mto)</A
></DT
><DT
>C.4.13. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSOLS"
>ornamentLibrarySelect (ols)</A
></DT
><DT
>C.4.14. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSOMD"
>ornamentMaxDensity (omd)</A
></DT
><DT
>C.4.15. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSPDF"
>pathDurationFraction (pdf)</A
></DT
><DT
>C.4.16. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSPIC"
>parameterInterpolationControl (pic)</A
></DT
><DT
>C.4.17. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSPML"
>parallelMotionList (pml)</A
></DT
><DT
>C.4.18. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSPSC"
>pitchSelectorControl (psc)</A
></DT
><DT
>C.4.19. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSSET"
>snapEventTime (set)</A
></DT
><DT
>C.4.20. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSSST"
>snapSustainTime (sst)</A
></DT
><DT
>C.4.21. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSTEC"
>totalEventCount (tec)</A
></DT
><DT
>C.4.22. <A
HREF="pmtrreftextpmtrobjs.htm#PMTRREFTEXTPMTROBJSTSC"
>totalSegmentCount (tsc)</A
></DT
></DL
></DD
><DT
>C.5. <A
HREF="pmtrrefclonepmtrobjs.htm"
>CloneStatic ParameterObjects</A
></DT
><DD
><DL
><DT
>C.5.1. <A
HREF="pmtrrefclonepmtrobjs.htm#PMTRREFCLONEPMTROBJSRMT"
>retrogradeMethodToggle (rmt)</A
></DT
><DT
>C.5.2. <A
HREF="pmtrrefclonepmtrobjs.htm#PMTRREFCLONEPMTROBJSTRS"
>timeReferenceSource (trs)</A
></DT
></DL
></DD
></DL
></DIV
><P
></P
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="PMTRREFGENPMTROBJS"
>C.1. Generator ParameterObjects</A
></H1
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSA"
>C.1.1. accumulator (a)</A
></H2
><P
>accumulator, initValue, parameterObject</P
><P
>Description: For each evaluation, this Generator adds the result of the Generator ParameterObject to the stored cumulative numeric value; the initialization value argument initValue is the origin of the cumulative value, and is the first value returned.</P
><P
>Arguments: (1) name, (2) initValue, (3) parameterObject {Generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> a, 0, (bg,rc,(1,3,4,7,-11))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-A-0"
></A
><P
><B
>Example C-1. accumulator Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-a-0.png"></P
><PRE
CLASS="SCREEN"
>accumulator, 0, (basketGen, randomChoice, (1,3,4,7,-11))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-A-1"
></A
><P
><B
>Example C-2. accumulator Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-a-1.png"></P
><PRE
CLASS="SCREEN"
>accumulator, 0, (waveSine, event, (constant, 20), 0, (constant, -0.5),
(constant, 1.5))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBF"
>C.1.2. basketFill (bf)</A
></H2
><P
>basketFill, selectionString, parameterObject, valueCount</P
><P
>Description: Chooses values from a ParameterObject generated list of values. The number of values generated is determined by the valueCount integer. Valuse are generated only at initialization. Values are chosen from this list using the selector specified by the selectionString argument.</P
><P
>Arguments: (1) name, (2) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}, (3) parameterObject {source Generator}, (4) valueCount</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bf, oc, (ru,0,1), 10</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BF-0"
></A
><P
><B
>Example C-3. basketFill Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bf-0.png"></P
><PRE
CLASS="SCREEN"
>basketFill, orderedCyclic, (randomUniform, (constant, 0), (constant, 1)), 10</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBFS"
>C.1.3. basketFillSelect (bfs)</A
></H2
><P
>basketFillSelect, parameterObject, valueCount, parameterObject</P
><P
>Description: Chooses values from a ParameterObject generated list of values. The number of values generated is determined by the valueCount integer. Valuse are generated only at initialization. Values are choosen from the list with values within the unit interval produced by an embedded ParameterObject. Values that exceed the unit interval are limited within the unit interval.</P
><P
>Arguments: (1) name, (2) parameterObject {source Generator}, (3) valueCount, (4) parameterObject {selection Generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bfs, (ru,0,1), 10, (rb,0.2,0.2,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BFS-0"
></A
><P
><B
>Example C-4. basketFillSelect Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bfs-0.png"></P
><PRE
CLASS="SCREEN"
>basketFillSelect, (randomUniform, (constant, 0), (constant, 1)), 10,
(randomBeta, 0.2, 0.2, (constant, 0), (constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBG"
>C.1.4. basketGen (bg)</A
></H2
><P
>basketGen, selectionString, valueList</P
><P
>Description: Chooses values from a user-supplied list (valueList). Values can be strings or numbers. Values are chosen from this list using the selector specified by the selectionString argument.</P
><P
>Arguments: (1) name, (2) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}, (3) valueList</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bg, rc, (0,0.25,0.25,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BG-0"
></A
><P
><B
>Example C-5. basketGen Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bg-0.png"></P
><PRE
CLASS="SCREEN"
>basketGen, randomChoice, (0,0.25,0.25,1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BG-1"
></A
><P
><B
>Example C-6. basketGen Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-bg-1.png"></P
><PRE
CLASS="SCREEN"
>basketGen, orderedOscillate, (0,0.1,0.2,0.4,0.8,0.6,0.5,1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BG-2"
></A
><P
><B
>Example C-7. basketGen Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-bg-2.png"></P
><PRE
CLASS="SCREEN"
>basketGen, randomWalk, (0,0.1,0.2,0.4,0.8,0.6,0.5,1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBGF"
>C.1.5. breakGraphFlat (bgf)</A
></H2
><P
>breakGraphFlat, stepString, edgeString, parameterObject, parameterObject, pointCount</P
><P
>Description: Provides a dynamic break-point function without interpolation. A list of (x,y) coordinate pairs is generated from two embedded Generator ParameterObjects. The number of generated pairs is determined by the count argument. A step type (stepString) determines if x values in the pointList refer to events or real-time values. Interpolated y values are the output of the Generator. The edgeString argument determines if the break-point function loops, or is executed once at the given coordinates.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) edgeString {'loop', 'single'}, (4) parameterObject {x point Generator}, (5) parameterObject {y point Generator}, (6) pointCount</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bgf, e, l, (a,0,(bg,rp,(1,3,9))), (bg,rc,(0,0.25,0.5,0.75,1)), 60</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BGF-0"
></A
><P
><B
>Example C-8. breakGraphFlat Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bgf-0.png"></P
><PRE
CLASS="SCREEN"
>breakGraphFlat, event, loop, (accumulator, 0, (basketGen, randomPermutate,
(1,3,9))), (basketGen, randomChoice, (0,0.25,0.5,0.75,1)), 60</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBGHC"
>C.1.6. breakGraphHalfCosine (bghc)</A
></H2
><P
>breakGraphHalfCosine, stepString, edgeString, parameterObject, parameterObject, pointCount</P
><P
>Description: Provides a dynamic break-point function with half-cosine interpolation. A list of (x,y) coordinate pairs is generated from two embedded Generator ParameterObjects. The number of generated pairs is determined by the count argument. A step type (stepString) determines if x values in the pointList refer to events or real-time values. Interpolated y values are the output of the Generator. The edgeString argument determines if the break-point function loops, or is executed once at the given coordinates. The exponent argument may be any positive or negative numeric value.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) edgeString {'loop', 'single'}, (4) parameterObject {x point Generator}, (5) parameterObject {y point Generator}, (6) pointCount</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bghc, e, l, (a,0,(bg,rp,(1,3,9))), (bg,rc,(0,0.25,0.5,0.75,1)), 60</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BGHC-0"
></A
><P
><B
>Example C-9. breakGraphHalfCosine Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bghc-0.png"></P
><PRE
CLASS="SCREEN"
>breakGraphHalfCosine, event, loop, (accumulator, 0, (basketGen,
randomPermutate, (1,3,9))), (basketGen, randomChoice, (0,0.25,0.5,0.75,1)), 60</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBGL"
>C.1.7. breakGraphLinear (bgl)</A
></H2
><P
>breakGraphLinear, stepString, edgeString, parameterObject, parameterObject, pointCount</P
><P
>Description: Provides a dynamic break-point function with linear interpolation. A list of (x,y) coordinate pairs is generated from two embedded Generator ParameterObjects. The number of generated pairs is determined by the count argument. A step type (stepString) determines if x values in the pointList refer to events or real-time values. Interpolated y values are the output of the Generator. The edgeString argument determines if the break-point function loops, or is executed once at the given coordinates.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) edgeString {'loop', 'single'}, (4) parameterObject {x point Generator}, (5) parameterObject {y point Generator}, (6) pointCount</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bgl, e, l, (a,0,(bg,rp,(1,3,9))), (bg,rc,(0,0.25,0.5,0.75,1)), 60</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BGL-0"
></A
><P
><B
>Example C-10. breakGraphLinear Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bgl-0.png"></P
><PRE
CLASS="SCREEN"
>breakGraphLinear, event, loop, (accumulator, 0, (basketGen, randomPermutate,
(1,3,9))), (basketGen, randomChoice, (0,0.25,0.5,0.75,1)), 60</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBGP"
>C.1.8. breakGraphPower (bgp)</A
></H2
><P
>breakGraphPower, stepString, edgeString, parameterObject, parameterObject, pointCount, exponent</P
><P
>Description: Provides a dynamic break-point function with exponential interpolation. A list of (x,y) coordinate pairs is generated from two embedded Generator ParameterObjects. The number of generated pairs is determined by the count argument. A step type (stepString) determines if x values in the pointList refer to events or real-time values. Interpolated y values are the output of the Generator. The edgeString argument determines if the break-point function loops, or is executed once at the given coordinates. The exponent argument may be any positive or negative numeric value.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) edgeString {'loop', 'single'}, (4) parameterObject {x point Generator}, (5) parameterObject {y point Generator}, (6) pointCount, (7) exponent</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bgp, e, l, (a,0,(bg,rp,(1,3,9))), (bg,rc,(0,0.25,0.5,0.75,1)), 60, -1.5</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BGP-0"
></A
><P
><B
>Example C-11. breakGraphPower Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bgp-0.png"></P
><PRE
CLASS="SCREEN"
>breakGraphPower, event, loop, (accumulator, 0, (basketGen, randomPermutate,
(1,3,9))), (basketGen, randomChoice, (0,0.25,0.5,0.75,1)), 60, -1.5</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBPF"
>C.1.9. breakPointFlat (bpf)</A
></H2
><P
>breakPointFlat, stepString, edgeString, pointList</P
><P
>Description: Provides a break-point function without interpolation from a list of (x,y) coordinate pairs (pointList). A step type (stepString) determines if x values in the pointList refer to events or real-time values. Interpolated y values are the output of the Generator. The edgeString argument determines if the break-point function loops, or is executed once at the given coordinates.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) edgeString {'loop', 'single'}, (4) pointList</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bpf, e, l, ((0,1),(6,0.3),(12,0.3),(18,0),(24,0.6))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPF-0"
></A
><P
><B
>Example C-12. breakPointFlat Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bpf-0.png"></P
><PRE
CLASS="SCREEN"
>breakPointFlat, event, loop, ((0,1),(6,0.3),(12,0.3),(18,0),(24,0.6))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPF-1"
></A
><P
><B
>Example C-13. breakPointFlat Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-bpf-1.png"></P
><PRE
CLASS="SCREEN"
>breakPointFlat, event, single, ((12,0.3),(18,0.9),(24,0.2),(48,0.6))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPF-2"
></A
><P
><B
>Example C-14. breakPointFlat Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-bpf-2.png"></P
><PRE
CLASS="SCREEN"
>breakPointFlat, event, loop,
((0,0.3),(10,0.3),(11,0.8),(25,0.75),(26,0.5),(37,0.35),(42,0.7),(45,0.5))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBPHC"
>C.1.10. breakPointHalfCosine (bphc)</A
></H2
><P
>breakPointHalfCosine, stepString, edgeString, pointList</P
><P
>Description: Provides a break-point function with half-cosine interpolation from a list of (x,y) coordinate pairs (pointList). A step type (stepString) determines if x values in the pointList refer to events or real-time values. Interpolated y values are the output of the Generator. The edgeString argument determines if the break-point function loops, or is executed once at the given coordinates.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) edgeString {'loop', 'single'}, (4) pointList</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bphc, e, l, ((0,1),(6,0.3),(12,0.3),(18,0),(24,0.6))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPHC-0"
></A
><P
><B
>Example C-15. breakPointHalfCosine Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bphc-0.png"></P
><PRE
CLASS="SCREEN"
>breakPointHalfCosine, event, loop, ((0,1),(6,0.3),(12,0.3),(18,0),(24,0.6))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPHC-1"
></A
><P
><B
>Example C-16. breakPointHalfCosine Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-bphc-1.png"></P
><PRE
CLASS="SCREEN"
>breakPointHalfCosine, event, single, ((12,0.3),(18,0.9),(24,0.2),(48,0.6))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPHC-2"
></A
><P
><B
>Example C-17. breakPointHalfCosine Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-bphc-2.png"></P
><PRE
CLASS="SCREEN"
>breakPointHalfCosine, event, loop,
((0,0.3),(10,0.3),(11,0.8),(25,0.75),(26,0.5),(37,0.35),(42,0.7),(45,0.5))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBPL"
>C.1.11. breakPointLinear (bpl)</A
></H2
><P
>breakPointLinear, stepString, edgeString, pointList</P
><P
>Description: Provides a break-point function with linear interpolation from a list of (x,y) coordinate pairs (pointList). A step type (stepString) determines if x values in the pointList refer to events or real-time values. Interpolated y values are the output of the Generator. The edgeString argument determines if the break-point function loops, or is executed once at the given coordinates.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) edgeString {'loop', 'single'}, (4) pointList</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bpl, e, l, ((0,1),(6,0.3),(12,0.3),(18,0),(24,0.6))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPL-0"
></A
><P
><B
>Example C-18. breakPointLinear Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bpl-0.png"></P
><PRE
CLASS="SCREEN"
>breakPointLinear, event, loop, ((0,1),(6,0.3),(12,0.3),(18,0),(24,0.6))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPL-1"
></A
><P
><B
>Example C-19. breakPointLinear Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-bpl-1.png"></P
><PRE
CLASS="SCREEN"
>breakPointLinear, event, single, ((12,0.3),(18,0.9),(24,0.2),(48,0.6))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPL-2"
></A
><P
><B
>Example C-20. breakPointLinear Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-bpl-2.png"></P
><PRE
CLASS="SCREEN"
>breakPointLinear, event, loop,
((0,0.3),(10,0.3),(11,0.8),(25,0.75),(26,0.5),(37,0.35),(42,0.7),(45,0.5))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBPP"
>C.1.12. breakPointPower (bpp)</A
></H2
><P
>breakPointPower, stepString, edgeString, pointList, exponent</P
><P
>Description: Provides a break-point function with exponential interpolation from a list of (x,y) coordinate pairs (pointList). A step type (stepString) determines if x values in the pointList refer to events or real-time values. Interpolated y values are the output of the Generator. The edgeString argument determines if the break-point function loops, or is executed once at the given coordinates. The exponent argument may be any positive or negative numeric value.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) edgeString {'loop', 'single'}, (4) pointList, (5) exponent</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bpp, e, l, ((0,1),(6,0.3),(12,0.3),(18,0),(24,0.6)), -1.5</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPP-0"
></A
><P
><B
>Example C-21. breakPointPower Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bpp-0.png"></P
><PRE
CLASS="SCREEN"
>breakPointPower, event, loop, ((0,1),(6,0.3),(12,0.3),(18,0),(24,0.6)), -1.5</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPP-1"
></A
><P
><B
>Example C-22. breakPointPower Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-bpp-1.png"></P
><PRE
CLASS="SCREEN"
>breakPointPower, event, loop,
((0,0.2),(10,1),(20,0.8),(30,0.5),(40,0.2),(45,1),(50,0),(55,1)), 3.5</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BPP-2"
></A
><P
><B
>Example C-23. breakPointPower Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-bpp-2.png"></P
><PRE
CLASS="SCREEN"
>breakPointPower, event, single, ((12,0.3),(18,0.9),(24,0.8),(48,0.2)), -4</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSBS"
>C.1.13. basketSelect (bs)</A
></H2
><P
>basketSelect, valueList, parameterObject</P
><P
>Description: Chooses values from a user-supplied list (valueList). Values can be strings or numbers. Values are choosen from the list with values within the unit interval produced by an embedded ParameterObject. Values that exceed the unit interval are limited within the unit interval.</P
><P
>Arguments: (1) name, (2) valueList, (3) parameterObject {selection Generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> bs, (1,2,3,4,5,6,7,8,9), (rb,0.2,0.2,(bpl,e,s,((0,0.4),(120,0))),(bpl,e,s,((0,0.6),(120,1))))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-BS-0"
></A
><P
><B
>Example C-24. basketSelect Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-bs-0.png"></P
><PRE
CLASS="SCREEN"
>basketSelect, (1,2,3,4,5,6,7,8,9), (randomBeta, 0.2, 0.2, (breakPointLinear,
event, single, ((0,0.4),(120,0))), (breakPointLinear, event, single,
((0,0.6),(120,1)))),</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSC"
>C.1.14. constant (c)</A
></H2
><P
>constant, value</P
><P
>Description: Return a constant string or numeric value.</P
><P
>Arguments: (1) name, (2) value</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> c, 0</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-C-0"
></A
><P
><B
>Example C-25. constant Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-c-0.png"></P
><PRE
CLASS="SCREEN"
>constant, 0</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSCF"
>C.1.15. constantFile (cf)</A
></H2
><P
>constantFile, absoluteFilePath</P
><P
>Description: Given an absolute file path, a constant file path is returned as a string. Note: symbolic links (aliases or shortcuts) and home directory symbols (~) are expanded into complete paths.</P
><P
>Arguments: (1) name, (2) absoluteFilePath</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> cf, </CODE
></P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSCG"
>C.1.16. cyclicGen (cg)</A
></H2
><P
>cyclicGen, directionString, min, max, increment</P
><P
>Description: Cycles between static minimum (min) and maximum (max) values with a static increment value. Cycling direction and type is controlled by the directionString argument.</P
><P
>Arguments: (1) name, (2) directionString {'upDown', 'downUp', 'up', 'down'}, (3) min, (4) max, (5) increment</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> cg, ud, 0, 1, 0.13</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-CG-0"
></A
><P
><B
>Example C-26. cyclicGen Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-cg-0.png"></P
><PRE
CLASS="SCREEN"
>cyclicGen, upDown, 0, 1, 0.13</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-CG-1"
></A
><P
><B
>Example C-27. cyclicGen Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-cg-1.png"></P
><PRE
CLASS="SCREEN"
>cyclicGen, down, 0, 1, 0.13</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSCL"
>C.1.17. caList (cl)</A
></H2
><P
>caList, caSpec, parameterObject, parameterObject, tableExtractionString, selectionString</P
><P
>Description: Produces values from a one-dimensional cellular automata table. One dimensional cellular automata may be standard, totalistic, continuous, or float formats, and are defined with a caSpec string. The caSpec string may contain one or more CA parameters defined in key{value} pairs. All parameters not defined assume default values. Valid parameters include f (format), k, r, i (initialization), x (row width), y (number of steps), w (extracted width), c (extracted center), and s (initial step skip). Rule and mutation values may be provided by embedded Generator ParameterObjects. Values may be extracted into a list from the resulting table as defined by the tableFormatString. Values are chosen from this list using the selector specified by the selectionString argument.</P
><P
>Arguments: (1) name, (2) caSpec, (3) parameterObject {rule}, (4) parameterObject {mutation}, (5) tableExtractionString {'averageColumn', 'averageColumnActive', 'averageColumnIndex', 'averageColumnIndexActive', 'averageColumnIndexPassive', 'averageColumnPassive', 'averageRow', 'averageRowActive', 'averageRowIndex', 'averageRowIndexActive', 'averageRowIndexPassive', 'averageRowPassive', 'flatColumn', 'flatColumnActive', 'flatColumnIndex', 'flatColumnIndexActive', 'flatColumnIndexPassive', 'flatColumnPassive', 'flatColumnReflect', 'flatColumnReflectActive', 'flatColumnReflectIndex', 'flatColumnReflectIndexActive', 'flatColumnReflectIndexPassive', 'flatColumnReflectPassive', 'flatRow', 'flatRowActive', 'flatRowIndex', 'flatRowIndexActive', 'flatRowIndexPassive', 'flatRowPassive', 'flatRowReflect', 'flatRowReflectActive', 'flatRowReflectIndex', 'flatRowReflectIndexActive', 'flatRowReflectIndexPassive', 'flatRowReflectPassive', 'productColumn', 'productColumnActive', 'productColumnIndex', 'productColumnIndexActive', 'productColumnIndexPassive', 'productColumnPassive', 'productRow', 'productRowActive', 'productRowIndex', 'productRowIndexActive', 'productRowIndexPassive', 'productRowPassive', 'sumColumn', 'sumColumnActive', 'sumColumnIndex', 'sumColumnIndexActive', 'sumColumnIndexPassive', 'sumColumnPassive', 'sumRow', 'sumRowActive', 'sumRowIndex', 'sumRowIndexActive', 'sumRowIndexPassive', 'sumRowPassive'}, (6) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> cl, f{f}i{c}x{81}y{120}, 0.25, 0.0005, sc, oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-CL-0"
></A
><P
><B
>Example C-28. caList Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-cl-0.png"></P
><PRE
CLASS="SCREEN"
>caList, f{f}k{0}r{1}i{center}x{81}y{120}w{81}c{0}s{0}, (constant, 0.25),
(constant, 0.0005), sumColumn, orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-CL-1"
></A
><P
><B
>Example C-29. caList Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-cl-1.png"></P
><PRE
CLASS="SCREEN"
>caList, f{s}k{2}r{1}i{center}x{91}y{120}w{91}c{0}s{0}, (markovValue,
a{90}b{182}:{a=29|b=1}, (constant, 0)), (constant, 0), flatRowIndexActive,
orderedCyclic</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSCV"
>C.1.18. caValue (cv)</A
></H2
><P
>caValue, caSpec, parameterObject, parameterObject, tableExtractionString, min, max, selectionString</P
><P
>Description: Produces values from a one-dimensional cellular automata table scaled within dynamic min and max values. One dimensional cellular automata may be standard, totalistic, continuous, or float formats, and are defined with a caSpec string. The caSpec string may contain one or more CA parameters defined in key{value} pairs. All parameters not defined assume default values. Valid parameters include f (format), k, r, i (initialization), x (row width), y (number of steps), w (extracted width), c (extracted center), and s (initial step skip). Rule and mutation values may be provided by embedded Generator ParameterObjects. Values may be extracted into a list from the resulting table as defined by the tableFormatString. Values are chosen from this list using the selector specified by the selectionString argument. After selection, this value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) caSpec, (3) parameterObject {rule}, (4) parameterObject {mutation}, (5) tableExtractionString {'averageColumn', 'averageColumnActive', 'averageColumnIndex', 'averageColumnIndexActive', 'averageColumnIndexPassive', 'averageColumnPassive', 'averageRow', 'averageRowActive', 'averageRowIndex', 'averageRowIndexActive', 'averageRowIndexPassive', 'averageRowPassive', 'flatColumn', 'flatColumnActive', 'flatColumnIndex', 'flatColumnIndexActive', 'flatColumnIndexPassive', 'flatColumnPassive', 'flatColumnReflect', 'flatColumnReflectActive', 'flatColumnReflectIndex', 'flatColumnReflectIndexActive', 'flatColumnReflectIndexPassive', 'flatColumnReflectPassive', 'flatRow', 'flatRowActive', 'flatRowIndex', 'flatRowIndexActive', 'flatRowIndexPassive', 'flatRowPassive', 'flatRowReflect', 'flatRowReflectActive', 'flatRowReflectIndex', 'flatRowReflectIndexActive', 'flatRowReflectIndexPassive', 'flatRowReflectPassive', 'productColumn', 'productColumnActive', 'productColumnIndex', 'productColumnIndexActive', 'productColumnIndexPassive', 'productColumnPassive', 'productRow', 'productRowActive', 'productRowIndex', 'productRowIndexActive', 'productRowIndexPassive', 'productRowPassive', 'sumColumn', 'sumColumnActive', 'sumColumnIndex', 'sumColumnIndexActive', 'sumColumnIndexPassive', 'sumColumnPassive', 'sumRow', 'sumRowActive', 'sumRowIndex', 'sumRowIndexActive', 'sumRowIndexPassive', 'sumRowPassive'}, (6) min, (7) max, (8) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> cv, f{s}, (c,110), (c,0), sr, 0, 1, oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-CV-0"
></A
><P
><B
>Example C-30. caValue Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-cv-0.png"></P
><PRE
CLASS="SCREEN"
>caValue, f{s}k{2}r{1}i{center}x{91}y{135}w{91}c{0}s{0}, (constant, 110),
(constant, 0), sumRow, (constant, 0), (constant, 1), orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-CV-1"
></A
><P
><B
>Example C-31. caValue Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-cv-1.png"></P
><PRE
CLASS="SCREEN"
>caValue, f{s}k{2}r{1}i{random}x{81}y{120}w{81}c{0}s{0}, (breakPointLinear,
event, single, ((0,30),(119,34))), (constant, 0.05), sumRow, (constant, 0),
(constant, 1), orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-CV-2"
></A
><P
><B
>Example C-32. caValue Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-cv-2.png"></P
><PRE
CLASS="SCREEN"
>caValue, f{t}k{3}r{1}i{center}x{81}y{120}w{12}c{0}s{0}, (constant, 1842),
(breakPointLinear, event, loop, ((0,0),(80,0.02))), sumRow, (waveSine, event,
(constant, 15), 0, (constant, 0), (constant, 0.4)), (constant, 1),
orderedCyclic</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSDS"
>C.1.19. directorySelect (ds)</A
></H2
><P
>directorySelect, directoryFilePath, fileExtension, selectionString</P
><P
>Description: Within a user-provided directory (directoryFilePath) and all sub-directories, this Generator finds all files named with a file extension that matches the fileExtension argument, and collects these complete file paths into a list. Values are chosen from this list using the selector specified by the selectionString argument. Note: the fileExtension argument string may not include a leading period (for example, use "aif", not ".aif"); symbolic links (aliases or shortcuts) and home directory symbols (~) are expanded into complete paths.</P
><P
>Arguments: (1) name, (2) directoryFilePath, (3) fileExtension, (4) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ds, ., aif, rw</CODE
></P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSEGA"
>C.1.20. envelopeGeneratorAdsr (ega)</A
></H2
><P
>envelopeGeneratorAdsr, scaleString, edgeString, eventCount, parameterObject, parameterObject, parameterObject, parameterObject, parameterObject, parameterObject, min, max</P
><P
>Description: Generates a sequence of dynamic envelopes with durations controlled by a Generator Parameter Object. Envelope duration is specified by the duration ParameterObject; all values are interpreted in seconds. The scaleString parameter determines if shape values are interpreted as proportional values or absolute values in seconds. The number of envelopes generated is controlled by the eventCount parameter; envelopes are looped when necessary. The minimum and maximum envelope value is scaled within the range designated by min and max; min and max are selected once per envelope; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) scaleString {'absolute', 'proportional'}, (3) edgeString {'loop', 'single'}, (4) eventCount, (5) parameterObject {duration Generator}, (6) parameterObject {attack Generator}, (7) parameterObject {decay Generator}, (8) parameterObject {sustain Generator}, (9) parameterObject {release Generator}, (10) parameterObject {sustain scalar Generator}, (11) min, (12) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ega, proportional, l, 100, (c,40), (c,2), (c,4), (c,2), (c,4), (c,0.5), 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-EGA-0"
></A
><P
><B
>Example C-33. envelopeGeneratorAdsr Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ega-0.png"></P
><PRE
CLASS="SCREEN"
>envelopeGeneratorAdsr, proportional, loop, 100, (constant, 40), (constant, 2),
(constant, 4), (constant, 2), (constant, 4), (constant, 0.5), (constant, 0),
(constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-EGA-1"
></A
><P
><B
>Example C-34. envelopeGeneratorAdsr Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-ega-1.png"></P
><PRE
CLASS="SCREEN"
>envelopeGeneratorAdsr, proportional, loop, 100, (basketGen, orderedCyclic,
(60,40,20)), (basketGen, orderedCyclic, (1,5,10)), (basketGen, orderedCyclic,
(10,5,1)), (constant, 6), (constant, 2), (basketGen, orderedCyclic,
(0.2,0.5,0.7)), (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-EGA-2"
></A
><P
><B
>Example C-35. envelopeGeneratorAdsr Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-ega-2.png"></P
><PRE
CLASS="SCREEN"
>envelopeGeneratorAdsr, absolute, loop, 100, (basketGen, orderedCyclic,
(60,40,20)), (basketGen, orderedCyclic, (1,5,10)), (basketGen, orderedCyclic,
(10,5,1)), (constant, 6), (constant, 2), (basketGen, orderedCyclic,
(0.2,0.5,0.7)), (constant, 0), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSEGT"
>C.1.21. envelopeGeneratorTrapezoid (egt)</A
></H2
><P
>envelopeGeneratorTrapezoid, scaleString, edgeString, eventCount, parameterObject, parameterObject, parameterObject, parameterObject, parameterObject, min, max</P
><P
>Description: Generates a sequence of dynamic envelopes with durations controlled by a Generator Parameter Object. Envelope duration is specified by the duration ParameterObject; all values are interpreted in seconds. The scaleString parameter determines if shape values are interpreted as proportional values or absolute values in seconds. The number of envelopes generated is controlled by the eventCount parameter; envelopes are looped when necessary. The minimum and maximum envelope value is scaled within the range designated by min and max; min and max are selected once per envelope; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) scaleString {'absolute', 'proportional'}, (3) edgeString {'loop', 'single'}, (4) eventCount, (5) parameterObject {duration Generator}, (6) parameterObject {ramp up Generator}, (7) parameterObject {width max Generator}, (8) parameterObject {ramp down Generator}, (9) parameterObject {width min Generator}, (10) min, (11) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> egt, proportional, l, 100, (c,40), (c,0.5), (c,4), (c,2), (c,4), 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-EGT-0"
></A
><P
><B
>Example C-36. envelopeGeneratorTrapezoid Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-egt-0.png"></P
><PRE
CLASS="SCREEN"
>envelopeGeneratorTrapezoid, proportional, loop, 100, (constant, 40),
(constant, 0.5), (constant, 4), (constant, 2), (constant, 4), (constant, 0),
(constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-EGT-1"
></A
><P
><B
>Example C-37. envelopeGeneratorTrapezoid Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-egt-1.png"></P
><PRE
CLASS="SCREEN"
>envelopeGeneratorTrapezoid, proportional, loop, 100, (basketGen,
orderedCyclic, (60,40,20)), (basketGen, orderedCyclic, (1,5,10)), (constant,
6), (constant, 8), (constant, 2), (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-EGT-2"
></A
><P
><B
>Example C-38. envelopeGeneratorTrapezoid Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-egt-2.png"></P
><PRE
CLASS="SCREEN"
>envelopeGeneratorTrapezoid, absolute, loop, 100, (basketGen, orderedCyclic,
(60,40,20)), (basketGen, orderedCyclic, (1,5,10)), (constant, 6), (constant,
8), (constant, 2), (constant, 0), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSEGU"
>C.1.22. envelopeGeneratorUnit (egu)</A
></H2
><P
>envelopeGeneratorUnit, edgeString, eventCount, parameterObject, parameterObject, parameterObject, min, max</P
><P
>Description: Generates a sequence of dynamic envelopes with durations controlled by a Generator Parameter Object. Envelope duration is specified by the duration ParameterObject; all values are interpreted in seconds. The scaleString parameter determines if shape values are interpreted as proportional values or absolute values in seconds. The number of envelopes generated is controlled by the eventCount parameter; envelopes are looped when necessary. The minimum and maximum envelope value is scaled within the range designated by min and max; min and max are selected once per envelope; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) edgeString {'loop', 'single'}, (3) eventCount, (4) parameterObject {duration Generator}, (5) parameterObject {sustain center unit Generator}, (6) parameterObject {sustain width unit Generator}, (7) min, (8) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> egu, l, 100, (c,40), (c,0.4), (c,0.2), 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-EGU-0"
></A
><P
><B
>Example C-39. envelopeGeneratorUnit Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-egu-0.png"></P
><PRE
CLASS="SCREEN"
>envelopeGeneratorUnit, loop, 100, (constant, 40), (constant, 0.4), (constant,
0.2), (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-EGU-1"
></A
><P
><B
>Example C-40. envelopeGeneratorUnit Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-egu-1.png"></P
><PRE
CLASS="SCREEN"
>envelopeGeneratorUnit, loop, 100, (basketGen, orderedCyclic, (60,40,20)),
(basketGen, orderedCyclic, (0.1,0.4,0.6)), (basketGen, orderedCyclic,
(0.1,0.5,0.8)), (constant, 0), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSFB"
>C.1.23. funnelBinary (fb)</A
></H2
><P
>funnelBinary, thresholdMatchString, parameterObject, parameterObject, parameterObject, parameterObject</P
><P
>Description: A dynamic, two-part variable funnel. Given values produced by two boundary parameterObjects and a threshold ParameterObject, the output of a Generator ParameterObject value is shifted to one of the boundaries (or the threshold) depending on the relationship of the generated value to the threshold. If the generated value is equal to the threshold, the value may be shifted to the upper or lower value, or retain the threshold value.</P
><P
>Arguments: (1) name, (2) thresholdMatchString {'upper', 'lower', 'match'}, (3) parameterObject {threshold}, (4) parameterObject {first boundary}, (5) parameterObject {second boundary}, (6) parameterObject {generator of masked values}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fb, u, (bpl,e,s,((0,0),(120,1))), (ws,e,60,0,0.5,0), (wc,e,90,0,0.5,1), (ru,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FB-0"
></A
><P
><B
>Example C-41. funnelBinary Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fb-0.png"></P
><PRE
CLASS="SCREEN"
>funnelBinary, upper, (breakPointLinear, event, single, ((0,0),(120,1))),
(waveSine, event, (constant, 60), 0, (constant, 0.5), (constant, 0)),
(waveCosine, event, (constant, 90), 0, (constant, 0.5), (constant, 1)),
(randomUniform, (constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FB-1"
></A
><P
><B
>Example C-42. funnelBinary Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-fb-1.png"></P
><PRE
CLASS="SCREEN"
>funnelBinary, match, (constant, 0.2), (breakPointLinear, event, loop,
((0,0),(60,0.5))), (breakPointLinear, event, loop, ((0,1),(60,0.5))),
(waveSine, event, (constant, 20), 0, (constant, 0), (constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSFML"
>C.1.24. feedbackModelLibrary (fml)</A
></H2
><P
>feedbackModelLibrary, feedbackModelName, parameterObject, parameterObject, min, max</P
><P
>Description: A model of a feedback system made from discrete particles. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) feedbackModelName, (3) parameterObject {aging step}, (4) parameterObject {threshold}, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fml, cc, (bg,rc,(1,3)), (c,0.9), 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FML-0"
></A
><P
><B
>Example C-43. feedbackModelLibrary Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fml-0.png"></P
><PRE
CLASS="SCREEN"
>feedbackModelLibrary, climateControl, (basketGen, randomChoice, (1,3)),
(constant, 0.9), (constant, 0), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSFS"
>C.1.25. fibonacciSeries (fs)</A
></H2
><P
>fibonacciSeries, start, length, min, max, selectionString</P
><P
>Description: Provides values derived from a contigous section of the Fibonacci series. A section is built from an initial value (start) and as many additional values as specified by the length argument. Negative length values reverse the direction of the series. The resulting list of values is normalized within the unit interval. Values are chosen from this list using the selector specified by the selectionString argument. After selection, this value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) start, (3) length, (4) min, (5) max, (6) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> fs, 200, 20, 0, 1, oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FS-0"
></A
><P
><B
>Example C-44. fibonacciSeries Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-fs-0.png"></P
><PRE
CLASS="SCREEN"
>fibonacciSeries, 200, 20, (constant, 0), (constant, 1), orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FS-1"
></A
><P
><B
>Example C-45. fibonacciSeries Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-fs-1.png"></P
><PRE
CLASS="SCREEN"
>fibonacciSeries, 40, 20, (constant, 0), (constant, 1), randomChoice</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-FS-2"
></A
><P
><B
>Example C-46. fibonacciSeries Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-fs-2.png"></P
><PRE
CLASS="SCREEN"
>fibonacciSeries, 400, 20, (waveSine, event, (constant, 35), 0, (constant,
0.5), (constant, 0)), (cyclicGen, upDown, 0.6, 1, 0.03), orderedOscillate</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSGT"
>C.1.26. grammarTerminus (gt)</A
></H2
><P
>grammarTerminus, grammarString, stepCount, selectionString</P
><P
>Description: Produces values from a one-dimensional string rewrite rule, or Lindenmayer-system generative grammar. The terminus, or final result of the number of generations of values specifed by the stepCount parameter, is used to produce a list of defined values. Values are chosen from this list using the selector specified by the selectionString argument.</P
><P
>Arguments: (1) name, (2) grammarString, (3) stepCount, (4) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> gt, a{.2}b{.5}c{.8}d{0}@a{ba}b{bc}c{cd}d{ac}@a, 6, oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-GT-0"
></A
><P
><B
>Example C-47. grammarTerminus Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-gt-0.png"></P
><PRE
CLASS="SCREEN"
>grammarTerminus, a{.2}b{.5}c{.8}d{0}@a{ba}c{cd}b{bc}d{ac}@a, 6, orderedCyclic</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSHB"
>C.1.27. henonBasket (hb)</A
></H2
><P
>henonBasket, xInit, yInit, parameterObject, parameterObject, valueCount, valueSelect, min, max, selectionString</P
><P
>Description: Performs the Henon map, a non-linear two-dimensional discrete deterministic dynamical system. For some parameter settings the system exhibits chaotic behavior, for others, periodic behavior; small changes in initial parameters may demonstrate the butterfly effect. Variables x and y describe coordinate positions; values a (alpha) and b (beta) configure the system. As the output range cannot be predicted, as many values as specified by the valueCount argument, as well as any combination of variables with the valueSelect argument, are generated and stored at initialization. These values are then scaled within the unit interval. Values are chosen from this list using the selector specified by the selectionString argument. After selection, this value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: some values may cause unexpected results; alpha values should not exceed 2.0.</P
><P
>Arguments: (1) name, (2) xInit, (3) yInit, (4) parameterObject {a value}, (5) parameterObject {b value}, (6) valueCount, (7) valueSelect {'x', 'y', 'xy', 'yx'}, (8) min, (9) max, (10) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> hb, 0.5, 0.5, 1.4, 0.3, 1000, x, 0, 1, oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-HB-0"
></A
><P
><B
>Example C-48. henonBasket Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-hb-0.png"></P
><PRE
CLASS="SCREEN"
>henonBasket, 0.5, 0.5, (constant, 1.4), (constant, 0.3), 1000, x, (constant,
0), (constant, 1), orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-HB-1"
></A
><P
><B
>Example C-49. henonBasket Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-hb-1.png"></P
><PRE
CLASS="SCREEN"
>henonBasket, 0.5, 0.5, (constant, 0.5), (constant, 0.8), 1000, yx, (constant,
0), (constant, 1), orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-HB-2"
></A
><P
><B
>Example C-50. henonBasket Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-hb-2.png"></P
><PRE
CLASS="SCREEN"
>henonBasket, 0.5, 0.5, (cyclicGen, upDown, 0, 0.9, 0.05), (constant, 0.3),
1000, xy, (constant, 0), (constant, 1), orderedCyclic</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSIC"
>C.1.28. iterateCross (ic)</A
></H2
><P
>iterateCross, parameterObject, parameterObject, parameterObject</P
><P
>Description: Produces a single value cross faded between two values created by two Generator ParameterObjects in parallel. The cross fade is expressed as a number within the unit interval, where a value of zero is the output of the first Generator, a value of one is the output of the second Generator, and all other values are proportionally and linearly cross faded.</P
><P
>Arguments: (1) name, (2) parameterObject {first source Generator}, (3) parameterObject {second source Generator}, (4) parameterObject {interpolation between first and second Generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ic, (ws,e,30,0,0,1), (wp,e,30,0,0,1), (bpl,e,l,((0,0),(120,1)))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IC-0"
></A
><P
><B
>Example C-51. iterateCross Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ic-0.png"></P
><PRE
CLASS="SCREEN"
>iterateCross, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1)), (wavePulse, event, (constant, 30), 0, (constant, 0), (constant, 1)),
(breakPointLinear, event, loop, ((0,0),(120,1)))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IC-1"
></A
><P
><B
>Example C-52. iterateCross Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-ic-1.png"></P
><PRE
CLASS="SCREEN"
>iterateCross, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1)), (randomUniform, (constant, 0), (constant, 1)), (breakPointLinear, event,
loop, ((0,0),(120,1)))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSIG"
>C.1.29. iterateGroup (ig)</A
></H2
><P
>iterateGroup, parameterObject, parameterObject</P
><P
>Description: Allows the output of a source ParameterObject to be grouped (a value is held and repeated a certain number of times), to be skipped (a number of values are generated and discarded), or to be bypassed. A numeric value from a control ParameterObject is used to determine the source ParameterObject behavior. A positive value (rounded to the nearest integer) will cause the value provided by the source ParameterObject to be repeated that many times. After output of these values, a new control value is generated. A negative value (rounded to the nearest integer) will cause that many number of values to be generated and discarded from the source ParameterObject, and force the selection of a new control value. A value of 0 is treated as a bypass, and forces the selection of a new control value. Note: if the control ParameterObject fails to produce positive values after many attempts, a value will be automatically generated from the selected ParameterObject.</P
><P
>Arguments: (1) name, (2) parameterObject {source Generator}, (3) parameterObject {group or skip control Generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ig, (ws,e,30,0,0,1), (bg,rc,(-3,1,-1,5))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IG-0"
></A
><P
><B
>Example C-53. iterateGroup Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ig-0.png"></P
><PRE
CLASS="SCREEN"
>iterateGroup, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1)), (basketGen, randomChoice, (-3,1,-1,5))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IG-1"
></A
><P
><B
>Example C-54. iterateGroup Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-ig-1.png"></P
><PRE
CLASS="SCREEN"
>iterateGroup, (waveCosine, event, (constant, 30), 0, (constant, 0), (constant,
1)), (waveTriangle, event, (constant, 20), 0, (constant, 4), (constant, -1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSIH"
>C.1.30. iterateHold (ih)</A
></H2
><P
>iterateHold, parameterObject, parameterObject, parameterObject, selectionString</P
><P
>Description: Allows a variable number of outputs from a source ParameterObject, collected and stored in a list, to be held and selected. Values are chosen from this list using the selector specified by the selectionString argument. A numeric value from a size ParameterObject is used to determine how many values are drawn from the source ParameterObject. A numeric value from a refresh count ParameterObject is used to determine how many events must pass before a new size value is drawn and the source ParameterObject is used to refill the stored list. A refresh value of zero, once encountered, will prohibit any further changes to the stored list. Note: if the size ParameterObject fails to produce a non-zero value for the first event, an alternative count value will be assigned.</P
><P
>Arguments: (1) name, (2) parameterObject {source Generator}, (3) parameterObject {size Generator}, (4) parameterObject {refresh count Generator}, (5) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ih, (ru,0,1), (bg,rc,(2,3,4)), (bg,oc,(12,24)), oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IH-0"
></A
><P
><B
>Example C-55. iterateHold Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ih-0.png"></P
><PRE
CLASS="SCREEN"
>iterateHold, (randomUniform, (constant, 0), (constant, 1)), (basketGen,
randomChoice, (2,3,4)), (basketGen, orderedCyclic, (12,24)), orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IH-1"
></A
><P
><B
>Example C-56. iterateHold Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-ih-1.png"></P
><PRE
CLASS="SCREEN"
>iterateHold, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1)), (basketGen, randomChoice, (3,4,5)), (basketGen, orderedCyclic,
(6,12,18)), orderedOscillate</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSIS"
>C.1.31. iterateSelect (is)</A
></H2
><P
>iterateSelect, parameterObject, parameterObject, parameterObject, parameterObject</P
><P
>Description: Allows a variable number of outputs from a source ParameterObject, collected and stored in a list, to be selected with values within the unit interval produced by an embedded ParameterObject. Values that exceed the unit interval are limited within the unit interval. Values are chosen from this list using the selector specified by the selectionString argument. A numeric value from a size ParameterObject is used to determine how many values are drawn from the source ParameterObject. A numeric value from a refresh count ParameterObject is used to determine how many events must pass before a new size value is drawn and the source ParameterObject is used to refill the stored list. A refresh value of zero, once encountered, will prohibit any further changes to the stored list. Note: if the size ParameterObject fails to produce a non-zero value for the first event, an alternative count value will be assigned.</P
><P
>Arguments: (1) name, (2) parameterObject {source Generator}, (3) parameterObject {size Generator}, (4) parameterObject {refresh count Generator}, (5) parameterObject {selection Generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> is, (ru,0,1), (bg,rc,(10,11,12)), (bg,oc,(12,24)), (rb,0.15,0.15,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IS-0"
></A
><P
><B
>Example C-57. iterateSelect Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-is-0.png"></P
><PRE
CLASS="SCREEN"
>iterateSelect, (randomUniform, (constant, 0), (constant, 1)), (basketGen,
randomChoice, (10,11,12)), (basketGen, orderedCyclic, (12,24)), (randomBeta,
0.15, 0.15, (constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IS-1"
></A
><P
><B
>Example C-58. iterateSelect Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-is-1.png"></P
><PRE
CLASS="SCREEN"
>iterateSelect, (listPrime, 20, 20, integer, orderedCyclic), (constant, 20),
(constant, 20), (randomBeta, 0.2, 0.2, (constant, 0), (constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSIW"
>C.1.32. iterateWindow (iw)</A
></H2
><P
>iterateWindow, parameterObjectList, parameterObject, selectionString</P
><P
>Description: Allows a ParameterObject, selected from a list of ParameterObjects, to generate values, to skip values (a number of values are generated and discarded), or to bypass value generation. A numeric value from a control ParameterObject is used to determine the selected ParameterObject behavior. A positive value (rounded to the nearest integer) will cause the selected ParameterObject to produce that many new values. After output of these values, a new ParameterObject is selected. A negative value (rounded to the nearest integer) will cause the selected ParameterObject to generate and discard that many values, and force the selection of a new ParameterObject. A value equal to 0 is treated as a bypass, and forces the selection of a new ParameterObject. ParameterObject selection is determined with a string argument for a selection method. Note: if the control ParameterObject fails to produce positive values after many attempts, a value will be automatically generated from the selected ParameterObject.</P
><P
>Arguments: (1) name, (2) parameterObjectList {a list of Generators}, (3) parameterObject {generate or skip control Generator}, (4) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> iw, ((ru,0,1),(wt,e,30,0,0,1)), (bg,oc,(8,4,-2)), oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IW-0"
></A
><P
><B
>Example C-59. iterateWindow Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-iw-0.png"></P
><PRE
CLASS="SCREEN"
>iterateWindow, ((randomUniform, (constant, 0), (constant, 1)), (waveTriangle,
event, (constant, 30), 0, (constant, 0), (constant, 1))), (basketGen,
orderedCyclic, (8,4,-2)), orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-IW-1"
></A
><P
><B
>Example C-60. iterateWindow Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-iw-1.png"></P
><PRE
CLASS="SCREEN"
>iterateWindow, ((randomUniform, (constant, 1), (accumulator, 0, (constant,
-0.2))), (waveSine, event, (constant, 15), 0.25, (accumulator, 1, (constant,
0.4)), (constant, 1))), (basketGen, orderedCyclic, (8,8,-11)), randomChoice</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSLB"
>C.1.33. lorenzBasket (lb)</A
></H2
><P
>lorenzBasket, xInit, yInit, zInit, parameterObject, parameterObject, parameterObject, valueCount, valueSelect, min, max, selectionString</P
><P
>Description: Performs the Lorenz attractor, a non-linear three-dimensional discrete deterministic dynamical system. The equations are derived from a simplified model of atmospheric convection rolls. For some parameter settings the system exhibits chaotic behavior, for others, periodic behavior; small changes in initial parameters may demonstrate the butterfly effect. Variables x, y, and z are proportional to convective intensity, temperature difference between descending and ascending currents, and the difference in vertical temperature profile from linearity. Values s (sigma), r, and b are the Prandtl number, the quotient of the Rayleigh number and the critical Rayleigh number, and the geometric factor. As the output range cannot be predicted, as many values as specified by the valueCount argument, as well as any combination of variables with the valueSelect argument, are generated and stored at initialization. These values are then scaled within the unit interval. Values are chosen from this list using the selector specified by the selectionString argument. After selection, this value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: some values may cause unexpected results; r should not exceed 90.</P
><P
>Arguments: (1) name, (2) xInit, (3) yInit, (4) zInit, (5) parameterObject {r value}, (6) parameterObject {s value}, (7) parameterObject {b value}, (8) valueCount, (9) valueSelect {'x', 'y', 'z', 'xy', 'xz', 'yx', 'yz', 'zx', 'zy', 'xyz', 'xzy', 'yxz', 'yzx', 'zxy', 'zyx'}, (10) min, (11) max, (12) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> lb, 1.0, 1.0, 1.0, 28, 10, 2.67, 1000, xyz, 0, 1, oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LB-0"
></A
><P
><B
>Example C-61. lorenzBasket Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-lb-0.png"></P
><PRE
CLASS="SCREEN"
>lorenzBasket, 1.0, 1.0, 1.0, (constant, 28), (constant, 10), (constant, 2.67),
1000, xyz, (constant, 0), (constant, 1), orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LB-1"
></A
><P
><B
>Example C-62. lorenzBasket Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-lb-1.png"></P
><PRE
CLASS="SCREEN"
>lorenzBasket, 0.5, 1.5, 10, (cyclicGen, down, 1, 80, 1.5), (constant, 10),
(constant, 12.4), 1000, x, (constant, 0), (constant, 1), orderedCyclic</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSLM"
>C.1.34. logisticMap (lm)</A
></H2
><P
>logisticMap, initValue, parameterObject, min, max</P
><P
>Description: Performs the logistic map, or the Verhulst population growth equation. The logistic map is a non-linear one-dimensional discrete deterministic dynamical system. For some parameter settings the system exhibits chaotic behavior, for others, periodic behavior; small changes in initial parameters may demonstrate the butterfly effect. Variable x represents the population value; value p represents a combined rate for reproduction and starvation. The p argument allows the user to provide a static or dynamic value to the equation. Certain p-value presets can be provided with strings: 'bi', 'quad', or 'chaos'. If a number is provided for p, the value will be used to create a constant ParameterObject. The equation outputs values within the unit interval. These values are scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) initValue, (3) parameterObject {p value}, (4) min, (5) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> lm, 0.5, (wt,e,90,0,2.75,4), 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LM-0"
></A
><P
><B
>Example C-63. logisticMap Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-lm-0.png"></P
><PRE
CLASS="SCREEN"
>logisticMap, 0.5, (waveTriangle, event, (constant, 90), 0, (constant, 2.75),
(constant, 4)), (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LM-1"
></A
><P
><B
>Example C-64. logisticMap Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-lm-1.png"></P
><PRE
CLASS="SCREEN"
>logisticMap, 0.1, (basketGen, randomWalk, (3,3,3,3.2,3.2,3.2,3.9,3.9,3.9)),
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LM-2"
></A
><P
><B
>Example C-65. logisticMap Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-lm-2.png"></P
><PRE
CLASS="SCREEN"
>logisticMap, 0.5, (iterateGroup, (basketGen, randomChoice, (3,3.2,3.57)),
(basketGen, randomChoice, (5,7,9))), (breakPointLinear, event, loop,
((0,0.5),(60,0),(120,0.5))), (breakPointLinear, event, loop, ((0,0.5),(40,3)))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSLP"
>C.1.35. listPrime (lp)</A
></H2
><P
>listPrime, start, length, format, selectionString</P
><P
>Description: Produces a segment of prime (pseudoprime) integers defined by a positive or negative start value and a length. Depending on format type, the resulting segment can be given as an integer, width, unit, or binary segment. Values are chosen from this list using the selector specified by the selectionString argument.</P
><P
>Arguments: (1) name, (2) start, (3) length, (4) format {'integer', 'width', 'unit', 'binary'}, (5) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> lp, 2, 50, int, oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LP-0"
></A
><P
><B
>Example C-66. listPrime Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-lp-0.png"></P
><PRE
CLASS="SCREEN"
>listPrime, 2, 50, integer, orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LP-1"
></A
><P
><B
>Example C-67. listPrime Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-lp-1.png"></P
><PRE
CLASS="SCREEN"
>listPrime, -100, 100, width, randomChoice</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LP-2"
></A
><P
><B
>Example C-68. listPrime Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-lp-2.png"></P
><PRE
CLASS="SCREEN"
>listPrime, 200, -30, binary, randomPermutate</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSLS"
>C.1.36. lineSegment (ls)</A
></H2
><P
>lineSegment, stepString, parameterObject, min, max</P
><P
>Description: Provides a dynamic line segment created from three embedded Generator ParameterObjects. Start and end values, taken from min and max generators, are used to create a line segment spaning the time or event distance provided by the secPerCycle argument. Depending on the stepString argument, the period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle).</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) min, (5) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ls, e, 10, 0, 5</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LS-0"
></A
><P
><B
>Example C-69. lineSegment Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ls-0.png"></P
><PRE
CLASS="SCREEN"
>lineSegment, (constant, 10), (constant, 0), (constant, 5)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LS-1"
></A
><P
><B
>Example C-70. lineSegment Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-ls-1.png"></P
><PRE
CLASS="SCREEN"
>lineSegment, (basketGen, randomChoice, (4,7,18)), (randomUniform, (constant,
0), (constant, 20)), (randomUniform, (constant, 30), (constant, 50))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-LS-2"
></A
><P
><B
>Example C-71. lineSegment Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-ls-2.png"></P
><PRE
CLASS="SCREEN"
>lineSegment, (waveSine, event, (constant, 5), 0, (constant, 2), (constant,
15)), (constant, 0), (randomUniform, (constant, 0), (constant, 100))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSM"
>C.1.37. mask (m)</A
></H2
><P
>mask, boundaryString, parameterObject, parameterObject, parameterObject</P
><P
>Description: Given values produced by two boundary ParameterObjects in parallel, the Generator ParameterObject value is fit within these values. The fit is determined by the boundaryString: limit will fix the value at the nearest boundary; wrap will wrap the value through the range defined by the boundaries; reflect will bounce values in the opposite direction through the range defined by the boundaries.</P
><P
>Arguments: (1) name, (2) boundaryString {'limit', 'wrap', 'reflect'}, (3) parameterObject {first boundary}, (4) parameterObject {second boundary}, (5) parameterObject {generator of masked values}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> m, l, (ws,e,60,0,0.5,0), (wc,e,90,0,0.5,1), (ru,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-M-0"
></A
><P
><B
>Example C-72. mask Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-m-0.png"></P
><PRE
CLASS="SCREEN"
>mask, limit, (waveSine, event, (constant, 60), 0, (constant, 0.5), (constant,
0)), (waveCosine, event, (constant, 90), 0, (constant, 0.5), (constant, 1)),
(randomUniform, (constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-M-1"
></A
><P
><B
>Example C-73. mask Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-m-1.png"></P
><PRE
CLASS="SCREEN"
>mask, wrap, (breakPointLinear, event, loop, ((0,0),(90,0.5))),
(breakPointLinear, event, loop, ((0,1),(90,0.5))), (waveSine, event,
(constant, 30), 0, (constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-M-2"
></A
><P
><B
>Example C-74. mask Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-m-2.png"></P
><PRE
CLASS="SCREEN"
>mask, reflect, (waveSine, event, (constant, 60), 0.25, (constant, 0.7),
(constant, 1)), (breakPointLinear, event, loop, ((0,0.4),(90,0),(120,0.4))),
(waveSine, event, (constant, 24), 0, (constant, 0), (constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSMGA"
>C.1.38. markovGeneratorAnalysis (mga)</A
></H2
><P
>markovGeneratorAnalysis, parameterObject, valueCount, maxAnalysisOrder, parameterObject</P
><P
>Description: Produces values by means of a Markov analysis of values provided by a source Generator ParameterObject; the analysis of these values is used with a dynamic transition order Generator to produce new values. The number of values drawn from the source Generator is specified with the valueCount argument. The maximum order of analysis is specified with the maxAnalysisOrder argument. Markov transition order is specified by a ParameterObject that produces values between 0 and the maximum order available in the Markov transition string. If generated-orders are greater than those available, the largest available transition order will be used. Floating-point order values are treated as probabilistic weightings: for example, a transition of 1.5 offers equal probability of first or second order selection.</P
><P
>Arguments: (1) name, (2) parameterObject {source Generator}, (3) valueCount, (4) maxAnalysisOrder, (5) parameterObject {output order value}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> mga, (ws,e,30,0,0,1), 30, 2, (mv,a{1}b{0}c{2}:{a=10|b=1|c=2},(c,0))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MGA-0"
></A
><P
><B
>Example C-75. markovGeneratorAnalysis Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-mga-0.png"></P
><PRE
CLASS="SCREEN"
>markovGeneratorAnalysis, (waveSine, event, (constant, 30), 0, (constant, 0),
(constant, 1)), 30, 2, (markovValue, a{1}b{0}c{2}:{a=10|b=1|c=2}, (constant,
0))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MGA-1"
></A
><P
><B
>Example C-76. markovGeneratorAnalysis Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-mga-1.png"></P
><PRE
CLASS="SCREEN"
>markovGeneratorAnalysis, (breakPointPower, event, loop,
((0,0.5),(10,1),(15,0)), 2), 15, 2, (basketGen, randomWalk, (0,1,2,2,1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MGA-2"
></A
><P
><B
>Example C-77. markovGeneratorAnalysis Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-mga-2.png"></P
><PRE
CLASS="SCREEN"
>markovGeneratorAnalysis, (basketGen, orderedCyclic,
(0.3,0.3,0.3,0,0.9,0.9,0.6)), 28, 2, (markovValue,
a{1}b{0}c{2}:{a=10|b=1|c=2}, (constant, 0))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSMR"
>C.1.39. maskReject (mr)</A
></H2
><P
>maskReject, boundaryString, parameterObject, parameterObject, parameterObject</P
><P
>Description: Given values produced by two boundary ParameterObjects in parallel, the Generator ParameterObject value is fit outside of these values. The fit is determined by the boundaryString: limit will fix the value at the nearest boundary; wrap will wrap the value through the range defined by the boundaries; reflect will bounce values in the opposite direction through the range defined by the boundaries.</P
><P
>Arguments: (1) name, (2) boundaryString {'limit', 'wrap', 'reflect'}, (3) parameterObject {first boundary}, (4) parameterObject {second boundary}, (5) parameterObject {generator of masked values}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> mr, l, (ws,e,60,0,0.5,0), (wc,e,90,0,0.5,1), (ru,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MR-0"
></A
><P
><B
>Example C-78. maskReject Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-mr-0.png"></P
><PRE
CLASS="SCREEN"
>maskReject, limit, (waveSine, event, (constant, 60), 0, (constant, 0.5),
(constant, 0)), (waveCosine, event, (constant, 90), 0, (constant, 0.5),
(constant, 1)), (randomUniform, (constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MR-1"
></A
><P
><B
>Example C-79. maskReject Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-mr-1.png"></P
><PRE
CLASS="SCREEN"
>maskReject, wrap, (breakPointLinear, event, loop, ((0,0),(90,0.5))),
(breakPointLinear, event, loop, ((0,1),(90,0.5))), (waveSine, event,
(constant, 30), 0, (constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MR-2"
></A
><P
><B
>Example C-80. maskReject Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-mr-2.png"></P
><PRE
CLASS="SCREEN"
>maskReject, reflect, (waveSine, event, (constant, 60), 0.25, (constant, 0.7),
(constant, 1)), (breakPointLinear, event, loop, ((0,0.4),(90,0),(120,0.4))),
(waveSine, event, (constant, 24), 0, (constant, 0), (constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSMS"
>C.1.40. maskScale (ms)</A
></H2
><P
>maskScale, parameterObject, valueCount, min, max, selectionString</P
><P
>Description: Given values produced by two boundary ParameterObjects in parallel, the Generator ParameterObject value is scaled within these values. A collection of values created by the Generator ParameterObject are stored. The resulting list of values is normalized within the unit interval. Values are chosen from this list using the selector specified by the selectionString argument. After selection, this value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) parameterObject {source Generator}, (3) valueCount, (4) min, (5) max, (6) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ms, (lp,100,120,w,oc), 120, (bphc,e,l,((0,0),(120,-3))), 3, oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MS-0"
></A
><P
><B
>Example C-81. maskScale Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ms-0.png"></P
><PRE
CLASS="SCREEN"
>maskScale, (listPrime, 100, 120, width, orderedCyclic), 120,
(breakPointHalfCosine, event, loop, ((0,0),(120,-3))), (constant, 3),
orderedCyclic</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSMV"
>C.1.41. markovValue (mv)</A
></H2
><P
>markovValue, transitionString, parameterObject</P
><P
>Description: Produces values by means of a Markov transition string specification and a dynamic transition order generator. Markov transition order is specified by a ParameterObject that produces values between 0 and the maximum order available in the Markov transition string. If generated-orders are greater than those available, the largest available transition order will be used. Floating-point order values are treated as probabilistic weightings: for example, a transition of 1.5 offers equal probability of first or second order selection.</P
><P
>Arguments: (1) name, (2) transitionString, (3) parameterObject {order value}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> mv, a{.2}b{.5}c{.8}d{0}:{a=5|b=4|c=7|d=1}, (c,0)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MV-0"
></A
><P
><B
>Example C-82. markovValue Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-mv-0.png"></P
><PRE
CLASS="SCREEN"
>markovValue, a{.2}b{.5}c{.8}d{0}:{a=5|b=4|c=7|d=1}, (constant, 0)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-MV-1"
></A
><P
><B
>Example C-83. markovValue Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-mv-1.png"></P
><PRE
CLASS="SCREEN"
>markovValue, a{0}b{.2}c{.4}d{.6}e{.8}f{1}:{a=3|b=6|c=8|d=8|e=5|f=2}a:{b=3}b:{a
=2|c=4}c:{b=3|d=5}d:{a=1|c=4|e=3}e:{d=3|f=2}f:{e=2}a:b:{c=3}b:a:{b=2}b:c:{d=4}
c:b:{a=2|c=1}c:d:{a=1|c=1|e=3}d:a:{b=1}d:c:{b=3|d=1}d:e:{d=1|f=2}e:d:{c=3}e:f:
{e=2}f:e:{d=2}, (breakPointLinear, event, single, ((0,0),(119,2)))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSN"
>C.1.42. noise (n)</A
></H2
><P
>noise, resolution, parameterObject, min, max</P
><P
>Description: Fractional noise (1/fn) Generator, capable of producing states and transitions between 1/f white, pink, brown, and black noise. Resolution is an integer that describes how many generators are used. The gamma argument determines what type of noise is created. All gamma values are treated as negative. A gamma of 0 is white noise; a gamma of 1 is pink noise; a gamma of 2 is brown noise; and anything greater is black noise. Gamma can be controlled by a dynamic ParameterObject. The value produced by the noise generator is scaled within the unit interval. This normalized value is then scaled within the range designated by min and max; min and max may be specified by ParameterObjects.</P
><P
>Arguments: (1) name, (2) resolution, (3) parameterObject {gamma value as string or number}, (4) min, (5) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> n, 100, pink, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-N-0"
></A
><P
><B
>Example C-84. noise Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-n-0.png"></P
><PRE
CLASS="SCREEN"
>noise, 100, (constant, 1), (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-N-1"
></A
><P
><B
>Example C-85. noise Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-n-1.png"></P
><PRE
CLASS="SCREEN"
>noise, 100, (constant, 3), (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-N-2"
></A
><P
><B
>Example C-86. noise Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-n-2.png"></P
><PRE
CLASS="SCREEN"
>noise, 100, (waveTriangle, event, (constant, 120), 0, (constant, 1),
(constant, 3)), (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-N-3"
></A
><P
><B
>Example C-87. noise Demonstration 4</B
></P
><P
><IMG
SRC="images/exPo-n-3.png"></P
><PRE
CLASS="SCREEN"
>noise, 100, (basketGen, randomChoice, (3,3,3,3,2,1)), (constant, 0),
(constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSOA"
>C.1.43. operatorAdd (oa)</A
></H2
><P
>operatorAdd, parameterObject, parameterObject</P
><P
>Description: Adds the value of the first ParameterObject to the second ParameterObject.</P
><P
>Arguments: (1) name, (2) parameterObject {first value}, (3) parameterObject {second value}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> oa, (ws,e,30,0,0,1), (a,0.5,(c,0.03))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-OA-0"
></A
><P
><B
>Example C-88. operatorAdd Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-oa-0.png"></P
><PRE
CLASS="SCREEN"
>operatorAdd, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1)), (accumulator, 0.5, (constant, 0.03))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSOC"
>C.1.44. operatorCongruence (oc)</A
></H2
><P
>operatorCongruence, parameterObject, parameterObject</P
><P
>Description: Produces the congruent value of the first ParameterObject object as the modulus of the second ParameterObject. A modulus by zero, if encountered, returns the value of the first ParameterObject unaltered.</P
><P
>Arguments: (1) name, (2) parameterObject {first value}, (3) parameterObject {second value}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> oc, (ws,e,30,0,0,1), (a,0.5,(c,0.03))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-OC-0"
></A
><P
><B
>Example C-89. operatorCongruence Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-oc-0.png"></P
><PRE
CLASS="SCREEN"
>operatorCongruence, (waveSine, event, (constant, 30), 0, (constant, 0),
(constant, 1)), (accumulator, 0.5, (constant, 0.03))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSOD"
>C.1.45. operatorDivide (od)</A
></H2
><P
>operatorDivide, parameterObject, parameterObject</P
><P
>Description: Divides the value of the first ParameterObject object by the second ParameterObject. Division by zero, if encountered, returns the value of the first Generator.</P
><P
>Arguments: (1) name, (2) parameterObject {first value}, (3) parameterObject {second value}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> od, (ws,e,30,0,0,1), (a,0.5,(c,0.03))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-OD-0"
></A
><P
><B
>Example C-90. operatorDivide Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-od-0.png"></P
><PRE
CLASS="SCREEN"
>operatorDivide, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1)), (accumulator, 0.5, (constant, 0.03))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSOM"
>C.1.46. operatorMultiply (om)</A
></H2
><P
>operatorMultiply, parameterObject, parameterObject</P
><P
>Description: Multiplies the value of the first ParameterObject by the second.</P
><P
>Arguments: (1) name, (2) parameterObject {first value}, (3) parameterObject {second value}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> om, (ws,e,30,0,0,1), (a,0.5,(c,0.03))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-OM-0"
></A
><P
><B
>Example C-91. operatorMultiply Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-om-0.png"></P
><PRE
CLASS="SCREEN"
>operatorMultiply, (waveSine, event, (constant, 30), 0, (constant, 0),
(constant, 1)), (accumulator, 0.5, (constant, 0.03))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSOO"
>C.1.47. oneOver (oo)</A
></H2
><P
>oneOver, parameterObject</P
><P
>Description: Produces the value of one over the value of a ParameterObject. Divisors of zero are resolved to 1.</P
><P
>Arguments: (1) name, (2) parameterObject {value}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> oo, (ws,e,30,0,0.5,2)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-OO-0"
></A
><P
><B
>Example C-92. oneOver Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-oo-0.png"></P
><PRE
CLASS="SCREEN"
>oneOver, (waveSine, event, (constant, 30), 0, (constant, 0.5), (constant, 2))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSOP"
>C.1.48. operatorPower (op)</A
></H2
><P
>operatorPower, parameterObject, parameterObject</P
><P
>Description: Raises the value of the first ParameterObject to the power of the second ParameterObject.</P
><P
>Arguments: (1) name, (2) parameterObject {first value}, (3) parameterObject {second value}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> op, (ws,e,30,0,0,1), (a,0.5,(c,0.03))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-OP-0"
></A
><P
><B
>Example C-93. operatorPower Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-op-0.png"></P
><PRE
CLASS="SCREEN"
>operatorPower, (waveSine, event, (constant, 30), 0, (constant, 0), (constant,
1)), (accumulator, 0.5, (constant, 0.03))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSOS"
>C.1.49. operatorSubtract (os)</A
></H2
><P
>operatorSubtract, parameterObject, parameterObject</P
><P
>Description: Subtracts the value of the second ParameterObject from the first ParameterObject.</P
><P
>Arguments: (1) name, (2) parameterObject {first value}, (3) parameterObject {second value}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> os, (ws,e,30,0,0,1), (a,0.5,(c,0.03))</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-OS-0"
></A
><P
><B
>Example C-94. operatorSubtract Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-os-0.png"></P
><PRE
CLASS="SCREEN"
>operatorSubtract, (waveSine, event, (constant, 30), 0, (constant, 0),
(constant, 1)), (accumulator, 0.5, (constant, 0.03))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSPR"
>C.1.50. pathRead (pr)</A
></H2
><P
>pathRead, pathFormatString</P
><P
>Description: Extracts pitch information from the current Multiset within a Texture's Path. Data can be presented in a variety of formats including representations of the Multiset as 'forte', 'mason', or data on the current active pitch as 'fq' (frequency), 'ps' (psReal), 'midi' (midi pitch values), 'pch' (Csound pitch octave format), or 'name' (alphabetic note names).</P
><P
>Arguments: (1) name, (2) pathFormatString {'forte', 'mason', 'fq', 'ps', 'midi', 'pch', 'name'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> pr, forte</CODE
></P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSQ"
>C.1.51. quantize (q)</A
></H2
><P
>quantize, parameterObject, parameterObject, stepCount, parameterObject, parameterObject</P
><P
>Description: Dynamic grid size and grid position quantization. For each value provided by the source ParameterObject, a grid is created. This grid is made by taking the number of steps specified by the stepCount integer from the step width Generator ParameterObject. The absolute value of these widths are used to create a grid above and below the reference value, with grid steps taken in order. The value provided by the source ParameterObject is found within this grid, and pulled to the nearest grid line. The degree of pull can be a dynamically allocated with a unit-interval quantize pull ParameterObject. A value of 1 forces all values to snap to the grid; a value of .5 will cause a weighted attraction.</P
><P
>Arguments: (1) name, (2) parameterObject {grid reference value Generator}, (3) parameterObject {step width Generator}, (4) stepCount, (5) parameterObject {unit interval measure of quantize pull}, (6) parameterObject {source Generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> q, (c,0), (c,0.25), 1, (c,1), (ru,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-Q-0"
></A
><P
><B
>Example C-95. quantize Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-q-0.png"></P
><PRE
CLASS="SCREEN"
>quantize, (constant, 0), (constant, 0.25), 1, (constant, 1), (randomUniform,
(constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-Q-1"
></A
><P
><B
>Example C-96. quantize Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-q-1.png"></P
><PRE
CLASS="SCREEN"
>quantize, (constant, 0), (basketGen, orderedCyclic, (0.05,0.2)), 2,
(breakPointLinear, event, loop, ((0,1),(120,0.5))), (wavePowerUp, event,
(constant, 20), -2, 0, (constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-Q-2"
></A
><P
><B
>Example C-97. quantize Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-q-2.png"></P
><PRE
CLASS="SCREEN"
>quantize, (waveSine, event, (constant, 60), 0, (constant, 1.25), (constant,
1.75)), (cyclicGen, upDown, 0.3, 0.9, 0.006), 1, (breakPointLinear, event,
loop, ((0,1),(40,1),(120,0.25))), (randomUniform, (constant, 0), (constant,
1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRB"
>C.1.52. randomBeta (rb)</A
></H2
><P
>randomBeta, alpha, beta, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within a Beta distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Alpha and beta values should be between 0 and 1; small alpha and beta values (such as 0.1) increase the probability of events at the boundaries.</P
><P
>Arguments: (1) name, (2) alpha, (3) beta, (4) min, (5) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> rb, 0.5, 0.5, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RB-0"
></A
><P
><B
>Example C-98. randomBeta Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-rb-0.png"></P
><PRE
CLASS="SCREEN"
>randomBeta, 0.5, 0.5, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RB-1"
></A
><P
><B
>Example C-99. randomBeta Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-rb-1.png"></P
><PRE
CLASS="SCREEN"
>randomBeta, 0.2, 0.2, (waveSine, event, (constant, 60), 0, (constant, 0),
(constant, 0.5)), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRBE"
>C.1.53. randomBilateralExponential (rbe)</A
></H2
><P
>randomBilateralExponential, lambda, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within a bilateral exponential distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) lambda, (3) min, (4) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> rbe, 0.5, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RBE-0"
></A
><P
><B
>Example C-100. randomBilateralExponential Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-rbe-0.png"></P
><PRE
CLASS="SCREEN"
>randomBilateralExponential, 0.5, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RBE-1"
></A
><P
><B
>Example C-101. randomBilateralExponential Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-rbe-1.png"></P
><PRE
CLASS="SCREEN"
>randomBilateralExponential, 10.0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RBE-2"
></A
><P
><B
>Example C-102. randomBilateralExponential Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-rbe-2.png"></P
><PRE
CLASS="SCREEN"
>randomBilateralExponential, 20.0, (constant, 0), (breakPointPower, event,
loop, ((0,1),(40,0.6),(80,1)), 2)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRC"
>C.1.54. randomCauchy (rc)</A
></H2
><P
>randomCauchy, alpha, mu, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within a Cauchy distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: suggested values: alpha = 0.1, mu = 0.5.</P
><P
>Arguments: (1) name, (2) alpha, (3) mu, (4) min, (5) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> rc, 0.1, 0.5, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RC-0"
></A
><P
><B
>Example C-103. randomCauchy Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-rc-0.png"></P
><PRE
CLASS="SCREEN"
>randomCauchy, 0.1, 0.5, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RC-1"
></A
><P
><B
>Example C-104. randomCauchy Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-rc-1.png"></P
><PRE
CLASS="SCREEN"
>randomCauchy, 0.1, 0.1, (constant, 1), (breakPointPower, event, loop,
((0,0),(120,0.3)), 2)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RC-2"
></A
><P
><B
>Example C-105. randomCauchy Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-rc-2.png"></P
><PRE
CLASS="SCREEN"
>randomCauchy, 0.1, 0.9, (constant, 0), (breakPointPower, event, loop,
((0,1),(120,0.3)), 2)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRE"
>C.1.55. randomExponential (re)</A
></H2
><P
>randomExponential, lambda, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within an exponential distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Lambda values should be greater than 0. Lambda values control the spread of values; larger values (such as 10) increase the probability of events near the minimum.</P
><P
>Arguments: (1) name, (2) lambda, (3) min, (4) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> re, 0.5, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RE-0"
></A
><P
><B
>Example C-106. randomExponential Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-re-0.png"></P
><PRE
CLASS="SCREEN"
>randomExponential, 0.5, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RE-1"
></A
><P
><B
>Example C-107. randomExponential Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-re-1.png"></P
><PRE
CLASS="SCREEN"
>randomExponential, 100.0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RE-2"
></A
><P
><B
>Example C-108. randomExponential Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-re-2.png"></P
><PRE
CLASS="SCREEN"
>randomExponential, 10.0, (breakPointLinear, event, loop, ((0,0),(120,0.5))),
(breakPointLinear, event, loop, ((0,0.5),(120,1)))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRG"
>C.1.56. randomGauss (rg)</A
></H2
><P
>randomGauss, mu, sigma, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within a Gaussian distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: suggested values: mu = 0.5, sigma = 0.1.</P
><P
>Arguments: (1) name, (2) mu, (3) sigma, (4) min, (5) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> rg, 0.5, 0.1, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RG-0"
></A
><P
><B
>Example C-109. randomGauss Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-rg-0.png"></P
><PRE
CLASS="SCREEN"
>randomGauss, 0.5, 0.1, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RG-1"
></A
><P
><B
>Example C-110. randomGauss Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-rg-1.png"></P
><PRE
CLASS="SCREEN"
>randomGauss, 0.5, 0.5, (waveSine, event, (constant, 120), 0.25, (constant, 0),
(constant, 0.5)), (waveSine, event, (constant, 120), 0.5, (constant, 1),
(constant, 0.5))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRIE"
>C.1.57. randomInverseExponential (rie)</A
></H2
><P
>randomInverseExponential, lambda, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within an inverse exponential distribution. Lambda values control the spread of values; larger values (such as 10) increase the probability of events near the maximum. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) lambda, (3) min, (4) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> rie, 0.5, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RIE-0"
></A
><P
><B
>Example C-111. randomInverseExponential Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-rie-0.png"></P
><PRE
CLASS="SCREEN"
>randomInverseExponential, 0.5, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RIE-1"
></A
><P
><B
>Example C-112. randomInverseExponential Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-rie-1.png"></P
><PRE
CLASS="SCREEN"
>randomInverseExponential, 100.0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RIE-2"
></A
><P
><B
>Example C-113. randomInverseExponential Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-rie-2.png"></P
><PRE
CLASS="SCREEN"
>randomInverseExponential, 10.0, (breakPointLinear, event, loop,
((0,0.5),(120,0))), (breakPointLinear, event, loop, ((0,1),(120,0.5)))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRIL"
>C.1.58. randomInverseLinear (ril)</A
></H2
><P
>randomInverseLinear, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within a linearly increasing distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: values are distributed more strongly toward max.</P
><P
>Arguments: (1) name, (2) min, (3) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ril, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RIL-0"
></A
><P
><B
>Example C-114. randomInverseLinear Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ril-0.png"></P
><PRE
CLASS="SCREEN"
>randomInverseLinear, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RIL-1"
></A
><P
><B
>Example C-115. randomInverseLinear Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-ril-1.png"></P
><PRE
CLASS="SCREEN"
>randomInverseLinear, (accumulator, 0, (constant, 0.01)), (accumulator, 0.2,
(constant, 0.03))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRIT"
>C.1.59. randomInverseTriangular (rit)</A
></H2
><P
>randomInverseTriangular, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within an inverse triangular distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: values are distributed more strongly away from the mean of min and max.</P
><P
>Arguments: (1) name, (2) min, (3) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> rit, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RIT-0"
></A
><P
><B
>Example C-116. randomInverseTriangular Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-rit-0.png"></P
><PRE
CLASS="SCREEN"
>randomInverseTriangular, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RIT-1"
></A
><P
><B
>Example C-117. randomInverseTriangular Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-rit-1.png"></P
><PRE
CLASS="SCREEN"
>randomInverseTriangular, (constant, 0), (wavePowerDown, event, (constant, 40),
0, 2, (constant, 1), (constant, 0.1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRL"
>C.1.60. randomLinear (rl)</A
></H2
><P
>randomLinear, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within a linearly decreasing distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: values are distributed more strongly toward min.</P
><P
>Arguments: (1) name, (2) min, (3) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> rl, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RL-0"
></A
><P
><B
>Example C-118. randomLinear Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-rl-0.png"></P
><PRE
CLASS="SCREEN"
>randomLinear, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RL-1"
></A
><P
><B
>Example C-119. randomLinear Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-rl-1.png"></P
><PRE
CLASS="SCREEN"
>randomLinear, (accumulator, 0.5, (constant, -0.01)), (accumulator, 0.5,
(constant, 0.01))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRT"
>C.1.61. randomTriangular (rt)</A
></H2
><P
>randomTriangular, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within a triangular distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: values are distributed more strongly toward the mean of min and max.</P
><P
>Arguments: (1) name, (2) min, (3) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> rt, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RT-0"
></A
><P
><B
>Example C-120. randomTriangular Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-rt-0.png"></P
><PRE
CLASS="SCREEN"
>randomTriangular, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RT-1"
></A
><P
><B
>Example C-121. randomTriangular Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-rt-1.png"></P
><PRE
CLASS="SCREEN"
>randomTriangular, (constant, 0), (wavePowerDown, event, (constant, 90), 0,
-1.5, (constant, 1), (constant, 0))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRU"
>C.1.62. randomUniform (ru)</A
></H2
><P
>randomUniform, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within an uniform distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: values are evenly distributed between min and max.</P
><P
>Arguments: (1) name, (2) min, (3) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ru, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RU-0"
></A
><P
><B
>Example C-122. randomUniform Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ru-0.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RU-1"
></A
><P
><B
>Example C-123. randomUniform Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-ru-1.png"></P
><PRE
CLASS="SCREEN"
>randomUniform, (waveSine, event, (constant, 60), 0, (constant, 0.5),
(constant, 0)), (waveSine, event, (constant, 40), 0.25, (constant, 1),
(constant, 0.5))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSRW"
>C.1.63. randomWeibull (rw)</A
></H2
><P
>randomWeibull, alpha, beta, min, max</P
><P
>Description: Provides random numbers between 0 and 1 within a Weibull distribution. This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. Note: suggested values: alpha = 0.5, beta = 2.0.</P
><P
>Arguments: (1) name, (2) alpha, (3) beta, (4) min, (5) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> rw, 0.5, 2.0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RW-0"
></A
><P
><B
>Example C-124. randomWeibull Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-rw-0.png"></P
><PRE
CLASS="SCREEN"
>randomWeibull, 0.5, 2.0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RW-1"
></A
><P
><B
>Example C-125. randomWeibull Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-rw-1.png"></P
><PRE
CLASS="SCREEN"
>randomWeibull, 0.9, 0.1, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-RW-2"
></A
><P
><B
>Example C-126. randomWeibull Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-rw-2.png"></P
><PRE
CLASS="SCREEN"
>randomWeibull, 0.1, 0.9, (waveSine, event, (constant, 240), 0, (constant, 0),
(constant, 0.4)), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSSAH"
>C.1.64. sampleAndHold (sah)</A
></H2
><P
>sampleAndHold, comparison, parameterObject, parameterObject, parameterObject</P
><P
>Description: A sample and hold generator. Produces, and continues to produce, a value drawn from the source Generator until the trigger Generator produces a value equal to the threshold Generator. All values are converted to floating-point values.</P
><P
>Arguments: (1) name, (2) comparison, (3) parameterObject {source Generator}, (4) parameterObject {trigger Generator}, (5) parameterObject {trigger threshold Generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> sah, gt, (ru,0,1), (wsd,e,10,0,0,1), (c,0.5)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-SAH-0"
></A
><P
><B
>Example C-127. sampleAndHold Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-sah-0.png"></P
><PRE
CLASS="SCREEN"
>sampleAndHold, greaterThan, (randomUniform, (constant, 0), (constant, 1)),
(waveSawDown, event, (constant, 10), 0, (constant, 0), (constant, 1)),
(constant, 0.5)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-SAH-1"
></A
><P
><B
>Example C-128. sampleAndHold Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-sah-1.png"></P
><PRE
CLASS="SCREEN"
>sampleAndHold, equal, (randomUniform, (constant, 0), (constant, 1)),
(wavePulse, event, (constant, 20), 0, (constant, 0), (constant, 1)),
(constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-SAH-2"
></A
><P
><B
>Example C-129. sampleAndHold Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-sah-2.png"></P
><PRE
CLASS="SCREEN"
>sampleAndHold, equal, (randomUniform, (constant, 0), (constant, 1)),
(waveSawDown, event, (constant, 5), 0, (constant, 0), (constant, 1)),
(constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSSF"
>C.1.65. sieveFunnel (sf)</A
></H2
><P
>sieveFunnel, logicalString, length, min, max, parameterObject</P
><P
>Description: Using the user-supplied logical string, this Generator produces a Xenakis sieve segment within the z range of zero to one less than the supplied length. Values produced with the fill value Generator ParameterObject are funneled through this sieve: given a fill value, the nearest sieve value is selected and returned. Note: the fill value ParameterObject min and max should be set to 0 and 1.</P
><P
>Arguments: (1) name, (2) logicalString, (3) length, (4) min, (5) max, (6) parameterObject {fill value generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> sf, 3|4, 24, 0, 1, (ru,0,1)</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-SF-0"
></A
><P
><B
>Example C-130. sieveFunnel Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-sf-0.png"></P
><PRE
CLASS="SCREEN"
>sieveFunnel, 3@0|4@0, 24, (constant, 0), (constant, 1), (randomUniform,
(constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-SF-1"
></A
><P
><B
>Example C-131. sieveFunnel Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-sf-1.png"></P
><PRE
CLASS="SCREEN"
>sieveFunnel, 5@0|13@0, 14, (waveSine, event, (constant, 60), 0, (constant, 0),
(constant, 0.25)), (waveSine, event, (constant, 60), 0, (constant, 0.75),
(constant, 1)), (randomUniform, (constant, 0), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-SF-2"
></A
><P
><B
>Example C-132. sieveFunnel Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-sf-2.png"></P
><PRE
CLASS="SCREEN"
>sieveFunnel, 13@5|13@7|13@11, 20, (accumulator, 0, (waveSine, event,
(constant, 30), 1, (constant, -0.75), (constant, 1.75))), (breakPointPower,
event, loop, ((0,100),(160,20)), 2), (randomBeta, 0.4, 0.3, (constant, 0),
(constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSSL"
>C.1.66. sieveList (sl)</A
></H2
><P
>sieveList, logicalString, zMin, zMax, format, selectionString</P
><P
>Description: Produces a Xenakis sieve as a raw, variable format sieve segment list. A z is defined by the range of integers from zMin to zMax. Depending on format type, the resulting segment can be given as an integer, width, unit, or binary segment. Values are chosen from this list using the selector specified by the selectionString argument.</P
><P
>Arguments: (1) name, (2) logicalString, (3) zMin, (4) zMax, (5) format {'integer', 'width', 'unit', 'binary'}, (6) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> sl, 3|4, -12, 12, int, oc</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-SL-0"
></A
><P
><B
>Example C-133. sieveList Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-sl-0.png"></P
><PRE
CLASS="SCREEN"
>sieveList, 3@0|4@0, -12, 12, integer, orderedCyclic</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSSS"
>C.1.67. sampleSelect (ss)</A
></H2
><P
>sampleSelect, fileNameList, selectionString</P
><P
>Description: Given a list of file names (fileNameList), this Generator provides a complete file path to the file found within either the athenaCL/audio or the user-selected audio directory. Values are chosen from this list using the selector specified by the selectionString argument.</P
><P
>Arguments: (1) name, (2) fileNameList, (3) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ss, (), rc</CODE
></P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSTF"
>C.1.68. typeFormat (tf)</A
></H2
><P
>typeFormat, typeFormatString, parameterObject</P
><P
>Description: Convert the output of any ParameterObject into a different type or display format.</P
><P
>Arguments: (1) name, (2) typeFormatString {'string', 'stringQuote'}, (3) parameterObject {generator}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> tf, sq, (bg,rc,(1,3,4,7,-11))</CODE
></P
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSVP"
>C.1.69. valuePrime (vp)</A
></H2
><P
>valuePrime, start, length, min, max, selectionString</P
><P
>Description: Produces a segment of prime (pseudoprime) integers defined by a positive or negative start value and a length. The resulting list of values is normalized within the unit interval. Values are chosen from this list using the selector specified by the selectionString argument. After selection, this value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) start, (3) length, (4) min, (5) max, (6) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> vp, 2, 50, 0, 1, oo</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-VP-0"
></A
><P
><B
>Example C-134. valuePrime Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-vp-0.png"></P
><PRE
CLASS="SCREEN"
>valuePrime, 2, 50, (constant, 0), (constant, 1), orderedOscillate</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-VP-1"
></A
><P
><B
>Example C-135. valuePrime Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-vp-1.png"></P
><PRE
CLASS="SCREEN"
>valuePrime, 100, 20, (breakPointHalfCosine, event, loop, ((0,0.5),(120,1))),
(constant, 1), randomPermutate</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSVS"
>C.1.70. valueSieve (vs)</A
></H2
><P
>valueSieve, logicalString, length, min, max, selectionString</P
><P
>Description: Using the user-supplied logical string, this Generator produces a Xenakis sieve segment within the z range of zero to one less than the supplied length. The resulting list of values is normalized within the unit interval. Values are chosen from this list using the selector specified by the selectionString argument. After selection, this value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects.</P
><P
>Arguments: (1) name, (2) logicalString, (3) length, (4) min, (5) max, (6) selectionString {'randomChoice', 'randomWalk', 'randomPermutate', 'orderedCyclic', 'orderedCyclicRetrograde', 'orderedOscillate'}</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> vs, 3&#38;19|4&#38;13@11, 360, 0, 1, oo</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-VS-0"
></A
><P
><B
>Example C-136. valueSieve Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-vs-0.png"></P
><PRE
CLASS="SCREEN"
>valueSieve, 3@0&#38;19@0|4@0&#38;13@11, 360, (constant, 0), (constant, 1),
orderedOscillate</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-VS-1"
></A
><P
><B
>Example C-137. valueSieve Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-vs-1.png"></P
><PRE
CLASS="SCREEN"
>valueSieve, 3@0&#38;19@0|4@0&#38;13@11|5@2&#38;15@2, 120, (constant, 0), (constant, 1),
randomWalk</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-VS-2"
></A
><P
><B
>Example C-138. valueSieve Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-vs-2.png"></P
><PRE
CLASS="SCREEN"
>valueSieve, 3@0&#38;19@0|4@0&#38;13@11, 240, (breakPointPower, event, single,
((0,0),(80,48),(120,30)), -1.25), (breakPointPower, event, single,
((0,100),(80,52),(120,100)), 1.25), orderedCyclic</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-VS-3"
></A
><P
><B
>Example C-139. valueSieve Demonstration 4</B
></P
><P
><IMG
SRC="images/exPo-vs-3.png"></P
><PRE
CLASS="SCREEN"
>valueSieve, 3@0&#38;19@0|4@0&#38;13@11, 120, (breakPointPower, event, single,
((0,0),(80,48),(120,30)), -1.25), (breakPointPower, event, single,
((0,100),(80,52),(120,100)), 1.25), randomPermutate</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWC"
>C.1.71. waveCosine (wc)</A
></H2
><P
>waveCosine, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides cosinusoid oscillation between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> wc, e, 30, 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WC-0"
></A
><P
><B
>Example C-140. waveCosine Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-wc-0.png"></P
><PRE
CLASS="SCREEN"
>waveCosine, event, (constant, 30), 0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WC-1"
></A
><P
><B
>Example C-141. waveCosine Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-wc-1.png"></P
><PRE
CLASS="SCREEN"
>waveCosine, event, (breakPointLinear, event, loop, ((0,30),(120,15))), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WC-2"
></A
><P
><B
>Example C-142. waveCosine Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-wc-2.png"></P
><PRE
CLASS="SCREEN"
>waveCosine, event, (constant, 40), 0, (wavePulse, event, (constant, 20), 0,
(constant, 1), (constant, 0.5)), (accumulator, 0, (constant, 0.01))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWHPC"
>C.1.72. waveHalfPeriodCosine (whpc)</A
></H2
><P
>waveHalfPeriodCosine, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides half-period cosinusoid oscillation between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the half-period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Half-period oscillators update seconds/event per cycle only once per half-period, permitting smooth transitons between diverse half-period segments. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> whpc, e, (bg,rc,(10,20,30)), 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPC-0"
></A
><P
><B
>Example C-143. waveHalfPeriodCosine Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-whpc-0.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodCosine, event, (basketGen, randomChoice, (10,20,30)), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPC-1"
></A
><P
><B
>Example C-144. waveHalfPeriodCosine Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-whpc-1.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodCosine, event, (breakPointLinear, event, loop,
((0,30),(120,15))), 0, (constant, 0), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWHPP"
>C.1.73. waveHalfPeriodPulse (whpp)</A
></H2
><P
>waveHalfPeriodPulse, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides half-period pulse (square) wave oscillation between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the half-period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Half-period oscillators update seconds/event per cycle only once per half-period, permitting smooth transitons between diverse half-period segments. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> whpp, e, (bg,rc,(10,20,30)), 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPP-0"
></A
><P
><B
>Example C-145. waveHalfPeriodPulse Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-whpp-0.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodPulse, event, (basketGen, randomChoice, (10,20,30)), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPP-1"
></A
><P
><B
>Example C-146. waveHalfPeriodPulse Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-whpp-1.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodPulse, event, (breakPointLinear, event, loop,
((0,30),(120,15))), 0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPP-2"
></A
><P
><B
>Example C-147. waveHalfPeriodPulse Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-whpp-2.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodPulse, event, (constant, 10), 0, (accumulator, 0, (waveSine,
event, (constant, 30), 0.75, (constant, -0.01), (constant, 0.03))), (constant,
0.5)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPP-3"
></A
><P
><B
>Example C-148. waveHalfPeriodPulse Demonstration 4</B
></P
><P
><IMG
SRC="images/exPo-whpp-3.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodPulse, event, (basketGen, randomChoice, (15,10,5,8,2)), 0,
(constant, 0), (lineSegment, (constant, 100), (constant, 0.3), (constant, 1))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWHPS"
>C.1.74. waveHalfPeriodSine (whps)</A
></H2
><P
>waveHalfPeriodSine, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides half-period sinusoid oscillation between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the half-period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Half-period oscillators update seconds/event per cycle only once per half-period, permitting smooth transitons between diverse half-period segments. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> whps, e, (bg,rc,(10,20,30)), 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPS-0"
></A
><P
><B
>Example C-149. waveHalfPeriodSine Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-whps-0.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodSine, event, (basketGen, randomChoice, (10,20,30)), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPS-1"
></A
><P
><B
>Example C-150. waveHalfPeriodSine Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-whps-1.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodSine, event, (breakPointLinear, event, loop, ((0,30),(120,15))),
0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPS-2"
></A
><P
><B
>Example C-151. waveHalfPeriodSine Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-whps-2.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodSine, event, (constant, 20), 0, (constant, 0), (waveSine, event,
(constant, 60), 0.25, (constant, 0.25), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPS-3"
></A
><P
><B
>Example C-152. waveHalfPeriodSine Demonstration 4</B
></P
><P
><IMG
SRC="images/exPo-whps-3.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodSine, event, (basketGen, orderedOscillate, (19,19,20,20,20)), 0,
(constant, 0), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWHPT"
>C.1.75. waveHalfPeriodTriangle (whpt)</A
></H2
><P
>waveHalfPeriodTriangle, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides half-period triangle wave oscillation between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the half-period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Half-period oscillators update seconds/event per cycle only once per half-period, permitting smooth transitons between diverse half-period segments. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> whpt, e, (bg,rc,(10,20,30)), 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPT-0"
></A
><P
><B
>Example C-153. waveHalfPeriodTriangle Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-whpt-0.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodTriangle, event, (basketGen, randomChoice, (10,20,30)), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WHPT-1"
></A
><P
><B
>Example C-154. waveHalfPeriodTriangle Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-whpt-1.png"></P
><PRE
CLASS="SCREEN"
>waveHalfPeriodTriangle, event, (breakPointLinear, event, loop,
((0,30),(120,15))), 0, (constant, 0), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWP"
>C.1.76. wavePulse (wp)</A
></H2
><P
>wavePulse, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides a pulse (square) wave between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> wp, e, 30, 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WP-0"
></A
><P
><B
>Example C-155. wavePulse Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-wp-0.png"></P
><PRE
CLASS="SCREEN"
>wavePulse, event, (constant, 30), 0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WP-1"
></A
><P
><B
>Example C-156. wavePulse Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-wp-1.png"></P
><PRE
CLASS="SCREEN"
>wavePulse, event, (breakPointLinear, event, loop, ((0,30),(120,15))), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WP-2"
></A
><P
><B
>Example C-157. wavePulse Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-wp-2.png"></P
><PRE
CLASS="SCREEN"
>wavePulse, event, (constant, 10), 0, (accumulator, 0, (waveSine, event,
(constant, 30), 0.75, (constant, -0.01), (constant, 0.03))), (constant, 0.5)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWPD"
>C.1.77. wavePowerDown (wpd)</A
></H2
><P
>wavePowerDown, stepString, parameterObject, phase, exponent, min, max</P
><P
>Description: Provides a power down wave between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) exponent, (6) min, (7) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> wpd, e, 30, 0, 2, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WPD-0"
></A
><P
><B
>Example C-158. wavePowerDown Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-wpd-0.png"></P
><PRE
CLASS="SCREEN"
>wavePowerDown, event, (constant, 30), 0, 2, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WPD-1"
></A
><P
><B
>Example C-159. wavePowerDown Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-wpd-1.png"></P
><PRE
CLASS="SCREEN"
>wavePowerDown, event, (breakPointLinear, event, loop, ((0,30),(120,15))), 0,
2, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WPD-2"
></A
><P
><B
>Example C-160. wavePowerDown Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-wpd-2.png"></P
><PRE
CLASS="SCREEN"
>wavePowerDown, event, (constant, 40), 0, -1.5, (wavePulse, event, (constant,
30), 0, (constant, 0), (constant, 0.2)), (wavePulse, event, (constant, 20),
0.25, (constant, 1), (constant, 0.8))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWPU"
>C.1.78. wavePowerUp (wpu)</A
></H2
><P
>wavePowerUp, stepString, parameterObject, phase, exponent, min, max</P
><P
>Description: Provides a power up wave between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) exponent, (6) min, (7) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> wpu, e, 30, 0, 2, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WPU-0"
></A
><P
><B
>Example C-161. wavePowerUp Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-wpu-0.png"></P
><PRE
CLASS="SCREEN"
>wavePowerUp, event, (constant, 30), 0, 2, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WPU-1"
></A
><P
><B
>Example C-162. wavePowerUp Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-wpu-1.png"></P
><PRE
CLASS="SCREEN"
>wavePowerUp, event, (breakPointLinear, event, loop, ((0,30),(120,15))), 0, 2,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WPU-2"
></A
><P
><B
>Example C-163. wavePowerUp Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-wpu-2.png"></P
><PRE
CLASS="SCREEN"
>wavePowerUp, event, (constant, 40), 0, 2, (randomUniform, (constant, 0),
(accumulator, 0, (constant, 0.005))), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWS"
>C.1.79. waveSine (ws)</A
></H2
><P
>waveSine, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides sinusoid oscillation between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> ws, e, 30, 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WS-0"
></A
><P
><B
>Example C-164. waveSine Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-ws-0.png"></P
><PRE
CLASS="SCREEN"
>waveSine, event, (constant, 30), 0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WS-1"
></A
><P
><B
>Example C-165. waveSine Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-ws-1.png"></P
><PRE
CLASS="SCREEN"
>waveSine, event, (breakPointLinear, event, loop, ((0,30),(120,15))), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WS-2"
></A
><P
><B
>Example C-166. waveSine Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-ws-2.png"></P
><PRE
CLASS="SCREEN"
>waveSine, event, (constant, 20), 0, (constant, 0), (waveSine, event,
(constant, 60), 0.25, (constant, 0.25), (constant, 1))</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WS-3"
></A
><P
><B
>Example C-167. waveSine Demonstration 4</B
></P
><P
><IMG
SRC="images/exPo-ws-3.png"></P
><PRE
CLASS="SCREEN"
>waveSine, event, (basketGen, orderedOscillate, (19,19,20,20,20)), 0,
(constant, 0), (constant, 1)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWSD"
>C.1.80. waveSawDown (wsd)</A
></H2
><P
>waveSawDown, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides a saw-down wave between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> wsd, e, 30, 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WSD-0"
></A
><P
><B
>Example C-168. waveSawDown Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-wsd-0.png"></P
><PRE
CLASS="SCREEN"
>waveSawDown, event, (constant, 30), 0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WSD-1"
></A
><P
><B
>Example C-169. waveSawDown Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-wsd-1.png"></P
><PRE
CLASS="SCREEN"
>waveSawDown, event, (breakPointLinear, event, loop, ((0,30),(120,15))), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WSD-2"
></A
><P
><B
>Example C-170. waveSawDown Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-wsd-2.png"></P
><PRE
CLASS="SCREEN"
>waveSawDown, event, (constant, 20), 0, (wavePowerUp, event, (constant, 120),
0, 1.5, (constant, 0.5), (constant, 1)), (wavePowerDown, event, (constant,
40), 0.25, 1.5, (constant, 0.5), (constant, 0))</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWSU"
>C.1.81. waveSawUp (wsu)</A
></H2
><P
>waveSawUp, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides a saw-up wave between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> wsu, e, 30, 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WSU-0"
></A
><P
><B
>Example C-171. waveSawUp Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-wsu-0.png"></P
><PRE
CLASS="SCREEN"
>waveSawUp, event, (constant, 30), 0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WSU-1"
></A
><P
><B
>Example C-172. waveSawUp Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-wsu-1.png"></P
><PRE
CLASS="SCREEN"
>waveSawUp, event, (breakPointLinear, event, loop, ((0,30),(120,15))), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WSU-2"
></A
><P
><B
>Example C-173. waveSawUp Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-wsu-2.png"></P
><PRE
CLASS="SCREEN"
>waveSawUp, event, (constant, 20), 0, (wavePowerDown, event, (constant, 40), 0,
1.5, (constant, 1), (constant, 0.5)), (constant, 0)</PRE
></DIV
></DIV
><DIV
CLASS="SECT2"
><H2
CLASS="SECT2"
><A
NAME="PMTRREFGENPMTROBJSWT"
>C.1.82. waveTriangle (wt)</A
></H2
><P
>waveTriangle, stepString, parameterObject, phase, min, max</P
><P
>Description: Provides a triangle wave between 0 and 1 at a rate given in either time or events per period. Depending on the stepString argument, the period rate (frequency) may be specified in spc (seconds per cycle) or eps (events per cycle). This value is scaled within the range designated by min and max; min and max may be specified with ParameterObjects. The phase argument is specified as a value between 0 and 1. Note: conventional cycles per second (cps or Hz) are not used for frequency.</P
><P
>Arguments: (1) name, (2) stepString {'event', 'time'}, (3) parameterObject {secPerCycle}, (4) phase, (5) min, (6) max</P
><P
>Sample Arguments:<CODE
CLASS="FUNCTION"
> wt, e, 30, 0, 0, 1</CODE
></P
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WT-0"
></A
><P
><B
>Example C-174. waveTriangle Demonstration 1</B
></P
><P
><IMG
SRC="images/exPo-wt-0.png"></P
><PRE
CLASS="SCREEN"
>waveTriangle, event, (constant, 30), 0, (constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WT-1"
></A
><P
><B
>Example C-175. waveTriangle Demonstration 2</B
></P
><P
><IMG
SRC="images/exPo-wt-1.png"></P
><PRE
CLASS="SCREEN"
>waveTriangle, event, (breakPointLinear, event, loop, ((0,30),(120,15))), 0,
(constant, 0), (constant, 1)</PRE
></DIV
><DIV
CLASS="EXAMPLE"
><A
NAME="EXPO-WT-2"
></A
><P
><B
>Example C-176. waveTriangle Demonstration 3</B
></P
><P
><IMG
SRC="images/exPo-wt-2.png"></P
><PRE
CLASS="SCREEN"
>waveTriangle, event, (constant, 30), 0, (randomUniform, (constant, 0),
(constant, 0.3)), (randomUniform, (constant, 0.7), (constant, 1))</PRE
></DIV
></DIV
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="othergroup.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="index.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="pmtrrefrthmpmtrobjs.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Other Commands</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Rhythm ParameterObjects</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>