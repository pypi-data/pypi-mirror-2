<?xml version="1.0" encoding="utf-8"?>
<?py
from cocktail.translations import require_language
from woost.models import Site, Publishable, Language
?>

<py:block
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:py="http://www.whads.com/ns/cocktail/templates">

    <?py-class
    publishable = None
    user = None
    translation_members = ("body",)
    content_language = None
    fully_translated = True
    
    def get_keywords(self):
        keywords = []
        site_keywords = Site.main.keywords
        if site_keywords:
            keywords.append(site_keywords)
        item_keywords = getattr(self.publishable, "keywords", None)
        if item_keywords:
            keywords.append(item_keywords)        
        return " ".join(keywords) if keywords else None

    def get_content_language(self, item, language = None):
        return item.get_common_language(self.translation_members, language)
    
    def is_fully_translated(self, item, language = None):
        language = require_language(language)
        return self.get_content_language(item, language) == language

    def member_slot(self, key, use_fallback_language = True):
        
        slot = Element()
        slot.add_class(key + "_slot")
        setattr(self, key + "_slot", slot)

        def _fill_slot():

            item = self.publishable
            member = item.__class__[key]

            # Set the 'lang' HTML attribute
            if member.translated \
            and not self.fully_translated \
            and use_fallback_language:
                slot["lang"] = self.content_language
            
            value = item.get(
                member,
                self.content_language
                    if member.translated and use_fallback_language
                    else None
            )

            if value is not None:
                slot.append(value)

        slot.when_ready(_fill_slot)
        return slot
    ?>

    <py:ready>
        <?py
        publishable = self.publishable

        if publishable:

            site = Site.main
            language = get_language()

            # Content type / charset
            self.page_content_type = publishable.mime_type
            self.page_charset = publishable.encoding

            # Page title
            self.page_title = publishable.title

            # Meta tags
            self.set_meta("Content-Language", language)
            
            description = getattr(publishable, "description", None) or site.description

            if description:
                self.set_meta("description", description)
            
            keywords = self.get_keywords()
            if keywords:
                self.set_meta("keywords", keywords)
            
            # Links
            self.add_head_element(
                Element("link", rel = "start", title = site.home.title, href = "/")
            )

            # Alternate languages
            if publishable.per_language_publication:
                self.content_language = self.get_content_language(self.publishable)
                self.fully_translated = (self.content_language == language)

                for trans_lang in publishable.translations:
                    if trans_lang in Language.codes \
                    and trans_lang != language \
                    and publishable.get("translation_enabled", trans_lang) \
                    and self.is_fully_translated(publishable, trans_lang):
                        self.add_head_element(
                            Element("link",
                                rel = "alternate",
                                title = translations("woost.views.BaseView alternate language link", lang = trans_lang),
                                href = self.cms.translate_uri(language = trans_lang),
                                lang = trans_lang,
                                hreflang = trans_lang
                            )
                        )

            # Shortcut icon
            icon = site.icon
            if icon:                
                self.add_head_element(
                    Element("link",
                        rel = "Shortcut Icon",
                        type = icon.mime_type,
                        href = self.cms.uri(icon)
                    )
                )

            # Resources
            for resource in publishable.resources:
                self.add_resource(self.cms.uri(resource), mime_type = resource.mime_type)

            # User defined styles for user content
            user_styles = Publishable.get_instance(qname = "woost.user_styles")
            if user_styles:
                self.add_resource(self.cms.uri(user_styles), mime_type = user_styles.mime_type)
        ?>
    </py:ready>

    <div py:id="content">
        ${self.member_slot("body")}
    </div>

</py:block>
