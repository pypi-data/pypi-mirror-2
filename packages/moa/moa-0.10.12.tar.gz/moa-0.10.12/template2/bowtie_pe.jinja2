### run2
echo start bowtie pe

#should I check for the extension? Or just assume it's '.bam'??
#outExt=`echo "{{output}}" | awk -F . '{print $NF}'`

bowtie -S {{ extra_params }} --{{orientation}}                                  \
    -I {{ min_insertsize }} -X {{ max_insertsize }}                             \
    {{ db }} -1 {{ fq_forward_input }} -2 {{ fq_reverse_input }}                \
    | samtools view -bS - | samtools sort - `basename {{ output }} .bam`

samtools index {{ output }}
samtools flagstat {{ output }} > `basename {{ output }} .bam`.report

### report
#!/usr/bin/env python

import os
import subprocess

F = open("report.md", "w")
F.write("#Bowtie mapping stats\n\n")

stats = {}

gap='http://chart.apis.google.com/chart?chbh=10,0,0&chs=100x20&cht=bhs&chco=4D89F9,E8EFFD&chds=0,%(max)d&chd=t:%(val)d|%(max)d&chdlp=l'

for bamfile in "{{ job.data.filesets.output.files|join(' ') }}".split():
    print 'gathering stats on', bamfile

    reportFile = bamfile.replace('.bam', '.report')

    stats[bamfile] = []
    fields = []
    
    with open(reportFile) as G:
        for line in G.readlines():
            if not line.strip(): continue
            no, fld = line.strip().split(" ", 1)
            fields.append(fld.split('(', 1)[0].strip())
            stats[bamfile].append(int(no))
            
fieldset1 = [0, 1, 2, 3, 4, 7, 8, 9]

#write the header for set 1
F.write("## Read stats")
F.write("<table><tr><td></td>")
for i in fieldset1:
    F.write("<td style='vertical-align: top; border-right: 1px dotted black;'>")
    F.write("<small>%s</small></td>\n" % fields[i])
F.write("</tr>\n")


#now the rows:
for bamfile in "{{ job.data.filesets.output.files|join(' ') }}".split():
    F.write("<tr><td style='vertical-align: top; border-right: 1px dotted black;'><b><small>")
    F.write("%s</small></b></td>\n" % os.path.basename(bamfile).replace('.bam', ''))

    for i in fieldset1:
        F.write("<td style='vertical-align: top; border-right: 1px dotted black;'>\n")
        F.write('<img src="')
        F.write(gap % {'max' : stats[bamfile][fieldset1[0]], 'val' : stats[bamfile][i]})
        F.write('">\n')
        F.write("<br><span style='font-size:50%%'>%d</span>" %  stats[bamfile][i])
        F.write('  </td>')
    F.write("</tr>")

F.write("</table>")

F.close()    
### clean

rm *.bam

### unittest

which bowtie || (echo 'Bowtie is not installed' >&2; false)

mkdir 10.bowtiedb
cd 10.bowtiedb 
moa new bowtiedb -t 'demo index referece using bowtie'
moa set input="${MOABASE}/share/test/test.fasta"
moa set ebwt_outfile_base=testDB
moa run
ls
 
cd ../

mkdir 20.bowtie_pe
cd 20.bowtie_pe
pwd >&2
moa new bowtie_pe -t 'demo bowtie aligning paired ends'

moa set ebwt_base=../10.bowtiedb/testDB
moa set fq_forward_input=${MOABASE}/share/test/reads_1.fq
moa set fq_reverse_input=${MOABASE}/share/test/reads_2.fq
moa run
ls

[[ -f read.bam ]] && ( [[ ! -s read.bam ]] && echo "read.bam file exists and has size > 0" || echo "read.bam file is empty", false) || (echo "read.bam file does not exist")
