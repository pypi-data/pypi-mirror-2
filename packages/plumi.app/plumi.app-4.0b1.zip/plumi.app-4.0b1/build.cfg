[transcodedaemon]
recipe = collective.transcode.recipe
listen_host = ${site:transcode-host}
listen_port = ${site:transcode-port}
videofolder = ${site:videofolder}
profiles = ${site:transcode-profiles}
secret = ${site:secret}
eggs = 
    collective.transcode.recipe
    collective.transcode.daemon

[zeoserver]
recipe = plone.recipe.zeoserver
zeo-address = ${site:zeo-address}
effective-user = ${site:zeo-user}
zeo-var = ${buildout:directory}/var
blob-storage = ${zeoserver:zeo-var}/blobstorage
eggs = ZODB3
       plone.app.blob

# Generate instances from macros

[instance1]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance1-address}
zope-conf-additional =
    <ftp-server>
    address ${site:instance-ftp}
    </ftp-server>
    <icp-server>
        address ${site:instance1-icp}
    </icp-server>

[instance2]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance2-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance2-icp}
    </icp-server>

[instance3]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance3-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance3-icp}
    </icp-server>

[instance4]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance4-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance4-icp}
    </icp-server>

[instance-debug]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance-debug-address}
debug-mode = on
verbose-security = on
zope-conf-additional =
    <ftp-server>
    address ${site:instance-ftp}
    </ftp-server>

[ploneftp]
recipe = unweb.recipe.ploneftp
zope_ftp_address = ${site:instance-ftp}
address = ${site:plumiftp-address}
path = /Plone/Members/%s/videos
tmp_dir = ${buildout:directory}/var/ploneftp

############################################################################## 
# Build ffmpeg, nginx, varnish and haxproxy for later configuration
##############################################################################

[x264-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:x264}
configure-options =
    --enable-shared


[ogg-build]
recipe = hexagonit.recipe.cmmi
keep-compile-dir = true
url = ${downloads:libogg}

[vorbis-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:libvorbis}
keep-compile-dir = true
configure-options =
    LD_LIBRARY_PATH=${buildout:directory}/parts/ogg-build/lib
    --with-ogg=${buildout:directory}/parts/ogg-build/

[theora-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:libtheora}
keep-compile-dir = true
configure-options =
    LD_LIBRARY_PATH=${buildout:directory}/parts/ogg-build/lib
    --with-ogg=${buildout:directory}/parts/ogg-build/

[mp4v2-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:mp4v2}

[faac-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:libfaac}
configure-options =
    --without-mp4v2

[faad-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:libfaad}

[lame-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:liblame}

[ffmpeg-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:ffmpeg}
keep-compile-dir = true
make-targets = 
    tools/qt-faststart
    install

configure-options =
    --extra-cflags=${build:extra-cflags}
    --extra-ldflags=${build:extra-ldflags}
    --enable-shared --enable-gpl --enable-version3 --enable-nonfree --enable-postproc --enable-libx264
    --enable-libfaac --enable-libfaad --enable-libmp3lame --enable-libtheora --enable-libvorbis
#    --enable-libvpx --enable-libxvid --enable-x11grab --enable-libopencore-amrwb \
#    --enable-libopencore-amrnb

[scons]
recipe = repoze.recipe.egg:scripts
eggs = SCons
scripts = scons
entry-points = 
    scons=SCons.Script:main
extra-paths = ${buildout:eggs-directory}/scons-2.0.1-py2.6.egg/scons-2.0.1

[ffmpeg2theora-build]
recipe = iw.recipe.cmd
on_install=true
cmds =
        wget ${downloads:ffmpeg2theora} -O ${buildout:directory}/bin/ffmpeg2theora && chmod +x ${buildout:directory}/bin/ffmpeg2theora

#recipe = hexagonit.recipe.cmmi
#url = ${downloads:ffmpeg2theora}
#environment = 
#    CFLAGS="${build:extra-cflags}"
#    LDFLAGS="${build:extra-ldflags}"
#configure-options =
#    --extra-cflags=${build:extra-cflags}
#    --extra-ldflags=${build:extra-ldflags}
#configure-command = ${buildout:directory}/bin/scons static=1

[ffmpeg]
recipe = collective.recipe.scriptgen
cmd = ${buildout:directory}/parts/ffmpeg-build/bin/ffmpeg
environment = 
    LD_LIBRARY_PATH=${buildout:directory}/parts/ffmpeg-build/lib:${buildout:directory}/parts/x264-build/lib:${buildout:directory}/parts/faac-build/lib:${buildout:directory}/parts/faad-build/lib:${buildout:directory}/parts/lame-build/lib:${buildout:directory}/parts/ogg-build/lib
    --extra-ldflags=-I${buildout:directory}/parts/mp4v2-build/lib

[qt-faststart]
recipe = collective.recipe.cmd
cmds = cp ${ffmpeg-build:compile-directory}/ffmpeg*/tools/qt-faststart ${buildout:directory}/bin/qt-faststart
on_install = true
on_update = true

[pcre-source]
recipe = hexagonit.recipe.download
url = ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.00.tar.gz
strip-top-level-dir = true

[ngx_cache_purge]
recipe = hexagonit.recipe.download
url = http://labs.frickle.com/files/ngx_cache_purge-1.1.tar.gz
strip-top-level-dir = true

[nginx-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:nginx}
patches =
    ${buildout:directory}/patches/nginx-xslt.patch
    ${buildout:directory}/patches/nginx-xslt-options.patch
    ${buildout:directory}/patches/nginx-xslt-conf.patch
configure-options =
    --with-http_xslt_module
    --with-http_stub_status_module
    --with-libxml2=${buildout:directory}/parts/lxml/libxml2
    --with-libxslt=${buildout:directory}/parts/lxml/libxslt
    --with-pcre=${pcre-source:location}
    --conf-path=${buildout:directory}/production/nginx/default.conf
    --error-log-path=${buildout:directory}/var/log/main-error.log
    --pid-path=${buildout:directory}/var/main.pid
    --lock-path=${buildout:directory}/var/main.lock
    --add-module=${ngx_cache_purge:location}

[varnish-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:varnish}

[haproxy-build]
recipe = plone.recipe.haproxy
url = ${downloads:haproxy}
cpu = ${build:cpu}
target = ${build:target}

############################################################################## 
# Configure front-end web server
##############################################################################

#[apachebuild]
#recipe = plone.recipe.apache:build
#url = http://archive.apache.org/dist/httpd/httpd-2.2.14.tar.gz

#[apacheconf]
#recipe = plone.recipe.apache:config
#bind = 80
#backends = ${site:apache_backends}
#zope2_vhm_map = ${site:apache_zope2_vhm_map}
#extras = NameVirtualHost *:80

#[apachetranscodeconf]
#recipe = plone.recipe.apache:config
#bind = 80
#backends = ${site:transcode_backends}
#resources = transcoded:${buildout:directory}/transcoded

[main-config]
recipe = collective.recipe.template
input = ${buildout:directory}/production/main.conf.template
output = ${buildout:directory}/production/main.conf

##############################################################################
# Configure Varnish cache
##############################################################################

[cache-config]
recipe = collective.recipe.template
input = ${buildout:directory}/production/cache.conf.template
output = ${buildout:directory}/production/cache.conf

[cache]
recipe = plone.recipe.varnish
daemon = ${buildout:directory}/parts/varnish-build/sbin/varnishd
mode = foreground
bind = ${site:cache-address}
cache-size = 1G
user = ${site:cache-user}
config = ${buildout:directory}/production/cache.conf

############################################################################## 
# Configure transforming web server
##############################################################################

#[transform-config]
#recipe = collective.recipe.template
#input = ${buildout:directory}/production/transform.conf.template
#output = ${buildout:directory}/production/transform.conf

############################################################################## 
# Configure load balancer
##############################################################################

[balancer-config]
recipe = collective.recipe.template
input = ${buildout:directory}/production/balancer.conf.template
output = ${buildout:directory}/production/balancer.conf
    
############################################################################## 
# Set up supervisor to run it all
##############################################################################

[supervisor]
recipe = collective.recipe.supervisor
port = ${site:supervisor-port}
user = ${site:supervisor-user}
password = ${site:supervisor-pass}
serverurl = http://${site:supervisor-host}:${site:supervisor-port}
programs =
    10   zeo             ${zeoserver:location}/bin/runzeo                                                           true ${site:zeo-user}
    20   transcodedaemon ${buildout:directory}/bin/transcodedaemon [fg]                                             true ${site:transcode-user}
    30   ploneftp        ${buildout:directory}/bin/ploneftp [fg]                                                    true ${site:ftp-user}
    40   instance1       ${buildout:directory}/bin/instance1 [console]                                              true ${site:zope-user}
    50   instance2       ${buildout:directory}/bin/instance2 [console]                                              true ${site:zope-user}
    60   instance3       ${buildout:directory}/bin/instance3 [console]                                              true ${site:zope-user}
    70   instance4       ${buildout:directory}/bin/instance4 [console]                                              true ${site:zope-user}
    80   balancer        ${buildout:directory}/bin/haproxy  [-f ${buildout:directory}/production/balancer.conf -db] true ${site:balancer-user}
    90   cache           ${buildout:directory}/bin/cache                                                            true ${site:cache-user}
    100  main            ${nginx-build:location}/sbin/nginx [-c ${buildout:directory}/production/main.conf]         
############################################################################## 
# Log rotation
##############################################################################

[logrotate.conf]
recipe = collective.recipe.template
input = ${buildout:directory}/production/logrotate.conf.template
output = ${buildout:directory}/production/logrotate.conf
    
############################################################################## 
# Debugging tools - preconfigured python interpreter, omelette, xdv server
##############################################################################

[zopepy]
recipe = zc.recipe.egg
eggs = 
    ${instance-settings:eggs}
    SCons

interpreter = zopepy
scripts = zopepy

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance-settings:eggs}

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml
libxml2-url = http://xmlsoft.org/sources/libxml2-2.7.7.tar.gz
libxslt-url = http://xmlsoft.org/sources/libxslt-1.1.26.tar.gz
    
[diazo]
recipe = zc.recipe.egg
eggs = diazo


############################################################################## 
# Backups
##############################################################################

[backup]
recipe = collective.recipe.backup
