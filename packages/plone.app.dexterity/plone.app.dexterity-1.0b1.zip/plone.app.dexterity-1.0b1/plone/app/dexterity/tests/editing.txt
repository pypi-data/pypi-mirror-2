Through-the-web content type editing
====================================

This package, plone.app.dexterity, provides the UI for creating and editing
Dexterity content types through the Plone control panel.

To demonstrate this, we'll need a logged in test browser::

  >>> from Products.Five.testbrowser import Browser
  >>> browser = Browser()
  >>> browser.handleErrors = False
  >>> self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
  >>> browser.addHeader('Authorization', 'Basic root:secret')


Dexterity Types Configlet
-------------------------

Once the 'Dexterity Content Configlet' product is installed, site managers
can navigate to the configlet via the control panel::

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Site Setup').click()
  >>> browser.getLink('Dexterity Content Types').click()
  >>> browser.url
  'http://nohost/plone/@@dexterity-types'
  >>> 'Dexterity content types' in browser.contents
  True


Adding a content type
---------------------

Let's add a 'Plonista' content type to keep track of members of the Plone
community::

  >>> browser.getControl('Add New Content Type').click()
  >>> browser.getControl('Type Name').value = 'Plonista'
  >>> browser.getControl('Add').click()
  >>> browser.url
  'http://nohost/plone/dexterity-types'

Now we should also have a 'plonista' FTI in portal_types::

  >>> 'plonista' in self.portal.portal_types
  True

The new type should have the dublin core behavior assigned by default::

  >>> plonista = self.portal.portal_types.plonista
  >>> 'plone.app.dexterity.behaviors.metadata.IDublinCore' in plonista.behaviors
  True
  >>> 'document_icon' in plonista.getIcon()
  True


Adding an instance of the new type
----------------------------------

Now a 'Plonista' can be created within the site::

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Plonista').click()
  >>> browser.getControl('Title').value = 'Martin Aspeli'
  >>> browser.getControl('Save').click()
  >>> browser.url
  'http://nohost/plone/martin-aspeli/view'


Editing a content type
----------------------

Editing schemata is handled by the plone.schemaeditor package and is tested
there.  However, let's at least make sure that we can navigate to the
schema for the 'plonista' type we just created::

  >>> browser.open('http://nohost/plone/@@dexterity-types')
  >>> browser.getLink('Plonista').click()
  >>> schemaeditor_url = browser.url
  >>> schemaeditor_url
  'http://nohost/plone/dexterity-types/plonista'

Demonstrate that all the registered field types can be added edited
and saved.

  >>> from zope import component
  >>> from plone.i18n.normalizer.interfaces import IIDNormalizer
  >>> from plone.schemaeditor import interfaces
  >>> normalizer = component.getUtility(IIDNormalizer)
  >>> schema = plonista.lookupSchema()
  >>> for name, factory in sorted(component.getUtilitiesFor(
  ...     interfaces.IFieldFactory)):
  ...     browser.open(schemaeditor_url)
  ...     browser.getControl('Add new field').click()
  ...     browser.getControl('Title').value = name
  ...     field_id = normalizer.normalize(name).replace('-', '_')
  ...     browser.getControl('Short Name').value = field_id
  ...     browser.getControl('Field type').getControl(
  ...         value=getattr(factory.title, 'default', factory.title)
  ...         ).selected = True
  ...     browser.getControl('Add').click()
  ...     assert browser.url == schemaeditor_url, (
  ...         "Couldn't successfully add %r" % name)
  ...     assert field_id in schema, '%r not in %r' % (
  ...         field_id, schema)
  ...     assert factory.fieldcls._type is None or isinstance(
  ...         schema[field_id], factory.fieldcls
  ...         ), '%r is not an instance of %r' % (
  ...             schema[field_id], factory.fieldcls)
  ...     browser.getLink(url=field_id).click()
  ...     browser.getControl('Save').click()


Enabling a behavior
-------------------

For each content type, a number of behaviors may be enabled.  Let's disable a
behavior for 'plonista' and make sure that the change is reflected on the
FTI::

  >>> browser.getLink('Behaviors').click()
  >>> browser.getControl(name='form.widgets.plone.app.dexterity.behaviors.metadata.IDublinCore:list').value = []
  >>> browser.getControl('Save').click()
  >>> self.portal.portal_types.plonista.behaviors
  ['plone.app.content.interfaces.INameFromTitle']


Viewing a non-editable schema
-----------------------------

If a type's schema is not stored as XML in its FTI's schema property, it cannot
currently be edited through the web.  However, the fields of the schema can at
least be listed.

  >>> from zope.interface import Interface
  >>> from zope import schema
  >>> import plone.app.dexterity.tests
  >>> class IFilesystemSchema(Interface):
  ...     irc_nick = schema.TextLine(title=u'IRC Nickname')
  >>> plone.app.dexterity.tests.IFilesystemSchema = IFilesystemSchema
  >>> plonista.schema = 'plone.app.dexterity.tests.IFilesystemSchema'
  >>> browser.open('http://nohost/plone/dexterity-types/plonista')
  >>> 'crud-edit.form.buttons.delete' in browser.contents
  False
  >>> 'IRC Nickname' in browser.contents
  True


Cloning a content type
----------------------

A content type can be cloned.

  >>> browser.open('http://nohost/plone/dexterity-types')
  >>> browser.getControl(name='crud-edit.plonista.widgets.select:list').value = ['0']
  >>> browser.getControl('Clone').click()
  >>> browser.url
  'http://nohost/plone/dexterity-types/plonista/@@clone'
  >>> browser.getControl('Type Name').value = 'Plonista2'
  >>> browser.getControl('Add').click()
  >>> browser.url
  'http://nohost/plone/dexterity-types'
  >>> 'plonista2' in browser.contents
  True
  >>> 'plonista2' in self.portal.portal_types
  True


Removing a content type
-----------------------

We can also delete a content type via the configlet::

  >>> browser.open('http://nohost/plone/@@dexterity-types')
  >>> browser.getControl(name='crud-edit.plonista.widgets.select:list').value = ['0']
  >>> browser.getControl('Delete').click()

Now the FTI for the type should no longer be present in portal_types::

  >>> 'plonista' in self.portal.portal_types
  False

We should still be able to view a container that contains an instance of the
removed type::

  >>> browser.open('http://nohost/plone/folder_contents')

But actually trying to view the type will now cause an error, as expected::

  >>> browser.open('http://nohost/plone/martin-aspeli/view')
  Traceback (most recent call last):
  ...
  ComponentLookupError...


Adding a container
------------------

We can create a content type that is a container for other content::

  >>> browser.open('http://nohost/plone/@@dexterity-types')
  >>> browser.getControl('Add New Content Type').click()
  >>> browser.getControl('Type Name').value = 'Plonista Folder'
  >>> browser.getControl(name='form.widgets.container:list').value = ['true']
  >>> browser.getControl('Add').click()
  >>> browser.url
  'http://nohost/plone/dexterity-types'

Now we should have a 'plonista-folder' FTI in portal_types, and it should be
using the Container base class::

  >>> 'plonista-folder' in self.portal.portal_types
  True
  >>> pf = getattr(self.portal.portal_types, 'plonista-folder')
  >>> pf.klass
  'plone.dexterity.content.Container'
  >>> 'folder_icon' in pf.getIcon()
  True

If we add a plonista-folder, we can then add other content items inside it.

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Plonista Folder').click()
  >>> browser.getControl('Title').value = 'Plonista Folder 1'
  >>> browser.getControl('Save').click()
  >>> browser.url
  'http://nohost/plone/plonista-folder-1/view'
  >>> browser.getLink(url='Document').click()
  >>> browser.getControl('Title').value = 'Introduction'
  >>> browser.getControl('Save').click()
  >>> browser.url
  'http://nohost/plone/plonista-folder-1/introduction'
