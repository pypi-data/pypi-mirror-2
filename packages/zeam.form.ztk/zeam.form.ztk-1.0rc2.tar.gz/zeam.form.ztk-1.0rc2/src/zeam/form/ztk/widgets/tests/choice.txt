===========================
zeam.form.ztk choice widget
===========================

Simple case
===========

First we need a choice::

  >>> from zope import interface, schema
  >>> from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
  >>> from zope.interface.verify import verifyObject

  >>> def displayVocabulary(values):
  ...     for value in values:
  ...         print "%r %r %r" % (value.value, value.token, value.title)

  >>> letterVocabulary = SimpleVocabulary([
  ...     SimpleTerm(value='A', token='a1', title='Letter A'),
  ...     SimpleTerm(value='B', token='b1', title='Letter B'),
  ...     SimpleTerm(value='C', token='c1', title='Letter C')])

  >>> class IFirstChoice(interface.Interface):
  ...     choice = schema.Choice(
  ...         title=u"My favorite letter",
  ...         source=letterVocabulary)


And we will need a content and a request to test:

  >>> from zope.publisher.browser import TestRequest
  >>> request = TestRequest()

  >>> class FirstContent(object):
  ...    interface.implements(IFirstChoice)
  ...    choice = None
  >>> content = FirstContent()
  >>> content.choice = 'B'


Field
-----

So now you can create a field, and get a choice field::

  >>> from zeam.form.base import Fields
  >>> from zeam.form.base import interfaces

  >>> firstChoiceFields = Fields(IFirstChoice)
  >>> firstField = firstChoiceFields['choice']
  >>> firstField
  <ChoiceSchemaField My favorite letter>

  >>> firstField.source is letterVocabulary
  True

  >>> firstField.validate('A')
  >>> firstField.validate('foo')
  u'Constraint not satisfied'

  >>> verifyObject(interfaces.IField, firstField)
  True

Widget
------

You have an associated widget::

  >>> from zeam.form.ztk import Widgets, FormData

  >>> firstForm = FormData(content, request)
  >>> firstForm.ignoreContent = False

  >>> firstWidgets = Widgets(
  ...     firstChoiceFields,
  ...     form=firstForm,
  ...     request=request)

  >>> firstWidgets.update()

  >>> firstWidget = firstWidgets['form.field.choice']
  >>> firstWidget
  <ChoiceFieldWidget My favorite letter>

  >>> firstWidget.inputValue()
  'b1'

  >>> print firstWidget.render()
  <select id="form-field-choice" name="form.field.choice" class="field field-choice">
    <option value="a1">Letter A</option>
    <option value="b1" selected="selected">Letter B</option>
    <option value="c1">Letter C</option>
  </select>


Extractor
---------

We need a custom extractor as the token value used in the form can be
different than the real value::

  >>> from zope import component
  >>> from zeam.form.base import interfaces

  >>> firstExtractor = component.getMultiAdapter(
  ...      (firstField, firstForm, request), interfaces.IWidgetExtractor)

  >>> firstExtractor
  <zeam.form.ztk.widgets.choice.ChoiceWidgetExtractor object at ...>
  >>> firstExtractor.extract()
  (<Marker NO_VALUE>, None)

Let's now do it with a value::

  >>> firstRequest = TestRequest(
  ...         form={firstWidget.identifier: u'a1', })

  >>> firstExtractor = component.getMultiAdapter(
  ...      (firstField, firstForm, firstRequest), interfaces.IWidgetExtractor)

  >>> firstExtractor.extract()
  ('A', None)


Context binded source
=====================

Let's define a source which need the context to produce its values,
and an interface for it::

  >>> from grokcore import component
  >>> from zope.schema.interfaces import IContextSourceBinder

  >>> @component.provider(IContextSourceBinder)
  ... def secondVocabulary(context):
  ...     return letterVocabulary

  >>> class ISecondChoice(interface.Interface):
  ...     choice = schema.Choice(
  ...         title=u"My Choice",
  ...         source=secondVocabulary)

  >>> class SecondContent(object):
  ...    interface.implements(ISecondChoice)
  ...    choice = None

  >>> content = SecondContent()
  >>> content.choice = 'C'


Field
-----

So now you can create a field, and get a choice field::

  >>> from zeam.form.ztk import Fields

  >>> secondChoiceFields = Fields(ISecondChoice)
  >>> secondField = secondChoiceFields['choice']
  >>> secondField
  <ChoiceSchemaField My Choice>
  >>> secondField.source is secondVocabulary
  True

  >>> choices = secondField.getChoices(None)
  >>> choices
  <zope.schema.vocabulary.SimpleVocabulary object at ...>
  >>> displayVocabulary(choices)
  'A' 'a1' 'Letter A'
  'B' 'b1' 'Letter B'
  'C' 'c1' 'Letter C'

  >>> secondField.validate('A')
  >>> secondField.validate(42)
  u'Constraint not satisfied'


Widget
------

You have an associated widget::

  >>> from zeam.form.ztk import Widgets, FormData

  >>> secondSub = FormData(content, request)
  >>> secondSub.ignoreContent = False

  >>> secondWidgets = Widgets(
  ...     secondChoiceFields,
  ...     form=secondSub,
  ...     request=request)

  >>> secondWidgets.update()

  >>> secondWidget = secondWidgets['form.field.choice']
  >>> secondWidget
  <ChoiceFieldWidget My Choice>

  >>> secondWidget.inputValue()
  'c1'

  >>> print secondWidget.render()
  <select id="form-field-choice" name="form.field.choice" class="field field-choice">
    <option value="a1">Letter A</option>
    <option value="b1">Letter B</option>
    <option value="c1" selected="selected">Letter C</option>
  </select>


Registered vocabulary
=====================

Let's create a vocabulary that is registered in the ZCA, and use it in
a schema::

  >>> from zope.schema.interfaces import IVocabularyFactory
  >>> from zope.component import provideUtility, queryUtility

  >>> @component.provider(IVocabularyFactory)
  ... def thirdVocabulary(context):
  ...     return letterVocabulary

  >>> provideUtility(thirdVocabulary, IVocabularyFactory, name="Third letter")
  >>> thirdLetter = queryUtility(IVocabularyFactory, name="Third letter")
  >>> thirdLetter
  <function thirdVocabulary at ...>

  >>> class IThirdChoice(interface.Interface):
  ...     choice = schema.Choice(
  ...         title=u"The third letter",
  ...         vocabulary="Third letter")

  >>> class ThirdContent(object):
  ...    interface.implements(IThirdChoice)
  ...    choice = None

  >>> content = ThirdContent()
  >>> content.choice = 'B'


Field
-----

So now you can create a field, and get a choice field::

  >>> from zeam.form.ztk import Fields

  >>> thirdChoiceFields = Fields(IThirdChoice)
  >>> thirdField = thirdChoiceFields['choice']
  >>> thirdField
  <ChoiceSchemaField The third letter>
  >>> thirdField.source is thirdVocabulary
  True

  >>> choices = thirdField.getChoices(None)
  >>> choices
  <zope.schema.vocabulary.SimpleVocabulary object at ...>
  >>> displayVocabulary(choices)
  'A' 'a1' 'Letter A'
  'B' 'b1' 'Letter B'
  'C' 'c1' 'Letter C'

  >>> thirdField.validate('C')
