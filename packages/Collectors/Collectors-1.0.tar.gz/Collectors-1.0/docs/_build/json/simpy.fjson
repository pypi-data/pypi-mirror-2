{"body": "<div class=\"section\" id=\"how-to-use-collectors-with-simpy\">\n<span id=\"simpy\"></span><h1>How to use <em>Collectors</em> with <em>SimPy</em><a class=\"headerlink\" href=\"#how-to-use-collectors-with-simpy\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>If you have read and understood the previous sections, you won\u2019t have any trouble using <em>Collectors</em> to monitor your simulation processes.</p>\n<p>We\u2019ll now discuss two examples that show different ways <em>Collectors</em> can be used: You can either use one collector instance per process or let one instance monitor multiple processes at once.</p>\n<p>You should one collector per process if each process belongs to another class or if each process collects its data at another time. If your processes are all instances of the same class and if each instance collects data at the same time, you only need to use one collector instance. That might save you some memory.</p>\n<div class=\"section\" id=\"one-collector-per-process\">\n<h2>One collector per process<a class=\"headerlink\" href=\"#one-collector-per-process\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In the following example a <tt class=\"xref docutils literal\"><span class=\"pre\">Process</span></tt> is created. In\neach step, it generates some random numbers and then holds for a random amount\nof time (that\u2019s why we need one collector per process here).</p>\n<p>The process also creates one collector (<tt class=\"docutils literal\"><span class=\"pre\">self.monitor</span></tt>) which will collect the\nsimulation time, the values for <tt class=\"docutils literal\"><span class=\"pre\">a</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">b</span></tt>, the manually passed values for\n<tt class=\"docutils literal\"><span class=\"pre\">diff</span></tt> and finally the square of <tt class=\"docutils literal\"><span class=\"pre\">c</span></tt>. The resulting collector instance will\nthus have the attributes <tt class=\"docutils literal\"><span class=\"pre\">time</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">a</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">b</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">diff</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">square</span></tt>.</p>\n<p>After the simulation has finished, <a class=\"reference external\" href=\"http://numpy.scipy.org/\">NumPy</a> arrays\nwill be created and show how you can easily work with them or create some charts\nusing <a class=\"reference external\" href=\"http://matplotlib.sourceforge.net/\">Matplotlib</a>.</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">as</span> <span class=\"nn\">plt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">numpy</span> <span class=\"kn\">import</span> <span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"n\">float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">SimPy.Simulation</span> <span class=\"kn\">import</span> <span class=\"n\">Simulation</span><span class=\"p\">,</span> <span class=\"n\">Process</span><span class=\"p\">,</span> <span class=\"n\">hold</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">collectors</span> <span class=\"kn\">import</span> <span class=\"n\">Collector</span><span class=\"p\">,</span> <span class=\"n\">get</span><span class=\"p\">,</span> <span class=\"n\">manual</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyProc</span><span class=\"p\">(</span><span class=\"n\">Process</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sim</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"n\">Process</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">monitor</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>            <span class=\"p\">(</span><span class=\"s\">&#39;time&#39;</span><span class=\"p\">,</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>            <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;b&#39;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>            <span class=\"p\">(</span><span class=\"s\">&#39;diff&#39;</span><span class=\"p\">,</span> <span class=\"n\">manual</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>            <span class=\"p\">(</span><span class=\"s\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">+=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">+=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>            <span class=\"k\">yield</span> <span class=\"n\">hold</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># Run the simulation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"n\">Simulation</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">MyProc</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">activate</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"p\">,</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">simulate</span><span class=\"p\">(</span><span class=\"n\">until</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;SimPy: Normal exit&#39;</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># NumPy helps you with the statistics and other calculations.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># Note: specification of dtype gives you a massive speed-up!</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># NumPy: average, std. deviation, variance</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span> <span class=\"s\">&#39;a stats:&#39;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(),</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(),</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">()</span>\n<span class=\"go\">a stats: 2.04867732762 0.947900129333 0.898514655189</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># This one creates a multi-dimensional array</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np_mon</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># Get the average of all monitored proc.b</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span> <span class=\"s\">&#39;b stats:&#39;</span><span class=\"p\">,</span> <span class=\"n\">np_mon</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"go\">b stats: 5.57142857143</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># Get the std. deviation of all monitored proc.c</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span> <span class=\"s\">&#39;c stats:&#39;</span><span class=\"p\">,</span> <span class=\"n\">np_mon</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">()</span>\n<span class=\"go\">c stats: 3.09047252183</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># Matplotlib plots your data:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># Either directly from a monitor ...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"s\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># ... or the NumPy array</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">np_mon</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">np_mon</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"one-collector-for-multiple-processes\">\n<h2>One collector for multiple processes<a class=\"headerlink\" href=\"#one-collector-for-multiple-processes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This example shows a very simple process whose PEM will be executed each time\nstep. This enables us to use one collector instance to monitor the attribute\n<tt class=\"docutils literal\"><span class=\"pre\">a</span></tt> of all processes and the simulation time.</p>\n<p>We also use SimPy\u2019s brand-new <tt class=\"xref docutils literal\"><span class=\"pre\">peek()</span></tt> and\n<tt class=\"xref docutils literal\"><span class=\"pre\">step()</span></tt> methods here which will be introduced\nwith version 2.1.</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">SimPy.Simulation</span> <span class=\"kn\">import</span> <span class=\"n\">Simulation</span><span class=\"p\">,</span> <span class=\"n\">Process</span><span class=\"p\">,</span> <span class=\"n\">hold</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">collectors</span> <span class=\"kn\">import</span> <span class=\"n\">Collector</span><span class=\"p\">,</span> <span class=\"n\">get_objects</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyProc</span><span class=\"p\">(</span><span class=\"n\">Process</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"sd\">&quot;&quot;&quot;docstring for MyProc2&quot;&quot;&quot;</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sim</span><span class=\"p\">,</span> <span class=\"n\">pid</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"n\">Process</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sim</span><span class=\"o\">=</span><span class=\"n\">sim</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pid</span> <span class=\"o\">=</span> <span class=\"s\">&#39;p</span><span class=\"si\">%d</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">pid</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"n\">Simulation</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">procs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">MyProc</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">proc</span> <span class=\"ow\">in</span> <span class=\"n\">procs</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">activate</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"p\">,</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># This coll. will have the attributes &quot;t&quot;, &quot;p0_a&quot;, &quot;p1_a&quot;, ..., &quot;p9_a&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># and monitor the simulation time as well as the values of &quot;a&quot; for each</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># process.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">monitor</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">((</span><span class=\"s\">&#39;t&#39;</span><span class=\"p\">,</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">),</span> <span class=\"n\">get_objects</span><span class=\"p\">(</span><span class=\"n\">procs</span><span class=\"p\">,</span> <span class=\"s\">&#39;pid&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;a&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># Run the simulation by using the band-new &quot;peek()&quot; and &quot;step()&quot;.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">while</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">peek</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">monitor</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "How to use <em>Collectors</em> with <em>SimPy</em>", "sourcename": "simpy.txt", "current_page_name": "simpy", "next": {"link": "../ref/", "title": "API-Reference"}, "rellinks": [["genindex", "General Index", "I", "index"], ["modindex", "Global Module Index", "M", "modules"], ["ref/index", "API-Reference", "N", "next"], ["storages", "How to use the storage backends", "P", "previous"]], "meta": {}, "parents": [], "toc": "<ul>\n<li><a class=\"reference external\" href=\"#\">How to use <em>Collectors</em> with <em>SimPy</em></a><ul>\n<li><a class=\"reference external\" href=\"#one-collector-per-process\">One collector per process</a></li>\n<li><a class=\"reference external\" href=\"#one-collector-for-multiple-processes\">One collector for multiple processes</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../storages/", "title": "How to use the storage backends"}, "metatags": ""}