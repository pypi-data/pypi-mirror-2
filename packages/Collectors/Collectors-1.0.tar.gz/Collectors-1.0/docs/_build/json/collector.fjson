{"body": "<div class=\"section\" id=\"the-collector-in-depth\">\n<span id=\"collector\"></span><h1>The Collector in-depth<a class=\"headerlink\" href=\"#the-collector-in-depth\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This sections provides a more in-depth description of the\n<a title=\"collectors.core.Collector\" class=\"reference external\" href=\"../ref/core/#collectors.core.Collector\"><tt class=\"xref docutils literal\"><span class=\"pre\">Collector</span></tt></a> class and some of the shortcut functions.</p>\n<div class=\"section\" id=\"how-collector-works\">\n<h2>How <tt class=\"docutils literal\"><span class=\"pre\">Collector</span></tt> works<a class=\"headerlink\" href=\"#how-collector-works\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The Collector needs two things to monitor a variable:</p>\n<ol class=\"arabic simple\">\n<li>A <em>name</em> that identifies the variable and its series within the collector</li>\n<li>A <em>collector function</em> that gets the current value of the variable each time\nthe collector is called.</li>\n</ol>\n<p>When you create a new collector, you must pass a tuple <tt class=\"docutils literal\"><span class=\"pre\">(name,</span>\n<span class=\"pre\">collector_func)</span></tt> for each variable you want to monitor:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">collectors</span> <span class=\"kn\">import</span> <span class=\"n\">Collector</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">get_b</span><span class=\"p\">(</span><span class=\"n\">factor</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">factor</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"s\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"n\">get_b</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>A variable\u2019s <em>name</em> must be a string and should also be a valid <a class=\"reference external\" href=\"http://docs.python.org/reference/lexical_analysis.html#identifiers\">Python\nidentifier</a>. The\n<em>collector function</em> can be anything that\u2019s callable\u2014it might even take a\nparameter.</p>\n<p>By default, the Collector creates a Python list for each variable which will\nhold all monitored values. We will call this list <em>series</em> here.</p>\n<p>The series for a variable is accessible either by index or as an attribute (this\nis why <em>name</em> should be a valid identifier):</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span>\n<span class=\"go\">([], [])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"go\">(True, True)</span>\n</pre></div>\n</div>\n<p>Each time the Collector (or its <a title=\"collectors.core.Collector.collect\" class=\"reference external\" href=\"../ref/core/#collectors.core.Collector.collect\"><tt class=\"xref docutils literal\"><span class=\"pre\">collect()</span></tt></a>\nmethod) is called, it calls every <em>collector function</em> in the order they were\ninitially passed to it and appends their return value to each variable\u2019s\n<em>series</em>. If a <em>collector function</em> needs a parameter, you must pass it as\nkeyword argument:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span>\n<span class=\"go\">([], [])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"c\"># c.collect(b=4) would do the same</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span>\n<span class=\"go\">([1], [8])</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"summary\">\n<h3>Summary<a class=\"headerlink\" href=\"#summary\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Each variable is described by a <em>name</em>, a <em>collector function</em> and a <em>series</em>.</li>\n<li>The <em>series</em> are ordered in the same way the <tt class=\"docutils literal\"><span class=\"pre\">(name,</span> <span class=\"pre\">col_func)</span></tt> tuples were\npassed to the Collector\u2019s constructor.</li>\n<li>A <em>collector function</em> can optionally have (exactly) one argument.</li>\n<li>Each call to the Collector or its <tt class=\"docutils literal\"><span class=\"pre\">collect</span></tt> method collects the current\nvalues of all monitored variables.</li>\n<li>If a <em>collector functions</em> needs an argument, it must be passed as keyword\nargument to <tt class=\"docutils literal\"><span class=\"pre\">__call__</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">collect</span></tt> and the key must be the same as\n<em>name</em>.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"shortcut-functions\">\n<h2>Shortcut functions<a class=\"headerlink\" href=\"#shortcut-functions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><em>Collectors</em> has some shortcut functions included that help you save typing.\nThey are defined in <a title=\"\" class=\"reference external\" href=\"../ref/shortcuts/#module-collectors.shortcuts\"><tt class=\"xref docutils literal\"><span class=\"pre\">collectors.shortcuts</span></tt></a> but can also be import directly\nfrom <a title=\"\" class=\"reference external\" href=\"../ref/#module-collectors\"><tt class=\"xref docutils literal\"><span class=\"pre\">collectors</span></tt></a> for even less typing. ;-)</p>\n<div class=\"section\" id=\"monitor-several-attributes-of-one-object\">\n<h3>Monitor several attributes of one object<a class=\"headerlink\" href=\"#monitor-several-attributes-of-one-object\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In most cases you\u2019ll probably end up using <em>Collectors</em> like this:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Spam</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">collector</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>            <span class=\"p\">(</span><span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>            <span class=\"p\">(</span><span class=\"s\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>            <span class=\"p\">(</span><span class=\"s\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Setting up a Collector like this is very tedious and repetitive. The shortcut\n<a title=\"collectors.shortcuts.get\" class=\"reference external\" href=\"../ref/shortcuts/#collectors.shortcuts.get\"><tt class=\"xref docutils literal\"><span class=\"pre\">get()</span></tt></a> allows you to create these tuples much faster:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">collectors</span> <span class=\"kn\">import</span> <span class=\"n\">get</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Spam</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">collector</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;c&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>You must pass an object and the names of attributes to <a title=\"collectors.shortcuts.get\" class=\"reference external\" href=\"../ref/shortcuts/#collectors.shortcuts.get\"><tt class=\"xref docutils literal\"><span class=\"pre\">get()</span></tt></a>. For each\nattribute, it generates a tuple <tt class=\"docutils literal\"><span class=\"pre\">('attr',</span> <span class=\"pre\">lambda:</span> <span class=\"pre\">getattr(obj,</span> <span class=\"pre\">'attr'))</span></tt> for\nyou.</p>\n</div>\n<div class=\"section\" id=\"monitor-many-objects-with-one-collector\">\n<h3>Monitor many objects with one Collector<a class=\"headerlink\" href=\"#monitor-many-objects-with-one-collector\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you want to monitor the same attributes for many <tt class=\"docutils literal\"><span class=\"pre\">Spam</span></tt> instances with only\none Collector, there is another shortcut called <a title=\"collectors.shortcuts.get_objects\" class=\"reference external\" href=\"../ref/shortcuts/#collectors.shortcuts.get_objects\"><tt class=\"xref docutils literal\"><span class=\"pre\">get_objects()</span></tt></a> that works\nin a similar way:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">collectors</span> <span class=\"kn\">import</span> <span class=\"n\">get_objects</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Spam</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"s\">&#39;_</span><span class=\"si\">%d</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"nb\">id</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spams</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Spam</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">collector</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">(</span><span class=\"n\">get_objects</span><span class=\"p\">(</span><span class=\"n\">spams</span><span class=\"p\">,</span> <span class=\"s\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;b&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Similarly to <a title=\"collectors.shortcuts.get\" class=\"reference external\" href=\"../ref/shortcuts/#collectors.shortcuts.get\"><tt class=\"xref docutils literal\"><span class=\"pre\">get()</span></tt></a>, <a title=\"collectors.shortcuts.get_objects\" class=\"reference external\" href=\"../ref/shortcuts/#collectors.shortcuts.get_objects\"><tt class=\"xref docutils literal\"><span class=\"pre\">get_objects()</span></tt></a> creates a <tt class=\"docutils literal\"><span class=\"pre\">(name,</span> <span class=\"pre\">func)</span></tt> tuple\nfor the attributes of all passed objects. In contrast to <a title=\"collectors.shortcuts.get\" class=\"reference external\" href=\"../ref/shortcuts/#collectors.shortcuts.get\"><tt class=\"xref docutils literal\"><span class=\"pre\">get()</span></tt></a> you must\nalso define an <tt class=\"docutils literal\"><span class=\"pre\">id</span></tt> attribute which will be prefixed to each <em>name</em> in order\nto make them distinguishable. Since the names become attributes of the Collector\ninstance, they must not be pure integers.</p>\n<p>In the above example, <tt class=\"docutils literal\"><span class=\"pre\">collector</span></tt> would have the attributes <tt class=\"docutils literal\"><span class=\"pre\">_0_a</span></tt>,\n<tt class=\"docutils literal\"><span class=\"pre\">_0_b</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">_1_a</span></tt> and so forth.</p>\n</div>\n<div class=\"section\" id=\"manually-passing-values\">\n<h3>Manually passing values<a class=\"headerlink\" href=\"#manually-passing-values\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Sometimes you might want to save some calculation results on-the-fly, were you\nwould use <tt class=\"docutils literal\"><span class=\"pre\">lambda</span> <span class=\"pre\">x:</span> <span class=\"pre\">x</span></tt> as a <em>collector function</em>. A shortcut for that is\n<a title=\"collectors.shortcuts.manual\" class=\"reference external\" href=\"../ref/shortcuts/#collectors.shortcuts.manual\"><tt class=\"xref docutils literal\"><span class=\"pre\">manual()</span></tt></a>:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">collectors</span> <span class=\"kn\">import</span> <span class=\"n\">Collector</span><span class=\"p\">,</span> <span class=\"n\">manual</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">collector</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">((</span><span class=\"s\">&#39;val&#39;</span><span class=\"p\">,</span> <span class=\"n\">manual</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">collector</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">collector</span><span class=\"o\">.</span><span class=\"n\">val</span>\n<span class=\"go\">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"mixing-shortcut-functions\">\n<h3>Mixing shortcut functions<a class=\"headerlink\" href=\"#mixing-shortcut-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can of course freely mix shortcut functions and \u201cnormal\u201d tuples:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">spam</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">spam</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">collector</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"s\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"n\">manual</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">spams</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;b&#39;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">get_objects</span><span class=\"p\">(</span><span class=\"n\">spams</span><span class=\"p\">,</span> <span class=\"s\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;a&#39;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"whats-next\">\n<h2>What\u2019s next?<a class=\"headerlink\" href=\"#whats-next\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>By default, <a title=\"collectors.core.Collector\" class=\"reference external\" href=\"../ref/core/#collectors.core.Collector\"><tt class=\"xref docutils literal\"><span class=\"pre\">Collector</span></tt></a> stores all collected values in\nplain Python lists, but it is also able to store them in various other formats\nlike <a class=\"reference external\" href=\"http://www.pytables.org/\">PyTables/HDF5</a> or <a class=\"reference external\" href=\"http://office.microsoft.com/de-at/excel/default.aspx\">MS Excel</a>. The next section\nexplains the various storage classes and how you can create your own.</p>\n</div>\n</div>\n", "display_toc": true, "title": "The Collector in-depth", "sourcename": "collector.txt", "current_page_name": "collector", "next": {"link": "../storages/", "title": "How to use the storage backends"}, "rellinks": [["genindex", "General Index", "I", "index"], ["modindex", "Global Module Index", "M", "modules"], ["storages", "How to use the storage backends", "N", "next"], ["quickstart", "Quickstart Guide", "P", "previous"]], "meta": {}, "parents": [], "toc": "<ul>\n<li><a class=\"reference external\" href=\"#\">The Collector in-depth</a><ul>\n<li><a class=\"reference external\" href=\"#how-collector-works\">How <tt class=\"docutils literal\"><span class=\"pre\">Collector</span></tt> works</a><ul>\n<li><a class=\"reference external\" href=\"#summary\">Summary</a></li>\n</ul>\n</li>\n<li><a class=\"reference external\" href=\"#shortcut-functions\">Shortcut functions</a><ul>\n<li><a class=\"reference external\" href=\"#monitor-several-attributes-of-one-object\">Monitor several attributes of one object</a></li>\n<li><a class=\"reference external\" href=\"#monitor-many-objects-with-one-collector\">Monitor many objects with one Collector</a></li>\n<li><a class=\"reference external\" href=\"#manually-passing-values\">Manually passing values</a></li>\n<li><a class=\"reference external\" href=\"#mixing-shortcut-functions\">Mixing shortcut functions</a></li>\n</ul>\n</li>\n<li><a class=\"reference external\" href=\"#whats-next\">What\u2019s next?</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../quickstart/", "title": "Quickstart Guide"}, "metatags": ""}