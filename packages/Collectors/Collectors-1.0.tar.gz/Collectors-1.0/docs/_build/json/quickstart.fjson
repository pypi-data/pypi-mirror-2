{"body": "<div class=\"section\" id=\"quickstart-guide\">\n<span id=\"quickstart\"></span><h1>Quickstart Guide<a class=\"headerlink\" href=\"#quickstart-guide\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>Collectors</em> was originally developed to monitor <a class=\"reference external\" href=\"http://simpy.sourceforge.net/SimPyDocs/SimPy_Overview.html\">SimPy</a> processes, but it\ncan be used to monitor any types of objects or variables. Thus, these first,\nsimple examples demonstrate the usage of <em>Collectors</em> with ordinary Python\nobjects; <em>SimPy</em> is dedicated an own <a class=\"reference external\" href=\"../simpy/\"><em>section</em></a>.</p>\n<div class=\"section\" id=\"monitor-an-objects-attributes\">\n<h2>Monitor an object\u2019s attributes<a class=\"headerlink\" href=\"#monitor-an-objects-attributes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Simply monitoring an objects values is really easy:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">collectors</span> <span class=\"kn\">import</span> <span class=\"n\">Collector</span><span class=\"p\">,</span> <span class=\"n\">get</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Spam</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">... </span>    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spam</span> <span class=\"o\">=</span> <span class=\"n\">Spam</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">spam</span><span class=\"p\">,</span> <span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;b&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">col</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spam</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">spam</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">col</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">col</span>\n<span class=\"go\">([1, 3], [2, 4])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">col</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"go\">[1, 3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">col</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">col</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>When you create a new <a title=\"collectors.core.Collector\" class=\"reference external\" href=\"../ref/core/#collectors.core.Collector\"><tt class=\"xref docutils literal\"><span class=\"pre\">Collector</span></tt></a> instance, you need to\ntell it which objects and which attributes to monitor. This can e.g. be done by\nusing the shortcut function <a title=\"collectors.shortcuts.get\" class=\"reference external\" href=\"../ref/shortcuts/#collectors.shortcuts.get\"><tt class=\"xref docutils literal\"><span class=\"pre\">get()</span></tt></a>.</p>\n<p>To save the current state of the the monitored objects, just make a call to the\ncollector instance (if you don\u2019t like this, there is also a\n<a title=\"collectors.core.Collector.collect\" class=\"reference external\" href=\"../ref/core/#collectors.core.Collector.collect\"><tt class=\"xref docutils literal\"><span class=\"pre\">collect()</span></tt></a> method that does the same).</p>\n<p><a title=\"collectors.core.Collector\" class=\"reference external\" href=\"../ref/core/#collectors.core.Collector\"><tt class=\"xref docutils literal\"><span class=\"pre\">Collector</span></tt></a> inherits <a title=\"(in Python v2.6)\" class=\"reference external\" href=\"http://docs.python.org/library/functions.html#tuple\"><tt class=\"xref docutils literal\"><span class=\"pre\">tuple</span></tt></a> and stores each\nseries for the monitored objects as an entry. It also creates an object\nattribute for each series based on its name, so you can access each series\neither by name or by index and handle the collector itself as a simple tuple.</p>\n</div>\n<div class=\"section\" id=\"iterating-over-a-collector\">\n<h2>Iterating over a collector<a class=\"headerlink\" href=\"#iterating-over-a-collector\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Since a collector is basically just a tuple, you can easily iterate over its\nseries as well as of the the values of all series. If you imagine your collector\nas a table with a column for each monitored attribute, the first loop iterates\nover each column while the second one iterates over each row:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">series</span> <span class=\"ow\">in</span> <span class=\"n\">col</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">print</span> <span class=\"n\">series</span>\n<span class=\"go\">[1, 3]</span>\n<span class=\"go\">[2, 4]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">col</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">print</span> <span class=\"s\">&#39;a: </span><span class=\"si\">%d</span><span class=\"s\"> | b: </span><span class=\"si\">%d</span><span class=\"s\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">a: 1 | b: 2</span>\n<span class=\"go\">a: 3 | b: 4</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"whats-next\">\n<h2>What\u2019s next?<a class=\"headerlink\" href=\"#whats-next\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You now know how to use <em>Collectors</em> for simple tasks. The next section will\ndescribe in detail, how <a title=\"collectors.core.Collector\" class=\"reference external\" href=\"../ref/core/#collectors.core.Collector\"><tt class=\"xref docutils literal\"><span class=\"pre\">Collector</span></tt></a> works and which\nshortcuts we have to make defining a collector easier.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Quickstart Guide", "sourcename": "quickstart.txt", "current_page_name": "quickstart", "next": {"link": "../collector/", "title": "The Collector in-depth"}, "rellinks": [["genindex", "General Index", "I", "index"], ["modindex", "Global Module Index", "M", "modules"], ["collector", "The Collector in-depth", "N", "next"], ["index", "Welcome to Collectors\u2019 documentation!", "P", "previous"]], "meta": {}, "parents": [], "toc": "<ul>\n<li><a class=\"reference external\" href=\"#\">Quickstart Guide</a><ul>\n<li><a class=\"reference external\" href=\"#monitor-an-objects-attributes\">Monitor an object\u2019s attributes</a></li>\n<li><a class=\"reference external\" href=\"#iterating-over-a-collector\">Iterating over a collector</a></li>\n<li><a class=\"reference external\" href=\"#whats-next\">What\u2019s next?</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../", "title": "Welcome to Collectors\u2019 documentation!"}, "metatags": ""}