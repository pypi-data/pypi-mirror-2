{"body": "<div class=\"section\" id=\"module-collectors.core\">\n<span id=\"ref-core\"></span><h1><tt class=\"xref docutils literal\"><span class=\"pre\">collectors.core</span></tt> \u2014 Core classes<a class=\"headerlink\" href=\"#module-collectors.core\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This module contains <em>Collector\u2019s</em> core classes like like the <a title=\"collectors.core.Collector\" class=\"reference internal\" href=\"#collectors.core.Collector\"><tt class=\"xref docutils literal\"><span class=\"pre\">Collector</span></tt></a> \nitself and the base base and default storages.</p>\n<dl class=\"class\">\n<dt id=\"collectors.core.Collector\">\n<em class=\"property\">class </em><tt class=\"descclassname\">collectors.core.</tt><tt class=\"descname\">Collector</tt><big>(</big><em>*args</em><span class=\"optional\">[</span>, <em>**kwargs</em><span class=\"optional\">]</span><big>)</big><a class=\"headerlink\" href=\"#collectors.core.Collector\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This class can monitor the values of a given set of variables.</p>\n<p>Each variable is described by a <em>name</em> and a <em>collector function</em> which must\nbe passed as tuple <tt class=\"docutils literal\"><span class=\"pre\">(name,</span> <span class=\"pre\">func)</span></tt>. The list of <em>name</em>-<em>func</em>-tuples may\nalso be nested, which is helpful for some convenience functions.</p>\n<p>For each variable a <em>series</em> for the observed values will be created. The\nvariables\u2019 <em>series</em> are accessible via an index (defined by the order you\npassed them) as well as by an attribute of a <tt class=\"docutils literal\"><span class=\"pre\">Collector</span></tt> instance named\nafter <em>name</em>.</p>\n<p>All collector functions will be called (in the same order as they were\nspecified) each time a <tt class=\"docutils literal\"><span class=\"pre\">Collector</span></tt> instance is called. The collector\nfunctions may either grab the desired values by themselves or let them be\npassed manually with each collector call.</p>\n<p>Here is an example how this works:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Spam</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">... </span>    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spam</span> <span class=\"o\">=</span> <span class=\"n\">Spam</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Collector</span><span class=\"p\">((</span><span class=\"s\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">spam</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"go\">(True, True)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">spam</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spam</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">spam</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">spam</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"c\"># Collector inherits tuple, so you can do this:</span>\n<span class=\"go\">([1, 3], [4, 6])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"c\"># You can also access it&#39;s elements by their name.</span>\n<span class=\"go\">([1, 3], [4, 6])</span>\n</pre></div>\n</div>\n<p>In this example, <tt class=\"docutils literal\"><span class=\"pre\">spam</span></tt> is the object to be monitored. The monitor is\nconfigured to observe two variables named \u201ca\u201d and \u201cb\u201d. The collector\nfunction for \u201ca\u201d automatically retrieves <tt class=\"docutils literal\"><span class=\"pre\">spam.a</span></tt>, while the value for \u201cb\u201d\nneeds to be passed to the monitor manually as a keyword argument. For these\ncommon cases, there are the shortcuts <a title=\"collectors.shortcuts.get\" class=\"reference external\" href=\"../shortcuts/#collectors.shortcuts.get\"><tt class=\"xref docutils literal\"><span class=\"pre\">get()</span></tt></a> and\n<a title=\"collectors.shortcuts.manual\" class=\"reference external\" href=\"../shortcuts/#collectors.shortcuts.manual\"><tt class=\"xref docutils literal\"><span class=\"pre\">manual()</span></tt></a>.</p>\n<p>Note that names for data series need to be unique. <tt class=\"docutils literal\"><span class=\"pre\">Collector</span></tt>\ninstanciation will raise a <tt class=\"docutils literal\"><span class=\"pre\">ValueError</span></tt> if there&#8217;s a duplicate name.</p>\n<dl class=\"method\">\n<dt id=\"collectors.core.Collector.__call__\">\n<tt class=\"descname\">__call__</tt><big>(</big><em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#collectors.core.Collector.__call__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute all collector functions and append the retrieved values to the\nseries of each variable.</p>\n<p>If a collector function required a parameter, you must pass it as\nkeyword argument with the variable\u2019s name.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"collectors.core.Collector.collect\">\n<tt class=\"descname\">collect</tt><a class=\"headerlink\" href=\"#collectors.core.Collector.collect\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd>This is just an alias to <a title=\"collectors.core.Collector.__call__\" class=\"reference internal\" href=\"#collectors.core.Collector.__call__\"><tt class=\"xref docutils literal\"><span class=\"pre\">__call__()</span></tt></a>.</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"collectors.core.BaseStorage\">\n<em class=\"property\">class </em><tt class=\"descclassname\">collectors.core.</tt><tt class=\"descname\">BaseStorage</tt><a class=\"headerlink\" href=\"#collectors.core.BaseStorage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Base class for storages.</p>\n<p>Storages define, where and in which format the collected data will be\nstored. During its initialization a <a title=\"collectors.core.Collector\" class=\"reference internal\" href=\"#collectors.core.Collector\"><tt class=\"xref docutils literal\"><span class=\"pre\">Collector</span></tt></a> will call\n<a title=\"collectors.core.BaseStorage.create_series\" class=\"reference internal\" href=\"#collectors.core.BaseStorage.create_series\"><tt class=\"xref docutils literal\"><span class=\"pre\">create_series()</span></tt></a> for each monitored variable. Every time the\n<a title=\"collectors.core.Collector\" class=\"reference internal\" href=\"#collectors.core.Collector\"><tt class=\"xref docutils literal\"><span class=\"pre\">Collector</span></tt></a> is asked to collect the current values <a title=\"collectors.core.BaseStorage.append\" class=\"reference internal\" href=\"#collectors.core.BaseStorage.append\"><tt class=\"xref docutils literal\"><span class=\"pre\">append()</span></tt></a>\ninvoked with the appropiate series and value.</p>\n<dl class=\"method\">\n<dt id=\"collectors.core.BaseStorage.append\">\n<tt class=\"descname\">append</tt><big>(</big><em>series</em>, <em>value</em><big>)</big><a class=\"headerlink\" href=\"#collectors.core.BaseStorage.append\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Append <tt class=\"docutils literal\"><span class=\"pre\">value</span></tt> to <tt class=\"docutils literal\"><span class=\"pre\">series</span></tt>.</p>\n<p>You can either override this method in a subclass or assign an existing \nmethod (or lambda function) to the attribute <tt class=\"docutils literal\"><span class=\"pre\">self.append</span></tt>.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"collectors.core.BaseStorage.create_series\">\n<tt class=\"descname\">create_series</tt><big>(</big><em>name</em>, <em>index</em><big>)</big><a class=\"headerlink\" href=\"#collectors.core.BaseStorage.create_series\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd>Create a new series for the variable <tt class=\"docutils literal\"><span class=\"pre\">name</span></tt> at <tt class=\"docutils literal\"><span class=\"pre\">index</span></tt> of the\ncollector.</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"collectors.core.DefaultStorage\">\n<em class=\"property\">class </em><tt class=\"descclassname\">collectors.core.</tt><tt class=\"descname\">DefaultStorage</tt><a class=\"headerlink\" href=\"#collectors.core.DefaultStorage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a title=\"collectors.core.BaseStorage\" class=\"reference internal\" href=\"#collectors.core.BaseStorage\"><tt class=\"xref docutils literal\"><span class=\"pre\">collectors.core.BaseStorage</span></tt></a></p>\n<p>The default storage used by <a title=\"collectors.core.Collector\" class=\"reference internal\" href=\"#collectors.core.Collector\"><tt class=\"xref docutils literal\"><span class=\"pre\">Collector</span></tt></a>. The values of each\nmonitored variable are stored in a simple <a title=\"(in Python v2.6)\" class=\"reference external\" href=\"http://docs.python.org/library/functions.html#list\"><tt class=\"xref docutils literal\"><span class=\"pre\">list</span></tt></a>.</p>\n<dl class=\"method\">\n<dt id=\"collectors.core.DefaultStorage.append\">\n<tt class=\"descname\">append</tt><big>(</big><em>series</em>, <em>value</em><big>)</big><a class=\"headerlink\" href=\"#collectors.core.DefaultStorage.append\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Append <tt class=\"docutils literal\"><span class=\"pre\">value</span></tt> to <tt class=\"docutils literal\"><span class=\"pre\">series</span></tt>.</p>\n<p>You can either override this method in a subclass or assign an existing \nmethod (or lambda function) to the attribute <tt class=\"docutils literal\"><span class=\"pre\">self.append</span></tt>.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"collectors.core.DefaultStorage.create_series\">\n<tt class=\"descname\">create_series</tt><big>(</big><em>name</em>, <em>index</em><big>)</big><a class=\"headerlink\" href=\"#collectors.core.DefaultStorage.create_series\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd>Return a new empty list.</dd></dl>\n\n</dd></dl>\n\n</div>\n", "display_toc": false, "title": "<tt class=\"docutils literal\"><span class=\"pre\">collectors.core</span></tt> \u2014 Core classes", "sourcename": "ref/core.txt", "current_page_name": "ref/core", "next": {"link": "../shortcuts/", "title": "<tt class=\"docutils literal\"><span class=\"pre\">collectors.shortcuts</span></tt> \u2014&nbsp;Useful shortcut functions"}, "rellinks": [["genindex", "General Index", "I", "index"], ["modindex", "Global Module Index", "M", "modules"], ["ref/shortcuts", "<tt class=\"docutils literal\"><span class=\"pre\">collectors.shortcuts</span></tt> \u2014&nbsp;Useful shortcut functions", "N", "next"], ["ref/index", "API-Reference", "P", "previous"]], "meta": {}, "parents": [{"link": "../", "title": "API-Reference"}], "toc": "<ul>\n<li><a class=\"reference external\" href=\"#\"><tt class=\"docutils literal\"><span class=\"pre\">collectors.core</span></tt> \u2014 Core classes</a></li>\n</ul>\n", "prev": {"link": "../", "title": "API-Reference"}, "metatags": ""}