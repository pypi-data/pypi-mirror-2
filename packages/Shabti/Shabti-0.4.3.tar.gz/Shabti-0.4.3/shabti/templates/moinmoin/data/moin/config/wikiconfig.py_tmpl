# -*- coding: utf-8 -*-
# IMPORTANT! This encoding (charset) setting MUST be correct! If you live in a
# western country and you don't know that you use utf-8, you probably want to
# use iso-8859-1 (or some other iso charset). If you use utf-8 (a Unicode
# encoding) you MUST use: coding: utf-8
# That setting must match the encoding your editor uses when you modify the
# settings below. If it does not, special non-ASCII chars will be wrong.

"""
    MoinMoin - Configuration for a single wiki

    If you run a single wiki only, you can omit the farmconfig.py config
    file and just use wikiconfig.py - it will be used for every request
    we get in that case.

    Note that there are more config options than you'll find in
    the version of this file that is installed by default; see
    the module MoinMoin.config.multiconfig for a full list of names and their
    default values.

    Also, the URL http://moinmo.in/HelpOnConfiguration has
    a list of config options.

    ** Please do not use this file for a wiki farm. Use the sample file
    from the wikifarm directory instead! **
"""
from {{package}} import model
import pylons
from MoinMoin import log, version
logging = log.getLogger(__name__)

from MoinMoin.auth import BaseAuth
from MoinMoin.config.multiconfig import DefaultConfig

class PylonsAuth(BaseAuth):
    """ handle login from moin login form """
    def __init__(self, verbose=False):
        BaseAuth.__init__(self)
        self.verbose = verbose
    
    name = 'pylons_auth'
    logout_possible = False
    
    def request(self, req, user_obj, **kw):
        
        user = None
        try_next = True # if True, moin tries the next auth method
        if version.release == '1.9.2':
            # req is a context object in moin 1.9
            env = getattr(req, 'env', req.request.environ)
        else:
            env = req.env
        auth_user_id = env.get('beaker.session', {}).get('AUTH_USER_ID', 0)
        
        if auth_user_id:
            user_obj = model.Session.query(model.User).get(auth_user_id)
            auth_username = user_obj.username
            from MoinMoin.user import User as MoinUser
            # giving auth_username to User constructor 
            # means that authentication has already been done.
            user = MoinUser(req, name=auth_username, 
                        auth_username=auth_username, 
                        auth_method='pylons_auth')        
        changed = False
        if user:
            user.create_or_update(changed)
        if user and user.valid: # did we succeed making up a valid user?
            try_next = False # stop processing auth method list
        return user, try_next
    


class Config(DefaultConfig):

    # To support saving of graphs  -------------------------------------

    from MoinMoin.security import Permissions
    class SecurityPolicy(Permissions):
        def save(self, editor, newtext, rev, **kw):
            # No problem to save if my base class agree
            if Permissions.save(self, editor, newtext, rev, **kw):
                from MoinMoin import wikiutil
                
                # save to graph file, if plugin available
                graphsaver = wikiutil.importPlugin(self.request.cfg,
                                                   'action',
                                                   'savegraphdata')
                if not graphsaver:
                    return True
                else:
                    path = editor.getPagePath()
                    # If the page has not been created yet,
                    # create its directory and save the stuff there
                    if "underlay/pages" in path:
                        import os, re
                        path = re.sub(r'underlay/pages', 'data/pages', path, 1)
                        if not os.path.exists(path):
                            os.makedirs(path)
                            
                    graphsaver(editor.page_name, self.request,
                               newtext, path, editor)
                    return True
            else:
                return False
        
    
    
    #from MoinMoin.auth import moin_cookie, http
    # # first try the external_cookie, then http basic auth, then
    # # the usual moin_cookie
    # auth = [external_cookie, http, moin_cookie]
    # auth = [pylonsauth]
    auth = [PylonsAuth()]

    # Wiki identity ----------------------------------------------------

    # Site name, used by default for wiki name-logo [Unicode]
    sitename = u'Shabti Wiki'

    # Wiki logo. You can use an image, text or both. [Unicode]
    # For no logo or text, use '' - the default is to show the sitename.
    # See also url_prefix setting below!
    logo_string = u'<img src="/img/assets/legend.png" alt="Shabti Legend">'

    # name of entry page / front page [Unicode], choose one of those:

    # a) if most wiki content is in a single language
    page_front_page = u"ShabtiWiki"

    # b) if wiki content is maintained in many languages
    # page_front_page = u"FrontPage"

    # The interwiki name used in interwiki links
    #interwikiname = 'UntitledWiki'
    # Show the interwiki name (and link it to page_front_page) in the Theme,
    # nice for farm setups or when your logo does not show the wiki's name.
    #show_interwiki = 1


    # Critical setup  ---------------------------------------------------

    # Misconfiguration here will render your wiki unusable. Check that
    # all directories are accessible by the web server or moin server.

    # If you encounter problems, try to set data_dir and data_underlay_dir
    # to absolute paths.

    # Where your mutable wiki pages are. You want to make regular
    # backups of this directory.
    from pylons import config as appconfig
    moindir = appconfig['moindir']
    data_dir = moindir+'/data/'

    # Where read-only system and help page are. You might want to share
    # this directory between several wikis. When you update MoinMoin,
    # you can safely replace the underlay directory with a new one. This
    # directory is part of MoinMoin distribution, you don't have to
    # backup it.
    data_underlay_dir = moindir+'/underlay/'

    # The URL prefix we use to access the static stuff (img, css, js).
    # NOT touching this is maybe the best way to handle this setting as moin
    # uses a good internal default (something like '/moin_static181' for moin
    # version 1.8.1).
    # For Twisted and standalone server, the default will automatically work.
    # For others, you should make a matching server config (e.g. an Apache
    # Alias definition pointing to the directory with the static stuff).
    url_prefix_static = '/moin_static'


    # Security ----------------------------------------------------------

    # This is checked by some rather critical and potentially harmful actions,
    # like despam or PackageInstaller action:
    superuser = [u"Administrator", ]

    # IMPORTANT: grant yourself admin rights! replace YourName with
    # your user name. See HelpOnAccessControlLists for more help.
    # All acl_rights_xxx options must use unicode [Unicode]
    acl_rights_before = u"Administrator:read,write,delete,revert,admin"
    acl_rights_default = u"Trusted:read,write,delete,revert Known:read,write,delete,revert All:read"
    # The default (ENABLED) password_checker will keep users from choosing too
    # short or too easy passwords. If you don't like this and your site has
    # rather low security requirements, feel free to DISABLE the checker by:
    #password_checker = None # None means "don't do any password strength checks"

    # Link spam protection for public wikis (Uncomment to enable)
    # Needs a reliable internet connection.
    from MoinMoin.security.antispam import SecurityPolicy


    # Mail --------------------------------------------------------------

    # Configure to enable subscribing to pages (disabled by default)
    # or sending forgotten passwords.

    # SMTP server, e.g. "mail.provider.com" (None to disable mail)
    #mail_smarthost = ""

    # The return address, e.g u"JÃ¼rgen Wiki <noreply@mywiki.org>" [Unicode]
    #mail_from = u""

    # "user pwd" if you need to use SMTP AUTH
    #mail_login = ""


    # User interface ----------------------------------------------------

    # Add your wikis important pages at the end. It is not recommended to
    # remove the default links.  Leave room for user links - don't use
    # more than 6 short items.
    # You MUST use Unicode strings here, but you need not use localized
    # page names for system and help pages, those will be used automatically
    # according to the user selected language. [Unicode]
    navi_bar = [
        # If you want to show your page_front_page here:
        u'%(page_front_page)s',
        u'RecentChanges',
        u'FindPage',
        u'HelpContents',
    ]

    # The default theme anonymous or new users get
    theme_default = 'plsavez'
    theme_force = True

    # Language options --------------------------------------------------

    # See http://moinmo.in/ConfigMarket for configuration in
    # YOUR language that other people contributed.

    # The main wiki language, set the direction of the wiki pages
    language_default = 'en'

    # the following regexes should match the complete name when used in free text
    # the group 'all' shall match all, while the group 'key' shall match the key only
    # e.g. CategoryFoo -> group 'all' ==  CategoryFoo, group 'key' == Foo
    # moin's code will add ^ / $ at beginning / end when needed
    # You must use Unicode strings here [Unicode]
    page_category_regex = ur'(?P<all>Category(?P<key>(?!Template)\S+))'
    page_dict_regex = ur'(?P<all>(?P<key>\S+)Dict)'
    page_group_regex = ur'(?P<all>(?P<key>\S+)Group)'
    page_template_regex = ur'(?P<all>(?P<key>\S+)Template)'

    # Content options ---------------------------------------------------

    # Show users hostnames in RecentChanges
    show_hosts = 1

    # Enable graphical charts, requires gdchart.
    chart_options = {'width': 600, 'height': 300}

    show_timings = True
    show_version = True

    edit_bar = ['Edit', 'Comments', 'Discussion', 'Info', 'Subscribe', 'Quicklink', 'Attachments', 'ActionsMenu']

    page_credits = [
       '<a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a>',
       '<a href="http://pylonshq.com" title="MoinMoin is served by Pylons.">Pylons Served</a>',
       '<a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a>',
       '<a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a>',
     ]
    supplementation_page = True  # default is False
    # page_footer1 = "Custom HTML markup sent ''before'' the system footer."
    #page_footer2 = "Custom HTML markup sent ''after'' the system footer."
    # page_header1 = "Custom HTML markup sent ''before'' the system header / title area but after the body tag."
    # page_header2 = "Custom HTML markup sent ''after'' the system header / title area (and body tag)."

