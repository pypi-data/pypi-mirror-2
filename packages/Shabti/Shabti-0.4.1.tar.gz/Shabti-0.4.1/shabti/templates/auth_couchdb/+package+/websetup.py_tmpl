# -*- coding: utf-8 -*-
"""Setup the {{package}} application"""
import logging
import pylons.test
from {{package}}.config.environment import load_environment
log = logging.getLogger(__name__)
import pylons
from couchdb.design import ViewDefinition
from {{package}}.model import *
from {{package}} import model
import datetime
import hashlib

def setup_app(command, conf, vars):
    """Place any commands to setup {{package}} here"""
    # Don't reload the app if it was loaded under the testing environment
    if not pylons.test.pylonsapp:
        config = load_environment(conf.global_conf, conf.local_conf)
        db = config['couchdb.db']
    else:
        server = pylons.test.pylonsapp.config['{{package}}.server']
    # server = config['{{package}}.server']
    log.debug("websetup - model %s" % dir(model))
    log.debug("websetup - model %s" % dir(model.meta))
    log.debug("websetup - server %s" % dir(model.meta.server))
    log.debug("websetup - db %s" % dir(model.meta.db))
    # server = model.meta.server
    # db = model.meta.db
    # Change teardown to True if the database
    # exists and is to be torn down and re-created
    teardown = True
    if teardown and '{{package}}' in server:
        log.debug("Teardown is set and old db detected, attempting to delete ...")
        try:
            del server['{{package}}']
            log.debug("Successfully deleted old {{package}}")
        except Exception, msg:
            log.debug("Exception - failed to delete old {{package}} (%s), passing" % str(msg))
            pass
        log.debug("Deletion attempted, now attempting to create {{package}} ...")
        try:
            db = server.create('{{package}}')
            log.debug("Successfully created {{package}} [1]")
        except Exception, msg:
            log.debug("Exception, failed to create {{package}} (%s), passing [1]" % str(msg))
            pass
    elif not '{{package}}' in server:
        log.debug("Old {{package}} not present in server list, attempting to create")
        try:
            db = server.create('{{package}}')
            log.debug("Successfully created {{package}} [2]")
        except Exception, msg:
            log.debug("Exception, failed to create {{package}} (%s), passing [2]" % str(msg))
            pass
    else:
        log.debug("Giving up, getting db from config")
        log.debug("db from config was %s" % db)
    gadmin = Group(
            name = "Administrators",
            description = u"Administration group",
            created = datetime.datetime.utcnow(),
            active = True)
    gadmin = model.user.Group(
            name = "Administrators",
            description = u"Administration group",
            created = datetime.datetime.utcnow(),
            active = True)
    gadmin.store(db)
    
    gadmin_retrieved = Group.load(db, gadmin.id)
    admin = model.user.User(
                displayname = u"admin", 
                password=hashlib.sha1("admin").hexdigest(),
                password_check=hashlib.sha1("admin").hexdigest(), 
                email="admin@example.com",
                created = datetime.datetime.utcnow(),
                active = True)
    admin.groups.append(gadmin.id)
    admin.store(db)
    gadmin_retrieved.users.append(admin.id)
    gadmin_retrieved.store(db)
    ViewDefinition.sync_many(db, [
        User.by_displayname,
        User.by_email,
        Group.by_name, 
        Permission.by_name,
    ])


# Overwritten by Shabti auth_couchdb template
