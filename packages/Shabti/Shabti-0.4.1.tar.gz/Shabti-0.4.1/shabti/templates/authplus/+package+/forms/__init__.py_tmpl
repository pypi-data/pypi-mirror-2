# -*- coding: utf-8 -*-
from pylons import config
from {{package}} import model
from {{package}}.lib.base import render
from formalchemy import config as fa_config
from formalchemy import templates
from formalchemy import validators
from formalchemy import fields
from formalchemy import forms
from formalchemy import tables
from formalchemy.ext.fsblob import FileFieldRenderer
from formalchemy.ext.fsblob import ImageFieldRenderer
from fa.jquery import renderers as jquery

if config.get('storage_path'):
    # set the storage_path if we can find its setting
    FileFieldRenderer.storage_path = config.get('storage_path')
    ImageFieldRenderer.storage_path = config.get('storage_path')

fa_config.encoding = 'utf-8'


{{if template_engine == 'mako'}}
class TemplateEngine(templates.TemplateEngine):
    def render(self, name, **kwargs):
        return render('/forms/%s.mako' % name, extra_vars=kwargs)
fa_config.engine = TemplateEngine()
{{else}}
## You can use this class to override the default template engine
#class TemplateEngine(templates.TemplateEngine):
#    def render(self, name, **kwargs):
#        return render('/forms/%s.mako' % name, extra_vars=kwargs)
#fa_config.engine = TemplateEngine()
{{endif}}

# use jquery renderers
forms.FieldSet.default_renderers.update(jquery.default_renderers)

class FieldSet(forms.FieldSet):
    pass

class Grid(tables.Grid):
    pass

## Initialize fieldsets

User = FieldSet(model.User)
User.configure(options=[
        User.displayname.required(),
        User.email,
        User.created.readonly(),
        User.last_login.readonly(),
        User.active.required(),
        User.password.password().required(),
        ])

UserAdd = FieldSet(model.User)
UserAdd.configure(exclude=[UserAdd.created])

Group = FieldSet(model.Group)
Group.configure(options=[Group.created.readonly()])

GroupAdd = FieldSet(model.Group)
GroupAdd.configure(exclude=[GroupAdd.created])

## Initialize grids

UserGrid = Grid(model.User)
UserGrid.configure(include=[
    UserGrid.displayname,
    UserGrid.email,
    UserGrid.active,
    UserGrid.groups,
    ])

GroupGrid = Grid(model.Group)
GroupGrid.configure(include=[
    GroupGrid.name,
    GroupGrid.active,
    GroupGrid.users,
    GroupGrid.permissions,
    ])

Permission = FieldSet(model.Permission)
PermissionGrid = Grid(model.Permission)
