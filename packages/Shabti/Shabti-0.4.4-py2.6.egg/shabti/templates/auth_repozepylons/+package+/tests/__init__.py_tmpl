# auth_repozewho/tests/__init__.py
"""Pylons application test package

This package assumes the Pylons environment is already loaded, such as
when this script is imported from the `nosetests --with-pylons=test.ini`
command.

This module initializes the application via ``websetup`` (`paster
setup-app`) and provides the base testing objects.
"""
from unittest import TestCase

from paste.deploy import loadapp
from paste.script.appinstall import SetupCommand
from pylons import url
from routes.util import URLGenerator
from webtest import TestApp
import pylons.test
import datetime
import hashlib

__all__ = ['environ', 'url', 'TestController', 
           'TestModel', 'TestAuthenticatedController',
           'TestProtectedAreasController']

# Invoke websetup with the current config file
# SetupCommand('setup-app').run(
#       [pylons.test.pylonsapp.config['__file__']])

# No, don't. Do it this way instead ...
import os
from paste.deploy import appconfig
from {{package}}.config.environment import load_environment
import elixir
from elixir import *
from {{package}}.model import User, Permission, Group
from {{package}}.model import meta
from {{package}} import model
from sqlalchemy import engine_from_config

here_dir = os.path.dirname(__file__)
conf_dir = os.path.dirname(os.path.dirname(here_dir))
test_file = os.path.join(conf_dir, 'test.ini')
conf = appconfig('config:' + test_file)
config = load_environment(conf.global_conf, conf.local_conf)
environ = {}
engine = engine_from_config(config, 'sqlalchemy.')
model.init_model(engine)
metadata = elixir.metadata
Session = elixir.session = meta.Session

class TestModel(TestCase):
    def setUp(self):
        now = datetime.datetime.utcnow()
        elixir.session.configure(bind=engine)
        metadata.create_all(engine)
        setup_all()
        gadmin = model.Group(
                name = u"Administrators",
                description = u"Administration group",
                created = datetime.datetime.utcnow(),
                active = True)
        model.Session.add(gadmin)
        g = model.Session.query(model.Group).filter_by(
                    name=u"Administrators").all()
        assert len(g) == 1
        assert g[0] == gadmin
        admin = model.User(
                    username = u"admin", 
                    password=hashlib.sha1("admin").hexdigest(),
                    password_check=hashlib.sha1("admin").hexdigest(), 
                    email="admin@example.com",
                    created = datetime.datetime.utcnow(),
                    active = True)
        model.Session.add(admin)
        gadmin.users.append(admin)
        model.Session.commit()
        # Check the status
        u = model.Session.query(model.User).filter_by(
                    username=u"admin").all()
        assert len(u) == 1
        assert u[0] == admin
        self.user = model.User(username = u'tester', 
                       password = hashlib.sha1('test').hexdigest(), 
                       password_check = hashlib.sha1('test').hexdigest(), 
                       created = datetime.datetime.utcnow(),
                       email = 'test@here.com',
                       active=True)
        model.Session.add(self.user)
        u2 = model.Session.query(model.User).filter_by(
                    username=u"tester").all()
        assert len(u2) == 1
        assert u2[0] == self.user
        self.ngroup = model.Group(
                    name = u'Subscription Members',
                    created = datetime.datetime.utcnow())
        self.ngroup.permissions.append(model.Permission(name = u'add_users'))
        model.Session.add(self.ngroup)
        model.Session.commit()
    
    
    def tearDown(self):
        Session.close()
        model.metadata.drop_all(engine)
    


class TestController(TestModel):
    
    def __init__(self, *args, **kwargs):
        if pylons.test.pylonsapp:
            wsgiapp = pylons.test.pylonsapp
        else:
            wsgiapp = loadapp('config:%s' % config['__file__'])
        self.app = TestApp(wsgiapp)
        url._push_object(URLGenerator(config['routes.map'], environ))
        TestCase.__init__(self, *args, **kwargs)
    


class TestAuthenticatedController(TestModel):
    
    def __init__(self, *args, **kwargs):
        if pylons.test.pylonsapp:
            wsgiapp = pylons.test.pylonsapp
        else:
            wsgiapp = loadapp('config:%s' % config['__file__'])
        self.app = TestApp(wsgiapp, extra_environ=dict(REMOTE_USER='admin'))
        url._push_object(URLGenerator(config['routes.map'], environ))
        TestCase.__init__(self, *args, **kwargs)
    


class TestProtectedAreasController(TestModel):
    """Enable the skip_authentication facility, allow access"""
    def __init__(self, *args, **kwargs):
        wsgiapp = loadapp('config:%s#main_without_authn' % config['__file__'])
        self.app = TestApp(wsgiapp)
        url._push_object(URLGenerator(config['routes.map'], environ))
        TestCase.__init__(self, *args, **kwargs)


