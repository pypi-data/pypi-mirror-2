# -*- coding: utf-8 -*-
"""Helper functions

Consists of functions to typically be used within templates, but also
available to Controllers. This module is available to both as 'h'.
"""
# Import helpers as desired, or define your own, ie:
# from webhelpers.html.tags import checkbox, password
import datetime
import iso8601
from pylons import url
from webhelpers.date import distance_of_time_in_words
from webhelpers.html.tags import auto_discovery_link, link_to, select, stylesheet_link
from webhelpers.pylonslib.secure_form import auth_token_hidden_field
from webhelpers.text import truncate
from webhelpers.pylonslib import Flash as _Flash
from webob.exc import strip_tags

success_flash = _Flash('success')
failure_flash = _Flash('failure')

from webhelpers import *

from {{package}}.lib.auth import permissions
from {{package}}.lib.auth import get_user

def get_object_or_404(model, **kw):
    from pylons.controllers.util import abort
    """
    Returns object, or raises a 404 Not Found is object is not in db.
    Uses elixir-specific `get_by()` convenience function (see elixir source: 
    http://elixir.ematia.de/trac/browser/elixir/trunk/elixir/entity.py#L1082)
    Example: user = get_object_or_404(model.User, id = 1)
    """
    obj = model.get_by(**kw)
    if obj is None:
        abort(404)
    return obj

# Auth helpers

def signed_in():
    return permissions.SignedIn().check()

def in_group(group_name):
    return permissions.InGroup(group_name).check()

def has_permission(perm):
    return permissions.HasPermission(perm).check()

def load_stylesheet_assets():
    import pylons
    import os
    path = os.path.join(pylons.config['pylons.paths']['static_files'], 'css',
                        'CSSLIST')
    f = open(path,'r')
    stylesheets = f.read()
    f.close()
    return ['/css/%s.css' % f for f in stylesheets.split()]

def parse_iso_date(iso_date):
    return datetime.datetime.fromtimestamp(iso8601.parse(iso_date))


# Boilerplate Dublin Core and other meta-data
# @@FIXME: Read values from config
class DCMeta(object):
    date = datetime.datetime.now()
    def __init__(self, **kw):
        for k, v in kw.iteritems():
            setattr(self, k, v)
        self.copyrightyear = self.date.year
    


# Would be neater if values were set in a .ini file
def dcmeta(
            description=u"XXXXXXXXXXX", 
            title=u"Untitled", 
            distribution=u"global",
            creator = u"XXXXXXXXXXXXXXX",
            copyright = u"Â© XXXXXX",
            date = datetime.datetime.now(),
            identifier = u"",
            abstract = u"",
            issued = datetime.datetime.now(),
            icbm = "99.99999,-9.999999"):
    return DCMeta(description=description, 
            title=title, 
            distribution=distribution,
            creator = creator,
            copyright = copyright,
            date = datetime.datetime.now(),
            identifier = identifier,
            abstract = abstract,
            issued = issued,
            icbm = icbm)
    
def sth(n):
    if 4 <= n <= 20 or 24 <= n <= 30:
         return "th"
    else:
         return ["st", "nd", "rd"][n % 10 - 1]




