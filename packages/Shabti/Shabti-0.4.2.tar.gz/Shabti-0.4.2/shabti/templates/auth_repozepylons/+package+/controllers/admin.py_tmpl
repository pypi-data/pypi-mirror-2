import logging
from fa.jquery.pylons import ModelsController
from webhelpers.paginate import Page
from {{package}}.lib.base import BaseController, render
from {{package}} import model
from {{package}} import forms
from {{package}}.model import meta
from {{package}}.lib.decorators import authorize
from {{package}}.lib.auth.permissions import SignedIn

log = logging.getLogger(__name__)

from pylons import request, response, url, session, tmpl_context as c
from pylons.controllers.util import abort

class AdminControllerBase(BaseController):
	model = model # where your SQLAlchemy mappers are
	forms = forms # module containing FormAlchemy fieldsets definitions

	# # Uncomment this to impose an authentication requirement
	# @authorize(SignedIn())
	# def __before__(self):
	#     pass

	def Session(self): # Session factory
		return meta.Session

	## customize the query for a model listing
	# def get_page(self, **kwargs):
	#     if self.model_name == 'Foo':
	#         collection = meta.Session.query(model.Foo).order_by(model.Foo.bar)
    #         kwargs['collection'] = collection
	#     return super(AdminControllerBase, self).get_page(**kwargs)

AdminController = ModelsController(AdminControllerBase,
                                   prefix_name='admin',
                                   member_name='model',
                                   collection_name='models',
                                  )

# Added by Shabti auth_repozepylons template

