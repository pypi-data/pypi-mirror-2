# -*- coding: utf-8 -*-
import logging

from pylons import request, response, session, tmpl_context as c
from pylons.controllers.util import abort, redirect

from {{package}}.lib.base import BaseController, render

log = logging.getLogger(__name__)

from {{package}}.model import *
from {{package}}.lib.decorators import authorize
from {{package}}.lib.auth.permissions import SignedIn

class DemoController(BaseController):

    # Need to protect an entire controller?
    # Decorating __before__ protect all actions
    
    # @authorize(SignedIn())
    def __before__(self):
        pass

    def index(self):
        c.users = User.filter_by(active=1)
        c.groups = Group.filter_by(active=1)
        c.permissions =[]
        c.title = 'Test'
        return render('test.mako')

    # Need to protect just a single action?
    #Â Do it like this ....
    @authorize(SignedIn())
    def privindex(self):
        c.users = User.filter_by(active=1)
        c.groups = Group.filter_by(active=1)
        c.permissions = []
        c.user = request.environ['AUTH_USER']
        c.title = 'Test'
        return render('test.mako')
    
    
    def show_graph(self):
        # Pretty-print the graph, serialized in n3
        
        c.users = User.filter_by(active=1)
        c.groups = Group.filter_by(active=1)
        c.permissions =[]
        c.title = 'Test'
        
        import pygments
        from pygments import lexers, formatters
        formatter = formatters.HtmlFormatter(lineseparator='<br />')
        lexer = lexers.get_lexer_by_name('n3')
        c.n3 = pygments.highlight(c.graph.serialize(format="n3"), lexer, formatter)
        return render('default.mako')
    

