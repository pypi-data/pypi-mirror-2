import os.path

import paste.fileapp
from pylons.middleware import error_document_template, media_path
from webhelpers.html.builder import literal
from pylons import request, tmpl_context as c
import cgi
from {{package}}.lib.base import BaseController, render
from {{package}}.lib.helpers import dcmeta

import logging
log = logging.getLogger(__name__)


class ErrorController(BaseController):
    """Generates error documents as and when they are required.
    
    The ErrorDocuments middleware forwards to ErrorController when error
    related status codes are returned from the application.
    
    This behaviour can be altered by changing the parameters to the
    ErrorDocuments middleware in your config/middleware.py file.
    """
    
    def __before__(self):
        c.dcmeta = dcmeta(title="Error", description="No details")
        c.title = c.dcmeta.title
        c.uri = "error"

    # def document(self):
    #     """Render the error document"""
    #     resp = request.environ.get('pylons.original_response')
    #     content = literal(resp.body) or cgi.escape(request.GET.get('message', ''))
    #     page = error_document_template % \
    #         dict(prefix=request.environ.get('SCRIPT_NAME', ''),
    #              code=cgi.escape(request.GET.get('code', str(resp.status_int))),
    #              message=content)
    #     return page


    def document(self):
        """Render the error document"""
        resp = request.environ.get('pylons.original_response')
        log.debug("Response %s" % resp)
        content = literal(resp.body) or cgi.escape(request.GET.get('message', ''))
        if content.find('moin_static181') > -1:
            log.debug("MOIN")
            return content
        else:
            log.debug("NONMOIN")
            c.prefix=request.environ.get('SCRIPT_NAME', '')
            c.code=cgi.escape(request.GET.get('code', str(resp.status_int)))
            c.message=content
            # return page
            return render('error.mako')
    
    
    def img(self, id):
        """Serve Pylons' stock images"""
        return self._serve_file(os.path.join(media_path, 'img', id))
    
    
    def style(self, id):
        """Serve Pylons' stock stylesheets"""
        return self._serve_file(os.path.join(media_path, 'style', id))
    
    
    def _serve_file(self, path):
        """Call Paste's FileApp (a WSGI application) to serve the file
        at the specified path
        """
        fapp = paste.fileapp.FileApp(path)
        return fapp(request.environ, self.start_response)
    
    
