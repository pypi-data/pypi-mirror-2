# -*- coding: utf-8 -*-
"""
Vanilla SQLAlchemy identity model based on the identity
model developed for the tesla-pylons-elixir project:
http://code.google.com/p/tesla-pylons-elixir/
"""
import logging
from datetime import datetime
import bcrypt
from {{package}}.model import meta
from sqlalchemy import *
from sqlalchemy import orm
from {{package}}.model.meta import Session, metadata
from sqlalchemy.orm.interfaces import MapperExtension

log = logging.getLogger(__name__)

__all__ = ['User', 'Permission', 'Group', 'NotAuthenticated']

def encrypt_value(value):
    return bcrypt.hashpw(value, bcrypt.gensalt())


class EncryptPasswords(MapperExtension):
    """A mapper extension to automatically encrypt
       passwords before they are stored in the db.
       Based on Beachcoder's example:
       http://bit.ly/2NAPa"""
    def __init__(self, field_for_encryption):
        self.field = field_for_encryption
    
    def before_insert(self, mapper, connection, instance):
        self.field = getattr(instance, 'password') or False
        if self.field and \
                self.field == getattr(instance, 'password_check'):
            encrypted_password = encrypt_value(self.field)
            setattr(instance, 'password', encrypted_password)
            setattr(instance, 'password_check', encrypted_password)
    
    def before_update(self, mapper, connection, instance):
        self.field = getattr(instance, 'password') or False
        if self.field and \
                self.field != getattr(instance, 'password_check'):
            encrypted_password = encrypt_value(self.field)
            setattr(instance, 'password', encrypted_password)
            setattr(instance, 'password_check', encrypted_password)
    


class NotAuthenticated(Exception):pass

# "Group" entity class
group =  Table(
    'group', metadata,
    Column(u'id', 
            Integer(),
            Sequence('group_seq_id', optional=True),
            primary_key=True,
            unique=True),
    Column(u'name', 
            String(length=30, convert_unicode=False),
            primary_key=0,
            unique=True),
    Column(u'description',
            String(length=255, convert_unicode=False),
            primary_key=0),
    Column(u'created', 
            DateTime(timezone=False),
            primary_key=0),
    Column(u'active', Boolean(),
            primary_key=0))


# "Permission" entity class
permission =  Table(
    'permission', metadata,
    Column(u'id', 
            Integer(),
            Sequence('permission_seq_id', optional=True),
            primary_key=True,
            unique=True),
    Column(u'name', 
            String(length=30, convert_unicode=False),
            primary_key=0,
            unique=True),
    Column(u'description', 
            String(length=255, convert_unicode=False),
            primary_key=0)
    )


# "Permission<->Group" connecting table
permission_groups__group_permissions =  Table(
    'permission_groups__group_permissions', metadata,
    Column(u'group_id',
            Integer(),
            primary_key=1,
            nullable=False),
    Column(u'permission_id', 
            Integer(),
            primary_key=1,
            nullable=False),
    ForeignKeyConstraint(
            [u'permission_id'],
            [u'permission.id'],
            name=None),
    ForeignKeyConstraint(
            [u'group_id'],
            [u'group.id'],
            name=None))


# "User" entity class
user =  Table(
    'user', metadata,
    Column(u'id',
            Integer(),
            Sequence('user_seq_id', optional=True),
            primary_key=True,
            unique=True),
    Column(u'username',
            String(length=30, convert_unicode=False),
            primary_key=0,
            unique=True),
    Column(u'displayname', 
            String(length=255, convert_unicode=True),
            primary_key=0),
    Column(u'password',
            String(length=40, convert_unicode=False),
            primary_key=0),
    Column(u'password_check',
            String(length=40, convert_unicode=False),
            primary_key=0),
    Column(u'email',
            String(length=255, convert_unicode=False),
            primary_key=0),
    Column(u'created',
            DateTime(timezone=False),
            primary_key=0, 
            default=datetime.utcnow()),
    Column(u'active',
            Boolean(),
            primary_key=0,
            default=True))


# "User<->Group" connecting table
user_groups__group_users =  Table(
    'user_groups__group_users', metadata,
    Column(u'user_id', 
            Integer(), 
            primary_key=1, 
            nullable=False),
    Column(u'group_id', 
            Integer(), 
            primary_key=1, 
            nullable=False),
    ForeignKeyConstraint(
            [u'group_id'],
            [u'group.id'], 
            name=None),
    ForeignKeyConstraint(
            [u'user_id'],
            [u'user.id'],
            name=None))


# Class definitions, to Pythonise the SQL records and
# provide useful methods

class User(object):
    @property
    def permissions(self):
        permissions = set()
        for g in self.groups:
            permissions = permissions | set(g.permissions)
        return permissions       
    
    @property
    def permission_names(self):
        return [p.name for p in self.permissions]
    
    def has_permission(self, perm):
        return (perm in self.permission_names)
    
    def __unicode__(self):
        return self.displayname
    
    @classmethod
    def authenticate(cls, username, password):
        try:
            user = Session.query(cls).filter_by(
                        username=username, active=True).one()
            if user and bcrypt.hashpw(password, user.password) == user.password:
                log.debug("Authentication succeeded")
                return user
        except Exception, emsg:
            log.debug("Authentication failed: %s" % str(emsg))
            raise NotAuthenticated
        raise NotAuthenticated
    
    def validate_password(self, user, password):
        return bcrypt.hashpw(password, user.password) == user.password
    
    def showself(self):
        return '\n'.join(["%s: %s" % (f, getattr(self, f) or 'Unset')
                    for f in ['id', 'username', 'displayname',
                              'password', 'password_check', 'email',
                              'created', 'active']])
    


class Group(object):
    def __unicode__(self):
        return u''+(self.name or u'Group:%s' % self.id)
    

class Permission(object):
    def __unicode__(self):
        return u''+(self.name or u'Permission:%s' % self.id)
    


# Mappers
# User mapper
orm.mapper(
        User,
        user,
        properties=dict(groups=orm.relation(Group,
                          secondary=user_groups__group_users)),
        extension=[EncryptPasswords('password')])


# Group mapper
orm.mapper(
        Group,
        group,
        properties=dict(users=orm.relation(User,
                            secondary=user_groups__group_users),
        permissions=orm.relation(
                    Permission,
                    secondary = permission_groups__group_permissions)))
    


# Permission mapper
orm.mapper(
        Permission,
        permission,
        properties=dict(groups=orm.relation(
                    Group,
                    secondary=permission_groups__group_permissions)))
        




