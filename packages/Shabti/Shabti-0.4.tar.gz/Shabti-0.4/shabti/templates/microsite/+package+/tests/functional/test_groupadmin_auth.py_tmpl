# microsite/tests/functional/test_groupadmin_auth
from pylons import url
from {{package}}.model import *
from {{package}}.tests import *

class TestGroupAuthAdminController(TestAuthenticatedController):
    def test_authorised_group_GET_allowed(self):
        """GroupAdmin (microsite): authorised group GET requests are permitted"""
        response = self.app.get(
                        url=url(controller='groups', action='show', id=1))
        
        assert response.status_int == 200
    
    
    def test_authorised_group_GET_nonexistent_prohibited(self):
        """GroupAdmin (microsite): authorised but improper page GET requests are prohibited"""
        response = self.app.get(
                        url=url(controller='groups', action='show', id=20),
                        status=404,
                        expect_errors=True)
        
        assert response.status_int == 404
    
    
    def test_authorised_group_GET_update_prohibited(self):
        """GroupAdmin (microsite): authorised group GET update requests are prohibited"""
        response = self.app.get(
                        url=url(controller='groups', action='update', id='1'),
                        params={'name': u'Fake Name'},
                        status=404,
                        expect_errors=True)
                                
        assert response.status_int == 404
    
    
    def test_authorised_group_GET_delete_prohibited(self):
        """GroupAdmin (microsite): authorised group GET delete requests are prohibited"""
        response = self.app.get(url=url('delete_group',id=1),
                                status=404,
                                expect_errors=True)
        
        assert Session.query(Group).get(1) != None
    
    
    def test_authorised_group_DELETE_nonexistent_prohibited(self):
        """GroupAdmin (microsite): authorised deletions of non-existent groups are prohibited"""
        response = self.app.delete(
                        url=url(controller='groups', action='delete', id='4'),
                        status=404,
                        expect_errors=True)
        
        assert response.status_int == 404
    
    
    def test_authorised_group_PUT_update_allowed(self):
        """GroupAdmin (microsite): authorised group POST updated requests are permitted"""
        
        d = dict(name=u"Fake Name",
                 description=u"Fake description", 
                 _method="PUT")
        
        response = self.app.post(
                        url=url(controller='groups', action='update', id=1),
                        params=d)
        
        newresponse = response.follow()
        
        name1 = newresponse.forms.get(
                    'group_form').fields.get(
                            'name', '')[0].value
            
        assert name1 == 'Fake Name'
    
    
    def test_authorised_group_POST_create_allowed(self):
        """GroupAdmin (microsite): authorised group PUT(POST) create requests are permitted"""
        # Step one, retrieve the resource from /user/new ..
        response = self.app.get(
                        url=url(controller='groups', action='new'))
        
        form = response.forms.get('new_group_form')
        
        d = dict(name=u"Fake Name",
                 description=u"Fake description")
        
        # Step two, insert the new values
        for k in d.keys():
            form.set(k, u''+d[k])
        
        # Step 4, submit the form and test the database for
        # the expected addition
        res = form.submit()
        
        newgroups = Session.query(Group
                        ).filter_by(name=u'Fake Name').all()
        
        assert len(newgroups) == 1
        
        assert newgroups[0].name == u'Fake Name'
    


# --- Added by Shabti microsite template
