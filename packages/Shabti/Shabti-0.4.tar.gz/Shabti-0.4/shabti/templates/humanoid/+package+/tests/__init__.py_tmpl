# -*- coding: utf-8 -*-
"""Pylons application test package

This package assumes the Pylons environment is already loaded, such as
when this script is imported from the `nosetests --with-pylons=test.ini`
command.

This module initializes the application via ``websetup`` (`paster
setup-app`) and provides the base testing objects.
"""
from unittest import TestCase
import logging
from paste.deploy import loadapp
from paste.script.appinstall import SetupCommand
from pylons import url
from routes.util import URLGenerator
from webtest import TestApp

import pylons.test
import datetime

from {{package}} import model
import {{package}}.model.meta as meta
from {{package}}.model import *
from {{package}}.model.meta import Session

__all__ = ['environ', 'url', 'TestController', 'TestModel']

# Choose ...
# ======= Vanilla SQLAlchemy ==================================================
# the_metadata = meta.metdata

# or

# ======= Declarative base ====================================================
the_metadata = Base.metadata

log = logging.getLogger(__name__)

# Invoke websetup with the current config file
# SetupCommand('setup-app').run([pylons.test.pylonsapp.config['__file__']])

environ = {}

class TestModel(TestCase):
    def setUp(self):
        # meta.metadata.drop_all(bind=meta.engine, checkfirst=True)
        the_metadata.create_all(bind=meta.engine)
        log.debug("Database successfully initialised.")
        log.debug("Populating database with entities")
        the_metadata.drop_all(bind=meta.engine, checkfirst=True)
        the_metadata.create_all(bind=meta.engine)
        perm = Permission()
        # perm.id = 1
        perm.name = u"Editors"
        perm.description = u"Can edit content."
        meta.Session.add(perm)
        gadmin = Group()
        # gadmin.id = 1
        gadmin.name = u"Administrators"
        gadmin.description = u"Administration group"
        gadmin.created = datetime.datetime.utcnow()
        gadmin.active = True
        meta.Session.add(gadmin)
        meta.Session.commit()
        g = meta.Session.query(Group).filter_by(
                    name=u"Administrators").all()
        assert len(g) == 1
        assert g[0] == gadmin
        admin = User()
        # admin.id = 1
        admin.username = u"admin"
        admin.displayname = u"Administrator account"
        admin.password="admin"
        admin.password_check=u"admin" 
        admin.email=u"admin@example.com"
        admin.created = datetime.datetime.utcnow()
        admin.active = True
        gadmin.users.append(admin)
        gadmin.permissions.append(perm)
        meta.Session.add(admin)
        u = meta.Session.query(User).filter_by(username=u"admin").all()
        assert len(u) == 1
        assert u[0] == admin
        meta.Session.commit()
        log.debug("Successfully set up.")
    
    
    def tearDown(self):
        the_metadata.drop_all(meta.engine)
        meta.Session.commit()
    

class TestController(TestModel):

    def __init__(self, *args, **kwargs):
        wsgiapp = pylons.test.pylonsapp
        config = wsgiapp.config
        self.app = TestApp(wsgiapp)
        url._push_object(URLGenerator(config['routes.map'], environ))
        TestCase.__init__(self, *args, **kwargs)
    

class TestAuthenticatedController(TestModel):
    
    def __init__(self, *args, **kwargs):
        wsgiapp = pylons.test.pylonsapp
        config = wsgiapp.config
        self.app = TestApp(wsgiapp, extra_environ=dict(REMOTE_USER='admin'))
        url._push_object(URLGenerator(config['routes.map'], environ))
        TestCase.__init__(self, *args, **kwargs)
    

