"""Pylons application test package

This package assumes the Pylons environment is already loaded, such as
when this script is imported from the `nosetests --with-pylons=test.ini`
command.

This module initializes the application via ``websetup`` (`paster
setup-app`) and provides the base testing objects.
"""
from unittest import TestCase
import os
import sys

import pylons
from pylons.i18n.translation import _get_translator
from paste.deploy import loadapp
from pylons import url
from paste.script.appinstall import SetupCommand
from routes.util import URLGenerator
from webtest import TestApp
import pylons.test
import datetime
import hashlib

from {{package}}.config.environment import load_environment


__all__ = ['environ', 'url', 'TestController', 
           'TestModel', 'TestAuthenticatedController']

# Invoke websetup with the current config file
# SetupCommand('setup-app').run(
#       [pylons.test.pylonsapp.config['__file__']])

# No, don't. Do it this way instead ...
from paste.deploy import appconfig
import elixir
from elixir import *
from {{package}}.model import User, Permission, Group, ChangelogItem, Page
from {{package}}.model import meta
from {{package}} import model
from sqlalchemy import engine_from_config

here_dir = os.path.dirname(__file__)
conf_dir = os.path.dirname(os.path.dirname(here_dir))
test_file = os.path.join(conf_dir, 'test.ini')
conf = appconfig('config:' + test_file)
config = load_environment(conf.global_conf, conf.local_conf)
environ = {}
engine = engine_from_config(config, 'sqlalchemy.')
model.init_model(engine)
metadata = elixir.metadata
Session = elixir.session = meta.Session

class TestModel(TestCase):
    def setUp(self):
        from {{package}}.lib import chomsky
        elixir.session.configure(bind=engine)
        metadata.create_all(engine)
        perm = Permission(name = u"Editors",
                          description = u"Can edit content.")
        Session.add(perm)
        gadmin = Group(name = u"Administrators",
                       description = u"Administration group",
                       created = datetime.datetime.utcnow(),
                       active = True)
        Session.add(gadmin)
        g = Session.query(Group).filter_by(
                    name=u"Administrators").all()
        assert len(g) == 1
        assert g[0] == gadmin
        admin = User(username = u"admin", 
                     password=hashlib.sha1("admin").hexdigest(),
                     password_check=hashlib.sha1("admin").hexdigest(), 
                     email="admin@example.com",
                     created = datetime.datetime.utcnow(),
                     active = True)
        gadmin.users.append(admin)
        gadmin.permissions.append(perm)
        Session.add(admin)
        ce = ChangelogItem(content=admin.username,
                           user=admin,
                           refid=admin.id, 
                           action=u'add')
        Session.add(ce)
        u = Session.query(User).filter_by(username=u"admin").all()
        assert len(u) == 1
        assert u[0] == admin

        user = User(username = u"test", 
                     password=hashlib.sha1("test").hexdigest(),
                     password_check=hashlib.sha1("test").hexdigest(), 
                     email="test@example.com",
                     created = datetime.datetime.utcnow(),
                     active = True)
        assert user.username == u'test'
        Session.add(user)
        group = Group(name = u'Subscription Members')
        Session.add(group)
        assert group.name == u'Subscription Members'
        group.permissions.append(Permission(name = u'add_users'))
        assert len(group.permissions) == 1
        Session.add(group)
        u = Session.query(User).all()
        assert len(u) == 2
        home = Page(title = u"msite home page",
                    content = u''.join(['<p>%s</p>' % chomsky.chomsky(times=x) for x in range(1,4)]),
                    slug = 'home', 
                    published = datetime.datetime.utcnow(),
                    author = admin,
                    display = True)
        Session.add(home)
        about = Page(title = u"About msite",
                     content = u''.join(['<p>%s</p>' % chomsky.chomsky(times=x) for x in range(1,4)]),
                     slug = 'about', 
                     published = datetime.datetime.utcnow(),
                     author = admin,
                     display = True)
        Session.add(about)
        pgs = Session.query(Page).all()
        assert len(pgs) == 2
        Session.commit()
    
    
    def tearDown(self):
        metadata.drop_all(engine)
    

    # def setUp(self):
    #     metadata.bind = 'sqlite:///:memory:'
    #     create_all()
    # 
    # def tearDown(self):
    #     # clear the session and rollback any open transaction
    #     session.close()
    #     # drop all tables, so that we don't leak any data from one test to the
    #     # other
    #     drop_all()


class TestController(TestModel):
    def __init__(self, *args, **kwargs):
        wsgiapp = loadapp('config:test.ini', relative_to=conf_dir)
        config = wsgiapp.config
        pylons.app_globals._push_object(config['pylons.app_globals'])
        pylons.config._push_object(config)
        
        # Initialize a translator for tests that utilize i18n
        translator = _get_translator(pylons.config.get('lang'))
        pylons.translator._push_object(translator)
        
        url._push_object(URLGenerator(config['routes.map'], environ))
        self.app = TestApp(wsgiapp)
        TestCase.__init__(self, *args, **kwargs)
    

class TestAuthenticatedController(TestModel):
    def __init__(self, *args, **kwargs):
        wsgiapp = loadapp('config:test.ini', relative_to=conf_dir)
        config = wsgiapp.config
        pylons.app_globals._push_object(config['pylons.app_globals'])
        pylons.config._push_object(config)
        
        # Initialize a translator for tests that utilize i18n
        translator = _get_translator(pylons.config.get('lang'))
        pylons.translator._push_object(translator)
        
        url._push_object(URLGenerator(config['routes.map'], environ))
        self.app = TestApp(wsgiapp, 
                extra_environ=dict(REMOTE_USER='admin'))
        TestCase.__init__(self, *args, **kwargs)
    

# Overwritten by Shabti microsite template
