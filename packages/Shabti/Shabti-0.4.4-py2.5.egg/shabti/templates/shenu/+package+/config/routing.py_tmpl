"""Routes configuration

The more specific and detailed routes should be defined first so they
may take precedent over the more generic routes. For more information
refer to the routes manual at http://routes.groovie.org/docs/
"""
from routes import Mapper

def make_map(config):
    """Create, configure and return the routes Mapper"""
    map = Mapper(directory=config['pylons.paths']['controllers'],
                 always_scan=config['debug'])
    map.minimization = False

    # The ErrorController route (handles 404/500 error pages); it should
    # likely stay at the top, ensuring it can always be resolved
    map.connect('/error/{action}', controller='error')
    map.connect('/error/{action}/{id}', controller='error')

    # CUSTOM ROUTES HERE
    map.resource('comment','comments')

    map.connect('blogs', '/blogs/',
                controller='blogs', action='index')

    map.connect('admin_blog', '/blogs/{bid}/admin',
                controller='blogs', action='admin',
                requirements=dict(blogslug='\d+'))

    map.connect('view_blog', '/blogs/{blogslug}/view',
                controller='blogs', action='view',
                requirements=dict(blogslug='\w+'))

    map.connect('blogindex', '/blogs/{blogslug}/index',
                controller='blogs', action='blogindex',
                requirements=dict(blogslug='\w+'))

    map.connect('view_post', '/blogs/{blogslug}/{postslug}/view',
                controller='blogs', action='postview',
                requirements=dict(blogslug='\w+',postslug='\w+'))

    map.connect('blogadmin_dash', '/blogadmin/{bid}/dash',
                controller='blogadmin', action='dash',
                requirements=dict(bid='\d+'))

    map.connect('blogadmin_index', '/blogadmin/',
                controller='blogadmin', action='index')

    map.connect('blogadmin_write_post', '/blogadmin/{bid}/write/{pid}',
                controller='blogadmin', action='write',
                requirements=dict(bid='\d+',pid='\d+'))

    map.connect('blogadmin_write', '/blogadmin/{bid}/write',
                controller='blogadmin', action='write',
                requirements=dict(bid='\d+'), pid=None)

    map.connect('blogadmin_manage_posts', '/blogadmin/{bid}/manage_posts',
                controller='blogadmin', action='manage_posts',
                requirements=dict(bid='\d+'))

    map.connect('blogadmin_manage_comments', '/blogadmin/{bid}/manage_comments/{pid}',
                controller='blogadmin', action='manage_comments',
                requirements=dict(bid='\d+',pid='\d+'))

    map.connect('blogadmin_manage_tags', '/blogadmin/{bid}/manage_tags',
                controller='blogadmin', action='manage_tags',
                requirements=dict(bid='\d+'))

    map.connect('blogadmin_manage', '/blogadmin/{bid}/manage',
                controller='blogadmin', action='manage',
                requirements=dict(bid='\d+'))

    # Todo - RESTIfy blog, post and comment operations
    map.connect('blogadmin_delete_blog', '/blogadmin/{bid}/delete_blog',
                controller='blogadmin', action='delete_blog',
                requirements=dict(bid='\d+'))

    map.connect('blogadmin_new_post', '/blogadmin/{bid}/new_post',
                controller='blogadmin', action='new_post',
                requirements=dict(bid='\d+'))

    map.connect('blogadmin_delete_post', '/blogadmin/{bid}/delete_post/{pid}',
                controller='blogadmin', action='delete_post',
                requirements=dict(bid='\d+',pid='\d+'))

    map.connect('blog_settings', '/blogadmin/{bid}/settings',
                controller='blogadmin', action='settings',
                requirements=dict(bid='\d+'))

    map.connect('blog_general_settings', '/blogadmin/{bid}/settings_general',
                controller='blogadmin', action='settings_general',
                requirements=dict(bid='\d+'))

    map.connect('save_general_settings', '/blogadmin/{bid}/save_settings_general',
                controller='blogadmin', action='save_settings_general',
                requirements=dict(bid='\d+'))

    map.connect('blog_reading_settings', '/blogadmin/{bid}/settings_reading',
                controller='blogadmin', action='settings_reading',
                requirements=dict(bid='\d+'))

    map.connect('blog_comments_settings', '/blogadmin/{bid}/settings_comments',
                controller='blogadmin', action='settings_comments',
                requirements=dict(bid='\d+'))

    map.connect('blog_trackback', '/blogs/{bid}/trackback/{pid}',
                controller='blogs', action='trackback',
                requirements=dict(bid='\d+',pid='\d+'))

    map.connect('post_comment', '/blogs/{blogslug}/{postslug}/comment/{cid}',
                controller='blogs', action='view_comment',
                requirements=dict(blogslug='\w+',postslug='\w+', cid='\d+'))

    map.connect('post_add_comment', '/blogs/{blogslug}/{postslug}/add_comment',
                controller='blogs', action='add_comment',
                requirements=dict(blogslug='\w+',postslug='\w+'))

    map.connect('post_edit_comment', '/blogs/{blogslug}/{postslug}/edit_comment/{commentid}',
                controller='blogs', action='edit_comment',
                requirements=dict(blogslug='\w+',postslug='\w+', commentid='\d+'))

    map.connect('post_delete_comment', '/blogs/{blogslug}/{postslug}/delete_comment/{commentid}',
                controller='blogs', action='delete_comment',
                requirements=dict(blogslug='\w+',postslug='\w+', commentid='\d+'))

    map.connect('admin_blog', '/blogs/{blogslug}/admin/{act}',
                controller='blogs', action='admin',
                requirements=dict(blogslug='\w+',act='\w+'))

    map.connect('show_user', '/user/{id}',
                controller='blogs', action='user_show',
                requirements=dict(id='\d+'))

    map.connect('/{controller}/{action}')
    map.connect('/{controller}/{id}/{action}')

    return map
