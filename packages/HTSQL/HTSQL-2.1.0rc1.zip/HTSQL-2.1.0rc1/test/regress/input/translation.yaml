#
# Copyright (c) 2006-2011, Prometheus Research, LLC
# See `LICENSE` for license information, `AUTHORS` for the list of authors.
#

title: Edge Cases of HTSQL-to-SQL Translation
id: translation
tests:

# FIXME: update and refurbish!

- title: Random collection of tests
  tests:

  # Simple (non-aggregate) filters.
  - title: Simple filters
    tests:
    - uri: /school?code='ns'
    - uri: /department?school.code='ns'
    - uri: /department?school.code={'art','la'}
    - uri: /program?school.code='ns'&code='uchem'
    - uri: /course?credits=5
    - uri: /department?school
    # ENUM literal.
    - uri: /semester?season='fall'
    # Using the same term for a filter and a selector
    - uri: /program{school.name,title}?school.code='art'
    # Functional syntax
    - uri: /school.filter(code='ns')
    - uri: /department.filter(school.code={'art','la'})

  # Simple (non-aggregate) selectors.
  - title: Simple selectors
    tests:
    - uri: /school{name}
    - uri: /department{school.*,*}
    - uri: /department{school.name+' - '+name}
    # Empty selectors are broken
    - uri: /{}
      skip: true
    - uri: /school{}
      skip: true
    # Functional syntax
    - uri: /school.select(name)
    - uri: /department.select(school.*, *)

  # Plural links and aggregates.
  - title: Aggregates
    tests:
    - uri: /exists(school)
    - uri: /count(school)
    - uri: /exists(school?exists(department))
    - uri: /count(school?exists(department))
    - uri: /{exists(school?!exists(department)),
             count(school?!exists(department))}
      ifndef: oracle # Oracle cannot handle EXISTS and an aggregate in
                     # the same SELECT clause.
    - uri: /{count(course),min(course.credits),
                           max(course.credits),
                           avg(course.credits)}
    - uri: /{count(school),count(department),count(course)}
    - uri: /{count(department),count(department?exists(course))}
    - uri: /department{code,count(course{credits=3})}
    - uri: /department{code,count(course?credits=3)}
    - uri: /school{code,count(department.course{credits=3})}
    - uri: /school{code}?count(department.course{credits=3})=20
    - uri: /department?exists(course.credits=5)
    - uri: /department?every(course.credits=5)
    - uri: /department{code,min(course.credits),max(course.credits)}
    - uri: /department{code,avg(course.credits),
                            sum(course.credits)/count(course.credits)}
      skip: true
    - uri: /department?exists(course)
    - uri: /school?!exists(department)
    - uri: /school{*,count(department)}
    - uri: /school{*,count(department?exists(course))}
    # MSSQL does not allow the argument of an aggregate to contain
    # a subquery.
    - uri: /school{*,count(department.exists(course))}
      ifndef: mssql
    - uri: /school{code,count(department),count(program)}
    - uri: /school{code,exists(department),exists(program)}
      skip: true # broken until `reduce` is implemented
    # Aggregates sharing the same spaces.
    - uri: /department{sum(course.credits),count(course.credits),
                       avg(course.credits)}?exists(course)
    # Aggregates with non-native spaces.
    # Triggers a bug in the Postgresql optimizer
    # (see http://archives.postgresql.org/pgsql-bugs/2010-09/msg00265.php).
    - uri: /department{code,school.code,
                       count(school.program),school.count(program)}
    - uri: /department{code,school.code,
                       exists(school.program),school.exists(program)}
    # Ensure that aggregates are not lost during the reduction process
    - uri: /{count(school)&false(),count(school)|true()}
    - uri: /{count(school)==null()}
    # Reduction of aggregates to the scalar space.
    - uri: /this(){count(school)}
    - uri: /this(){count(school)}?false()
    - uri: /this(){count(school)}?exists(school)
    - uri: /this(){count(school)}?count(school)>1
    # Unmasking and bundling aggregate units
    - uri: /school{code,count(program)}?count(program)>3
    # Merging terms with parallel ties
    # (broken due to changed selector semantics)
    - uri: /school.program{school, code, degree,
                           count(root(){(school?code='art').program.student})}
                           ?school~'a'
      skip: true
    - uri: /program.school{code, root().program{code, degree},
                           count(root(){(program?degree='ba').school.department})}
                           ?code~'a'
      skip: true
    - uri: /department{name,sum(course.credits)-,avg(course.credits)}?sum(course.credits)

  - title: Root, This, Direct and Fiber functions
    tests:
    # Cross joins.
    - uri: /{count(school)*count(department),count(school.fiber(department))}
    # Custom joins.
    - uri: /{count(school.department),
             count(school.fiber(department)?school_code=root().school.code),
             count(school.fiber(department,code,school.code))}
    - uri: /school{code,count(department)}?count(department)=max(fiber(school).count(department))
    - uri: /school.program{school_code,code,count(student)}?count(student)=max(fiber(program,school_code).count(student))
    # Lifting a unit to a dominating space
    # (broken due to changed selector semantics)
    - uri: /{count(school),this(){count(school)}?true(),this(){count(school)}?false()}
      skip: true
    - uri: /school{code,name,this(){code}?name!~'art',
                   root().school{code}?name!~'art'}
      skip: true
    - uri: /school{name,count(department),this(){count(department)}?name!~'art'}
      skip: true
    - uri: /school{name,exists(department),this(){exists(department)}?name!~'art'}
      skip: true
    # The `home()` function.
    # Empty selector
    - uri: /home()
      expect: 400
    - uri: /home(){2+2}
    - uri: /school.home(){2+2}
    - uri: /school.home().school{root().school.*, *}
    - uri: /(department?school.code='art').home().(department?school.code='la')
                {root().(department?school.code='art').*, *}
    - uri: /distinct(program{degree}?school.code='art').home().distinct(program{degree}?school.code='la')
                {root().distinct(program{degree}?school.code='art').*, *}
    - uri: /school{code,count(department)}
                ?count(department)>avg(home().school.count(department))
    # The `mix()` namespace.
    - uri: /school.program{mix(){name+,title+}}.limit(10)
    - uri: /define(students_by_year(y) := student?year(dob)=mix().y)
            .students_by_year(1990)
    - uri: /define(students_by_year(y) := student?year(dob)=mix().y,
                   students_by_ym(y,m) := students_by_year(y)?month(dob)=mix().m)
            .students_by_ym(1990,2)
    - uri: /define(p:=this(), q:=1){p{mix().q}}
    # Lookup error because `q` is not available in the context where `p`
    # is evaluated.
    - uri: /define(p:=this(), q:=1){p{q}}
      expect: 400
    - uri: /school.program{title, mix().name}.limit(10)
    # Lookup error because deep lookup does not go through the definition body.
    - uri: /define(p:=school.program).p{title, mix().name}.limit(10)
      expect: 400

  - title: Link and Fork
    tests:
    # link()
    - uri: /school.link(department)
    - uri: /school{code, count(link(department))}
    - uri: /school.link(home().department)
    - uri: /school{code, count(link(home().department))}
    - uri: /school.link(home().department, code=home().department.school_code)
    - uri: /school{code, count(link(home().department, code=home().department.school_code))}
    - uri: /(school?code='art').link(department)
    - uri: /(school?code='art'){code, count(link(department))}
    - uri: /(school?code='art').link(home().department)
    - uri: /(school?code='art'){code, count(link(home().department, code=home().department.school_code))}
    - uri: /{link(this()){count(school)}, link(this(),true()){count(school)}, link(this(),false()){count(school)}}
    # linking operator
    - uri: /school.(code -> department{school_code})
    - uri: /(school?code='art').(code -> department{school_code}){code, count(course)}
    - uri: /school{code, count(code -> department{school_code}),
                         avg((code -> department{school_code}).sum(course.credits))}
    - uri: /school{code, count(code -> department{school_code}),
                         avg((code -> department{school_code}).sum(course.credits))}?code='art'
    - uri: /(school?code='art').define($school_code:=code)
            .(({} -> department)?code='be'){$school_code, code}
    - uri: /school{code, count({} -> department)}?code='art'
    - uri: /course{department.code,no,credits}?credits=max(({} -> course).credits)
    - uri: /course{department.code,no,credits,count(class)}
                  ?credits=max((count(class) -> course).credits)
    - uri: /program{school.code, code, degree,
                    num_parts := count({school_code,code} -> program{school_code,part_of})}
                   ?num_parts=max(fork().num_parts)
    - uri: /'art'->school{code}
    # fork()
    - uri: /course{department.code,no,credits}?credits=max(fork().credits)
    - uri: /course{department.code,no,credits}?credits=max(fork(department_code).credits)
    - uri: /department.course{department.code,no,credits}?credits=max(fork().credits)
    - uri: /course{department.code,no,credits,count(class)}?credits=max(fork(exists(class)).credits)
      ifndef: [oracle, mssql] # subqueries are not permitted in the GROUP BY clause
    - uri: /course{department.code,no,credits,count(class)}?credits=max(fork(count(class)).credits)
    - uri: /program{school_code,code,count(student)}?count(student)>avg(fork().count(student))
    - uri: /program{school_code,code,count(student)}?count(student)>avg(fork(school_code).count(student))
    - uri: /school.program{school_code,code,count(student)}?count(student)>avg(fork().count(student))
    - uri: /program{school_code,code,count(student)}?count(student)>avg(fork().count(student))
            :where program := program?school_code='eng'
    - uri: /program{school_code,code,count(student)}?count(student)>avg(fork(school_code).count(student))
            :where program := program.limit(10,15)
    # fork() with projections
    - uri: /(program^degree)?count(^.student)=max(fork().count(^.student))
    # fork() with nullable kernel
    - uri: /program.fork(part_of){root().program{school.code, code, part_of}, school.code, code, part_of}
    # fork().fork() is inefficient
    - uri: /school.fork().fork().fork()
      skip: true

  - title: Table Expressions
    tests:
    - uri: /(school?code='art').department
    # An empty segment
    - uri: /{}
      expect: 400
    - uri: /school{}
      expect: 400

  - title: Assignments
    tests:
    - uri: /school.define(c:=department.course.credits)
                {code,min(c),max(c),sum(c),avg(c)}?exists(c)
    - uri: /school.define(program:=(program?degree='bs')
                                .define(student:=student?is_active))
                {code,count(program),count(program.student)}?code='eng'
    - uri: /school{code,count(program.student),
                   count((program.define(s:=student)?degree='bs').s),
                   count((program?degree='bs').define(s:=student).s)}?code='eng'
    - uri: /define(x:=2,y:=3,z:=x*y){x,y,z}
    - uri: /define(x:=2,x:=x+x,x:=x*x){x}
    - uri: /define(program.student:=student?is_active)
            .program{code,count(student)}?school.code='bus'
    - uri: /define(school.program.student:=student?is_active)
            .count((school?code='bus').program.student)
    - uri: /define(school.department.course:=course?credits>2,
                   school.department.course:=course?credits<5,
                   school.department:=department?code='acc')
            .school.department.course{department.code,no,title,credits}
    - uri: /define(double(x):=x*2){double(1),double(2),double(3)}
    - uri: /define(student.age(date):=(date(date)-date(dob))/365:round(1),
                   student.age():=age('2011-01-01'),
                   inactive_student:=student?!is_active)
            .inactive_student{name,dob,start_date,age(start_date),age()}
    - uri: /school{code,{count(student),
                         count(student?gender='m'),
                         count(student?gender='f')}
                        :where(student:=program.student?is_active)}
    - uri: /department.define(stats(c):={min(c.credits) :as min,max(c.credits) :as max})
                {stats(course), stats(course?no>=100&no<200)}?code='acc'
    - uri: /school.define($school_name:=name).filter(code='eng')
                  .department{$school_name, name}
    - uri: /school.define(student_by_year($year) := program.student?year(dob)=$year)
                  {code, count(student_by_year(1990)), count(student_by_year(1991)),
                         count(student_by_year(1992)), count(student_by_year(1993))}
    - uri: /school.define(student_by_year($year) := program.student?year(dob)=$year)
                  {code, student_by_year(1990).$year}
      expect: 400
    - uri: /define(f($x) := $x*2){{$x, f($x)} :where $x := 21}
    - uri: /school{code, num_dept := count(department)}?num_dept>3
    - uri: /school{code, $num_dept := count(department)}?$num_dept>3
    - uri: /school{code, program.num_stud := count(student)}
      expect: 400

  - title: Projections
    tests:
    - uri: /distinct(program{degree})
    - uri: /distinct(program{degree}){*}
    - uri: /distinct(program{degree}){degree}
    - uri: /distinct(program{degree})?false()
    - uri: /distinct(program{degree})?head(*1)='b'
    - uri: /distinct(program{degree})?head(degree)='b'
    - uri: /distinct(program{degree}){*}?head(*1)='b'
    - uri: /distinct(program{degree}?false())
    - uri: /distinct(program{degree}?tail(*1)='a')
    - uri: /distinct(program{degree}?false())?false()
    - uri: /distinct(program{degree}?tail(*1)='a')?head(*1)='b'
    - uri: /distinct(program{degree}){*, count(^)}
    - uri: /distinct(program{degree}){degree, count(program)}
    - uri: /distinct(program{degree}){*, count(^.student)}
    - uri: /distinct(program{degree}){degree, count(program.student)}
    - uri: /distinct(program{degree :if_null '--'})
    - uri: /distinct(student{year(dob),gender})
    - uri: /distinct(student{year(dob),gender}){*, *1, *2}
    - uri: /distinct(student{year(dob),gender}){*,count(^)}
    - uri: /distinct(student{y_dob:=year(dob),gender})
                {y_dob,gender,count(student)}
    - uri: /distinct(distinct(student{year(dob)}).^{gender})
                {*, count(^), count(^.is_active)}
    - uri: /distinct(distinct(student{year(dob), gender}){*1})
                {*, count(^), count(^.^), count(^.^.is_active)}

    - uri: /school.distinct(program{degree})
    - uri: /school.distinct(program{degree}){*}
    - uri: /school.distinct(program{degree})?false()
    - uri: /school.distinct(program{degree})?head(*1)='b'
    - uri: /school.distinct(program{degree}){*}?head(*1)='b'
    - uri: /school.distinct(program{degree}?false())
    - uri: /school.distinct(program{degree}?tail(*1)='a')
    - uri: /school.distinct(program{degree}?false())?false()
    - uri: /school.distinct(program{degree}?tail(*1)='a')?head(*1)='b'
    - uri: /school.distinct(program{degree}){*, count(^)}
    - uri: /school.distinct(program{degree}){*, count(^.student)}
    - uri: /school.distinct(program{degree :if_null '--'})

    - uri: /(school?code='art').(program^degree).^{title+, degree}

    - uri: /school.program.distinct(student{year(dob),gender})
    - uri: /school.program.distinct(student{year(dob),gender}){*, *1, *2}
    - uri: /school.program.distinct(student{year(dob),gender}){*, count(^)}
    - uri: /school.program.distinct(distinct(student{year(dob)}).^{gender})
                {*, count(^), count(^.is_active)}
    - uri: /school.program.distinct(distinct(student{year(dob), gender}){*1})
                {*, count(^), count(^.^), count(^.^.is_active)}

    - uri: /(program^degree){*, count(^)}?count(^)>5
    - uri: /(course^credits)?*1>3
    - uri: /(course^credits){*1-}
    - uri: /(((department?code='stdart').course^credits)?*1>3)
                {*, count(^)}
    - uri: /(school^count(program)){*, count(^)}
    - uri: /school.(program^degree)
    - uri: /department.(school.program^degree)
    - uri: /department.((school?code='art').program^degree)
    - uri: /(program^degree).^
    - uri: /(program.sort(count(student))^degree).^
                {*, count(student)}
    - uri: /(program^degree){*, exists(^), count(^)}
    - uri: /school{code, count(program), count(distinct(program{degree}))}
    - uri: /school{code, count(program), count(program^degree)}
    - uri: /(program^degree){*, count(^), count(^.student)}
    - uri: /(student^{year(dob),gender}){*, count(^), count(^?is_active)}
    - uri: /(student^{y_dob:=year(dob),gender})
                {*, count(student), count(student?is_active)}
    - uri: /count(program^degree)

    # The `distinct()` function.
    - uri: /distinct(program{degree})
                {*, count(^), count(^.student)}
    - uri: /distinct(program{degree}?school.code={'art','la'})
                {*, count(^), count(^.student)}
    - uri: /distinct(program{degree})
                {*, count(^), count(^.student)}?*1
    - uri: /(school?code={'art','la'}).distinct(program{degree})
                {*, count(^), count(^.student)}
    - uri: /distinct(program{degree}?school.code={'art','la'}).^

    # Known regressions.
    - uri: /(school^{})
      skip: true
    - uri: /(school^{null()})
      skip: true
    - uri: /(school^{true()})
      skip: true
    # A bug `rewrite` is not applied to `base` of an ordered space.
    - uri: /((program?school_code='art')^degree).limit(1)

