# This API was generated by pyCaCORE
import cabig.cabio.CaBioWSQueryService_client as services
from cabig.cacore.ws.proxy import *

schema = services.ns4

class InternetSource(WSBean):

    arrayType =  services.ns1.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.common.provenance.domain.InternetSource"

    id = ProxyAttr('id')
    name = ProxyAttr('name')
    ownerInstitution = ProxyAttr('ownerInstitution')
    ownerPersons = ProxyAttr('ownerPersons')
    sourceURI = ProxyAttr('sourceURI')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.InternetSource_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Provenance(WSBean):

    arrayType =  services.ns1.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.common.provenance.domain.Provenance"

    evidenceCode = ProxyAttr('evidenceCode')
    fullyQualifiedClassName = ProxyAttr('fullyQualifiedClassName')
    id = ProxyAttr('id')
    objectIdentifier = ProxyAttr('objectIdentifier')
    transformation = ProxyAttr('transformation')
    immediateSource = ProxyAssoc('immediateSource',False)
    originalSource = ProxyAssoc('originalSource',False)
    sourceReference = ProxyAssoc('sourceReference',False)
    supplyingSource = ProxyAssoc('supplyingSource',False)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Provenance_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class PublicationSource(WSBean):

    arrayType =  services.ns1.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.common.provenance.domain.PublicationSource"

    id = ProxyAttr('id')
    name = ProxyAttr('name')
    authors = ProxyAttr('authors')
    endPage = ProxyAttr('endPage')
    startPage = ProxyAttr('startPage')
    title = ProxyAttr('title')
    volume = ProxyAttr('volume')
    year = ProxyAttr('year')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.PublicationSource_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class ResearchInstitutionSource(WSBean):

    arrayType =  services.ns1.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.common.provenance.domain.ResearchInstitutionSource"

    id = ProxyAttr('id')
    name = ProxyAttr('name')
    institutionAddress = ProxyAttr('institutionAddress')
    institutionDepartment = ProxyAttr('institutionDepartment')
    institutionName = ProxyAttr('institutionName')
    institutionPersons = ProxyAttr('institutionPersons')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.ResearchInstitutionSource_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class SourceReference(WSBean):

    arrayType =  services.ns1.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.common.provenance.domain.SourceReference"

    id = ProxyAttr('id')
    reference = ProxyAttr('reference')
    sourceReferenceType = ProxyAttr('sourceReferenceType')
    provenanceCollection = ProxyAssoc('provenanceCollection',True)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.SourceReference_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class Source(WSBean):

    arrayType =  services.ns1.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.common.provenance.domain.Source"

    id = ProxyAttr('id')
    name = ProxyAttr('name')
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.Source_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class URLSourceReference(WSBean):

    arrayType =  services.ns1.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.common.provenance.domain.URLSourceReference"

    id = ProxyAttr('id')
    reference = ProxyAttr('reference')
    sourceReferenceType = ProxyAttr('sourceReferenceType')
    sourceURL = ProxyAttr('sourceURL')
    provenanceCollection = ProxyAssoc('provenanceCollection',True)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.URLSourceReference_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
class WebServicesSourceReference(WSBean):

    arrayType =  services.ns1.ArrayOf_xsd_anyType_Def(None).pyclass
    className = "gov.nih.nci.common.provenance.domain.WebServicesSourceReference"

    id = ProxyAttr('id')
    reference = ProxyAttr('reference')
    sourceReferenceType = ProxyAttr('sourceReferenceType')
    request = ProxyAttr('request')
    provenanceCollection = ProxyAssoc('provenanceCollection',True)
    
    def __init__(self, holder=None, service=None, **kwargs):
        if not(holder): holder = schema.WebServicesSourceReference_Def(None).pyclass()
        WSBean.__init__(self, holder, service=service, **kwargs)
    
