Monitor support
--------------------------------

Starting from release 0.8 plac_ provides builtin support for monitoring the
output of concurrent commands, at least for platforms where multiprocessing
is fully supported. You can define your own monitor
class, simply by inheriting from ``plac.Monitor`` and by
overriding the methods ``add_listener(self, no)``, 
``del_listener(self, taskno)``, ``notify_listener(self, taskno, msg)``,
``schedule(self, seconds, func, arg)`` and ``run(self)``. 
Then, you can a monitor object to any ``plac.Interpreter`` object
by simply calling the ``add_monitor`` method.
For convenience,
``plac`` comes with a very simple ``TkMonitor`` based on Tkinter
(I chose Tkinter because it is easy to use and it is
in the standard library, but you can use any GUI): you can just
look at how the ``TkMonitor`` is implemented in ``plac_tk.py``
and adapt it. Here is an example of usage of the ``TkMonitor``:

.. include:: tkmon.py
   :literal:

Try to give the ``hello`` command from the interactive interpreter:
each time a new text widget will be added displaying the output
of the command. Notice that if ``Tkinter`` is not installed correctly
on your system the ``TkMonitor`` class will not be available.
