[buildout]
extensions = 
    mr.developer
    buildout.dumppickedversions

sources = sources
auto-checkout = *
unzip = true
verbose-security = on
versions = versions

parts =
    transcodedaemon
    instance
    test
    coverage
    report
    report-xml
    zopepy

# Change the number here to change the version of Plone being used
extends = 
    http://download.zope.org/Zope2/index/2.12.16/versions.cfg
    http://dist.plone.org/release/4.0.4/versions.cfg
    versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.0.4
    http://dist.plone.org/thirdparty

# Add additional eggs here
eggs =

# Reference any eggs you are developing here, one per line
# e.g.: develop = src/my.package
develop = .
          src/collective.contentlicensing

[instance]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.zope2instance
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
blob-storage = var/blobstorage
# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = Plone my.package
eggs =
    Zope2
    Plone
    PILwoTK
    plumi.content
    ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = 

[transcodedaemon]
recipe = collective.transcode.recipe
listen_host = localhost
listen_port = 8888
videofolder = videos
secret = 1771d99931264d538e75eeb19da7d6a0

# set default_supported_mimetypes (or supported_mimetypes in the profile) to an empty
# list [] to ignore mimetype checks 
default_supported_mimetypes = ['application/ogg', 'video/flv', 'video/x-flv', 'video/mpeg', 'video/3gpp', 'video/x-ms-wmv', 'video/ogg', 'video/x-ogg', 'video/x-ogm+ogg', 'video/quicktime', 'video/x-la-asf', 'video/x-ms-asf', 'video/x-msvideo', 'video/mp4']

profiles = [ { 'id' : 'jpeg', 'cmd' : 'scripts/getThumb \"%s\" \"%s\"', 'supported_mime_types': ${transcodedaemon:default_supported_mimetypes}, 'output_mime_type': 'image/jpeg', 'output_extension': 'jpg' }, { 'id' : 'mp4', 'cmd' : 'scripts/transcodeMp4 \"%s\" \"%s\"', 'supported_mime_types': ${transcodedaemon:default_supported_mimetypes}, 'output_mime_type': 'video/mp4', 'output_extension': 'mp4' }, { 'id' : '3gp', 'cmd' : 'scripts/transcode3gp \"%s\" \"%s\"', 'supported_mime_types': ${transcodedaemon:default_supported_mimetypes}, 'output_mime_type': 'video/3gp', 'output_extension': '3gp' }, { 'id' : 'iphone', 'cmd' : 'scripts/transcodeIPhone \"%s\" \"%s\"', 'supported_mime_types': ${transcodedaemon:default_supported_mimetypes}, 'output_mime_type': 'video/mp4', 'output_extension': 'm4v' }, { 'id' : 'ogg', 'cmd' : 'scripts/transcodeTheora \"%s\" \"%s\"', 'supported_mime_types': ${transcodedaemon:default_supported_mimetypes}, 'output_mime_type': 'video/ogg', 'output_extension': 'ogv' },  { 'id' : 'mpeg2', 'cmd' : 'scripts/transcodeMpeg2 %s %s', 'supported_mime_types': ${transcodedaemon:default_supported_mimetypes}, 'output_mime_type': 'video/mpeg', 'output_extension': 'mpg' },{ 'id' : 'dvd', 'cmd' : 'scripts/makeIso %s %s', 'supported_mime_types': 'text/xml', 'output_mime_type': 'application/octet-stream', 'output_extension': 'iso' }, ]

eggs=
   collective.transcode.recipe
   collective.transcode.daemon

[sources]
collective.contentlicensing = svn https://svn.plone.org/svn/collective/collective.contentlicensing/branches/plone4_compatibility/@227350

[test]
recipe = collective.xmltestreport
eggs =
    ${instance:eggs}
    plumi.content[test]
defaults = ['--auto-color', '--auto-progress']

[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
    include = '--source=${buildout:directory}/plumi'
    sys.argv = sys.argv[:] + ['run', include, 'bin/test', '-s','plumi.content']

[report]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report
initialization =
    sys.argv = sys.argv[:] + ['html', '-i']

[report-xml]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report-xml
initialization =
    sys.argv = sys.argv[:] + ['xml', '-i']
    
[zopepy]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/zc.recipe.egg
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy


