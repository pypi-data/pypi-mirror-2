old stuff to be partly moved

Plumber
=======

Plumber is a package to create classes in a declarative way. A Plumbing
consists of a ``plumbing class`` and ``parts`` providing additional behavior
on it.

A plumbing is created by setting the metaclass ``plumber`` on plumbing class
and defining the plumbing parts::

    >>> from plumber import plumber
    >>> from plumber import Part

    >>> class Part1(Part): pass
    >>> class Part2(Part): pass

    >>> class SomePlumbing(object):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1, Part2

The ``plumber`` metaclass adds the functionalities defined by ``Part1`` and
``Part2`` to ``SomePlumbing`` class.

There are three functionalities which could be defined by parts

- provide ``defaults`` on plumbing classes.
- ``extend`` plumbing classes.
- build ``pipelines`` for ``endpoints`` of a plumbing class with ``plumb``.

The resolution of this funcionalities is done during a 2-phase parse of the
``__plumbing__`` chain.

1.) All ``default`` and ``extend`` are computed which define the ``endpoints``
of the plumbing.

2.) All ``pipelines`` are created. A single pipeline consists of a set of nested
closures which get called for defined endpoints.

2-Phase parse::

- iter[Part1, Part2, Part3] -> write endpoints
- iter[Part1, Part2, Part3] -> create pipelines



Defining pipelines
------------------

Plumber can be used to build pipelines for ``endpoints``. Pipelines can be
defined for functions only (atm).

To define pipelines, use the ``plumb`` decorator in your parts, i.e.::

    >> # pseudo code
    >> @plumb
    >> def __getitem__(_next, self, key):
    ..     ...
    ..     before next
    ..     ...
    ..     ret = _next(self, key)
    ..     ...
    ..     after next
    ..     ...
    ..     return ret

Pipelines are build after endpoints are set, and are built in order parts are
defined on ``__plumbing__`` attribute of the plumbing class.

Resolution matrix for ``plumb``::

    +---+-------+-------+-------+----------+
    |   | Part1 | Part2 | Part3 | ENDPOINT |
    +---+-------+-------+-------+----------+
    |   |    ----------------------->      |
    | E |   x   |       |       |    x     |
    | N |    <-----------------------      |
    + T +-------+-------+-------+----------+
    | R |    ------> --------------->      |
    | A |   y   |   y   |       |    y     |
    | N |    <------ <---------------      |
    + C +-------+-------+-------+----------+
    | E |       |       |    ------->      |
    |   |       |       |   z   |    z     |
    |   |       |       |    <-------      |
    +---+-------+-------+-------+----------+


Plumbing chains and usual subclassing
-------------------------------------

A class that will serve as normal base class for our plumbing::

    >>> class Base(object):
    ...     def foo(self):
    ...         print "Base.foo"

Two parts for the plumbing: the ``plumb`` decorator makes the methods part of
the plumbing, they are classmethods of the part declaring them ``prt``, via
``_next`` they call the next method and ``self`` is an instance of the
plumbing::

    >>> class Part1(Part):
    ...     @plumb
    ...     def foo(_next, self):
    ...         print "Part1.foo start"
    ...         _next(self)
    ...         print "Part1.foo stop"

    >>> class Part2(Part):
    ...     @plumb
    ...     def foo(_next, self):
    ...         print "Part2.foo start"
    ...         _next(self)
    ...         print "Part2.foo stop"

.. attention:: ``self`` is not an instance of the part class, but an
  instance of plumbing class. The system is designed so the code you write in
  plumbing methods looks as similar as possible to the code you would write
  directly on the class.


A plumbing based on ``Base`` and using the parts ``Part1`` and ``Part2``::

    >>> class PlumbingClass(Base):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1, Part2
    ...
    ...     def foo(self):
    ...         print "PlumbingClass.foo start"
    ...         super(PlumbingClass, self).foo()
    ...         print "PlumbingClass.foo stop"

Methods provided by the parts sit in front of methods declared by the class
and its base classes::

    >>> plumbing = PlumbingClass()
    >>> plumbing.foo()
    Part1.foo start
    Part2.foo start
    PlumbingClass.foo start
    Base.foo
    PlumbingClass.foo stop
    Part2.foo stop
    Part1.foo stop

The parts are not in the class' method resolution order::

    >>> PlumbingClass.__mro__
    (<class 'PlumbingClass'>,
     <class 'Base'>,
     <type 'object'>)

    >>> issubclass(PlumbingClass, Base)
    True
    >>> issubclass(PlumbingClass, Part1)
    False
    >>> issubclass(PlumbingClass, Part2)
    False

The plumbing can be subclassed like a normal class::

    >>> class SubOfPlumbingClass(PlumbingClass):
    ...     def foo(self):
    ...         print "SubOfPlumbingClass.foo start"
    ...         super(SubOfPlumbingClass, self).foo()
    ...         print "SubOfPlumbingClass.foo stop"

    >>> subofplumbing = SubOfPlumbingClass()
    >>> subofplumbing.foo()
    SubOfPlumbingClass.foo start
    Part1.foo start
    Part2.foo start
    PlumbingClass.foo start
    Base.foo
    PlumbingClass.foo stop
    Part2.foo stop
    Part1.foo stop
    SubOfPlumbingClass.foo stop

.. note:: A class inherits the ``__metaclass__`` declaration from base classes.
  The ``plumber`` metaclass is called for ``PlumbingClass`` **and**
  ``SubOfPlumbingClass``. However, it will only get active for a class that
  declares a ``__plumbing__`` itself and otherwise just calls ``type``, the
  default metaclass for new-style classes.


Subclass gets its own stacks
----------------------------

::
    >>> class Part1(Part):
    ...     a = extend(1)

    >>> class Base(object):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1

    >>> class Sub(Base):
    ...     __plumbing__ = Part1


Passing parameters to methods in a plumbing chain
-------------------------------------------------

Parameters to plumbing methods are passed in via keyword arguments - there is
no sane way to do this via positional arguments (see section Default
attributes for application to ``__init__`` plumbing)::

    >>> class Part1(Part):
    ...     @plumb
    ...     def foo(_next, self, *args, **kw):
    ...         print "Part1.foo: args=%s" % (args,)
    ...         print "Part1.foo: kw=%s" % (kw,)
    ...         self.p1 = kw.pop('p1', None)
    ...         _next(self, *args, **kw)

    >>> class Part2(Part):
    ...     @plumb
    ...     def foo(_next, self, *args, **kw):
    ...         print "Part2.foo: args=%s" % (args,)
    ...         print "Part2.foo: kw=%s" % (kw,)
    ...         self.p2 = kw.pop('p2', None)
    ...         _next(self, *args, **kw)

    >>> class PlumbingClass(object):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1, Part2
    ...     def foo(self, *args, **kw):
    ...         print "PlumbingClass.foo: args=%s" % (args,)
    ...         print "PlumbingClass.foo: kw=%s" % (kw,)

The plumbing parts pick what they need, the remainging keywords and all
positional arguments are just passed through to the plumbing class::

    >>> foo = PlumbingClass()
    >>> foo.foo('blub', p1='p1', p2='p2', plumbing='plumbing')
    Part1.foo: args=('blub',)
    Part1.foo: kw={'p2': 'p2', 'plumbing': 'plumbing', 'p1': 'p1'}
    Part2.foo: args=('blub',)
    Part2.foo: kw={'p2': 'p2', 'plumbing': 'plumbing'}
    PlumbingClass.foo: args=('blub',)
    PlumbingClass.foo: kw={'plumbing': 'plumbing'}


End-points for plumbing chains
------------------------------

Plumbing chains need a normal method to serve as end-point::

    >>> class Part1(Part):
    ...     @plumb
    ...     def foo(_next, self):
    ...         pass

    >>> class PlumbingClass(object):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1
    Traceback (most recent call last):
      ...
    AttributeError: type object 'PlumbingClass' has no attribute 'foo'

It is looked up on the class with ``getattr``, after the plumbing pipeline is
processed, but before it is installed on the class.

It can be provided by the plumbing class itself::

    >>> class Part1(Part):
    ...     @plumb
    ...     def foo(_next, self):
    ...         print "Part1.foo start"
    ...         _next(self)
    ...         print "Part1.foo stop"

    >>> class PlumbingClass(object):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1
    ...
    ...     def foo(self):
    ...         print "PlumbingClass.foo"

    >>> plumbing = PlumbingClass().foo()
    Part1.foo start
    PlumbingClass.foo
    Part1.foo stop

It can be provided by a base class of the plumbing class::

    >>> class Base(object):
    ...     def foo(self):
    ...         print "Base.foo"

    >>> class Part1(Part):
    ...     @plumb
    ...     def foo(_next, self):
    ...         print "Part1.foo start"
    ...         _next(self)
    ...         print "Part1.foo stop"

    >>> class PlumbingClass(Base):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1

    >>> plumbing = PlumbingClass().foo()
    Part1.foo start
    Base.foo
    Part1.foo stop

Further it can be provided by a plumbing part with the ``default`` or
``extend`` decorators (see Extending classes, an alternative to mixins), it
will be put on the plumbing class, before the end point it looked up and
therefore behaves exactly like the method would be declared on the class
itself.


Plumbing for property getter, setter and deleter
------------------------------------------------

Properties with named functions, non-decorated
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
::
    >>> class Base(object):
    ...     def get_a(self):
    ...         return self._a
    ...     def set_a(self, val):
    ...         self._a = val
    ...     def del_a(self):
    ...         del self._a
    ...     a = property(get_a, set_a, del_a)

    >>> class ClassInheritingProperty(Base):
    ...     pass

    >>> cip = ClassInheritingProperty()
    >>> hasattr(cip, '_a')
    False
    >>> cip.a = 1
    >>> cip._a
    1
    >>> cip.a
    1
    >>> del cip.a
    >>> hasattr(cip, '_a')
    False

A property is realised by a property descriptor object in the ``__dict__`` of
the class defining it::

    >>> Base.__dict__['a']
    <property object at 0x...>

    >>> Base.__dict__['a'].fset(cip, 2)
    >>> Base.__dict__['a'].fget(cip)
    2
    >>> Base.__dict__['a'].fdel(cip)

From now on we skip the deleter.

If you want to change an aspect of a property, you need to redefine it, except
if it uses lambda abstraction (see below). As the function used as getter is
also in the Base class' ``__dict__`` we can use it, saving some overhead::

    >>> class ClassOverridingProperty(Base):
    ...     def get_a(self):
    ...         return 2 * super(ClassOverridingProperty, self).get_a()
    ...     a = property(get_a, Base.set_a)

    >>> cop = ClassOverridingProperty()
    >>> cop.a = 5
    >>> cop.a
    10

Properties with decorated or unnamed getter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
In case the property is realised by a decorated function or a single lambda -
both cases result in a read-only property - the function used as getter is not
anymore in the class' ``__dict__``::

    >>> class PropWithoutDictFuncBase(object):
    ...     @property
    ...     def a(self):
    ...         return self._a
    ...     b = property(lambda self: self._b)

    >>> class PropWithoutDictFunc(PropWithoutDictFuncBase):
    ...     @property
    ...     def a(self):
    ...         return 2 * super(PropWithoutDictFunc, self).a
    ...     b = property(lambda self: 3 * super(PropWithoutDictFunc, self).b)

    >>> pwdf = PropWithoutDictFunc()
    >>> pwdf._a = 2
    >>> pwdf._b = 2
    >>> pwdf.a
    4
    >>> pwdf.b
    6

Lambda abstraction
^^^^^^^^^^^^^^^^^^
If a base class uses lambdas to add a layer of abstraction it is easier to
override a single aspect, but adds another call (see Benchmarking below)::

    >>> class LambdaBase(object):
    ...     def get_a(self):
    ...         return self._a
    ...     def set_a(self, val):
    ...         self._a = val
    ...     a = property(
    ...             lambda self: self.get_a(),
    ...             lambda self, val: self.set_a(val),
    ...             )

    >>> class ClassInheritingLambdaProperty(LambdaBase):
    ...     def get_a(self):
    ...         return 3 * super(ClassInheritingLambdaProperty, self).get_a()

    >>> cilp = ClassInheritingLambdaProperty()
    >>> cilp.a = 2
    >>> cilp.a
    6

Plumbing of a property that uses lambda abstraction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Aspects of a property that uses lambda abstraction are easily plumbed::

    >>> class LambdaBase(object):
    ...     def get_a(self):
    ...         return self._a
    ...     def set_a(self, val):
    ...         self._a = val
    ...     a = property(
    ...             lambda self: self.get_a(),
    ...             lambda self, val: self.set_a(val),
    ...             )

    >>> class PropertyPlumbing(Part):
    ...     @plumb
    ...     def get_a(_next, self):
    ...         return 4 * _next(self)

    >>> class PlumbedLambdaProperty(LambdaBase):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = PropertyPlumbing

    >>> plp = PlumbedLambdaProperty()
    >>> plp.a = 4
    >>> plp.a
    16

Plumbing properties that do not use lambda abstraction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A base class with a full property::

    >>> def set_a(self, val):
    ...     self._a = val

    >>> def del_a(self):
    ...     del self._a

    >>> class Base(object):
    ...     a = property(
    ...          lambda self: self._a,
    ...          set_a,
    ...          del_a,
    ...          "doc_a",
    ...          )

A part that plumbs into all aspects of the property (getter, setter, deleter,
doc)::

    >>> class Notify(Part):
    ...     def get_a(_next, self):
    ...         print "Getting a"
    ...         return _next(self)
    ...     def set_a(_next, self, val):
    ...         print "Setting a"
    ...         _next(self, val)
    ...     def del_a(_next, self):
    ...         print "Deleting a"
    ...         _next(self)
    ...     a = plumb(property(
    ...         get_a,
    ...         set_a,
    ...         del_a,
    ...         "notify",
    ...         ))

    >>> class Plumbing(Base):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Notify

The docstring is plumbed::

    >>> print Plumbing.a.__doc__
    notify
    doc_a

    >>> plumbing = Plumbing()

So are getter, setter and deleter::

    >>> hasattr(plumbing, '_a')
    False
    >>> plumbing.a = 8
    Setting a
    >>> plumbing.a
    Getting a
    8
    >>> hasattr(plumbing, '_a')
    True
    >>> del plumbing.a
    Deleting a
    >>> hasattr(plumbing, '_a')
    False




A base class has a readonly property, a plumbing property plumbs in::

    >>> class Base(object):
    ...     _foo = 5
    ...     @property
    ...     def foo(self):
    ...         return self._foo

    >>> class Part1(Part):
    ...     @plumb
    ...     @property
    ...     def foo(_next, self):
    ...         return 3 * _next(self)

    >>> class Plumbing(Base):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1

    >>> plumbing = Plumbing()
    >>> plumbing.foo
    15
    >>> plumbing.foo = 10
    Traceback (most recent call last):
     ...
    AttributeError: can't set attribute


Extending a class
-----------------
A part can put arbitrary attributes onto a class as if they were declared on it::

    >>> class Part1(Part):
    ...     foo = extend(False)

    >>> class PlumbingClass(object):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1

The attribute is defined on the class, setting it on an instance will store the
value in the instance's ``__dict__``::

    >>> PlumbingClass.foo
    False
    >>> plumbing = PlumbingClass()
    >>> plumbing.foo
    False
    >>> plumbing.foo = True
    >>> plumbing.foo
    True
    >>> PlumbingClass.foo
    False

If the attribute collides with one already declared on the class, an exception
is raised::

    >>> class Part1(Part):
    ...     foo = extend(False)

#XXX#     >>> class PlumbingClass(object):
#XXX#     ...     __metaclass__ = plumber
#XXX#     ...     __plumbing__ = Part1
#XXX#     ...     foo = False
#XXX#     Traceback (most recent call last):
#XXX#       ...
#XXX#     PlumbingCollision:
#XXX#         Plumbing class
#XXX#       with:
#XXX#         <extend 'foo' of <class 'Part1'> payload=False>

XXX: increase verbosity of exception

Also, if two parts try to extend an attribute with the same name, an
exception is raised. The situation before processing the second part is
exactly as if the method was declared on the class itself::

not a collision, both extend want the same::

    >>> class Part1(Part):
    ...     foo = extend(False)

    >>> class Part2(Part):
    ...     foo = extend(False)

    >>> class PlumbingClass(object):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1, Part2

a collision::

#XXX#     >>> class Part1(Part):
#XXX#     ...     foo = extend(False)
#XXX#
#XXX#     >>> class Part2(Part):
#XXX#     ...     foo = extend(True)
#XXX#
#XXX#     >>> class PlumbingClass(object):
#XXX#     ...     __metaclass__ = plumber
#XXX#     ...     __plumbing__ = Part1, Part2
#XXX#     Traceback (most recent call last):
#XXX#       ...
#XXX#     PlumbingCollision:
#XXX#         <extend 'foo' of <class 'Part1'> payload=False>
#XXX#       with:
#XXX#         <extend 'foo' of <class 'Part2'> payload=True>

Extending a method needed by a part earlier in the chain works::

    >>> class Part1(Part):
    ...     @plumb
    ...     def foo(_next, self):
    ...         print "Part1.foo start"
    ...         _next(self)
    ...         print "Part1.foo stop"

    >>> class Part2(Part):
    ...     @extend
    ...     def foo(self):
    ...         print "Part2.foo"

    >>> class PlumbingClass(object):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1, Part2

    >>> PlumbingClass().foo()
    Part1.foo start
    Part2.foo
    Part1.foo stop

Extended methods close pipelines, adding a plumbing method afterwards raises an
exception::

    >>> class Part1(Part):
    ...     @extend
    ...     def foo(self):
    ...         pass

    >>> class Part2(Part):
    ...     @plumb
    ...     def foo(_next, self):
    ...         pass

    >>> class Part3(Part):
    ...     @extend
    ...     def foo(_next, self):
    ...         pass

#XXX#     >>> class PlumbingClass(object):
#XXX#     ...     __metaclass__ = plumber
#XXX#     ...     __plumbing__ = Part1, Part2, Part3
#XXX#     Traceback (most recent call last):
#XXX#       ...
#XXX#     PlumbingCollision:
#XXX#         <extend 'foo' of <class 'Part1'> payload=<function foo at 0x...>>
#XXX#       with:
#XXX#         <extend 'foo' of <class 'Part3'> payload=<function foo at 0x...>>

It is possible to make super calls from within the method added by the part::

    >>> class Base(object):
    ...     def foo(self):
    ...         print "Base.foo"

    >>> class Part1(Part):
    ...     @extend
    ...     def foo(self):
    ...         print "Part1.foo start"
    ...         super(self.__class__, self).foo()
    ...         print "Part1.foo stop"

    >>> class PlumbingClass(Base):
    ...     __metaclass__ = plumber
    ...     __plumbing__ = Part1

    >>> plumbing = PlumbingClass()
    >>> plumbing.foo()
    Part1.foo start
    Base.foo
    Part1.foo stop

Extension is used if a part relies on a specific attribute value, most common
the case with functions. If a part provides a setting it uses a default
value (see next section).


Interaction: ``finalize`` wins over any combination of ``default`` and ``extend``

        d = ``default`` declaration
        e = ``extend`` declaration
        f = ``finalize`` declaration
        ? = base class declaration is irrelevant
        **Y** = chosen end point

        +-------+-------+-------+----------+------+
        | Part1 | Part2 | Part3 | Plumbing | Base |
        +=======+=======+=======+==========+======+
        |   e   |   d   | **f** |          |   ?  |
        +-------+-------+-------+----------+------+
        |   d   |   e   | **f** |          |   ?  |
        +-------+-------+-------+----------+------+
        |   e   | **f** |   d   |          |   ?  |
        +-------+-------+-------+----------+------+
        |   d   | **f** |   e   |          |   ?  |
        +-------+-------+-------+----------+------+
        | **f** |   d   |   e   |          |   ?  |
        +-------+-------+-------+----------+------+
        | **f** |   e   |   e   |          |   ?  |
        +-------+-------+-------+----------+------+


Plumbings in conjunction to extensions (or defaults)

+---------------+-------------------------------------------------+
|               |  EXTEND ENDPOINT RESOLUTION                     |
+---------------+---------+---------+---------+---------+---------+
| Endpoints     |  x(p)   |  y(p1)  |  z(p2)  |  w(p3)  |  v(p4)  |
+---------------+---------+---------+---------+---------+---------+
| Plumbing      |  x(p)   |         |         |         |         |
+---------------+---------+---------+---------+---------+---------+
| Part1         |         |  y(p1)  |         |         |         |
+---------------+---------+---------+---------+---------+---------+
| Part2         |         |         |  z(p2)  |         |         |
+---------------+---------+---------+---------+---------+---------+
| Part3         |         |         |         |  w(p3)  |         |
+---------------+---------+---------+---------+---------+---------+
| Base          |  x(b)   |  y(b)   |  z(b)   |  w(b)   |  v(b)   |
+---------------+---------+---------+---------+---------+---------+

+---------------+-------------------------------------------------+
|               |  PLUMBING RESOLUTION                            |
+---------------+---------+---------+---------+---------+---------+
| Endpoints     |  x(p)   |  y(p1)  |  z(p2)  |  w(p3)  |  v(b)   |
+---------------+---------+---------+---------+---------+---------+
| Part1         |  x      |         |  z      |         |         |
+---------------+---------+---------+---------+---------+---------+
| Part2         |         |  y      |         |         |         |
+---------------+---------+---------+---------+---------+---------+
| Part3         |         |         |  z      |         |         |
+---------------+---------+---------+---------+---------+---------+

Wichtig zu kommunizieren: Resolution Order:

(1) Endpoints -> (2) Plumbings

Die Pipeline wird in 2 Schritten aufgelöst, die nacheinander anzusehen sind. 

Erst wird durch die pipeline hindurch der endpoint gesucht, dies
betrifft
a) classmethods auf Base und Plumbing
b) extends
c) defaults

Mit diesem gefundenen Endpoint wird das Plumbing aufgebaut.



###

Thus, plumbing which works orthogonal
to subclassing: It uses a chain of closures.

The plumber provides declaritive extension of classes. A class declares parts
in a pip


Plumbing only works within one class, as if declared on the class. default and
extend don't take base class attr into account, they are checked if

A metaclass creates classes, it works on them right after they are declared.

A class that would like the plumber to extend it, declares a pipeline of parts.
The parts are in an ordered list, they contain code with instructions on how to
extend the class. A class using a plumber is called a plumbing.

By that a

plumber, a metaclass, extends a class with parts declared in its pipeline.


by parts, declared


plumber is a metaclass that implements plumbing which is an alternative to
subclassing works orthogonal
to subclassing: It uses a chain of closures



A class declares ``plumber`` as ``__metaclass__`` and a
``__plumbing__`` of parts that will be used for the plumbing. A plumbing
limited to the class declaring

Parts carry instructions and instructions carry code and tell what to do with
it.


form the plumbing system. Parts can extend
classes as if the
code was declared on the class itself (``extend`` decorator), provide default
values for class variables (``default`` decorator) and form chains of methods
(``plumb`` decorator) that pre-process parameters before passing them to the
next method and post-process results before passing them to the previous method
(similar to WSGI pipelines).

Why not just use sub-classing? see Motivation::

    >>> from plumber import plumber
    >>> from plumber import Part
    >>> from plumber import default
    >>> from plumber import extend
    >>> from plumber import plumb

The plumber is aware of ``zope.interface`` but does not require it (see
``zope.interface support``)



Discussions
-----------

